//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var famous;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/functionPrototypeBind.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
if (!Function.prototype.bind) {                                                                                        // 1
    Function.prototype.bind = function (oThis) {                                                                       // 2
        if (typeof this !== "function") {                                                                              // 3
            // closest thing possible to the ECMAScript 5 internal IsCallable function                                 // 4
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");               // 5
        }                                                                                                              // 6
                                                                                                                       // 7
        var aArgs = Array.prototype.slice.call(arguments, 1),                                                          // 8
        fToBind = this,                                                                                                // 9
        fNOP = function () {},                                                                                         // 10
        fBound = function () {                                                                                         // 11
            return fToBind.apply(this instanceof fNOP && oThis                                                         // 12
                ? this                                                                                                 // 13
                : oThis,                                                                                               // 14
                aArgs.concat(Array.prototype.slice.call(arguments)));                                                  // 15
        };                                                                                                             // 16
                                                                                                                       // 17
        fNOP.prototype = this.prototype;                                                                               // 18
        fBound.prototype = new fNOP();                                                                                 // 19
                                                                                                                       // 20
        return fBound;                                                                                                 // 21
    };                                                                                                                 // 22
}                                                                                                                      // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/classList.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/*                                                                                                                     // 2
 * classList.js: Cross-browser full element.classList implementation.                                                  // 3
 * 2011-06-15                                                                                                          // 4
 *                                                                                                                     // 5
 * By Eli Grey, http://eligrey.com                                                                                     // 6
 * Public Domain.                                                                                                      // 7
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/*global self, document, DOMException */                                                                               // 11
                                                                                                                       // 12
/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/                                     // 13
                                                                                                                       // 14
if (typeof document !== "undefined" && !("classList" in document.createElement("a"))) {                                // 15
                                                                                                                       // 16
(function (view) {                                                                                                     // 17
                                                                                                                       // 18
"use strict";                                                                                                          // 19
                                                                                                                       // 20
var                                                                                                                    // 21
	  classListProp = "classList"                                                                                         // 22
	, protoProp = "prototype"                                                                                             // 23
	, elemCtrProto = (view.HTMLElement || view.Element)[protoProp]                                                        // 24
	, objCtr = Object                                                                                                     // 25
	, strTrim = String[protoProp].trim || function () {                                                                   // 26
		return this.replace(/^\s+|\s+$/g, "");                                                                               // 27
	}                                                                                                                     // 28
	, arrIndexOf = Array[protoProp].indexOf || function (item) {                                                          // 29
		var                                                                                                                  // 30
			  i = 0                                                                                                             // 31
			, len = this.length                                                                                                 // 32
		;                                                                                                                    // 33
		for (; i < len; i++) {                                                                                               // 34
			if (i in this && this[i] === item) {                                                                                // 35
				return i;                                                                                                          // 36
			}                                                                                                                   // 37
		}                                                                                                                    // 38
		return -1;                                                                                                           // 39
	}                                                                                                                     // 40
	// Vendors: please allow content code to instantiate DOMExceptions                                                    // 41
	, DOMEx = function (type, message) {                                                                                  // 42
		this.name = type;                                                                                                    // 43
		this.code = DOMException[type];                                                                                      // 44
		this.message = message;                                                                                              // 45
	}                                                                                                                     // 46
	, checkTokenAndGetIndex = function (classList, token) {                                                               // 47
		if (token === "") {                                                                                                  // 48
			throw new DOMEx(                                                                                                    // 49
				  "SYNTAX_ERR"                                                                                                     // 50
				, "An invalid or illegal string was specified"                                                                     // 51
			);                                                                                                                  // 52
		}                                                                                                                    // 53
		if (/\s/.test(token)) {                                                                                              // 54
			throw new DOMEx(                                                                                                    // 55
				  "INVALID_CHARACTER_ERR"                                                                                          // 56
				, "String contains an invalid character"                                                                           // 57
			);                                                                                                                  // 58
		}                                                                                                                    // 59
		return arrIndexOf.call(classList, token);                                                                            // 60
	}                                                                                                                     // 61
	, ClassList = function (elem) {                                                                                       // 62
		var                                                                                                                  // 63
			  trimmedClasses = strTrim.call(elem.className)                                                                     // 64
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []                                                       // 65
			, i = 0                                                                                                             // 66
			, len = classes.length                                                                                              // 67
		;                                                                                                                    // 68
		for (; i < len; i++) {                                                                                               // 69
			this.push(classes[i]);                                                                                              // 70
		}                                                                                                                    // 71
		this._updateClassName = function () {                                                                                // 72
			elem.className = this.toString();                                                                                   // 73
		};                                                                                                                   // 74
	}                                                                                                                     // 75
	, classListProto = ClassList[protoProp] = []                                                                          // 76
	, classListGetter = function () {                                                                                     // 77
		return new ClassList(this);                                                                                          // 78
	}                                                                                                                     // 79
;                                                                                                                      // 80
// Most DOMException implementations don't allow calling DOMException's toString()                                     // 81
// on non-DOMExceptions. Error's toString() is sufficient here.                                                        // 82
DOMEx[protoProp] = Error[protoProp];                                                                                   // 83
classListProto.item = function (i) {                                                                                   // 84
	return this[i] || null;                                                                                               // 85
};                                                                                                                     // 86
classListProto.contains = function (token) {                                                                           // 87
	token += "";                                                                                                          // 88
	return checkTokenAndGetIndex(this, token) !== -1;                                                                     // 89
};                                                                                                                     // 90
classListProto.add = function (token) {                                                                                // 91
	token += "";                                                                                                          // 92
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 93
		this.push(token);                                                                                                    // 94
		this._updateClassName();                                                                                             // 95
	}                                                                                                                     // 96
};                                                                                                                     // 97
classListProto.remove = function (token) {                                                                             // 98
	token += "";                                                                                                          // 99
	var index = checkTokenAndGetIndex(this, token);                                                                       // 100
	if (index !== -1) {                                                                                                   // 101
		this.splice(index, 1);                                                                                               // 102
		this._updateClassName();                                                                                             // 103
	}                                                                                                                     // 104
};                                                                                                                     // 105
classListProto.toggle = function (token) {                                                                             // 106
	token += "";                                                                                                          // 107
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 108
		this.add(token);                                                                                                     // 109
	} else {                                                                                                              // 110
		this.remove(token);                                                                                                  // 111
	}                                                                                                                     // 112
};                                                                                                                     // 113
classListProto.toString = function () {                                                                                // 114
	return this.join(" ");                                                                                                // 115
};                                                                                                                     // 116
                                                                                                                       // 117
if (objCtr.defineProperty) {                                                                                           // 118
	var classListPropDesc = {                                                                                             // 119
		  get: classListGetter                                                                                               // 120
		, enumerable: true                                                                                                   // 121
		, configurable: true                                                                                                 // 122
	};                                                                                                                    // 123
	try {                                                                                                                 // 124
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                               // 125
	} catch (ex) { // IE 8 doesn't support enumerable:true                                                                // 126
		if (ex.number === -0x7FF5EC54) {                                                                                     // 127
			classListPropDesc.enumerable = false;                                                                               // 128
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                              // 129
		}                                                                                                                    // 130
	}                                                                                                                     // 131
} else if (objCtr[protoProp].__defineGetter__) {                                                                       // 132
	elemCtrProto.__defineGetter__(classListProp, classListGetter);                                                        // 133
}                                                                                                                      // 134
                                                                                                                       // 135
}(self));                                                                                                              // 136
                                                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/requestAnimationFrame.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// adds requestAnimationFrame functionality                                                                            // 1
// Source: http://strd6.com/2011/05/better-window-requestanimationframe-shim/                                          // 2
                                                                                                                       // 3
window.requestAnimationFrame || (window.requestAnimationFrame =                                                        // 4
  window.webkitRequestAnimationFrame ||                                                                                // 5
  window.mozRequestAnimationFrame    ||                                                                                // 6
  window.oRequestAnimationFrame      ||                                                                                // 7
  window.msRequestAnimationFrame     ||                                                                                // 8
  function(callback, element) {                                                                                        // 9
    return window.setTimeout(function() {                                                                              // 10
      callback(+new Date());                                                                                           // 11
  }, 1000 / 60);                                                                                                       // 12
});                                                                                                                    // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/famous-global.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.famous=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4
 *                                                                                                                     // 5
 * Owner: mark@famo.us                                                                                                 // 6
 * @license MPL 2.0                                                                                                    // 7
 * @copyright Famous Industries, Inc. 2014                                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
var RenderNode = _dereq_('./RenderNode');                                                                              // 11
var EventHandler = _dereq_('./EventHandler');                                                                          // 12
var ElementAllocator = _dereq_('./ElementAllocator');                                                                  // 13
var Transform = _dereq_('./Transform');                                                                                // 14
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15
                                                                                                                       // 16
var _zeroZero = [0, 0];                                                                                                // 17
var usePrefix = !('perspective' in document.documentElement.style);                                                    // 18
                                                                                                                       // 19
function _getElementSize(element) {                                                                                    // 20
    return [element.clientWidth, element.clientHeight];                                                                // 21
}                                                                                                                      // 22
                                                                                                                       // 23
var _setPerspective = usePrefix ? function(element, perspective) {                                                     // 24
    element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';                                 // 25
} : function(element, perspective) {                                                                                   // 26
    element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/**                                                                                                                    // 30
 * The top-level container for a Famous-renderable piece of the document.                                              // 31
 *   It is directly updated by the process-wide Engine object, and manages one                                         // 32
 *   render tree root, which can contain other renderables.                                                            // 33
 *                                                                                                                     // 34
 * @class Context                                                                                                      // 35
 * @constructor                                                                                                        // 36
 * @private                                                                                                            // 37
 * @param {Node} container Element in which content will be inserted                                                   // 38
 */                                                                                                                    // 39
function Context(container) {                                                                                          // 40
    this.container = container;                                                                                        // 41
    this._allocator = new ElementAllocator(container);                                                                 // 42
                                                                                                                       // 43
    this._node = new RenderNode();                                                                                     // 44
    this._eventOutput = new EventHandler();                                                                            // 45
    this._size = _getElementSize(this.container);                                                                      // 46
                                                                                                                       // 47
    this._perspectiveState = new Transitionable(0);                                                                    // 48
    this._perspective = undefined;                                                                                     // 49
                                                                                                                       // 50
    this._nodeContext = {                                                                                              // 51
        allocator: this._allocator,                                                                                    // 52
        transform: Transform.identity,                                                                                 // 53
        opacity: 1,                                                                                                    // 54
        origin: _zeroZero,                                                                                             // 55
        align: _zeroZero,                                                                                              // 56
        size: this._size                                                                                               // 57
    };                                                                                                                 // 58
                                                                                                                       // 59
    this._eventOutput.on('resize', function() {                                                                        // 60
        this.setSize(_getElementSize(this.container));                                                                 // 61
    }.bind(this));                                                                                                     // 62
                                                                                                                       // 63
}                                                                                                                      // 64
                                                                                                                       // 65
// Note: Unused                                                                                                        // 66
Context.prototype.getAllocator = function getAllocator() {                                                             // 67
    return this._allocator;                                                                                            // 68
};                                                                                                                     // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * Add renderables to this Context's render tree.                                                                      // 72
 *                                                                                                                     // 73
 * @method add                                                                                                         // 74
 *                                                                                                                     // 75
 * @param {Object} obj renderable object                                                                               // 76
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 77
 */                                                                                                                    // 78
Context.prototype.add = function add(obj) {                                                                            // 79
    return this._node.add(obj);                                                                                        // 80
};                                                                                                                     // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * Move this Context to another containing document element.                                                           // 84
 *                                                                                                                     // 85
 * @method migrate                                                                                                     // 86
 *                                                                                                                     // 87
 * @param {Node} container Element to which content will be migrated                                                   // 88
 */                                                                                                                    // 89
Context.prototype.migrate = function migrate(container) {                                                              // 90
    if (container === this.container) return;                                                                          // 91
    this.container = container;                                                                                        // 92
    this._allocator.migrate(container);                                                                                // 93
};                                                                                                                     // 94
                                                                                                                       // 95
/**                                                                                                                    // 96
 * Gets viewport size for Context.                                                                                     // 97
 *                                                                                                                     // 98
 * @method getSize                                                                                                     // 99
 *                                                                                                                     // 100
 * @return {Array.Number} viewport size as [width, height]                                                             // 101
 */                                                                                                                    // 102
Context.prototype.getSize = function getSize() {                                                                       // 103
    return this._size;                                                                                                 // 104
};                                                                                                                     // 105
                                                                                                                       // 106
/**                                                                                                                    // 107
 * Sets viewport size for Context.                                                                                     // 108
 *                                                                                                                     // 109
 * @method setSize                                                                                                     // 110
 *                                                                                                                     // 111
 * @param {Array.Number} size [width, height].  If unspecified, use size of root document element.                     // 112
 */                                                                                                                    // 113
Context.prototype.setSize = function setSize(size) {                                                                   // 114
    if (!size) size = _getElementSize(this.container);                                                                 // 115
    this._size[0] = size[0];                                                                                           // 116
    this._size[1] = size[1];                                                                                           // 117
};                                                                                                                     // 118
                                                                                                                       // 119
/**                                                                                                                    // 120
 * Commit this Context's content changes to the document.                                                              // 121
 *                                                                                                                     // 122
 * @private                                                                                                            // 123
 * @method update                                                                                                      // 124
 * @param {Object} contextParameters engine commit specification                                                       // 125
 */                                                                                                                    // 126
Context.prototype.update = function update(contextParameters) {                                                        // 127
    if (contextParameters) {                                                                                           // 128
        if (contextParameters.transform) this._nodeContext.transform = contextParameters.transform;                    // 129
        if (contextParameters.opacity) this._nodeContext.opacity = contextParameters.opacity;                          // 130
        if (contextParameters.origin) this._nodeContext.origin = contextParameters.origin;                             // 131
        if (contextParameters.align) this._nodeContext.align = contextParameters.align;                                // 132
        if (contextParameters.size) this._nodeContext.size = contextParameters.size;                                   // 133
    }                                                                                                                  // 134
    var perspective = this._perspectiveState.get();                                                                    // 135
    if (perspective !== this._perspective) {                                                                           // 136
        _setPerspective(this.container, perspective);                                                                  // 137
        this._perspective = perspective;                                                                               // 138
    }                                                                                                                  // 139
                                                                                                                       // 140
    this._node.commit(this._nodeContext);                                                                              // 141
};                                                                                                                     // 142
                                                                                                                       // 143
/**                                                                                                                    // 144
 * Get current perspective of this context in pixels.                                                                  // 145
 *                                                                                                                     // 146
 * @method getPerspective                                                                                              // 147
 * @return {Number} depth perspective in pixels                                                                        // 148
 */                                                                                                                    // 149
Context.prototype.getPerspective = function getPerspective() {                                                         // 150
    return this._perspectiveState.get();                                                                               // 151
};                                                                                                                     // 152
                                                                                                                       // 153
/**                                                                                                                    // 154
 * Set current perspective of this context in pixels.                                                                  // 155
 *                                                                                                                     // 156
 * @method setPerspective                                                                                              // 157
 * @param {Number} perspective in pixels                                                                               // 158
 * @param {Object} [transition] Transitionable object for applying the change                                          // 159
 * @param {function(Object)} callback function called on completion of transition                                      // 160
 */                                                                                                                    // 161
Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {                        // 162
    return this._perspectiveState.set(perspective, transition, callback);                                              // 163
};                                                                                                                     // 164
                                                                                                                       // 165
/**                                                                                                                    // 166
 * Trigger an event, sending to all downstream handlers                                                                // 167
 *   listening for provided 'type' key.                                                                                // 168
 *                                                                                                                     // 169
 * @method emit                                                                                                        // 170
 *                                                                                                                     // 171
 * @param {string} type event type key (for example, 'click')                                                          // 172
 * @param {Object} event event data                                                                                    // 173
 * @return {EventHandler} this                                                                                         // 174
 */                                                                                                                    // 175
Context.prototype.emit = function emit(type, event) {                                                                  // 176
    return this._eventOutput.emit(type, event);                                                                        // 177
};                                                                                                                     // 178
                                                                                                                       // 179
/**                                                                                                                    // 180
 * Bind a callback function to an event type handled by this object.                                                   // 181
 *                                                                                                                     // 182
 * @method "on"                                                                                                        // 183
 *                                                                                                                     // 184
 * @param {string} type event type key (for example, 'click')                                                          // 185
 * @param {function(string, Object)} handler callback                                                                  // 186
 * @return {EventHandler} this                                                                                         // 187
 */                                                                                                                    // 188
Context.prototype.on = function on(type, handler) {                                                                    // 189
    return this._eventOutput.on(type, handler);                                                                        // 190
};                                                                                                                     // 191
                                                                                                                       // 192
/**                                                                                                                    // 193
 * Unbind an event by type and handler.                                                                                // 194
 *   This undoes the work of "on".                                                                                     // 195
 *                                                                                                                     // 196
 * @method removeListener                                                                                              // 197
 *                                                                                                                     // 198
 * @param {string} type event type key (for example, 'click')                                                          // 199
 * @param {function} handler function object to remove                                                                 // 200
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 201
 */                                                                                                                    // 202
Context.prototype.removeListener = function removeListener(type, handler) {                                            // 203
    return this._eventOutput.removeListener(type, handler);                                                            // 204
};                                                                                                                     // 205
                                                                                                                       // 206
/**                                                                                                                    // 207
 * Add event handler object to set of downstream handlers.                                                             // 208
 *                                                                                                                     // 209
 * @method pipe                                                                                                        // 210
 *                                                                                                                     // 211
 * @param {EventHandler} target event handler target object                                                            // 212
 * @return {EventHandler} passed event handler                                                                         // 213
 */                                                                                                                    // 214
Context.prototype.pipe = function pipe(target) {                                                                       // 215
    return this._eventOutput.pipe(target);                                                                             // 216
};                                                                                                                     // 217
                                                                                                                       // 218
/**                                                                                                                    // 219
 * Remove handler object from set of downstream handlers.                                                              // 220
 *   Undoes work of "pipe".                                                                                            // 221
 *                                                                                                                     // 222
 * @method unpipe                                                                                                      // 223
 *                                                                                                                     // 224
 * @param {EventHandler} target target handler object                                                                  // 225
 * @return {EventHandler} provided target                                                                              // 226
 */                                                                                                                    // 227
Context.prototype.unpipe = function unpipe(target) {                                                                   // 228
    return this._eventOutput.unpipe(target);                                                                           // 229
};                                                                                                                     // 230
                                                                                                                       // 231
module.exports = Context;                                                                                              // 232
},{"../transitions/Transitionable":88,"./ElementAllocator":2,"./EventHandler":7,"./RenderNode":11,"./Transform":15}],2:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 234
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 235
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 236
 *                                                                                                                     // 237
 * Owner: mark@famo.us                                                                                                 // 238
 * @license MPL 2.0                                                                                                    // 239
 * @copyright Famous Industries, Inc. 2014                                                                             // 240
 */                                                                                                                    // 241
                                                                                                                       // 242
                                                                                                                       // 243
                                                                                                                       // 244
                                                                                                                       // 245
/**                                                                                                                    // 246
 * Internal helper object to Context that handles the process of                                                       // 247
 *   creating and allocating DOM elements within a managed div.                                                        // 248
 *   Private.                                                                                                          // 249
 *                                                                                                                     // 250
 * @class ElementAllocator                                                                                             // 251
 * @constructor                                                                                                        // 252
 * @private                                                                                                            // 253
 * @param {Node} container document element in which Famo.us content will be inserted                                  // 254
 */                                                                                                                    // 255
function ElementAllocator(container) {                                                                                 // 256
    if (!container) container = document.createDocumentFragment();                                                     // 257
    this.container = container;                                                                                        // 258
    this.detachedNodes = {};                                                                                           // 259
    this.nodeCount = 0;                                                                                                // 260
}                                                                                                                      // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * Move the document elements from their original container to a new one.                                              // 264
 *                                                                                                                     // 265
 * @private                                                                                                            // 266
 * @method migrate                                                                                                     // 267
 *                                                                                                                     // 268
 * @param {Node} container document element to which Famo.us content will be migrated                                  // 269
 */                                                                                                                    // 270
ElementAllocator.prototype.migrate = function migrate(container) {                                                     // 271
    var oldContainer = this.container;                                                                                 // 272
    if (container === oldContainer) return;                                                                            // 273
                                                                                                                       // 274
    if (oldContainer instanceof DocumentFragment) {                                                                    // 275
        container.appendChild(oldContainer);                                                                           // 276
    }                                                                                                                  // 277
    else {                                                                                                             // 278
        while (oldContainer.hasChildNodes()) {                                                                         // 279
            container.appendChild(oldContainer.firstChild);                                                            // 280
        }                                                                                                              // 281
    }                                                                                                                  // 282
                                                                                                                       // 283
    this.container = container;                                                                                        // 284
};                                                                                                                     // 285
                                                                                                                       // 286
/**                                                                                                                    // 287
 * Allocate an element of specified type from the pool.                                                                // 288
 *                                                                                                                     // 289
 * @private                                                                                                            // 290
 * @method allocate                                                                                                    // 291
 *                                                                                                                     // 292
 * @param {string} type type of element, e.g. 'div'                                                                    // 293
 * @return {Node} allocated document element                                                                           // 294
 */                                                                                                                    // 295
ElementAllocator.prototype.allocate = function allocate(type) {                                                        // 296
    type = type.toLowerCase();                                                                                         // 297
    if (!(type in this.detachedNodes)) this.detachedNodes[type] = [];                                                  // 298
    var nodeStore = this.detachedNodes[type];                                                                          // 299
    var result;                                                                                                        // 300
    if (nodeStore.length > 0) {                                                                                        // 301
        result = nodeStore.pop();                                                                                      // 302
    }                                                                                                                  // 303
    else {                                                                                                             // 304
        result = document.createElement(type);                                                                         // 305
        this.container.appendChild(result);                                                                            // 306
    }                                                                                                                  // 307
    this.nodeCount++;                                                                                                  // 308
    return result;                                                                                                     // 309
};                                                                                                                     // 310
                                                                                                                       // 311
/**                                                                                                                    // 312
 * De-allocate an element of specified type to the pool.                                                               // 313
 *                                                                                                                     // 314
 * @private                                                                                                            // 315
 * @method deallocate                                                                                                  // 316
 *                                                                                                                     // 317
 * @param {Node} element document element to deallocate                                                                // 318
 */                                                                                                                    // 319
ElementAllocator.prototype.deallocate = function deallocate(element) {                                                 // 320
    var nodeType = element.nodeName.toLowerCase();                                                                     // 321
    var nodeStore = this.detachedNodes[nodeType];                                                                      // 322
    nodeStore.push(element);                                                                                           // 323
    this.nodeCount--;                                                                                                  // 324
};                                                                                                                     // 325
                                                                                                                       // 326
/**                                                                                                                    // 327
 * Get count of total allocated nodes in the document.                                                                 // 328
 *                                                                                                                     // 329
 * @private                                                                                                            // 330
 * @method getNodeCount                                                                                                // 331
 *                                                                                                                     // 332
 * @return {Number} total node count                                                                                   // 333
 */                                                                                                                    // 334
ElementAllocator.prototype.getNodeCount = function getNodeCount() {                                                    // 335
    return this.nodeCount;                                                                                             // 336
};                                                                                                                     // 337
                                                                                                                       // 338
module.exports = ElementAllocator;                                                                                     // 339
},{}],3:[function(_dereq_,module,exports){                                                                             // 340
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 341
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 342
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 343
 *                                                                                                                     // 344
 * Owner: mark@famo.us                                                                                                 // 345
 * @license MPL 2.0                                                                                                    // 346
 * @copyright Famous Industries, Inc. 2014                                                                             // 347
 */                                                                                                                    // 348
                                                                                                                       // 349
var Entity = _dereq_('./Entity');                                                                                      // 350
var EventHandler = _dereq_('./EventHandler');                                                                          // 351
var Transform = _dereq_('./Transform');                                                                                // 352
                                                                                                                       // 353
var usePrefix = !('transform' in document.documentElement.style);                                                      // 354
var devicePixelRatio = window.devicePixelRatio || 1;                                                                   // 355
                                                                                                                       // 356
/**                                                                                                                    // 357
 * A base class for viewable content and event                                                                         // 358
 *   targets inside a Famo.us application, containing a renderable document                                            // 359
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 360
 *   properties, classes, and handle events.                                                                           // 361
 *                                                                                                                     // 362
 * @class ElementOutput                                                                                                // 363
 * @constructor                                                                                                        // 364
 *                                                                                                                     // 365
 * @param {Node} element document parent of this container                                                             // 366
 */                                                                                                                    // 367
function ElementOutput(element) {                                                                                      // 368
    this._matrix = null;                                                                                               // 369
    this._opacity = 1;                                                                                                 // 370
    this._origin = null;                                                                                               // 371
    this._size = null;                                                                                                 // 372
                                                                                                                       // 373
    this._eventOutput = new EventHandler();                                                                            // 374
    this._eventOutput.bindThis(this);                                                                                  // 375
                                                                                                                       // 376
    /** @ignore */                                                                                                     // 377
    this.eventForwarder = function eventForwarder(event) {                                                             // 378
        this._eventOutput.emit(event.type, event);                                                                     // 379
    }.bind(this);                                                                                                      // 380
                                                                                                                       // 381
    this.id = Entity.register(this);                                                                                   // 382
    this._element = null;                                                                                              // 383
    this._sizeDirty = false;                                                                                           // 384
    this._originDirty = false;                                                                                         // 385
    this._transformDirty = false;                                                                                      // 386
                                                                                                                       // 387
    this._invisible = false;                                                                                           // 388
    if (element) this.attach(element);                                                                                 // 389
}                                                                                                                      // 390
                                                                                                                       // 391
/**                                                                                                                    // 392
 * Bind a callback function to an event type handled by this object.                                                   // 393
 *                                                                                                                     // 394
 * @method "on"                                                                                                        // 395
 *                                                                                                                     // 396
 * @param {string} type event type key (for example, 'click')                                                          // 397
 * @param {function(string, Object)} fn handler callback                                                               // 398
 * @return {EventHandler} this                                                                                         // 399
 */                                                                                                                    // 400
ElementOutput.prototype.on = function on(type, fn) {                                                                   // 401
    if (this._element) this._element.addEventListener(type, this.eventForwarder);                                      // 402
    this._eventOutput.on(type, fn);                                                                                    // 403
};                                                                                                                     // 404
                                                                                                                       // 405
/**                                                                                                                    // 406
 * Unbind an event by type and handler.                                                                                // 407
 *   This undoes the work of "on"                                                                                      // 408
 *                                                                                                                     // 409
 * @method removeListener                                                                                              // 410
 * @param {string} type event type key (for example, 'click')                                                          // 411
 * @param {function(string, Object)} fn handler                                                                        // 412
 */                                                                                                                    // 413
ElementOutput.prototype.removeListener = function removeListener(type, fn) {                                           // 414
    this._eventOutput.removeListener(type, fn);                                                                        // 415
};                                                                                                                     // 416
                                                                                                                       // 417
/**                                                                                                                    // 418
 * Trigger an event, sending to all downstream handlers                                                                // 419
 *   listening for provided 'type' key.                                                                                // 420
 *                                                                                                                     // 421
 * @method emit                                                                                                        // 422
 *                                                                                                                     // 423
 * @param {string} type event type key (for example, 'click')                                                          // 424
 * @param {Object} [event] event data                                                                                  // 425
 * @return {EventHandler} this                                                                                         // 426
 */                                                                                                                    // 427
ElementOutput.prototype.emit = function emit(type, event) {                                                            // 428
    if (event && !event.origin) event.origin = this;                                                                   // 429
    var handled = this._eventOutput.emit(type, event);                                                                 // 430
    if (handled && event && event.stopPropagation) event.stopPropagation();                                            // 431
    return handled;                                                                                                    // 432
};                                                                                                                     // 433
                                                                                                                       // 434
/**                                                                                                                    // 435
 * Add event handler object to set of downstream handlers.                                                             // 436
 *                                                                                                                     // 437
 * @method pipe                                                                                                        // 438
 *                                                                                                                     // 439
 * @param {EventHandler} target event handler target object                                                            // 440
 * @return {EventHandler} passed event handler                                                                         // 441
 */                                                                                                                    // 442
ElementOutput.prototype.pipe = function pipe(target) {                                                                 // 443
    return this._eventOutput.pipe(target);                                                                             // 444
};                                                                                                                     // 445
                                                                                                                       // 446
/**                                                                                                                    // 447
 * Remove handler object from set of downstream handlers.                                                              // 448
 *   Undoes work of "pipe"                                                                                             // 449
 *                                                                                                                     // 450
 * @method unpipe                                                                                                      // 451
 *                                                                                                                     // 452
 * @param {EventHandler} target target handler object                                                                  // 453
 * @return {EventHandler} provided target                                                                              // 454
 */                                                                                                                    // 455
ElementOutput.prototype.unpipe = function unpipe(target) {                                                             // 456
    return this._eventOutput.unpipe(target);                                                                           // 457
};                                                                                                                     // 458
                                                                                                                       // 459
/**                                                                                                                    // 460
 * Return spec for this surface. Note that for a base surface, this is                                                 // 461
 *    simply an id.                                                                                                    // 462
 *                                                                                                                     // 463
 * @method render                                                                                                      // 464
 * @private                                                                                                            // 465
 * @return {Object} render spec for this surface (spec id)                                                             // 466
 */                                                                                                                    // 467
ElementOutput.prototype.render = function render() {                                                                   // 468
    return this.id;                                                                                                    // 469
};                                                                                                                     // 470
                                                                                                                       // 471
//  Attach Famous event handling to document events emanating from target                                              // 472
//    document element.  This occurs just after attachment to the document.                                            // 473
//    Calling this enables methods like #on and #pipe.                                                                 // 474
function _addEventListeners(target) {                                                                                  // 475
    for (var i in this._eventOutput.listeners) {                                                                       // 476
        target.addEventListener(i, this.eventForwarder);                                                               // 477
    }                                                                                                                  // 478
}                                                                                                                      // 479
                                                                                                                       // 480
//  Detach Famous event handling from document events emanating from target                                            // 481
//  document element.  This occurs just before detach from the document.                                               // 482
function _removeEventListeners(target) {                                                                               // 483
    for (var i in this._eventOutput.listeners) {                                                                       // 484
        target.removeEventListener(i, this.eventForwarder);                                                            // 485
    }                                                                                                                  // 486
}                                                                                                                      // 487
                                                                                                                       // 488
/**                                                                                                                    // 489
 * Return a Matrix's webkit css representation to be used with the                                                     // 490
 *    CSS3 -webkit-transform style.                                                                                    // 491
 *    Example: -webkit-transform: matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,716,243,0,1)                                        // 492
 *                                                                                                                     // 493
 * @method _formatCSSTransform                                                                                         // 494
 * @private                                                                                                            // 495
 * @param {FamousMatrix} m matrix                                                                                      // 496
 * @return {string} matrix3d CSS style representation of the transform                                                 // 497
 */                                                                                                                    // 498
function _formatCSSTransform(m) {                                                                                      // 499
    m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;                                                   // 500
    m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;                                                   // 501
                                                                                                                       // 502
    var result = 'matrix3d(';                                                                                          // 503
    for (var i = 0; i < 15; i++) {                                                                                     // 504
        result += (m[i] < 0.000001 && m[i] > -0.000001) ? '0,' : m[i] + ',';                                           // 505
    }                                                                                                                  // 506
    result += m[15] + ')';                                                                                             // 507
    return result;                                                                                                     // 508
}                                                                                                                      // 509
                                                                                                                       // 510
/**                                                                                                                    // 511
 * Directly apply given FamousMatrix to the document element as the                                                    // 512
 *   appropriate webkit CSS style.                                                                                     // 513
 *                                                                                                                     // 514
 * @method setMatrix                                                                                                   // 515
 *                                                                                                                     // 516
 * @static                                                                                                             // 517
 * @private                                                                                                            // 518
 * @param {Element} element document element                                                                           // 519
 * @param {FamousMatrix} matrix                                                                                        // 520
 */                                                                                                                    // 521
                                                                                                                       // 522
var _setMatrix;                                                                                                        // 523
if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {                                                       // 524
    _setMatrix = function(element, matrix) {                                                                           // 525
        element.style.zIndex = (matrix[14] * 1000000) | 0;    // fix for Firefox z-buffer issues                       // 526
        element.style.transform = _formatCSSTransform(matrix);                                                         // 527
    };                                                                                                                 // 528
}                                                                                                                      // 529
else if (usePrefix) {                                                                                                  // 530
    _setMatrix = function(element, matrix) {                                                                           // 531
        element.style.webkitTransform = _formatCSSTransform(matrix);                                                   // 532
    };                                                                                                                 // 533
}                                                                                                                      // 534
else {                                                                                                                 // 535
    _setMatrix = function(element, matrix) {                                                                           // 536
        element.style.transform = _formatCSSTransform(matrix);                                                         // 537
    };                                                                                                                 // 538
}                                                                                                                      // 539
                                                                                                                       // 540
// format origin as CSS percentage string                                                                              // 541
function _formatCSSOrigin(origin) {                                                                                    // 542
    return (100 * origin[0]) + '% ' + (100 * origin[1]) + '%';                                                         // 543
}                                                                                                                      // 544
                                                                                                                       // 545
// Directly apply given origin coordinates to the document element as the                                              // 546
// appropriate webkit CSS style.                                                                                       // 547
var _setOrigin = usePrefix ? function(element, origin) {                                                               // 548
    element.style.webkitTransformOrigin = _formatCSSOrigin(origin);                                                    // 549
} : function(element, origin) {                                                                                        // 550
    element.style.transformOrigin = _formatCSSOrigin(origin);                                                          // 551
};                                                                                                                     // 552
                                                                                                                       // 553
// Shrink given document element until it is effectively invisible.                                                    // 554
var _setInvisible = usePrefix ? function(element) {                                                                    // 555
    element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';                                                   // 556
    element.style.opacity = 0;                                                                                         // 557
} : function(element) {                                                                                                // 558
    element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';                                                         // 559
    element.style.opacity = 0;                                                                                         // 560
};                                                                                                                     // 561
                                                                                                                       // 562
function _xyNotEquals(a, b) {                                                                                          // 563
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 564
}                                                                                                                      // 565
                                                                                                                       // 566
/**                                                                                                                    // 567
 * Apply changes from this component to the corresponding document element.                                            // 568
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 569
 * and matrix transforms.                                                                                              // 570
 *                                                                                                                     // 571
 * @private                                                                                                            // 572
 * @method commit                                                                                                      // 573
 * @param {Context} context commit context                                                                             // 574
 */                                                                                                                    // 575
ElementOutput.prototype.commit = function commit(context) {                                                            // 576
    var target = this._element;                                                                                        // 577
    if (!target) return;                                                                                               // 578
                                                                                                                       // 579
    var matrix = context.transform;                                                                                    // 580
    var opacity = context.opacity;                                                                                     // 581
    var origin = context.origin;                                                                                       // 582
    var size = context.size;                                                                                           // 583
                                                                                                                       // 584
    if (!matrix && this._matrix) {                                                                                     // 585
        this._matrix = null;                                                                                           // 586
        this._opacity = 0;                                                                                             // 587
        _setInvisible(target);                                                                                         // 588
        return;                                                                                                        // 589
    }                                                                                                                  // 590
                                                                                                                       // 591
    if (_xyNotEquals(this._origin, origin)) this._originDirty = true;                                                  // 592
    if (Transform.notEquals(this._matrix, matrix)) this._transformDirty = true;                                        // 593
                                                                                                                       // 594
    if (this._invisible) {                                                                                             // 595
        this._invisible = false;                                                                                       // 596
        this._element.style.display = '';                                                                              // 597
    }                                                                                                                  // 598
                                                                                                                       // 599
    if (this._opacity !== opacity) {                                                                                   // 600
        this._opacity = opacity;                                                                                       // 601
        target.style.opacity = (opacity >= 1) ? '0.999999' : opacity;                                                  // 602
    }                                                                                                                  // 603
                                                                                                                       // 604
    if (this._transformDirty || this._originDirty || this._sizeDirty) {                                                // 605
        if (this._sizeDirty) this._sizeDirty = false;                                                                  // 606
                                                                                                                       // 607
        if (this._originDirty) {                                                                                       // 608
            if (origin) {                                                                                              // 609
                if (!this._origin) this._origin = [0, 0];                                                              // 610
                this._origin[0] = origin[0];                                                                           // 611
                this._origin[1] = origin[1];                                                                           // 612
            }                                                                                                          // 613
            else this._origin = null;                                                                                  // 614
            _setOrigin(target, this._origin);                                                                          // 615
            this._originDirty = false;                                                                                 // 616
        }                                                                                                              // 617
                                                                                                                       // 618
        if (!matrix) matrix = Transform.identity;                                                                      // 619
        this._matrix = matrix;                                                                                         // 620
        var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0]*origin[0], -this._size[1]*origin[1], 0]) : matrix;
        _setMatrix(target, aaMatrix);                                                                                  // 622
        this._transformDirty = false;                                                                                  // 623
    }                                                                                                                  // 624
};                                                                                                                     // 625
                                                                                                                       // 626
ElementOutput.prototype.cleanup = function cleanup() {                                                                 // 627
    if (this._element) {                                                                                               // 628
        this._invisible = true;                                                                                        // 629
        this._element.style.display = 'none';                                                                          // 630
    }                                                                                                                  // 631
};                                                                                                                     // 632
                                                                                                                       // 633
/**                                                                                                                    // 634
 * Place the document element that this component manages into the document.                                           // 635
 *                                                                                                                     // 636
 * @private                                                                                                            // 637
 * @method attach                                                                                                      // 638
 * @param {Node} target document parent of this container                                                              // 639
 */                                                                                                                    // 640
ElementOutput.prototype.attach = function attach(target) {                                                             // 641
    this._element = target;                                                                                            // 642
    _addEventListeners.call(this, target);                                                                             // 643
};                                                                                                                     // 644
                                                                                                                       // 645
/**                                                                                                                    // 646
 * Remove any contained document content associated with this surface                                                  // 647
 *   from the actual document.                                                                                         // 648
 *                                                                                                                     // 649
 * @private                                                                                                            // 650
 * @method detach                                                                                                      // 651
 */                                                                                                                    // 652
ElementOutput.prototype.detach = function detach() {                                                                   // 653
    var target = this._element;                                                                                        // 654
    if (target) {                                                                                                      // 655
        _removeEventListeners.call(this, target);                                                                      // 656
        if (this._invisible) {                                                                                         // 657
            this._invisible = false;                                                                                   // 658
            this._element.style.display = '';                                                                          // 659
        }                                                                                                              // 660
    }                                                                                                                  // 661
    this._element = null;                                                                                              // 662
    return target;                                                                                                     // 663
};                                                                                                                     // 664
                                                                                                                       // 665
module.exports = ElementOutput;                                                                                        // 666
},{"./Entity":5,"./EventHandler":7,"./Transform":15}],4:[function(_dereq_,module,exports){                             // 667
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 668
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 669
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 670
 *                                                                                                                     // 671
 * Owner: mark@famo.us                                                                                                 // 672
 * @license MPL 2.0                                                                                                    // 673
 * @copyright Famous Industries, Inc. 2014                                                                             // 674
 */                                                                                                                    // 675
                                                                                                                       // 676
/**                                                                                                                    // 677
 * The singleton object initiated upon process                                                                         // 678
 *   startup which manages all active Context instances, runs                                                          // 679
 *   the render dispatch loop, and acts as a listener and dispatcher                                                   // 680
 *   for events.  All methods are therefore static.                                                                    // 681
 *                                                                                                                     // 682
 *   On static initialization, window.requestAnimationFrame is called with                                             // 683
 *     the event loop function.                                                                                        // 684
 *                                                                                                                     // 685
 *   Note: Any window in which Engine runs will prevent default                                                        // 686
 *     scrolling behavior on the 'touchmove' event.                                                                    // 687
 *                                                                                                                     // 688
 * @static                                                                                                             // 689
 * @class Engine                                                                                                       // 690
 */                                                                                                                    // 691
var Context = _dereq_('./Context');                                                                                    // 692
var EventHandler = _dereq_('./EventHandler');                                                                          // 693
var OptionsManager = _dereq_('./OptionsManager');                                                                      // 694
                                                                                                                       // 695
var Engine = {};                                                                                                       // 696
                                                                                                                       // 697
var contexts = [];                                                                                                     // 698
                                                                                                                       // 699
var nextTickQueue = [];                                                                                                // 700
var currentFrame = 0;                                                                                                  // 701
var nextTickFrame = 0;                                                                                                 // 702
                                                                                                                       // 703
var deferQueue = [];                                                                                                   // 704
                                                                                                                       // 705
var lastTime = Date.now();                                                                                             // 706
var frameTime;                                                                                                         // 707
var frameTimeLimit;                                                                                                    // 708
var loopEnabled = true;                                                                                                // 709
var eventForwarders = {};                                                                                              // 710
var eventHandler = new EventHandler();                                                                                 // 711
                                                                                                                       // 712
var options = {                                                                                                        // 713
    containerType: 'div',                                                                                              // 714
    containerClass: 'famous-container',                                                                                // 715
    fpsCap: undefined,                                                                                                 // 716
    runLoop: true,                                                                                                     // 717
    appMode: true                                                                                                      // 718
};                                                                                                                     // 719
var optionsManager = new OptionsManager(options);                                                                      // 720
                                                                                                                       // 721
/** @const */                                                                                                          // 722
var MAX_DEFER_FRAME_TIME = 10;                                                                                         // 723
                                                                                                                       // 724
/**                                                                                                                    // 725
 * Inside requestAnimationFrame loop, step() is called, which:                                                         // 726
 *   calculates current FPS (throttling loop if it is over limit set in setFPSCap),                                    // 727
 *   emits dataless 'prerender' event on start of loop,                                                                // 728
 *   calls in order any one-shot functions registered by nextTick on last loop,                                        // 729
 *   calls Context.update on all Context objects registered,                                                           // 730
 *   and emits dataless 'postrender' event on end of loop.                                                             // 731
 *                                                                                                                     // 732
 * @static                                                                                                             // 733
 * @private                                                                                                            // 734
 * @method step                                                                                                        // 735
 */                                                                                                                    // 736
Engine.step = function step() {                                                                                        // 737
    currentFrame++;                                                                                                    // 738
    nextTickFrame = currentFrame;                                                                                      // 739
                                                                                                                       // 740
    var currentTime = Date.now();                                                                                      // 741
                                                                                                                       // 742
    // skip frame if we're over our framerate cap                                                                      // 743
    if (frameTimeLimit && currentTime - lastTime < frameTimeLimit) return;                                             // 744
                                                                                                                       // 745
    var i = 0;                                                                                                         // 746
                                                                                                                       // 747
    frameTime = currentTime - lastTime;                                                                                // 748
    lastTime = currentTime;                                                                                            // 749
                                                                                                                       // 750
    eventHandler.emit('prerender');                                                                                    // 751
                                                                                                                       // 752
    // empty the queue                                                                                                 // 753
    if (nextTickQueue.length) {                                                                                        // 754
        for (i = 0; i < nextTickQueue[0].length; i++) nextTickQueue[0][i].call(this, currentFrame);                    // 755
        nextTickQueue.splice(0, 1);                                                                                    // 756
    }                                                                                                                  // 757
                                                                                                                       // 758
    // limit total execution time for deferrable functions                                                             // 759
    while (deferQueue.length && (Date.now() - currentTime) < MAX_DEFER_FRAME_TIME) {                                   // 760
        deferQueue.shift().call(this);                                                                                 // 761
    }                                                                                                                  // 762
                                                                                                                       // 763
    for (i = 0; i < contexts.length; i++) contexts[i].update();                                                        // 764
                                                                                                                       // 765
    eventHandler.emit('postrender');                                                                                   // 766
};                                                                                                                     // 767
                                                                                                                       // 768
// engage requestAnimationFrame                                                                                        // 769
function loop() {                                                                                                      // 770
    if (options.runLoop) {                                                                                             // 771
        Engine.step();                                                                                                 // 772
        window.requestAnimationFrame(loop);                                                                            // 773
    }                                                                                                                  // 774
    else loopEnabled = false;                                                                                          // 775
}                                                                                                                      // 776
window.requestAnimationFrame(loop);                                                                                    // 777
                                                                                                                       // 778
//                                                                                                                     // 779
// Upon main document window resize (unless on an "input" HTML element):                                               // 780
//   scroll to the top left corner of the window,                                                                      // 781
//   and for each managed Context: emit the 'resize' event and update its size.                                        // 782
// @param {Object=} event document event                                                                               // 783
//                                                                                                                     // 784
function handleResize(event) {                                                                                         // 785
    for (var i = 0; i < contexts.length; i++) {                                                                        // 786
        contexts[i].emit('resize');                                                                                    // 787
    }                                                                                                                  // 788
    eventHandler.emit('resize');                                                                                       // 789
}                                                                                                                      // 790
window.addEventListener('resize', handleResize, false);                                                                // 791
handleResize();                                                                                                        // 792
                                                                                                                       // 793
/**                                                                                                                    // 794
 * Initialize famous for app mode                                                                                      // 795
 *                                                                                                                     // 796
 * @static                                                                                                             // 797
 * @private                                                                                                            // 798
 * @method initialize                                                                                                  // 799
 */                                                                                                                    // 800
function initialize() {                                                                                                // 801
    // prevent scrolling via browser                                                                                   // 802
    window.addEventListener('touchmove', function(event) {                                                             // 803
        event.preventDefault();                                                                                        // 804
    }, true);                                                                                                          // 805
    document.body.classList.add('famous-root');                                                                        // 806
    document.documentElement.classList.add('famous-root');                                                             // 807
}                                                                                                                      // 808
var initialized = false;                                                                                               // 809
                                                                                                                       // 810
/**                                                                                                                    // 811
 * Add event handler object to set of downstream handlers.                                                             // 812
 *                                                                                                                     // 813
 * @method pipe                                                                                                        // 814
 *                                                                                                                     // 815
 * @param {EventHandler} target event handler target object                                                            // 816
 * @return {EventHandler} passed event handler                                                                         // 817
 */                                                                                                                    // 818
Engine.pipe = function pipe(target) {                                                                                  // 819
    if (target.subscribe instanceof Function) return target.subscribe(Engine);                                         // 820
    else return eventHandler.pipe(target);                                                                             // 821
};                                                                                                                     // 822
                                                                                                                       // 823
/**                                                                                                                    // 824
 * Remove handler object from set of downstream handlers.                                                              // 825
 *   Undoes work of "pipe".                                                                                            // 826
 *                                                                                                                     // 827
 * @method unpipe                                                                                                      // 828
 *                                                                                                                     // 829
 * @param {EventHandler} target target handler object                                                                  // 830
 * @return {EventHandler} provided target                                                                              // 831
 */                                                                                                                    // 832
Engine.unpipe = function unpipe(target) {                                                                              // 833
    if (target.unsubscribe instanceof Function) return target.unsubscribe(Engine);                                     // 834
    else return eventHandler.unpipe(target);                                                                           // 835
};                                                                                                                     // 836
                                                                                                                       // 837
/**                                                                                                                    // 838
 * Bind a callback function to an event type handled by this object.                                                   // 839
 *                                                                                                                     // 840
 * @static                                                                                                             // 841
 * @method "on"                                                                                                        // 842
 *                                                                                                                     // 843
 * @param {string} type event type key (for example, 'click')                                                          // 844
 * @param {function(string, Object)} handler callback                                                                  // 845
 * @return {EventHandler} this                                                                                         // 846
 */                                                                                                                    // 847
Engine.on = function on(type, handler) {                                                                               // 848
    if (!(type in eventForwarders)) {                                                                                  // 849
        eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);                                            // 850
        if (document.body) {                                                                                           // 851
            document.body.addEventListener(type, eventForwarders[type]);                                               // 852
        }                                                                                                              // 853
        else {                                                                                                         // 854
            Engine.nextTick(function(type, forwarder) {                                                                // 855
                document.body.addEventListener(type, forwarder);                                                       // 856
            }.bind(this, type, eventForwarders[type]));                                                                // 857
        }                                                                                                              // 858
    }                                                                                                                  // 859
    return eventHandler.on(type, handler);                                                                             // 860
};                                                                                                                     // 861
                                                                                                                       // 862
/**                                                                                                                    // 863
 * Trigger an event, sending to all downstream handlers                                                                // 864
 *   listening for provided 'type' key.                                                                                // 865
 *                                                                                                                     // 866
 * @method emit                                                                                                        // 867
 *                                                                                                                     // 868
 * @param {string} type event type key (for example, 'click')                                                          // 869
 * @param {Object} event event data                                                                                    // 870
 * @return {EventHandler} this                                                                                         // 871
 */                                                                                                                    // 872
Engine.emit = function emit(type, event) {                                                                             // 873
    return eventHandler.emit(type, event);                                                                             // 874
};                                                                                                                     // 875
                                                                                                                       // 876
/**                                                                                                                    // 877
 * Unbind an event by type and handler.                                                                                // 878
 *   This undoes the work of "on".                                                                                     // 879
 *                                                                                                                     // 880
 * @static                                                                                                             // 881
 * @method removeListener                                                                                              // 882
 *                                                                                                                     // 883
 * @param {string} type event type key (for example, 'click')                                                          // 884
 * @param {function} handler function object to remove                                                                 // 885
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 886
 */                                                                                                                    // 887
Engine.removeListener = function removeListener(type, handler) {                                                       // 888
    return eventHandler.removeListener(type, handler);                                                                 // 889
};                                                                                                                     // 890
                                                                                                                       // 891
/**                                                                                                                    // 892
 * Return the current calculated frames per second of the Engine.                                                      // 893
 *                                                                                                                     // 894
 * @static                                                                                                             // 895
 * @method getFPS                                                                                                      // 896
 *                                                                                                                     // 897
 * @return {Number} calculated fps                                                                                     // 898
 */                                                                                                                    // 899
Engine.getFPS = function getFPS() {                                                                                    // 900
    return 1000 / frameTime;                                                                                           // 901
};                                                                                                                     // 902
                                                                                                                       // 903
/**                                                                                                                    // 904
 * Set the maximum fps at which the system should run. If internal render                                              // 905
 *    loop is called at a greater frequency than this FPSCap, Engine will                                              // 906
 *    throttle render and update until this rate is achieved.                                                          // 907
 *                                                                                                                     // 908
 * @static                                                                                                             // 909
 * @method setFPSCap                                                                                                   // 910
 *                                                                                                                     // 911
 * @param {Number} fps maximum frames per second                                                                       // 912
 */                                                                                                                    // 913
Engine.setFPSCap = function setFPSCap(fps) {                                                                           // 914
    frameTimeLimit = Math.floor(1000 / fps);                                                                           // 915
};                                                                                                                     // 916
                                                                                                                       // 917
/**                                                                                                                    // 918
 * Return engine options.                                                                                              // 919
 *                                                                                                                     // 920
 * @static                                                                                                             // 921
 * @method getOptions                                                                                                  // 922
 * @param {string} key                                                                                                 // 923
 * @return {Object} engine options                                                                                     // 924
 */                                                                                                                    // 925
Engine.getOptions = function getOptions(key) {                                                                         // 926
    return optionsManager.getOptions(key);                                                                             // 927
};                                                                                                                     // 928
                                                                                                                       // 929
/**                                                                                                                    // 930
 * Set engine options                                                                                                  // 931
 *                                                                                                                     // 932
 * @static                                                                                                             // 933
 * @method setOptions                                                                                                  // 934
 *                                                                                                                     // 935
 * @param {Object} [options] overrides of default options                                                              // 936
 * @param {Number} [options.fpsCap]  maximum fps at which the system should run                                        // 937
 * @param {boolean} [options.runLoop=true] whether the run loop should continue                                        // 938
 * @param {string} [options.containerType="div"] type of container element.  Defaults to 'div'.                        // 939
 * @param {string} [options.containerClass="famous-container"] type of container element.  Defaults to 'famous-container'.
 */                                                                                                                    // 941
Engine.setOptions = function setOptions(options) {                                                                     // 942
    return optionsManager.setOptions.apply(optionsManager, arguments);                                                 // 943
};                                                                                                                     // 944
                                                                                                                       // 945
/**                                                                                                                    // 946
 * Creates a new Context for rendering and event handling with                                                         // 947
 *    provided document element as top of each tree. This will be tracked by the                                       // 948
 *    process-wide Engine.                                                                                             // 949
 *                                                                                                                     // 950
 * @static                                                                                                             // 951
 * @method createContext                                                                                               // 952
 *                                                                                                                     // 953
 * @param {Node} el will be top of Famo.us document element tree                                                       // 954
 * @return {Context} new Context within el                                                                             // 955
 */                                                                                                                    // 956
Engine.createContext = function createContext(el) {                                                                    // 957
    if (!initialized && options.appMode) Engine.nextTick(initialize);                                                  // 958
                                                                                                                       // 959
    var needMountContainer = false;                                                                                    // 960
    if (!el) {                                                                                                         // 961
        el = document.createElement(options.containerType);                                                            // 962
        el.classList.add(options.containerClass);                                                                      // 963
        needMountContainer = true;                                                                                     // 964
    }                                                                                                                  // 965
    var context = new Context(el);                                                                                     // 966
    Engine.registerContext(context);                                                                                   // 967
    if (needMountContainer) {                                                                                          // 968
        Engine.nextTick(function(context, el) {                                                                        // 969
            document.body.appendChild(el);                                                                             // 970
            context.emit('resize');                                                                                    // 971
        }.bind(this, context, el));                                                                                    // 972
    }                                                                                                                  // 973
    return context;                                                                                                    // 974
};                                                                                                                     // 975
                                                                                                                       // 976
/**                                                                                                                    // 977
 * Registers an existing context to be updated within the run loop.                                                    // 978
 *                                                                                                                     // 979
 * @static                                                                                                             // 980
 * @method registerContext                                                                                             // 981
 *                                                                                                                     // 982
 * @param {Context} context Context to register                                                                        // 983
 * @return {FamousContext} provided context                                                                            // 984
 */                                                                                                                    // 985
Engine.registerContext = function registerContext(context) {                                                           // 986
    contexts.push(context);                                                                                            // 987
    return context;                                                                                                    // 988
};                                                                                                                     // 989
                                                                                                                       // 990
/**                                                                                                                    // 991
 * Returns a list of all contexts.                                                                                     // 992
 *                                                                                                                     // 993
 * @static                                                                                                             // 994
 * @method getContexts                                                                                                 // 995
 * @return {Array} contexts that are updated on each tick                                                              // 996
 */                                                                                                                    // 997
Engine.getContexts = function getContexts() {                                                                          // 998
    return contexts;                                                                                                   // 999
};                                                                                                                     // 1000
                                                                                                                       // 1001
/**                                                                                                                    // 1002
 * Removes a context from the run loop. Note: this does not do any                                                     // 1003
 *     cleanup.                                                                                                        // 1004
 *                                                                                                                     // 1005
 * @static                                                                                                             // 1006
 * @method deregisterContext                                                                                           // 1007
 *                                                                                                                     // 1008
 * @param {Context} context Context to deregister                                                                      // 1009
 */                                                                                                                    // 1010
Engine.deregisterContext = function deregisterContext(context) {                                                       // 1011
    var i = contexts.indexOf(context);                                                                                 // 1012
    if (i >= 0) contexts.splice(i, 1);                                                                                 // 1013
};                                                                                                                     // 1014
                                                                                                                       // 1015
/**                                                                                                                    // 1016
 * Queue a function to be executed on the next tick of the                                                             // 1017
 *    Engine.                                                                                                          // 1018
 *                                                                                                                     // 1019
 * @static                                                                                                             // 1020
 * @method nextTick                                                                                                    // 1021
 *                                                                                                                     // 1022
 * @param {function(Object)} fn function accepting window object                                                       // 1023
 */                                                                                                                    // 1024
Engine.nextTick = function nextTick(fn) {                                                                              // 1025
    var frameIndex = nextTickFrame - currentFrame;                                                                     // 1026
    if (!nextTickQueue[frameIndex]) nextTickQueue[frameIndex] = [];                                                    // 1027
                                                                                                                       // 1028
    function frameChecker(frame) {                                                                                     // 1029
        var nextFrame = frame + 1;                                                                                     // 1030
        if (nextTickFrame !== nextFrame) nextTickFrame = nextFrame;                                                    // 1031
        fn();                                                                                                          // 1032
    }                                                                                                                  // 1033
                                                                                                                       // 1034
    nextTickQueue[frameIndex].push(frameChecker);                                                                      // 1035
                                                                                                                       // 1036
};                                                                                                                     // 1037
                                                                                                                       // 1038
/**                                                                                                                    // 1039
 * Queue a function to be executed sometime soon, at a time that is                                                    // 1040
 *    unlikely to affect frame rate.                                                                                   // 1041
 *                                                                                                                     // 1042
 * @static                                                                                                             // 1043
 * @method defer                                                                                                       // 1044
 *                                                                                                                     // 1045
 * @param {Function} fn                                                                                                // 1046
 */                                                                                                                    // 1047
Engine.defer = function defer(fn) {                                                                                    // 1048
    deferQueue.push(fn);                                                                                               // 1049
};                                                                                                                     // 1050
                                                                                                                       // 1051
optionsManager.on('change', function(data) {                                                                           // 1052
    if (data.id === 'fpsCap') Engine.setFPSCap(data.value);                                                            // 1053
    else if (data.id === 'runLoop') {                                                                                  // 1054
        // kick off the loop only if it was stopped                                                                    // 1055
        if (!loopEnabled && data.value) {                                                                              // 1056
            loopEnabled = true;                                                                                        // 1057
            window.requestAnimationFrame(loop);                                                                        // 1058
        }                                                                                                              // 1059
    }                                                                                                                  // 1060
});                                                                                                                    // 1061
                                                                                                                       // 1062
module.exports = Engine;                                                                                               // 1063
},{"./Context":1,"./EventHandler":7,"./OptionsManager":10}],5:[function(_dereq_,module,exports){                       // 1064
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1065
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1066
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1067
 *                                                                                                                     // 1068
 * Owner: mark@famo.us                                                                                                 // 1069
 * @license MPL 2.0                                                                                                    // 1070
 * @copyright Famous Industries, Inc. 2014                                                                             // 1071
 */                                                                                                                    // 1072
                                                                                                                       // 1073
                                                                                                                       // 1074
                                                                                                                       // 1075
/**                                                                                                                    // 1076
 * A singleton that maintains a global registry of Surfaces.                                                           // 1077
 *   Private.                                                                                                          // 1078
 *                                                                                                                     // 1079
 * @private                                                                                                            // 1080
 * @static                                                                                                             // 1081
 * @class Entity                                                                                                       // 1082
 */                                                                                                                    // 1083
                                                                                                                       // 1084
var entities = [];                                                                                                     // 1085
                                                                                                                       // 1086
/**                                                                                                                    // 1087
 * Get entity from global index.                                                                                       // 1088
 *                                                                                                                     // 1089
 * @private                                                                                                            // 1090
 * @method get                                                                                                         // 1091
 * @param {Number} id entity registration id                                                                           // 1092
 * @return {Surface} entity in the global index                                                                        // 1093
 */                                                                                                                    // 1094
function get(id) {                                                                                                     // 1095
    return entities[id];                                                                                               // 1096
}                                                                                                                      // 1097
                                                                                                                       // 1098
/**                                                                                                                    // 1099
 * Overwrite entity in the global index                                                                                // 1100
 *                                                                                                                     // 1101
 * @private                                                                                                            // 1102
 * @method set                                                                                                         // 1103
 * @param {Number} id entity registration id                                                                           // 1104
 * @param {Surface} entity to add to the global index                                                                  // 1105
 */                                                                                                                    // 1106
function set(id, entity) {                                                                                             // 1107
    entities[id] = entity;                                                                                             // 1108
}                                                                                                                      // 1109
                                                                                                                       // 1110
/**                                                                                                                    // 1111
 * Add entity to global index                                                                                          // 1112
 *                                                                                                                     // 1113
 * @private                                                                                                            // 1114
 * @method register                                                                                                    // 1115
 * @param {Surface} entity to add to global index                                                                      // 1116
 * @return {Number} new id                                                                                             // 1117
 */                                                                                                                    // 1118
function register(entity) {                                                                                            // 1119
    var id = entities.length;                                                                                          // 1120
    set(id, entity);                                                                                                   // 1121
    return id;                                                                                                         // 1122
}                                                                                                                      // 1123
                                                                                                                       // 1124
/**                                                                                                                    // 1125
 * Remove entity from global index                                                                                     // 1126
 *                                                                                                                     // 1127
 * @private                                                                                                            // 1128
 * @method unregister                                                                                                  // 1129
 * @param {Number} id entity registration id                                                                           // 1130
 */                                                                                                                    // 1131
function unregister(id) {                                                                                              // 1132
    set(id, null);                                                                                                     // 1133
}                                                                                                                      // 1134
                                                                                                                       // 1135
module.exports = {                                                                                                     // 1136
    register: register,                                                                                                // 1137
    unregister: unregister,                                                                                            // 1138
    get: get,                                                                                                          // 1139
    set: set                                                                                                           // 1140
};                                                                                                                     // 1141
},{}],6:[function(_dereq_,module,exports){                                                                             // 1142
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1143
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1144
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1145
 *                                                                                                                     // 1146
 * Owner: mark@famo.us                                                                                                 // 1147
 * @license MPL 2.0                                                                                                    // 1148
 * @copyright Famous Industries, Inc. 2014                                                                             // 1149
 */                                                                                                                    // 1150
                                                                                                                       // 1151
                                                                                                                       // 1152
                                                                                                                       // 1153
/**                                                                                                                    // 1154
 * EventEmitter represents a channel for events.                                                                       // 1155
 *                                                                                                                     // 1156
 * @class EventEmitter                                                                                                 // 1157
 * @constructor                                                                                                        // 1158
 */                                                                                                                    // 1159
function EventEmitter() {                                                                                              // 1160
    this.listeners = {};                                                                                               // 1161
    this._owner = this;                                                                                                // 1162
}                                                                                                                      // 1163
                                                                                                                       // 1164
/**                                                                                                                    // 1165
 * Trigger an event, sending to all downstream handlers                                                                // 1166
 *   listening for provided 'type' key.                                                                                // 1167
 *                                                                                                                     // 1168
 * @method emit                                                                                                        // 1169
 *                                                                                                                     // 1170
 * @param {string} type event type key (for example, 'click')                                                          // 1171
 * @param {Object} event event data                                                                                    // 1172
 * @return {EventHandler} this                                                                                         // 1173
 */                                                                                                                    // 1174
EventEmitter.prototype.emit = function emit(type, event) {                                                             // 1175
    var handlers = this.listeners[type];                                                                               // 1176
    if (handlers) {                                                                                                    // 1177
        for (var i = 0; i < handlers.length; i++) {                                                                    // 1178
            handlers[i].call(this._owner, event);                                                                      // 1179
        }                                                                                                              // 1180
    }                                                                                                                  // 1181
    return this;                                                                                                       // 1182
};                                                                                                                     // 1183
                                                                                                                       // 1184
/**                                                                                                                    // 1185
 * Bind a callback function to an event type handled by this object.                                                   // 1186
 *                                                                                                                     // 1187
 * @method "on"                                                                                                        // 1188
 *                                                                                                                     // 1189
 * @param {string} type event type key (for example, 'click')                                                          // 1190
 * @param {function(string, Object)} handler callback                                                                  // 1191
 * @return {EventHandler} this                                                                                         // 1192
 */                                                                                                                    // 1193
   EventEmitter.prototype.on = function on(type, handler) {                                                            // 1194
    if (!(type in this.listeners)) this.listeners[type] = [];                                                          // 1195
    var index = this.listeners[type].indexOf(handler);                                                                 // 1196
    if (index < 0) this.listeners[type].push(handler);                                                                 // 1197
    return this;                                                                                                       // 1198
};                                                                                                                     // 1199
                                                                                                                       // 1200
/**                                                                                                                    // 1201
 * Alias for "on".                                                                                                     // 1202
 * @method addListener                                                                                                 // 1203
 */                                                                                                                    // 1204
EventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 1205
                                                                                                                       // 1206
   /**                                                                                                                 // 1207
 * Unbind an event by type and handler.                                                                                // 1208
 *   This undoes the work of "on".                                                                                     // 1209
 *                                                                                                                     // 1210
 * @method removeListener                                                                                              // 1211
 *                                                                                                                     // 1212
 * @param {string} type event type key (for example, 'click')                                                          // 1213
 * @param {function} handler function object to remove                                                                 // 1214
 * @return {EventEmitter} this                                                                                         // 1215
 */                                                                                                                    // 1216
EventEmitter.prototype.removeListener = function removeListener(type, handler) {                                       // 1217
    var listener = this.listeners[type];                                                                               // 1218
    if (listener !== undefined) {                                                                                      // 1219
        var index = listener.indexOf(handler);                                                                         // 1220
        if (index >= 0) listener.splice(index, 1);                                                                     // 1221
    }                                                                                                                  // 1222
    return this;                                                                                                       // 1223
};                                                                                                                     // 1224
                                                                                                                       // 1225
/**                                                                                                                    // 1226
 * Call event handlers with this set to owner.                                                                         // 1227
 *                                                                                                                     // 1228
 * @method bindThis                                                                                                    // 1229
 *                                                                                                                     // 1230
 * @param {Object} owner object this EventEmitter belongs to                                                           // 1231
 */                                                                                                                    // 1232
EventEmitter.prototype.bindThis = function bindThis(owner) {                                                           // 1233
    this._owner = owner;                                                                                               // 1234
};                                                                                                                     // 1235
                                                                                                                       // 1236
module.exports = EventEmitter;                                                                                         // 1237
},{}],7:[function(_dereq_,module,exports){                                                                             // 1238
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1239
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1240
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1241
 *                                                                                                                     // 1242
 * Owner: mark@famo.us                                                                                                 // 1243
 * @license MPL 2.0                                                                                                    // 1244
 * @copyright Famous Industries, Inc. 2014                                                                             // 1245
 */                                                                                                                    // 1246
                                                                                                                       // 1247
var EventEmitter = _dereq_('./EventEmitter');                                                                          // 1248
                                                                                                                       // 1249
/**                                                                                                                    // 1250
 * EventHandler forwards received events to a set of provided callback functions.                                      // 1251
 * It allows events to be captured, processed, and optionally piped through to other event handlers.                   // 1252
 *                                                                                                                     // 1253
 * @class EventHandler                                                                                                 // 1254
 * @extends EventEmitter                                                                                               // 1255
 * @constructor                                                                                                        // 1256
 */                                                                                                                    // 1257
function EventHandler() {                                                                                              // 1258
    EventEmitter.apply(this, arguments);                                                                               // 1259
                                                                                                                       // 1260
    this.downstream = []; // downstream event handlers                                                                 // 1261
    this.downstreamFn = []; // downstream functions                                                                    // 1262
                                                                                                                       // 1263
    this.upstream = []; // upstream event handlers                                                                     // 1264
    this.upstreamListeners = {}; // upstream listeners                                                                 // 1265
}                                                                                                                      // 1266
EventHandler.prototype = Object.create(EventEmitter.prototype);                                                        // 1267
EventHandler.prototype.constructor = EventHandler;                                                                     // 1268
                                                                                                                       // 1269
/**                                                                                                                    // 1270
 * Assign an event handler to receive an object's input events.                                                        // 1271
 *                                                                                                                     // 1272
 * @method setInputHandler                                                                                             // 1273
 * @static                                                                                                             // 1274
 *                                                                                                                     // 1275
 * @param {Object} object object to mix trigger, subscribe, and unsubscribe functions into                             // 1276
 * @param {EventHandler} handler assigned event handler                                                                // 1277
 */                                                                                                                    // 1278
EventHandler.setInputHandler = function setInputHandler(object, handler) {                                             // 1279
    object.trigger = handler.trigger.bind(handler);                                                                    // 1280
    if (handler.subscribe && handler.unsubscribe) {                                                                    // 1281
        object.subscribe = handler.subscribe.bind(handler);                                                            // 1282
        object.unsubscribe = handler.unsubscribe.bind(handler);                                                        // 1283
    }                                                                                                                  // 1284
};                                                                                                                     // 1285
                                                                                                                       // 1286
/**                                                                                                                    // 1287
 * Assign an event handler to receive an object's output events.                                                       // 1288
 *                                                                                                                     // 1289
 * @method setOutputHandler                                                                                            // 1290
 * @static                                                                                                             // 1291
 *                                                                                                                     // 1292
 * @param {Object} object object to mix pipe, unpipe, on, addListener, and removeListener functions into               // 1293
 * @param {EventHandler} handler assigned event handler                                                                // 1294
 */                                                                                                                    // 1295
EventHandler.setOutputHandler = function setOutputHandler(object, handler) {                                           // 1296
    if (handler instanceof EventHandler) handler.bindThis(object);                                                     // 1297
    object.pipe = handler.pipe.bind(handler);                                                                          // 1298
    object.unpipe = handler.unpipe.bind(handler);                                                                      // 1299
    object.on = handler.on.bind(handler);                                                                              // 1300
    object.addListener = object.on;                                                                                    // 1301
    object.removeListener = handler.removeListener.bind(handler);                                                      // 1302
};                                                                                                                     // 1303
                                                                                                                       // 1304
/**                                                                                                                    // 1305
 * Trigger an event, sending to all downstream handlers                                                                // 1306
 *   listening for provided 'type' key.                                                                                // 1307
 *                                                                                                                     // 1308
 * @method emit                                                                                                        // 1309
 *                                                                                                                     // 1310
 * @param {string} type event type key (for example, 'click')                                                          // 1311
 * @param {Object} event event data                                                                                    // 1312
 * @return {EventHandler} this                                                                                         // 1313
 */                                                                                                                    // 1314
EventHandler.prototype.emit = function emit(type, event) {                                                             // 1315
    EventEmitter.prototype.emit.apply(this, arguments);                                                                // 1316
    var i = 0;                                                                                                         // 1317
    for (i = 0; i < this.downstream.length; i++) {                                                                     // 1318
        if (this.downstream[i].trigger) this.downstream[i].trigger(type, event);                                       // 1319
    }                                                                                                                  // 1320
    for (i = 0; i < this.downstreamFn.length; i++) {                                                                   // 1321
        this.downstreamFn[i](type, event);                                                                             // 1322
    }                                                                                                                  // 1323
    return this;                                                                                                       // 1324
};                                                                                                                     // 1325
                                                                                                                       // 1326
/**                                                                                                                    // 1327
 * Alias for emit                                                                                                      // 1328
 * @method addListener                                                                                                 // 1329
 */                                                                                                                    // 1330
EventHandler.prototype.trigger = EventHandler.prototype.emit;                                                          // 1331
                                                                                                                       // 1332
/**                                                                                                                    // 1333
 * Add event handler object to set of downstream handlers.                                                             // 1334
 *                                                                                                                     // 1335
 * @method pipe                                                                                                        // 1336
 *                                                                                                                     // 1337
 * @param {EventHandler} target event handler target object                                                            // 1338
 * @return {EventHandler} passed event handler                                                                         // 1339
 */                                                                                                                    // 1340
EventHandler.prototype.pipe = function pipe(target) {                                                                  // 1341
    if (target.subscribe instanceof Function) return target.subscribe(this);                                           // 1342
                                                                                                                       // 1343
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1344
    var index = downstreamCtx.indexOf(target);                                                                         // 1345
    if (index < 0) downstreamCtx.push(target);                                                                         // 1346
                                                                                                                       // 1347
    if (target instanceof Function) target('pipe', null);                                                              // 1348
    else if (target.trigger) target.trigger('pipe', null);                                                             // 1349
                                                                                                                       // 1350
    return target;                                                                                                     // 1351
};                                                                                                                     // 1352
                                                                                                                       // 1353
/**                                                                                                                    // 1354
 * Remove handler object from set of downstream handlers.                                                              // 1355
 *   Undoes work of "pipe".                                                                                            // 1356
 *                                                                                                                     // 1357
 * @method unpipe                                                                                                      // 1358
 *                                                                                                                     // 1359
 * @param {EventHandler} target target handler object                                                                  // 1360
 * @return {EventHandler} provided target                                                                              // 1361
 */                                                                                                                    // 1362
EventHandler.prototype.unpipe = function unpipe(target) {                                                              // 1363
    if (target.unsubscribe instanceof Function) return target.unsubscribe(this);                                       // 1364
                                                                                                                       // 1365
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1366
    var index = downstreamCtx.indexOf(target);                                                                         // 1367
    if (index >= 0) {                                                                                                  // 1368
        downstreamCtx.splice(index, 1);                                                                                // 1369
        if (target instanceof Function) target('unpipe', null);                                                        // 1370
        else if (target.trigger) target.trigger('unpipe', null);                                                       // 1371
        return target;                                                                                                 // 1372
    }                                                                                                                  // 1373
    else return false;                                                                                                 // 1374
};                                                                                                                     // 1375
                                                                                                                       // 1376
/**                                                                                                                    // 1377
 * Bind a callback function to an event type handled by this object.                                                   // 1378
 *                                                                                                                     // 1379
 * @method "on"                                                                                                        // 1380
 *                                                                                                                     // 1381
 * @param {string} type event type key (for example, 'click')                                                          // 1382
 * @param {function(string, Object)} handler callback                                                                  // 1383
 * @return {EventHandler} this                                                                                         // 1384
 */                                                                                                                    // 1385
EventHandler.prototype.on = function on(type, handler) {                                                               // 1386
    EventEmitter.prototype.on.apply(this, arguments);                                                                  // 1387
    if (!(type in this.upstreamListeners)) {                                                                           // 1388
        var upstreamListener = this.trigger.bind(this, type);                                                          // 1389
        this.upstreamListeners[type] = upstreamListener;                                                               // 1390
        for (var i = 0; i < this.upstream.length; i++) {                                                               // 1391
            this.upstream[i].on(type, upstreamListener);                                                               // 1392
        }                                                                                                              // 1393
    }                                                                                                                  // 1394
    return this;                                                                                                       // 1395
};                                                                                                                     // 1396
                                                                                                                       // 1397
/**                                                                                                                    // 1398
 * Alias for "on"                                                                                                      // 1399
 * @method addListener                                                                                                 // 1400
 */                                                                                                                    // 1401
EventHandler.prototype.addListener = EventHandler.prototype.on;                                                        // 1402
                                                                                                                       // 1403
/**                                                                                                                    // 1404
 * Listen for events from an upstream event handler.                                                                   // 1405
 *                                                                                                                     // 1406
 * @method subscribe                                                                                                   // 1407
 *                                                                                                                     // 1408
 * @param {EventEmitter} source source emitter object                                                                  // 1409
 * @return {EventHandler} this                                                                                         // 1410
 */                                                                                                                    // 1411
EventHandler.prototype.subscribe = function subscribe(source) {                                                        // 1412
    var index = this.upstream.indexOf(source);                                                                         // 1413
    if (index < 0) {                                                                                                   // 1414
        this.upstream.push(source);                                                                                    // 1415
        for (var type in this.upstreamListeners) {                                                                     // 1416
            source.on(type, this.upstreamListeners[type]);                                                             // 1417
        }                                                                                                              // 1418
    }                                                                                                                  // 1419
    return this;                                                                                                       // 1420
};                                                                                                                     // 1421
                                                                                                                       // 1422
/**                                                                                                                    // 1423
 * Stop listening to events from an upstream event handler.                                                            // 1424
 *                                                                                                                     // 1425
 * @method unsubscribe                                                                                                 // 1426
 *                                                                                                                     // 1427
 * @param {EventEmitter} source source emitter object                                                                  // 1428
 * @return {EventHandler} this                                                                                         // 1429
 */                                                                                                                    // 1430
EventHandler.prototype.unsubscribe = function unsubscribe(source) {                                                    // 1431
    var index = this.upstream.indexOf(source);                                                                         // 1432
    if (index >= 0) {                                                                                                  // 1433
        this.upstream.splice(index, 1);                                                                                // 1434
        for (var type in this.upstreamListeners) {                                                                     // 1435
            source.removeListener(type, this.upstreamListeners[type]);                                                 // 1436
        }                                                                                                              // 1437
    }                                                                                                                  // 1438
    return this;                                                                                                       // 1439
};                                                                                                                     // 1440
                                                                                                                       // 1441
module.exports = EventHandler;                                                                                         // 1442
},{"./EventEmitter":6}],8:[function(_dereq_,module,exports){                                                           // 1443
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1444
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1445
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1446
 *                                                                                                                     // 1447
 * Owner: mark@famo.us                                                                                                 // 1448
 * @license MPL 2.0                                                                                                    // 1449
 * @copyright Famous Industries, Inc. 2014                                                                             // 1450
 */                                                                                                                    // 1451
                                                                                                                       // 1452
var Context = _dereq_('./Context');                                                                                    // 1453
var Transform = _dereq_('./Transform');                                                                                // 1454
var Surface = _dereq_('./Surface');                                                                                    // 1455
                                                                                                                       // 1456
/**                                                                                                                    // 1457
 * A Context designed to contain surfaces and set properties                                                           // 1458
 *   to be applied to all of them at once.                                                                             // 1459
 *   This is primarily used for specific performance improvements in the rendering engine.                             // 1460
 *   Private.                                                                                                          // 1461
 *                                                                                                                     // 1462
 * @private                                                                                                            // 1463
 * @class Group                                                                                                        // 1464
 * @extends Surface                                                                                                    // 1465
 * @constructor                                                                                                        // 1466
 * @param {Object} [options] Surface options array (see Surface})                                                      // 1467
 */                                                                                                                    // 1468
function Group(options) {                                                                                              // 1469
    Surface.call(this, options);                                                                                       // 1470
    this._shouldRecalculateSize = false;                                                                               // 1471
    this._container = document.createDocumentFragment();                                                               // 1472
    this.context = new Context(this._container);                                                                       // 1473
    this.setContent(this._container);                                                                                  // 1474
    this._groupSize = [undefined, undefined];                                                                          // 1475
}                                                                                                                      // 1476
                                                                                                                       // 1477
/** @const */                                                                                                          // 1478
Group.SIZE_ZERO = [0, 0];                                                                                              // 1479
                                                                                                                       // 1480
Group.prototype = Object.create(Surface.prototype);                                                                    // 1481
Group.prototype.elementType = 'div';                                                                                   // 1482
Group.prototype.elementClass = 'famous-group';                                                                         // 1483
                                                                                                                       // 1484
/**                                                                                                                    // 1485
 * Add renderables to this component's render tree.                                                                    // 1486
 *                                                                                                                     // 1487
 * @method add                                                                                                         // 1488
 * @private                                                                                                            // 1489
 * @param {Object} obj renderable object                                                                               // 1490
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 1491
 */                                                                                                                    // 1492
Group.prototype.add = function add() {                                                                                 // 1493
    return this.context.add.apply(this.context, arguments);                                                            // 1494
};                                                                                                                     // 1495
                                                                                                                       // 1496
/**                                                                                                                    // 1497
 * Generate a render spec from the contents of this component.                                                         // 1498
 *                                                                                                                     // 1499
 * @private                                                                                                            // 1500
 * @method render                                                                                                      // 1501
 * @return {Number} Render spec for this component                                                                     // 1502
 */                                                                                                                    // 1503
Group.prototype.render = function render() {                                                                           // 1504
    return Surface.prototype.render.call(this);                                                                        // 1505
};                                                                                                                     // 1506
                                                                                                                       // 1507
/**                                                                                                                    // 1508
 * Place the document element this component manages into the document.                                                // 1509
 *                                                                                                                     // 1510
 * @private                                                                                                            // 1511
 * @method deploy                                                                                                      // 1512
 * @param {Node} target document parent of this container                                                              // 1513
 */                                                                                                                    // 1514
Group.prototype.deploy = function deploy(target) {                                                                     // 1515
    this.context.migrate(target);                                                                                      // 1516
};                                                                                                                     // 1517
                                                                                                                       // 1518
/**                                                                                                                    // 1519
 * Remove this component and contained content from the document                                                       // 1520
 *                                                                                                                     // 1521
 * @private                                                                                                            // 1522
 * @method recall                                                                                                      // 1523
 *                                                                                                                     // 1524
 * @param {Node} target node to which the component was deployed                                                       // 1525
 */                                                                                                                    // 1526
Group.prototype.recall = function recall(target) {                                                                     // 1527
    this._container = document.createDocumentFragment();                                                               // 1528
    this.context.migrate(this._container);                                                                             // 1529
};                                                                                                                     // 1530
                                                                                                                       // 1531
/**                                                                                                                    // 1532
 * Apply changes from this component to the corresponding document element.                                            // 1533
 *                                                                                                                     // 1534
 * @private                                                                                                            // 1535
 * @method commit                                                                                                      // 1536
 *                                                                                                                     // 1537
 * @param {Object} context update spec passed in from above in the render tree.                                        // 1538
 */                                                                                                                    // 1539
Group.prototype.commit = function commit(context) {                                                                    // 1540
    var transform = context.transform;                                                                                 // 1541
    var origin = context.origin;                                                                                       // 1542
    var opacity = context.opacity;                                                                                     // 1543
    var size = context.size;                                                                                           // 1544
    var result = Surface.prototype.commit.call(this, {                                                                 // 1545
        allocator: context.allocator,                                                                                  // 1546
        transform: Transform.thenMove(transform, [-origin[0] * size[0], -origin[1] * size[1], 0]),                     // 1547
        opacity: opacity,                                                                                              // 1548
        origin: origin,                                                                                                // 1549
        size: Group.SIZE_ZERO                                                                                          // 1550
    });                                                                                                                // 1551
    if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {                                            // 1552
        this._groupSize[0] = size[0];                                                                                  // 1553
        this._groupSize[1] = size[1];                                                                                  // 1554
        this.context.setSize(size);                                                                                    // 1555
    }                                                                                                                  // 1556
    this.context.update({                                                                                              // 1557
        transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),                                 // 1558
        origin: origin,                                                                                                // 1559
        size: size                                                                                                     // 1560
    });                                                                                                                // 1561
    return result;                                                                                                     // 1562
};                                                                                                                     // 1563
                                                                                                                       // 1564
module.exports = Group;                                                                                                // 1565
},{"./Context":1,"./Surface":14,"./Transform":15}],9:[function(_dereq_,module,exports){                                // 1566
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1567
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1568
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1569
 *                                                                                                                     // 1570
 * Owner: mark@famo.us                                                                                                 // 1571
 * @license MPL 2.0                                                                                                    // 1572
 * @copyright Famous Industries, Inc. 2014                                                                             // 1573
 */                                                                                                                    // 1574
                                                                                                                       // 1575
var Transform = _dereq_('./Transform');                                                                                // 1576
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 1577
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 1578
                                                                                                                       // 1579
/**                                                                                                                    // 1580
 *                                                                                                                     // 1581
 *  A collection of visual changes to be                                                                               // 1582
 *    applied to another renderable component. This collection includes a                                              // 1583
 *    transform matrix, an opacity constant, a size, an origin specifier.                                              // 1584
 *    Modifier objects can be added to any RenderNode or object                                                        // 1585
 *    capable of displaying renderables.  The Modifier's children and descendants                                      // 1586
 *    are transformed by the amounts specified in the Modifier's properties.                                           // 1587
 *                                                                                                                     // 1588
 * @class Modifier                                                                                                     // 1589
 * @constructor                                                                                                        // 1590
 * @param {Object} [options] overrides of default options                                                              // 1591
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 1592
 * @param {Number} [options.opacity]                                                                                   // 1593
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 1594
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 1595
 */                                                                                                                    // 1596
function Modifier(options) {                                                                                           // 1597
    this._transformGetter = null;                                                                                      // 1598
    this._opacityGetter = null;                                                                                        // 1599
    this._originGetter = null;                                                                                         // 1600
    this._alignGetter = null;                                                                                          // 1601
    this._sizeGetter = null;                                                                                           // 1602
    this._proportionGetter = null;                                                                                     // 1603
                                                                                                                       // 1604
    /* TODO: remove this when deprecation complete */                                                                  // 1605
    this._legacyStates = {};                                                                                           // 1606
                                                                                                                       // 1607
    this._output = {                                                                                                   // 1608
        transform: Transform.identity,                                                                                 // 1609
        opacity: 1,                                                                                                    // 1610
        origin: null,                                                                                                  // 1611
        align: null,                                                                                                   // 1612
        size: null,                                                                                                    // 1613
        proportions: null,                                                                                             // 1614
        target: null                                                                                                   // 1615
    };                                                                                                                 // 1616
                                                                                                                       // 1617
    if (options) {                                                                                                     // 1618
        if (options.transform) this.transformFrom(options.transform);                                                  // 1619
        if (options.opacity !== undefined) this.opacityFrom(options.opacity);                                          // 1620
        if (options.origin) this.originFrom(options.origin);                                                           // 1621
        if (options.align) this.alignFrom(options.align);                                                              // 1622
        if (options.size) this.sizeFrom(options.size);                                                                 // 1623
        if (options.proportions) this.proportionsFrom(options.proportions);                                            // 1624
    }                                                                                                                  // 1625
}                                                                                                                      // 1626
                                                                                                                       // 1627
/**                                                                                                                    // 1628
 * Function, object, or static transform matrix which provides the transform.                                          // 1629
 *   This is evaluated on every tick of the engine.                                                                    // 1630
 *                                                                                                                     // 1631
 * @method transformFrom                                                                                               // 1632
 *                                                                                                                     // 1633
 * @param {Object} transform transform provider object                                                                 // 1634
 * @return {Modifier} this                                                                                             // 1635
 */                                                                                                                    // 1636
Modifier.prototype.transformFrom = function transformFrom(transform) {                                                 // 1637
    if (transform instanceof Function) this._transformGetter = transform;                                              // 1638
    else if (transform instanceof Object && transform.get) this._transformGetter = transform.get.bind(transform);      // 1639
    else {                                                                                                             // 1640
        this._transformGetter = null;                                                                                  // 1641
        this._output.transform = transform;                                                                            // 1642
    }                                                                                                                  // 1643
    return this;                                                                                                       // 1644
};                                                                                                                     // 1645
                                                                                                                       // 1646
/**                                                                                                                    // 1647
 * Set function, object, or number to provide opacity, in range [0,1].                                                 // 1648
 *                                                                                                                     // 1649
 * @method opacityFrom                                                                                                 // 1650
 *                                                                                                                     // 1651
 * @param {Object} opacity provider object                                                                             // 1652
 * @return {Modifier} this                                                                                             // 1653
 */                                                                                                                    // 1654
Modifier.prototype.opacityFrom = function opacityFrom(opacity) {                                                       // 1655
    if (opacity instanceof Function) this._opacityGetter = opacity;                                                    // 1656
    else if (opacity instanceof Object && opacity.get) this._opacityGetter = opacity.get.bind(opacity);                // 1657
    else {                                                                                                             // 1658
        this._opacityGetter = null;                                                                                    // 1659
        this._output.opacity = opacity;                                                                                // 1660
    }                                                                                                                  // 1661
    return this;                                                                                                       // 1662
};                                                                                                                     // 1663
                                                                                                                       // 1664
/**                                                                                                                    // 1665
 * Set function, object, or numerical array to provide origin, as [x,y],                                               // 1666
 *   where x and y are in the range [0,1].                                                                             // 1667
 *                                                                                                                     // 1668
 * @method originFrom                                                                                                  // 1669
 *                                                                                                                     // 1670
 * @param {Object} origin provider object                                                                              // 1671
 * @return {Modifier} this                                                                                             // 1672
 */                                                                                                                    // 1673
Modifier.prototype.originFrom = function originFrom(origin) {                                                          // 1674
    if (origin instanceof Function) this._originGetter = origin;                                                       // 1675
    else if (origin instanceof Object && origin.get) this._originGetter = origin.get.bind(origin);                     // 1676
    else {                                                                                                             // 1677
        this._originGetter = null;                                                                                     // 1678
        this._output.origin = origin;                                                                                  // 1679
    }                                                                                                                  // 1680
    return this;                                                                                                       // 1681
};                                                                                                                     // 1682
                                                                                                                       // 1683
/**                                                                                                                    // 1684
 * Set function, object, or numerical array to provide align, as [x,y],                                                // 1685
 *   where x and y are in the range [0,1].                                                                             // 1686
 *                                                                                                                     // 1687
 * @method alignFrom                                                                                                   // 1688
 *                                                                                                                     // 1689
 * @param {Object} align provider object                                                                               // 1690
 * @return {Modifier} this                                                                                             // 1691
 */                                                                                                                    // 1692
Modifier.prototype.alignFrom = function alignFrom(align) {                                                             // 1693
    if (align instanceof Function) this._alignGetter = align;                                                          // 1694
    else if (align instanceof Object && align.get) this._alignGetter = align.get.bind(align);                          // 1695
    else {                                                                                                             // 1696
        this._alignGetter = null;                                                                                      // 1697
        this._output.align = align;                                                                                    // 1698
    }                                                                                                                  // 1699
    return this;                                                                                                       // 1700
};                                                                                                                     // 1701
                                                                                                                       // 1702
/**                                                                                                                    // 1703
 * Set function, object, or numerical array to provide size, as [width, height].                                       // 1704
 *                                                                                                                     // 1705
 * @method sizeFrom                                                                                                    // 1706
 *                                                                                                                     // 1707
 * @param {Object} size provider object                                                                                // 1708
 * @return {Modifier} this                                                                                             // 1709
 */                                                                                                                    // 1710
Modifier.prototype.sizeFrom = function sizeFrom(size) {                                                                // 1711
    if (size instanceof Function) this._sizeGetter = size;                                                             // 1712
    else if (size instanceof Object && size.get) this._sizeGetter = size.get.bind(size);                               // 1713
    else {                                                                                                             // 1714
        this._sizeGetter = null;                                                                                       // 1715
        this._output.size = size;                                                                                      // 1716
    }                                                                                                                  // 1717
    return this;                                                                                                       // 1718
};                                                                                                                     // 1719
                                                                                                                       // 1720
/**                                                                                                                    // 1721
 * Set function, object, or numerical array to provide proportions, as [percent of width, percent of height].          // 1722
 *                                                                                                                     // 1723
 * @method proportionsFrom                                                                                             // 1724
 *                                                                                                                     // 1725
 * @param {Object} proportions provider object                                                                         // 1726
 * @return {Modifier} this                                                                                             // 1727
 */                                                                                                                    // 1728
Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {                                           // 1729
    if (proportions instanceof Function) this._proportionGetter = proportions;                                         // 1730
    else if (proportions instanceof Object && proportions.get) this._proportionGetter = proportions.get.bind(proportions);
    else {                                                                                                             // 1732
        this._proportionGetter = null;                                                                                 // 1733
        this._output.proportions = proportions;                                                                        // 1734
    }                                                                                                                  // 1735
    return this;                                                                                                       // 1736
};                                                                                                                     // 1737
                                                                                                                       // 1738
 /**                                                                                                                   // 1739
 * Deprecated: Prefer transformFrom with static Transform, or use a TransitionableTransform.                           // 1740
 * @deprecated                                                                                                         // 1741
 * @method setTransform                                                                                                // 1742
 *                                                                                                                     // 1743
 * @param {Transform} transform Transform to transition to                                                             // 1744
 * @param {Transitionable} transition Valid transitionable object                                                      // 1745
 * @param {Function} callback callback to call after transition completes                                              // 1746
 * @return {Modifier} this                                                                                             // 1747
 */                                                                                                                    // 1748
Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {                             // 1749
    if (transition || this._legacyStates.transform) {                                                                  // 1750
        if (!this._legacyStates.transform) {                                                                           // 1751
            this._legacyStates.transform = new TransitionableTransform(this._output.transform);                        // 1752
        }                                                                                                              // 1753
        if (!this._transformGetter) this.transformFrom(this._legacyStates.transform);                                  // 1754
                                                                                                                       // 1755
        this._legacyStates.transform.set(transform, transition, callback);                                             // 1756
        return this;                                                                                                   // 1757
    }                                                                                                                  // 1758
    else return this.transformFrom(transform);                                                                         // 1759
};                                                                                                                     // 1760
                                                                                                                       // 1761
/**                                                                                                                    // 1762
 * Deprecated: Prefer opacityFrom with static opacity array, or use a Transitionable with that opacity.                // 1763
 * @deprecated                                                                                                         // 1764
 * @method setOpacity                                                                                                  // 1765
 *                                                                                                                     // 1766
 * @param {Number} opacity Opacity value to transition to.                                                             // 1767
 * @param {Transitionable} transition Valid transitionable object                                                      // 1768
 * @param {Function} callback callback to call after transition completes                                              // 1769
 * @return {Modifier} this                                                                                             // 1770
 */                                                                                                                    // 1771
Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                                   // 1772
    if (transition || this._legacyStates.opacity) {                                                                    // 1773
        if (!this._legacyStates.opacity) {                                                                             // 1774
            this._legacyStates.opacity = new Transitionable(this._output.opacity);                                     // 1775
        }                                                                                                              // 1776
        if (!this._opacityGetter) this.opacityFrom(this._legacyStates.opacity);                                        // 1777
                                                                                                                       // 1778
        return this._legacyStates.opacity.set(opacity, transition, callback);                                          // 1779
    }                                                                                                                  // 1780
    else return this.opacityFrom(opacity);                                                                             // 1781
};                                                                                                                     // 1782
                                                                                                                       // 1783
/**                                                                                                                    // 1784
 * Deprecated: Prefer originFrom with static origin array, or use a Transitionable with that origin.                   // 1785
 * @deprecated                                                                                                         // 1786
 * @method setOrigin                                                                                                   // 1787
 *                                                                                                                     // 1788
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 1789
 * @param {Transitionable} transition Valid transitionable object                                                      // 1790
 * @param {Function} callback callback to call after transition completes                                              // 1791
 * @return {Modifier} this                                                                                             // 1792
 */                                                                                                                    // 1793
Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                      // 1794
    /* TODO: remove this if statement when deprecation complete */                                                     // 1795
    if (transition || this._legacyStates.origin) {                                                                     // 1796
                                                                                                                       // 1797
        if (!this._legacyStates.origin) {                                                                              // 1798
            this._legacyStates.origin = new Transitionable(this._output.origin || [0, 0]);                             // 1799
        }                                                                                                              // 1800
        if (!this._originGetter) this.originFrom(this._legacyStates.origin);                                           // 1801
                                                                                                                       // 1802
        this._legacyStates.origin.set(origin, transition, callback);                                                   // 1803
        return this;                                                                                                   // 1804
    }                                                                                                                  // 1805
    else return this.originFrom(origin);                                                                               // 1806
};                                                                                                                     // 1807
                                                                                                                       // 1808
/**                                                                                                                    // 1809
 * Deprecated: Prefer alignFrom with static align array, or use a Transitionable with that align.                      // 1810
 * @deprecated                                                                                                         // 1811
 * @method setAlign                                                                                                    // 1812
 *                                                                                                                     // 1813
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 1814
 * @param {Transitionable} transition Valid transitionable object                                                      // 1815
 * @param {Function} callback callback to call after transition completes                                              // 1816
 * @return {Modifier} this                                                                                             // 1817
 */                                                                                                                    // 1818
Modifier.prototype.setAlign = function setAlign(align, transition, callback) {                                         // 1819
    /* TODO: remove this if statement when deprecation complete */                                                     // 1820
    if (transition || this._legacyStates.align) {                                                                      // 1821
                                                                                                                       // 1822
        if (!this._legacyStates.align) {                                                                               // 1823
            this._legacyStates.align = new Transitionable(this._output.align || [0, 0]);                               // 1824
        }                                                                                                              // 1825
        if (!this._alignGetter) this.alignFrom(this._legacyStates.align);                                              // 1826
                                                                                                                       // 1827
        this._legacyStates.align.set(align, transition, callback);                                                     // 1828
        return this;                                                                                                   // 1829
    }                                                                                                                  // 1830
    else return this.alignFrom(align);                                                                                 // 1831
};                                                                                                                     // 1832
                                                                                                                       // 1833
/**                                                                                                                    // 1834
 * Deprecated: Prefer sizeFrom with static origin array, or use a Transitionable with that size.                       // 1835
 * @deprecated                                                                                                         // 1836
 * @method setSize                                                                                                     // 1837
 * @param {Array.Number} size two element array of [width, height]                                                     // 1838
 * @param {Transitionable} transition Valid transitionable object                                                      // 1839
 * @param {Function} callback callback to call after transition completes                                              // 1840
 * @return {Modifier} this                                                                                             // 1841
 */                                                                                                                    // 1842
Modifier.prototype.setSize = function setSize(size, transition, callback) {                                            // 1843
    if (size && (transition || this._legacyStates.size)) {                                                             // 1844
        if (!this._legacyStates.size) {                                                                                // 1845
            this._legacyStates.size = new Transitionable(this._output.size || [0, 0]);                                 // 1846
        }                                                                                                              // 1847
        if (!this._sizeGetter) this.sizeFrom(this._legacyStates.size);                                                 // 1848
                                                                                                                       // 1849
        this._legacyStates.size.set(size, transition, callback);                                                       // 1850
        return this;                                                                                                   // 1851
    }                                                                                                                  // 1852
    else return this.sizeFrom(size);                                                                                   // 1853
};                                                                                                                     // 1854
                                                                                                                       // 1855
/**                                                                                                                    // 1856
 * Deprecated: Prefer proportionsFrom with static origin array, or use a Transitionable with those proportions.        // 1857
 * @deprecated                                                                                                         // 1858
 * @method setProportions                                                                                              // 1859
 * @param {Array.Number} proportions two element array of [percent of width, percent of height]                        // 1860
 * @param {Transitionable} transition Valid transitionable object                                                      // 1861
 * @param {Function} callback callback to call after transition completes                                              // 1862
 * @return {Modifier} this                                                                                             // 1863
 */                                                                                                                    // 1864
Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {                       // 1865
    if (proportions && (transition || this._legacyStates.proportions)) {                                               // 1866
        if (!this._legacyStates.proportions) {                                                                         // 1867
            this._legacyStates.proportions = new Transitionable(this._output.proportions || [0, 0]);                   // 1868
        }                                                                                                              // 1869
        if (!this._proportionGetter) this.proportionsFrom(this._legacyStates.proportions);                             // 1870
                                                                                                                       // 1871
        this._legacyStates.proportions.set(proportions, transition, callback);                                         // 1872
        return this;                                                                                                   // 1873
    }                                                                                                                  // 1874
    else return this.proportionsFrom(proportions);                                                                     // 1875
};                                                                                                                     // 1876
                                                                                                                       // 1877
/**                                                                                                                    // 1878
 * Deprecated: Prefer to stop transform in your provider object.                                                       // 1879
 * @deprecated                                                                                                         // 1880
 * @method halt                                                                                                        // 1881
 */                                                                                                                    // 1882
Modifier.prototype.halt = function halt() {                                                                            // 1883
    if (this._legacyStates.transform) this._legacyStates.transform.halt();                                             // 1884
    if (this._legacyStates.opacity) this._legacyStates.opacity.halt();                                                 // 1885
    if (this._legacyStates.origin) this._legacyStates.origin.halt();                                                   // 1886
    if (this._legacyStates.align) this._legacyStates.align.halt();                                                     // 1887
    if (this._legacyStates.size) this._legacyStates.size.halt();                                                       // 1888
    if (this._legacyStates.proportions) this._legacyStates.proportions.halt();                                         // 1889
    this._transformGetter = null;                                                                                      // 1890
    this._opacityGetter = null;                                                                                        // 1891
    this._originGetter = null;                                                                                         // 1892
    this._alignGetter = null;                                                                                          // 1893
    this._sizeGetter = null;                                                                                           // 1894
    this._proportionGetter = null;                                                                                     // 1895
};                                                                                                                     // 1896
                                                                                                                       // 1897
/**                                                                                                                    // 1898
 * Deprecated: Prefer to use your provided transform or output of your transform provider.                             // 1899
 * @deprecated                                                                                                         // 1900
 * @method getTransform                                                                                                // 1901
 * @return {Object} transform provider object                                                                          // 1902
 */                                                                                                                    // 1903
Modifier.prototype.getTransform = function getTransform() {                                                            // 1904
    return this._transformGetter();                                                                                    // 1905
};                                                                                                                     // 1906
                                                                                                                       // 1907
/**                                                                                                                    // 1908
 * Deprecated: Prefer to determine the end state of your transform from your transform provider                        // 1909
 * @deprecated                                                                                                         // 1910
 * @method getFinalTransform                                                                                           // 1911
 * @return {Transform} transform matrix                                                                                // 1912
 */                                                                                                                    // 1913
Modifier.prototype.getFinalTransform = function getFinalTransform() {                                                  // 1914
    return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;            // 1915
};                                                                                                                     // 1916
                                                                                                                       // 1917
/**                                                                                                                    // 1918
 * Deprecated: Prefer to use your provided opacity or output of your opacity provider.                                 // 1919
 * @deprecated                                                                                                         // 1920
 * @method getOpacity                                                                                                  // 1921
 * @return {Object} opacity provider object                                                                            // 1922
 */                                                                                                                    // 1923
Modifier.prototype.getOpacity = function getOpacity() {                                                                // 1924
    return this._opacityGetter();                                                                                      // 1925
};                                                                                                                     // 1926
                                                                                                                       // 1927
/**                                                                                                                    // 1928
 * Deprecated: Prefer to use your provided origin or output of your origin provider.                                   // 1929
 * @deprecated                                                                                                         // 1930
 * @method getOrigin                                                                                                   // 1931
 * @return {Object} origin provider object                                                                             // 1932
 */                                                                                                                    // 1933
Modifier.prototype.getOrigin = function getOrigin() {                                                                  // 1934
    return this._originGetter();                                                                                       // 1935
};                                                                                                                     // 1936
                                                                                                                       // 1937
/**                                                                                                                    // 1938
 * Deprecated: Prefer to use your provided align or output of your align provider.                                     // 1939
 * @deprecated                                                                                                         // 1940
 * @method getAlign                                                                                                    // 1941
 * @return {Object} align provider object                                                                              // 1942
 */                                                                                                                    // 1943
Modifier.prototype.getAlign = function getAlign() {                                                                    // 1944
    return this._alignGetter();                                                                                        // 1945
};                                                                                                                     // 1946
                                                                                                                       // 1947
/**                                                                                                                    // 1948
 * Deprecated: Prefer to use your provided size or output of your size provider.                                       // 1949
 * @deprecated                                                                                                         // 1950
 * @method getSize                                                                                                     // 1951
 * @return {Object} size provider object                                                                               // 1952
 */                                                                                                                    // 1953
Modifier.prototype.getSize = function getSize() {                                                                      // 1954
    return this._sizeGetter ? this._sizeGetter() : this._output.size;                                                  // 1955
};                                                                                                                     // 1956
                                                                                                                       // 1957
/**                                                                                                                    // 1958
 * Deprecated: Prefer to use your provided proportions or output of your proportions provider.                         // 1959
 * @deprecated                                                                                                         // 1960
 * @method getProportions                                                                                              // 1961
 * @return {Object} proportions provider object                                                                        // 1962
 */                                                                                                                    // 1963
Modifier.prototype.getProportions = function getProportions() {                                                        // 1964
    return this._proportionGetter ? this._proportionGetter() : this._output.proportions;                               // 1965
};                                                                                                                     // 1966
                                                                                                                       // 1967
// call providers on tick to receive render spec elements to apply                                                     // 1968
function _update() {                                                                                                   // 1969
    if (this._transformGetter) this._output.transform = this._transformGetter();                                       // 1970
    if (this._opacityGetter) this._output.opacity = this._opacityGetter();                                             // 1971
    if (this._originGetter) this._output.origin = this._originGetter();                                                // 1972
    if (this._alignGetter) this._output.align = this._alignGetter();                                                   // 1973
    if (this._sizeGetter) this._output.size = this._sizeGetter();                                                      // 1974
    if (this._proportionGetter) this._output.proportions = this._proportionGetter();                                   // 1975
}                                                                                                                      // 1976
                                                                                                                       // 1977
/**                                                                                                                    // 1978
 * Return render spec for this Modifier, applying to the provided                                                      // 1979
 *    target component.  This is similar to render() for Surfaces.                                                     // 1980
 *                                                                                                                     // 1981
 * @private                                                                                                            // 1982
 * @method modify                                                                                                      // 1983
 *                                                                                                                     // 1984
 * @param {Object} target (already rendered) render spec to                                                            // 1985
 *    which to apply the transform.                                                                                    // 1986
 * @return {Object} render spec for this Modifier, including the                                                       // 1987
 *    provided target                                                                                                  // 1988
 */                                                                                                                    // 1989
Modifier.prototype.modify = function modify(target) {                                                                  // 1990
    _update.call(this);                                                                                                // 1991
    this._output.target = target;                                                                                      // 1992
    return this._output;                                                                                               // 1993
};                                                                                                                     // 1994
                                                                                                                       // 1995
module.exports = Modifier;                                                                                             // 1996
},{"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89,"./Transform":15}],10:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1998
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1999
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2000
 *                                                                                                                     // 2001
 * Owner: mark@famo.us                                                                                                 // 2002
 * @license MPL 2.0                                                                                                    // 2003
 * @copyright Famous Industries, Inc. 2014                                                                             // 2004
 */                                                                                                                    // 2005
                                                                                                                       // 2006
var EventHandler = _dereq_('./EventHandler');                                                                          // 2007
                                                                                                                       // 2008
/**                                                                                                                    // 2009
 *  A collection of methods for setting options which can be extended                                                  // 2010
 *  onto other classes.                                                                                                // 2011
 *                                                                                                                     // 2012
 *                                                                                                                     // 2013
 *  **** WARNING ****                                                                                                  // 2014
 *  You can only pass through objects that will compile into valid JSON.                                               // 2015
 *                                                                                                                     // 2016
 *  Valid options:                                                                                                     // 2017
 *      Strings,                                                                                                       // 2018
 *      Arrays,                                                                                                        // 2019
 *      Objects,                                                                                                       // 2020
 *      Numbers,                                                                                                       // 2021
 *      Nested Objects,                                                                                                // 2022
 *      Nested Arrays.                                                                                                 // 2023
 *                                                                                                                     // 2024
 *    This excludes:                                                                                                   // 2025
 *        Document Fragments,                                                                                          // 2026
 *        Functions                                                                                                    // 2027
 * @class OptionsManager                                                                                               // 2028
 * @constructor                                                                                                        // 2029
 * @param {Object} value options dictionary                                                                            // 2030
 */                                                                                                                    // 2031
function OptionsManager(value) {                                                                                       // 2032
    this._value = value;                                                                                               // 2033
    this.eventOutput = null;                                                                                           // 2034
}                                                                                                                      // 2035
                                                                                                                       // 2036
/**                                                                                                                    // 2037
 * Create options manager from source dictionary with arguments overriden by patch dictionary.                         // 2038
 *                                                                                                                     // 2039
 * @static                                                                                                             // 2040
 * @method OptionsManager.patch                                                                                        // 2041
 *                                                                                                                     // 2042
 * @param {Object} source source arguments                                                                             // 2043
 * @param {...Object} data argument additions and overwrites                                                           // 2044
 * @return {Object} source object                                                                                      // 2045
 */                                                                                                                    // 2046
OptionsManager.patch = function patchObject(source, data) {                                                            // 2047
    var manager = new OptionsManager(source);                                                                          // 2048
    for (var i = 1; i < arguments.length; i++) manager.patch(arguments[i]);                                            // 2049
    return source;                                                                                                     // 2050
};                                                                                                                     // 2051
                                                                                                                       // 2052
function _createEventOutput() {                                                                                        // 2053
    this.eventOutput = new EventHandler();                                                                             // 2054
    this.eventOutput.bindThis(this);                                                                                   // 2055
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 2056
}                                                                                                                      // 2057
                                                                                                                       // 2058
/**                                                                                                                    // 2059
 * Create OptionsManager from source with arguments overriden by patches.                                              // 2060
 *   Triggers 'change' event on this object's event handler if the state of                                            // 2061
 *   the OptionsManager changes as a result.                                                                           // 2062
 *                                                                                                                     // 2063
 * @method patch                                                                                                       // 2064
 *                                                                                                                     // 2065
 * @param {...Object} arguments list of patch objects                                                                  // 2066
 * @return {OptionsManager} this                                                                                       // 2067
 */                                                                                                                    // 2068
OptionsManager.prototype.patch = function patch() {                                                                    // 2069
    var myState = this._value;                                                                                         // 2070
    for (var i = 0; i < arguments.length; i++) {                                                                       // 2071
        var data = arguments[i];                                                                                       // 2072
        for (var k in data) {                                                                                          // 2073
            if ((k in myState) && (data[k] && data[k].constructor === Object) && (myState[k] && myState[k].constructor === Object)) {
                if (!myState.hasOwnProperty(k)) myState[k] = Object.create(myState[k]);                                // 2075
                this.key(k).patch(data[k]);                                                                            // 2076
                if (this.eventOutput) this.eventOutput.emit('change', {id: k, value: this.key(k).value()});            // 2077
            }                                                                                                          // 2078
            else this.set(k, data[k]);                                                                                 // 2079
        }                                                                                                              // 2080
    }                                                                                                                  // 2081
    return this;                                                                                                       // 2082
};                                                                                                                     // 2083
                                                                                                                       // 2084
/**                                                                                                                    // 2085
 * Alias for patch                                                                                                     // 2086
 *                                                                                                                     // 2087
 * @method setOptions                                                                                                  // 2088
 *                                                                                                                     // 2089
 */                                                                                                                    // 2090
OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;                                                  // 2091
                                                                                                                       // 2092
/**                                                                                                                    // 2093
 * Return OptionsManager based on sub-object retrieved by key                                                          // 2094
 *                                                                                                                     // 2095
 * @method key                                                                                                         // 2096
 *                                                                                                                     // 2097
 * @param {string} identifier key                                                                                      // 2098
 * @return {OptionsManager} new options manager with the value                                                         // 2099
 */                                                                                                                    // 2100
OptionsManager.prototype.key = function key(identifier) {                                                              // 2101
    var result = new OptionsManager(this._value[identifier]);                                                          // 2102
    if (!(result._value instanceof Object) || result._value instanceof Array) result._value = {};                      // 2103
    return result;                                                                                                     // 2104
};                                                                                                                     // 2105
                                                                                                                       // 2106
/**                                                                                                                    // 2107
 * Look up value by key or get the full options hash                                                                   // 2108
 * @method get                                                                                                         // 2109
 *                                                                                                                     // 2110
 * @param {string} key key                                                                                             // 2111
 * @return {Object} associated object or full options hash                                                             // 2112
 */                                                                                                                    // 2113
OptionsManager.prototype.get = function get(key) {                                                                     // 2114
    return key ? this._value[key] : this._value;                                                                       // 2115
};                                                                                                                     // 2116
                                                                                                                       // 2117
/**                                                                                                                    // 2118
 * Alias for get                                                                                                       // 2119
 * @method getOptions                                                                                                  // 2120
 */                                                                                                                    // 2121
OptionsManager.prototype.getOptions = OptionsManager.prototype.get;                                                    // 2122
                                                                                                                       // 2123
/**                                                                                                                    // 2124
 * Set key to value.  Outputs 'change' event if a value is overwritten.                                                // 2125
 *                                                                                                                     // 2126
 * @method set                                                                                                         // 2127
 *                                                                                                                     // 2128
 * @param {string} key key string                                                                                      // 2129
 * @param {Object} value value object                                                                                  // 2130
 * @return {OptionsManager} new options manager based on the value object                                              // 2131
 */                                                                                                                    // 2132
OptionsManager.prototype.set = function set(key, value) {                                                              // 2133
    var originalValue = this.get(key);                                                                                 // 2134
    this._value[key] = value;                                                                                          // 2135
    if (this.eventOutput && value !== originalValue) this.eventOutput.emit('change', {id: key, value: value});         // 2136
    return this;                                                                                                       // 2137
};                                                                                                                     // 2138
                                                                                                                       // 2139
/**                                                                                                                    // 2140
 * Bind a callback function to an event type handled by this object.                                                   // 2141
 *                                                                                                                     // 2142
 * @method "on"                                                                                                        // 2143
 *                                                                                                                     // 2144
 * @param {string} type event type key (for example, 'change')                                                         // 2145
 * @param {function(string, Object)} handler callback                                                                  // 2146
 * @return {EventHandler} this                                                                                         // 2147
 */                                                                                                                    // 2148
OptionsManager.prototype.on = function on() {                                                                          // 2149
    _createEventOutput.call(this);                                                                                     // 2150
    return this.on.apply(this, arguments);                                                                             // 2151
};                                                                                                                     // 2152
                                                                                                                       // 2153
/**                                                                                                                    // 2154
 * Unbind an event by type and handler.                                                                                // 2155
 *   This undoes the work of "on".                                                                                     // 2156
 *                                                                                                                     // 2157
 * @method removeListener                                                                                              // 2158
 *                                                                                                                     // 2159
 * @param {string} type event type key (for example, 'change')                                                         // 2160
 * @param {function} handler function object to remove                                                                 // 2161
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 2162
 */                                                                                                                    // 2163
OptionsManager.prototype.removeListener = function removeListener() {                                                  // 2164
    _createEventOutput.call(this);                                                                                     // 2165
    return this.removeListener.apply(this, arguments);                                                                 // 2166
};                                                                                                                     // 2167
                                                                                                                       // 2168
/**                                                                                                                    // 2169
 * Add event handler object to set of downstream handlers.                                                             // 2170
 *                                                                                                                     // 2171
 * @method pipe                                                                                                        // 2172
 *                                                                                                                     // 2173
 * @param {EventHandler} target event handler target object                                                            // 2174
 * @return {EventHandler} passed event handler                                                                         // 2175
 */                                                                                                                    // 2176
OptionsManager.prototype.pipe = function pipe() {                                                                      // 2177
    _createEventOutput.call(this);                                                                                     // 2178
    return this.pipe.apply(this, arguments);                                                                           // 2179
};                                                                                                                     // 2180
                                                                                                                       // 2181
/**                                                                                                                    // 2182
 * Remove handler object from set of downstream handlers.                                                              // 2183
 * Undoes work of "pipe"                                                                                               // 2184
 *                                                                                                                     // 2185
 * @method unpipe                                                                                                      // 2186
 *                                                                                                                     // 2187
 * @param {EventHandler} target target handler object                                                                  // 2188
 * @return {EventHandler} provided target                                                                              // 2189
 */                                                                                                                    // 2190
OptionsManager.prototype.unpipe = function unpipe() {                                                                  // 2191
    _createEventOutput.call(this);                                                                                     // 2192
    return this.unpipe.apply(this, arguments);                                                                         // 2193
};                                                                                                                     // 2194
                                                                                                                       // 2195
module.exports = OptionsManager;                                                                                       // 2196
},{"./EventHandler":7}],11:[function(_dereq_,module,exports){                                                          // 2197
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2198
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2199
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2200
 *                                                                                                                     // 2201
 * Owner: mark@famo.us                                                                                                 // 2202
 * @license MPL 2.0                                                                                                    // 2203
 * @copyright Famous Industries, Inc. 2014                                                                             // 2204
 */                                                                                                                    // 2205
                                                                                                                       // 2206
var Entity = _dereq_('./Entity');                                                                                      // 2207
var SpecParser = _dereq_('./SpecParser');                                                                              // 2208
                                                                                                                       // 2209
/**                                                                                                                    // 2210
 * A wrapper for inserting a renderable component (like a Modifer or                                                   // 2211
 *   Surface) into the render tree.                                                                                    // 2212
 *                                                                                                                     // 2213
 * @class RenderNode                                                                                                   // 2214
 * @constructor                                                                                                        // 2215
 *                                                                                                                     // 2216
 * @param {Object} object Target renderable component                                                                  // 2217
 */                                                                                                                    // 2218
function RenderNode(object) {                                                                                          // 2219
    this._object = null;                                                                                               // 2220
    this._child = null;                                                                                                // 2221
    this._hasMultipleChildren = false;                                                                                 // 2222
    this._isRenderable = false;                                                                                        // 2223
    this._isModifier = false;                                                                                          // 2224
                                                                                                                       // 2225
    this._resultCache = {};                                                                                            // 2226
    this._prevResults = {};                                                                                            // 2227
                                                                                                                       // 2228
    this._childResult = null;                                                                                          // 2229
                                                                                                                       // 2230
    if (object) this.set(object);                                                                                      // 2231
}                                                                                                                      // 2232
                                                                                                                       // 2233
/**                                                                                                                    // 2234
 * Append a renderable to the list of this node's children.                                                            // 2235
 *   This produces a new RenderNode in the tree.                                                                       // 2236
 *   Note: Does not double-wrap if child is a RenderNode already.                                                      // 2237
 *                                                                                                                     // 2238
 * @method add                                                                                                         // 2239
 * @param {Object} child renderable object                                                                             // 2240
 * @return {RenderNode} new render node wrapping child                                                                 // 2241
 */                                                                                                                    // 2242
RenderNode.prototype.add = function add(child) {                                                                       // 2243
    var childNode = (child instanceof RenderNode) ? child : new RenderNode(child);                                     // 2244
    if (this._child instanceof Array) this._child.push(childNode);                                                     // 2245
    else if (this._child) {                                                                                            // 2246
        this._child = [this._child, childNode];                                                                        // 2247
        this._hasMultipleChildren = true;                                                                              // 2248
        this._childResult = []; // to be used later                                                                    // 2249
    }                                                                                                                  // 2250
    else this._child = childNode;                                                                                      // 2251
                                                                                                                       // 2252
    return childNode;                                                                                                  // 2253
};                                                                                                                     // 2254
                                                                                                                       // 2255
/**                                                                                                                    // 2256
 * Return the single wrapped object.  Returns null if this node has multiple child nodes.                              // 2257
 *                                                                                                                     // 2258
 * @method get                                                                                                         // 2259
 *                                                                                                                     // 2260
 * @return {Ojbect} contained renderable object                                                                        // 2261
 */                                                                                                                    // 2262
RenderNode.prototype.get = function get() {                                                                            // 2263
    return this._object || (this._hasMultipleChildren ? null : (this._child ? this._child.get() : null));              // 2264
};                                                                                                                     // 2265
                                                                                                                       // 2266
/**                                                                                                                    // 2267
 * Overwrite the list of children to contain the single provided object                                                // 2268
 *                                                                                                                     // 2269
 * @method set                                                                                                         // 2270
 * @param {Object} child renderable object                                                                             // 2271
 * @return {RenderNode} this render node, or child if it is a RenderNode                                               // 2272
 */                                                                                                                    // 2273
RenderNode.prototype.set = function set(child) {                                                                       // 2274
    this._childResult = null;                                                                                          // 2275
    this._hasMultipleChildren = false;                                                                                 // 2276
    this._isRenderable = child.render ? true : false;                                                                  // 2277
    this._isModifier = child.modify ? true : false;                                                                    // 2278
    this._object = child;                                                                                              // 2279
    this._child = null;                                                                                                // 2280
    if (child instanceof RenderNode) return child;                                                                     // 2281
    else return this;                                                                                                  // 2282
};                                                                                                                     // 2283
                                                                                                                       // 2284
/**                                                                                                                    // 2285
 * Get render size of contained object.                                                                                // 2286
 *                                                                                                                     // 2287
 * @method getSize                                                                                                     // 2288
 * @return {Array.Number} size of this or size of single child.                                                        // 2289
 */                                                                                                                    // 2290
RenderNode.prototype.getSize = function getSize() {                                                                    // 2291
    var result = null;                                                                                                 // 2292
    var target = this.get();                                                                                           // 2293
    if (target && target.getSize) result = target.getSize();                                                           // 2294
    if (!result && this._child && this._child.getSize) result = this._child.getSize();                                 // 2295
    return result;                                                                                                     // 2296
};                                                                                                                     // 2297
                                                                                                                       // 2298
// apply results of rendering this subtree to the document                                                             // 2299
function _applyCommit(spec, context, cacheStorage) {                                                                   // 2300
    var result = SpecParser.parse(spec, context);                                                                      // 2301
    var keys = Object.keys(result);                                                                                    // 2302
    for (var i = 0; i < keys.length; i++) {                                                                            // 2303
        var id = keys[i];                                                                                              // 2304
        var childNode = Entity.get(id);                                                                                // 2305
        var commitParams = result[id];                                                                                 // 2306
        commitParams.allocator = context.allocator;                                                                    // 2307
        var commitResult = childNode.commit(commitParams);                                                             // 2308
        if (commitResult) _applyCommit(commitResult, context, cacheStorage);                                           // 2309
        else cacheStorage[id] = commitParams;                                                                          // 2310
    }                                                                                                                  // 2311
}                                                                                                                      // 2312
                                                                                                                       // 2313
/**                                                                                                                    // 2314
 * Commit the content change from this node to the document.                                                           // 2315
 *                                                                                                                     // 2316
 * @private                                                                                                            // 2317
 * @method commit                                                                                                      // 2318
 * @param {Context} context render context                                                                             // 2319
 */                                                                                                                    // 2320
RenderNode.prototype.commit = function commit(context) {                                                               // 2321
    // free up some divs from the last loop                                                                            // 2322
    var prevKeys = Object.keys(this._prevResults);                                                                     // 2323
    for (var i = 0; i < prevKeys.length; i++) {                                                                        // 2324
        var id = prevKeys[i];                                                                                          // 2325
        if (this._resultCache[id] === undefined) {                                                                     // 2326
            var object = Entity.get(id);                                                                               // 2327
            if (object.cleanup) object.cleanup(context.allocator);                                                     // 2328
        }                                                                                                              // 2329
    }                                                                                                                  // 2330
                                                                                                                       // 2331
    this._prevResults = this._resultCache;                                                                             // 2332
    this._resultCache = {};                                                                                            // 2333
    _applyCommit(this.render(), context, this._resultCache);                                                           // 2334
};                                                                                                                     // 2335
                                                                                                                       // 2336
/**                                                                                                                    // 2337
 * Generate a render spec from the contents of the wrapped component.                                                  // 2338
 *                                                                                                                     // 2339
 * @private                                                                                                            // 2340
 * @method render                                                                                                      // 2341
 *                                                                                                                     // 2342
 * @return {Object} render specification for the component subtree                                                     // 2343
 *    only under this node.                                                                                            // 2344
 */                                                                                                                    // 2345
RenderNode.prototype.render = function render() {                                                                      // 2346
    if (this._isRenderable) return this._object.render();                                                              // 2347
                                                                                                                       // 2348
    var result = null;                                                                                                 // 2349
    if (this._hasMultipleChildren) {                                                                                   // 2350
        result = this._childResult;                                                                                    // 2351
        var children = this._child;                                                                                    // 2352
        for (var i = 0; i < children.length; i++) {                                                                    // 2353
            result[i] = children[i].render();                                                                          // 2354
        }                                                                                                              // 2355
    }                                                                                                                  // 2356
    else if (this._child) result = this._child.render();                                                               // 2357
                                                                                                                       // 2358
    return this._isModifier ? this._object.modify(result) : result;                                                    // 2359
};                                                                                                                     // 2360
                                                                                                                       // 2361
module.exports = RenderNode;                                                                                           // 2362
},{"./Entity":5,"./SpecParser":13}],12:[function(_dereq_,module,exports){                                              // 2363
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2364
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2365
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2366
 *                                                                                                                     // 2367
 * Owner: mark@famo.us                                                                                                 // 2368
 * @license MPL 2.0                                                                                                    // 2369
 * @copyright Famous Industries, Inc. 2014                                                                             // 2370
 */                                                                                                                    // 2371
                                                                                                                       // 2372
var Transform = _dereq_('./Transform');                                                                                // 2373
var Modifier = _dereq_('./Modifier');                                                                                  // 2374
var RenderNode = _dereq_('./RenderNode');                                                                              // 2375
                                                                                                                       // 2376
/**                                                                                                                    // 2377
 * Builds and renders a scene graph based on a declarative structure definition.                                       // 2378
 * See the Scene examples in the examples distribution (http://github.com/Famous/examples.git).                        // 2379
 *                                                                                                                     // 2380
 * @class Scene                                                                                                        // 2381
 * @constructor                                                                                                        // 2382
 * @param {Object|Array|Spec} definition in the format of a render spec.                                               // 2383
 */                                                                                                                    // 2384
function Scene(definition) {                                                                                           // 2385
    this.id = null;                                                                                                    // 2386
    this._objects = null;                                                                                              // 2387
                                                                                                                       // 2388
    this.node = new RenderNode();                                                                                      // 2389
    this._definition = null;                                                                                           // 2390
                                                                                                                       // 2391
    if (definition) this.load(definition);                                                                             // 2392
}                                                                                                                      // 2393
                                                                                                                       // 2394
var _MATRIX_GENERATORS = {                                                                                             // 2395
    'translate': Transform.translate,                                                                                  // 2396
    'rotate': Transform.rotate,                                                                                        // 2397
    'rotateX': Transform.rotateX,                                                                                      // 2398
    'rotateY': Transform.rotateY,                                                                                      // 2399
    'rotateZ': Transform.rotateZ,                                                                                      // 2400
    'rotateAxis': Transform.rotateAxis,                                                                                // 2401
    'scale': Transform.scale,                                                                                          // 2402
    'skew': Transform.skew,                                                                                            // 2403
    'matrix3d': function() {                                                                                           // 2404
        return arguments;                                                                                              // 2405
    }                                                                                                                  // 2406
};                                                                                                                     // 2407
                                                                                                                       // 2408
/**                                                                                                                    // 2409
 * Clone this scene                                                                                                    // 2410
 *                                                                                                                     // 2411
 * @method create                                                                                                      // 2412
 * @return {Scene} deep copy of this scene                                                                             // 2413
 */                                                                                                                    // 2414
Scene.prototype.create = function create() {                                                                           // 2415
    return new Scene(this._definition);                                                                                // 2416
};                                                                                                                     // 2417
                                                                                                                       // 2418
function _resolveTransformMatrix(matrixDefinition) {                                                                   // 2419
    for (var type in _MATRIX_GENERATORS) {                                                                             // 2420
        if (type in matrixDefinition) {                                                                                // 2421
            var args = matrixDefinition[type];                                                                         // 2422
            if (!(args instanceof Array)) args = [args];                                                               // 2423
            return _MATRIX_GENERATORS[type].apply(this, args);                                                         // 2424
        }                                                                                                              // 2425
    }                                                                                                                  // 2426
}                                                                                                                      // 2427
                                                                                                                       // 2428
// parse transform into tree of render nodes, doing matrix multiplication                                              // 2429
// when available                                                                                                      // 2430
function _parseTransform(definition) {                                                                                 // 2431
    var transformDefinition = definition.transform;                                                                    // 2432
    var opacity = definition.opacity;                                                                                  // 2433
    var origin = definition.origin;                                                                                    // 2434
    var align = definition.align;                                                                                      // 2435
    var size = definition.size;                                                                                        // 2436
    var transform = Transform.identity;                                                                                // 2437
    if (transformDefinition instanceof Array) {                                                                        // 2438
        if (transformDefinition.length === 16 && typeof transformDefinition[0] === 'number') {                         // 2439
            transform = transformDefinition;                                                                           // 2440
        }                                                                                                              // 2441
        else {                                                                                                         // 2442
            for (var i = 0; i < transformDefinition.length; i++) {                                                     // 2443
                transform = Transform.multiply(transform, _resolveTransformMatrix(transformDefinition[i]));            // 2444
            }                                                                                                          // 2445
        }                                                                                                              // 2446
    }                                                                                                                  // 2447
    else if (transformDefinition instanceof Function) {                                                                // 2448
        transform = transformDefinition;                                                                               // 2449
    }                                                                                                                  // 2450
    else if (transformDefinition instanceof Object) {                                                                  // 2451
        transform = _resolveTransformMatrix(transformDefinition);                                                      // 2452
    }                                                                                                                  // 2453
                                                                                                                       // 2454
    var result = new Modifier({                                                                                        // 2455
        transform: transform,                                                                                          // 2456
        opacity: opacity,                                                                                              // 2457
        origin: origin,                                                                                                // 2458
        align: align,                                                                                                  // 2459
        size: size                                                                                                     // 2460
    });                                                                                                                // 2461
    return result;                                                                                                     // 2462
}                                                                                                                      // 2463
                                                                                                                       // 2464
function _parseArray(definition) {                                                                                     // 2465
    var result = new RenderNode();                                                                                     // 2466
    for (var i = 0; i < definition.length; i++) {                                                                      // 2467
        var obj = _parse.call(this, definition[i]);                                                                    // 2468
        if (obj) result.add(obj);                                                                                      // 2469
    }                                                                                                                  // 2470
    return result;                                                                                                     // 2471
}                                                                                                                      // 2472
                                                                                                                       // 2473
// parse object directly into tree of RenderNodes                                                                      // 2474
function _parse(definition) {                                                                                          // 2475
    var result;                                                                                                        // 2476
    var id;                                                                                                            // 2477
    if (definition instanceof Array) {                                                                                 // 2478
        result = _parseArray.call(this, definition);                                                                   // 2479
    }                                                                                                                  // 2480
    else {                                                                                                             // 2481
        id = this._objects.length;                                                                                     // 2482
        if (definition.render && (definition.render instanceof Function)) {                                            // 2483
            result = definition;                                                                                       // 2484
        }                                                                                                              // 2485
        else if (definition.target) {                                                                                  // 2486
            var targetObj = _parse.call(this, definition.target);                                                      // 2487
            var obj = _parseTransform.call(this, definition);                                                          // 2488
                                                                                                                       // 2489
            result = new RenderNode(obj);                                                                              // 2490
            result.add(targetObj);                                                                                     // 2491
            if (definition.id) this.id[definition.id] = obj;                                                           // 2492
        }                                                                                                              // 2493
        else if (definition.id) {                                                                                      // 2494
            result = new RenderNode();                                                                                 // 2495
            this.id[definition.id] = result;                                                                           // 2496
        }                                                                                                              // 2497
    }                                                                                                                  // 2498
    this._objects[id] = result;                                                                                        // 2499
    return result;                                                                                                     // 2500
}                                                                                                                      // 2501
                                                                                                                       // 2502
/**                                                                                                                    // 2503
 * Builds and renders a scene graph based on a canonical declarative scene definition.                                 // 2504
 * See examples/Scene/example.js.                                                                                      // 2505
 *                                                                                                                     // 2506
 * @method load                                                                                                        // 2507
 * @param {Object} definition definition in the format of a render spec.                                               // 2508
 */                                                                                                                    // 2509
Scene.prototype.load = function load(definition) {                                                                     // 2510
    this._definition = definition;                                                                                     // 2511
    this.id = {};                                                                                                      // 2512
    this._objects = [];                                                                                                // 2513
    this.node.set(_parse.call(this, definition));                                                                      // 2514
};                                                                                                                     // 2515
                                                                                                                       // 2516
/**                                                                                                                    // 2517
 * Add renderables to this component's render tree                                                                     // 2518
 *                                                                                                                     // 2519
 * @method add                                                                                                         // 2520
 *                                                                                                                     // 2521
 * @param {Object} obj renderable object                                                                               // 2522
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 2523
 */                                                                                                                    // 2524
Scene.prototype.add = function add() {                                                                                 // 2525
    return this.node.add.apply(this.node, arguments);                                                                  // 2526
};                                                                                                                     // 2527
                                                                                                                       // 2528
/**                                                                                                                    // 2529
 * Generate a render spec from the contents of this component.                                                         // 2530
 *                                                                                                                     // 2531
 * @private                                                                                                            // 2532
 * @method render                                                                                                      // 2533
 * @return {number} Render spec for this component                                                                     // 2534
 */                                                                                                                    // 2535
Scene.prototype.render = function render() {                                                                           // 2536
    return this.node.render.apply(this.node, arguments);                                                               // 2537
};                                                                                                                     // 2538
                                                                                                                       // 2539
module.exports = Scene;                                                                                                // 2540
},{"./Modifier":9,"./RenderNode":11,"./Transform":15}],13:[function(_dereq_,module,exports){                           // 2541
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2542
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2543
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2544
 *                                                                                                                     // 2545
 * Owner: mark@famo.us                                                                                                 // 2546
 * @license MPL 2.0                                                                                                    // 2547
 * @copyright Famous Industries, Inc. 2014                                                                             // 2548
 */                                                                                                                    // 2549
                                                                                                                       // 2550
var Transform = _dereq_('./Transform');                                                                                // 2551
                                                                                                                       // 2552
/**                                                                                                                    // 2553
 *                                                                                                                     // 2554
 * This object translates the rendering instructions ("render specs")                                                  // 2555
 *   that renderable components generate into document update                                                          // 2556
 *   instructions ("update specs").  Private.                                                                          // 2557
 *                                                                                                                     // 2558
 * @private                                                                                                            // 2559
 * @class SpecParser                                                                                                   // 2560
 * @constructor                                                                                                        // 2561
 */                                                                                                                    // 2562
function SpecParser() {                                                                                                // 2563
    this.result = {};                                                                                                  // 2564
}                                                                                                                      // 2565
SpecParser._instance = new SpecParser();                                                                               // 2566
                                                                                                                       // 2567
/**                                                                                                                    // 2568
 * Convert a render spec coming from the context's render chain to an                                                  // 2569
 *    update spec for the update chain. This is the only major entry point                                             // 2570
 *    for a consumer of this class.                                                                                    // 2571
 *                                                                                                                     // 2572
 * @method parse                                                                                                       // 2573
 * @static                                                                                                             // 2574
 * @private                                                                                                            // 2575
 *                                                                                                                     // 2576
 * @param {renderSpec} spec input render spec                                                                          // 2577
 * @param {Object} context context to do the parse in                                                                  // 2578
 * @return {Object} the resulting update spec (if no callback                                                          // 2579
 *   specified, else none)                                                                                             // 2580
 */                                                                                                                    // 2581
SpecParser.parse = function parse(spec, context) {                                                                     // 2582
    return SpecParser._instance.parse(spec, context);                                                                  // 2583
};                                                                                                                     // 2584
                                                                                                                       // 2585
/**                                                                                                                    // 2586
 * Convert a renderSpec coming from the context's render chain to an update                                            // 2587
 *    spec for the update chain. This is the only major entrypoint for a                                               // 2588
 *    consumer of this class.                                                                                          // 2589
 *                                                                                                                     // 2590
 * @method parse                                                                                                       // 2591
 *                                                                                                                     // 2592
 * @private                                                                                                            // 2593
 * @param {renderSpec} spec input render spec                                                                          // 2594
 * @param {Context} context                                                                                            // 2595
 * @return {updateSpec} the resulting update spec                                                                      // 2596
 */                                                                                                                    // 2597
SpecParser.prototype.parse = function parse(spec, context) {                                                           // 2598
    this.reset();                                                                                                      // 2599
    this._parseSpec(spec, context, Transform.identity);                                                                // 2600
    return this.result;                                                                                                // 2601
};                                                                                                                     // 2602
                                                                                                                       // 2603
/**                                                                                                                    // 2604
 * Prepare SpecParser for re-use (or first use) by setting internal state                                              // 2605
 *  to blank.                                                                                                          // 2606
 *                                                                                                                     // 2607
 * @private                                                                                                            // 2608
 * @method reset                                                                                                       // 2609
 */                                                                                                                    // 2610
SpecParser.prototype.reset = function reset() {                                                                        // 2611
    this.result = {};                                                                                                  // 2612
};                                                                                                                     // 2613
                                                                                                                       // 2614
// Multiply matrix M by vector v                                                                                       // 2615
function _vecInContext(v, m) {                                                                                         // 2616
    return [                                                                                                           // 2617
        v[0] * m[0] + v[1] * m[4] + v[2] * m[8],                                                                       // 2618
        v[0] * m[1] + v[1] * m[5] + v[2] * m[9],                                                                       // 2619
        v[0] * m[2] + v[1] * m[6] + v[2] * m[10]                                                                       // 2620
    ];                                                                                                                 // 2621
}                                                                                                                      // 2622
                                                                                                                       // 2623
var _zeroZero = [0, 0];                                                                                                // 2624
                                                                                                                       // 2625
// From the provided renderSpec tree, recursively compose opacities,                                                   // 2626
//    origins, transforms, and sizes corresponding to each surface id from                                             // 2627
//    the provided renderSpec tree structure. On completion, those                                                     // 2628
//    properties of 'this' object should be ready to use to build an                                                   // 2629
//    updateSpec.                                                                                                      // 2630
SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {                              // 2631
    var id;                                                                                                            // 2632
    var target;                                                                                                        // 2633
    var transform;                                                                                                     // 2634
    var opacity;                                                                                                       // 2635
    var origin;                                                                                                        // 2636
    var align;                                                                                                         // 2637
    var size;                                                                                                          // 2638
                                                                                                                       // 2639
    if (typeof spec === 'number') {                                                                                    // 2640
        id = spec;                                                                                                     // 2641
        transform = parentContext.transform;                                                                           // 2642
        align = parentContext.align || _zeroZero;                                                                      // 2643
        if (parentContext.size && align && (align[0] || align[1])) {                                                   // 2644
            var alignAdjust = [align[0] * parentContext.size[0], align[1] * parentContext.size[1], 0];                 // 2645
            transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));                        // 2646
        }                                                                                                              // 2647
        this.result[id] = {                                                                                            // 2648
            transform: transform,                                                                                      // 2649
            opacity: parentContext.opacity,                                                                            // 2650
            origin: parentContext.origin || _zeroZero,                                                                 // 2651
            align: parentContext.align || _zeroZero,                                                                   // 2652
            size: parentContext.size                                                                                   // 2653
        };                                                                                                             // 2654
    }                                                                                                                  // 2655
    else if (!spec) { // placed here so 0 will be cached earlier                                                       // 2656
        return;                                                                                                        // 2657
    }                                                                                                                  // 2658
    else if (spec instanceof Array) {                                                                                  // 2659
        for (var i = 0; i < spec.length; i++) {                                                                        // 2660
            this._parseSpec(spec[i], parentContext, sizeContext);                                                      // 2661
        }                                                                                                              // 2662
    }                                                                                                                  // 2663
    else {                                                                                                             // 2664
        target = spec.target;                                                                                          // 2665
        transform = parentContext.transform;                                                                           // 2666
        opacity = parentContext.opacity;                                                                               // 2667
        origin = parentContext.origin;                                                                                 // 2668
        align = parentContext.align;                                                                                   // 2669
        size = parentContext.size;                                                                                     // 2670
        var nextSizeContext = sizeContext;                                                                             // 2671
                                                                                                                       // 2672
        if (spec.opacity !== undefined) opacity = parentContext.opacity * spec.opacity;                                // 2673
        if (spec.transform) transform = Transform.multiply(parentContext.transform, spec.transform);                   // 2674
        if (spec.origin) {                                                                                             // 2675
            origin = spec.origin;                                                                                      // 2676
            nextSizeContext = parentContext.transform;                                                                 // 2677
        }                                                                                                              // 2678
        if (spec.align) align = spec.align;                                                                            // 2679
                                                                                                                       // 2680
        if (spec.size || spec.proportions) {                                                                           // 2681
            var parentSize = size;                                                                                     // 2682
            size = [size[0], size[1]];                                                                                 // 2683
                                                                                                                       // 2684
            if (spec.size) {                                                                                           // 2685
                if (spec.size[0] !== undefined) size[0] = spec.size[0];                                                // 2686
                if (spec.size[1] !== undefined) size[1] = spec.size[1];                                                // 2687
            }                                                                                                          // 2688
                                                                                                                       // 2689
            if (spec.proportions) {                                                                                    // 2690
                if (spec.proportions[0] !== undefined) size[0] = size[0] * spec.proportions[0];                        // 2691
                if (spec.proportions[1] !== undefined) size[1] = size[1] * spec.proportions[1];                        // 2692
            }                                                                                                          // 2693
                                                                                                                       // 2694
            if (parentSize) {                                                                                          // 2695
                if (align && (align[0] || align[1])) transform = Transform.thenMove(transform, _vecInContext([align[0] * parentSize[0], align[1] * parentSize[1], 0], sizeContext));
                if (origin && (origin[0] || origin[1])) transform = Transform.moveThen([-origin[0] * size[0], -origin[1] * size[1], 0], transform);
            }                                                                                                          // 2698
                                                                                                                       // 2699
            nextSizeContext = parentContext.transform;                                                                 // 2700
            origin = null;                                                                                             // 2701
            align = null;                                                                                              // 2702
        }                                                                                                              // 2703
                                                                                                                       // 2704
        this._parseSpec(target, {                                                                                      // 2705
            transform: transform,                                                                                      // 2706
            opacity: opacity,                                                                                          // 2707
            origin: origin,                                                                                            // 2708
            align: align,                                                                                              // 2709
            size: size                                                                                                 // 2710
        }, nextSizeContext);                                                                                           // 2711
    }                                                                                                                  // 2712
};                                                                                                                     // 2713
                                                                                                                       // 2714
module.exports = SpecParser;                                                                                           // 2715
},{"./Transform":15}],14:[function(_dereq_,module,exports){                                                            // 2716
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2717
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2718
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2719
 *                                                                                                                     // 2720
 * Owner: mark@famo.us                                                                                                 // 2721
 * @license MPL 2.0                                                                                                    // 2722
 * @copyright Famous Industries, Inc. 2014                                                                             // 2723
 */                                                                                                                    // 2724
                                                                                                                       // 2725
var ElementOutput = _dereq_('./ElementOutput');                                                                        // 2726
                                                                                                                       // 2727
/**                                                                                                                    // 2728
 * A base class for viewable content and event                                                                         // 2729
 *   targets inside a Famo.us application, containing a renderable document                                            // 2730
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 2731
 *   properties, classes, and handle events.                                                                           // 2732
 *                                                                                                                     // 2733
 * @class Surface                                                                                                      // 2734
 * @constructor                                                                                                        // 2735
 *                                                                                                                     // 2736
 * @param {Object} [options] default option overrides                                                                  // 2737
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 2738
 * @param {Array.string} [options.classes] CSS classes to set on target div                                            // 2739
 * @param {Array} [options.properties] string dictionary of CSS properties to set on target div                        // 2740
 * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div                       // 2741
 * @param {string} [options.content] inner (HTML) content of surface                                                   // 2742
 */                                                                                                                    // 2743
function Surface(options) {                                                                                            // 2744
    ElementOutput.call(this);                                                                                          // 2745
                                                                                                                       // 2746
    this.options = {};                                                                                                 // 2747
                                                                                                                       // 2748
    this.properties = {};                                                                                              // 2749
    this.attributes = {};                                                                                              // 2750
    this.content = '';                                                                                                 // 2751
    this.classList = [];                                                                                               // 2752
    this.size = null;                                                                                                  // 2753
                                                                                                                       // 2754
    this._classesDirty = true;                                                                                         // 2755
    this._stylesDirty = true;                                                                                          // 2756
    this._attributesDirty = true;                                                                                      // 2757
    this._sizeDirty = true;                                                                                            // 2758
    this._contentDirty = true;                                                                                         // 2759
    this._trueSizeCheck = true;                                                                                        // 2760
                                                                                                                       // 2761
    this._dirtyClasses = [];                                                                                           // 2762
                                                                                                                       // 2763
    if (options) this.setOptions(options);                                                                             // 2764
                                                                                                                       // 2765
    this._currentTarget = null;                                                                                        // 2766
}                                                                                                                      // 2767
Surface.prototype = Object.create(ElementOutput.prototype);                                                            // 2768
Surface.prototype.constructor = Surface;                                                                               // 2769
Surface.prototype.elementType = 'div';                                                                                 // 2770
Surface.prototype.elementClass = 'famous-surface';                                                                     // 2771
                                                                                                                       // 2772
/**                                                                                                                    // 2773
 * Set HTML attributes on this Surface. Note that this will cause                                                      // 2774
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2775
 *                                                                                                                     // 2776
 * @method setAttributes                                                                                               // 2777
* @param {Object} attributes property dictionary of "key" => "value"                                                   // 2778
 */                                                                                                                    // 2779
Surface.prototype.setAttributes = function setAttributes(attributes) {                                                 // 2780
    for (var n in attributes) {                                                                                        // 2781
        if (n === 'style') throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
        this.attributes[n] = attributes[n];                                                                            // 2783
    }                                                                                                                  // 2784
    this._attributesDirty = true;                                                                                      // 2785
};                                                                                                                     // 2786
                                                                                                                       // 2787
/**                                                                                                                    // 2788
 * Get HTML attributes on this Surface.                                                                                // 2789
 *                                                                                                                     // 2790
 * @method getAttributes                                                                                               // 2791
 *                                                                                                                     // 2792
 * @return {Object} Dictionary of this Surface's attributes.                                                           // 2793
 */                                                                                                                    // 2794
Surface.prototype.getAttributes = function getAttributes() {                                                           // 2795
    return this.attributes;                                                                                            // 2796
};                                                                                                                     // 2797
                                                                                                                       // 2798
/**                                                                                                                    // 2799
 * Set CSS-style properties on this Surface. Note that this will cause                                                 // 2800
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2801
 *                                                                                                                     // 2802
 * @method setProperties                                                                                               // 2803
 * @chainable                                                                                                          // 2804
 * @param {Object} properties property dictionary of "key" => "value"                                                  // 2805
 */                                                                                                                    // 2806
Surface.prototype.setProperties = function setProperties(properties) {                                                 // 2807
    for (var n in properties) {                                                                                        // 2808
        this.properties[n] = properties[n];                                                                            // 2809
    }                                                                                                                  // 2810
    this._stylesDirty = true;                                                                                          // 2811
    return this;                                                                                                       // 2812
};                                                                                                                     // 2813
                                                                                                                       // 2814
/**                                                                                                                    // 2815
 * Get CSS-style properties on this Surface.                                                                           // 2816
 *                                                                                                                     // 2817
 * @method getProperties                                                                                               // 2818
 *                                                                                                                     // 2819
 * @return {Object} Dictionary of this Surface's properties.                                                           // 2820
 */                                                                                                                    // 2821
Surface.prototype.getProperties = function getProperties() {                                                           // 2822
    return this.properties;                                                                                            // 2823
};                                                                                                                     // 2824
                                                                                                                       // 2825
/**                                                                                                                    // 2826
 * Add CSS-style class to the list of classes on this Surface. Note                                                    // 2827
 *   this will map directly to the HTML property of the actual                                                         // 2828
 *   corresponding rendered <div>.                                                                                     // 2829
 *                                                                                                                     // 2830
 * @method addClass                                                                                                    // 2831
 * @chainable                                                                                                          // 2832
 * @param {string} className name of class to add                                                                      // 2833
 */                                                                                                                    // 2834
Surface.prototype.addClass = function addClass(className) {                                                            // 2835
    if (this.classList.indexOf(className) < 0) {                                                                       // 2836
        this.classList.push(className);                                                                                // 2837
        this._classesDirty = true;                                                                                     // 2838
    }                                                                                                                  // 2839
    return this;                                                                                                       // 2840
};                                                                                                                     // 2841
                                                                                                                       // 2842
/**                                                                                                                    // 2843
 * Remove CSS-style class from the list of classes on this Surface.                                                    // 2844
 *   Note this will map directly to the HTML property of the actual                                                    // 2845
 *   corresponding rendered <div>.                                                                                     // 2846
 *                                                                                                                     // 2847
 * @method removeClass                                                                                                 // 2848
 * @chainable                                                                                                          // 2849
 * @param {string} className name of class to remove                                                                   // 2850
 */                                                                                                                    // 2851
Surface.prototype.removeClass = function removeClass(className) {                                                      // 2852
    var i = this.classList.indexOf(className);                                                                         // 2853
    if (i >= 0) {                                                                                                      // 2854
        this._dirtyClasses.push(this.classList.splice(i, 1)[0]);                                                       // 2855
        this._classesDirty = true;                                                                                     // 2856
    }                                                                                                                  // 2857
    return this;                                                                                                       // 2858
};                                                                                                                     // 2859
                                                                                                                       // 2860
/**                                                                                                                    // 2861
 * Toggle CSS-style class from the list of classes on this Surface.                                                    // 2862
 *   Note this will map directly to the HTML property of the actual                                                    // 2863
 *   corresponding rendered <div>.                                                                                     // 2864
 *                                                                                                                     // 2865
 * @method toggleClass                                                                                                 // 2866
 * @param {string} className name of class to toggle                                                                   // 2867
 */                                                                                                                    // 2868
Surface.prototype.toggleClass = function toggleClass(className) {                                                      // 2869
    var i = this.classList.indexOf(className);                                                                         // 2870
    if (i >= 0) {                                                                                                      // 2871
        this.removeClass(className);                                                                                   // 2872
    } else {                                                                                                           // 2873
        this.addClass(className);                                                                                      // 2874
    }                                                                                                                  // 2875
    return this;                                                                                                       // 2876
};                                                                                                                     // 2877
                                                                                                                       // 2878
/**                                                                                                                    // 2879
 * Reset class list to provided dictionary.                                                                            // 2880
 * @method setClasses                                                                                                  // 2881
 * @chainable                                                                                                          // 2882
 * @param {Array.string} classList                                                                                     // 2883
 */                                                                                                                    // 2884
Surface.prototype.setClasses = function setClasses(classList) {                                                        // 2885
    var i = 0;                                                                                                         // 2886
    var removal = [];                                                                                                  // 2887
    for (i = 0; i < this.classList.length; i++) {                                                                      // 2888
        if (classList.indexOf(this.classList[i]) < 0) removal.push(this.classList[i]);                                 // 2889
    }                                                                                                                  // 2890
    for (i = 0; i < removal.length; i++) this.removeClass(removal[i]);                                                 // 2891
    // duplicates are already checked by addClass()                                                                    // 2892
    for (i = 0; i < classList.length; i++) this.addClass(classList[i]);                                                // 2893
    return this;                                                                                                       // 2894
};                                                                                                                     // 2895
                                                                                                                       // 2896
/**                                                                                                                    // 2897
 * Get array of CSS-style classes attached to this div.                                                                // 2898
 *                                                                                                                     // 2899
 * @method getClasslist                                                                                                // 2900
 * @return {Array.string} array of class names                                                                         // 2901
 */                                                                                                                    // 2902
Surface.prototype.getClassList = function getClassList() {                                                             // 2903
    return this.classList;                                                                                             // 2904
};                                                                                                                     // 2905
                                                                                                                       // 2906
/**                                                                                                                    // 2907
 * Set or overwrite inner (HTML) content of this surface. Note that this                                               // 2908
 *    causes a re-rendering if the content has changed.                                                                // 2909
 *                                                                                                                     // 2910
 * @method setContent                                                                                                  // 2911
 * @chainable                                                                                                          // 2912
 * @param {string|Document Fragment} content HTML content                                                              // 2913
 */                                                                                                                    // 2914
Surface.prototype.setContent = function setContent(content) {                                                          // 2915
    if (this.content !== content) {                                                                                    // 2916
        this.content = content;                                                                                        // 2917
        this._contentDirty = true;                                                                                     // 2918
    }                                                                                                                  // 2919
    return this;                                                                                                       // 2920
};                                                                                                                     // 2921
                                                                                                                       // 2922
/**                                                                                                                    // 2923
 * Return inner (HTML) content of this surface.                                                                        // 2924
 *                                                                                                                     // 2925
 * @method getContent                                                                                                  // 2926
 *                                                                                                                     // 2927
 * @return {string} inner (HTML) content                                                                               // 2928
 */                                                                                                                    // 2929
Surface.prototype.getContent = function getContent() {                                                                 // 2930
    return this.content;                                                                                               // 2931
};                                                                                                                     // 2932
                                                                                                                       // 2933
/**                                                                                                                    // 2934
 * Set options for this surface                                                                                        // 2935
 *                                                                                                                     // 2936
 * @method setOptions                                                                                                  // 2937
 * @chainable                                                                                                          // 2938
 * @param {Object} [options] overrides for default options.  See constructor.                                          // 2939
 */                                                                                                                    // 2940
Surface.prototype.setOptions = function setOptions(options) {                                                          // 2941
    if (options.size) this.setSize(options.size);                                                                      // 2942
    if (options.classes) this.setClasses(options.classes);                                                             // 2943
    if (options.properties) this.setProperties(options.properties);                                                    // 2944
    if (options.attributes) this.setAttributes(options.attributes);                                                    // 2945
    if (options.content) this.setContent(options.content);                                                             // 2946
    return this;                                                                                                       // 2947
};                                                                                                                     // 2948
                                                                                                                       // 2949
//  Apply to document all changes from removeClass() since last setup().                                               // 2950
function _cleanupClasses(target) {                                                                                     // 2951
    for (var i = 0; i < this._dirtyClasses.length; i++) target.classList.remove(this._dirtyClasses[i]);                // 2952
    this._dirtyClasses = [];                                                                                           // 2953
}                                                                                                                      // 2954
                                                                                                                       // 2955
// Apply values of all Famous-managed styles to the document element.                                                  // 2956
//  These will be deployed to the document on call to #setup().                                                        // 2957
function _applyStyles(target) {                                                                                        // 2958
    for (var n in this.properties) {                                                                                   // 2959
        target.style[n] = this.properties[n];                                                                          // 2960
    }                                                                                                                  // 2961
}                                                                                                                      // 2962
                                                                                                                       // 2963
// Clear all Famous-managed styles from the document element.                                                          // 2964
// These will be deployed to the document on call to #setup().                                                         // 2965
function _cleanupStyles(target) {                                                                                      // 2966
    for (var n in this.properties) {                                                                                   // 2967
        target.style[n] = '';                                                                                          // 2968
    }                                                                                                                  // 2969
}                                                                                                                      // 2970
                                                                                                                       // 2971
// Apply values of all Famous-managed attributes to the document element.                                              // 2972
//  These will be deployed to the document on call to #setup().                                                        // 2973
function _applyAttributes(target) {                                                                                    // 2974
    for (var n in this.attributes) {                                                                                   // 2975
        target.setAttribute(n, this.attributes[n]);                                                                    // 2976
    }                                                                                                                  // 2977
}                                                                                                                      // 2978
                                                                                                                       // 2979
// Clear all Famous-managed attributes from the document element.                                                      // 2980
// These will be deployed to the document on call to #setup().                                                         // 2981
function _cleanupAttributes(target) {                                                                                  // 2982
    for (var n in this.attributes) {                                                                                   // 2983
        target.removeAttribute(n);                                                                                     // 2984
    }                                                                                                                  // 2985
}                                                                                                                      // 2986
                                                                                                                       // 2987
function _xyNotEquals(a, b) {                                                                                          // 2988
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 2989
}                                                                                                                      // 2990
                                                                                                                       // 2991
/**                                                                                                                    // 2992
 * One-time setup for an element to be ready for commits to document.                                                  // 2993
 *                                                                                                                     // 2994
 * @private                                                                                                            // 2995
 * @method setup                                                                                                       // 2996
 *                                                                                                                     // 2997
 * @param {ElementAllocator} allocator document element pool for this context                                          // 2998
 */                                                                                                                    // 2999
Surface.prototype.setup = function setup(allocator) {                                                                  // 3000
    var target = allocator.allocate(this.elementType);                                                                 // 3001
    if (this.elementClass) {                                                                                           // 3002
        if (this.elementClass instanceof Array) {                                                                      // 3003
            for (var i = 0; i < this.elementClass.length; i++) {                                                       // 3004
                target.classList.add(this.elementClass[i]);                                                            // 3005
            }                                                                                                          // 3006
        }                                                                                                              // 3007
        else {                                                                                                         // 3008
            target.classList.add(this.elementClass);                                                                   // 3009
        }                                                                                                              // 3010
    }                                                                                                                  // 3011
    target.style.display = '';                                                                                         // 3012
    this.attach(target);                                                                                               // 3013
    this._opacity = null;                                                                                              // 3014
    this._currentTarget = target;                                                                                      // 3015
    this._stylesDirty = true;                                                                                          // 3016
    this._classesDirty = true;                                                                                         // 3017
    this._attributesDirty = true;                                                                                      // 3018
    this._sizeDirty = true;                                                                                            // 3019
    this._contentDirty = true;                                                                                         // 3020
    this._originDirty = true;                                                                                          // 3021
    this._transformDirty = true;                                                                                       // 3022
};                                                                                                                     // 3023
                                                                                                                       // 3024
/**                                                                                                                    // 3025
 * Apply changes from this component to the corresponding document element.                                            // 3026
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 3027
 * and matrix transforms.                                                                                              // 3028
 *                                                                                                                     // 3029
 * @private                                                                                                            // 3030
 * @method commit                                                                                                      // 3031
 * @param {Context} context commit context                                                                             // 3032
 */                                                                                                                    // 3033
Surface.prototype.commit = function commit(context) {                                                                  // 3034
    if (!this._currentTarget) this.setup(context.allocator);                                                           // 3035
    var target = this._currentTarget;                                                                                  // 3036
    var size = context.size;                                                                                           // 3037
                                                                                                                       // 3038
    if (this._classesDirty) {                                                                                          // 3039
        _cleanupClasses.call(this, target);                                                                            // 3040
        var classList = this.getClassList();                                                                           // 3041
        for (var i = 0; i < classList.length; i++) target.classList.add(classList[i]);                                 // 3042
        this._classesDirty = false;                                                                                    // 3043
        this._trueSizeCheck = true;                                                                                    // 3044
    }                                                                                                                  // 3045
                                                                                                                       // 3046
    if (this._stylesDirty) {                                                                                           // 3047
        _applyStyles.call(this, target);                                                                               // 3048
        this._stylesDirty = false;                                                                                     // 3049
        this._trueSizeCheck = true;                                                                                    // 3050
    }                                                                                                                  // 3051
                                                                                                                       // 3052
    if (this._attributesDirty) {                                                                                       // 3053
        _applyAttributes.call(this, target);                                                                           // 3054
        this._attributesDirty = false;                                                                                 // 3055
        this._trueSizeCheck = true;                                                                                    // 3056
    }                                                                                                                  // 3057
                                                                                                                       // 3058
    if (this.size) {                                                                                                   // 3059
        var origSize = context.size;                                                                                   // 3060
        size = [this.size[0], this.size[1]];                                                                           // 3061
        if (size[0] === undefined) size[0] = origSize[0];                                                              // 3062
        if (size[1] === undefined) size[1] = origSize[1];                                                              // 3063
        if (size[0] === true || size[1] === true) {                                                                    // 3064
            if (size[0] === true){                                                                                     // 3065
                if (this._trueSizeCheck || (this._size[0] === 0)) {                                                    // 3066
                    var width = target.offsetWidth;                                                                    // 3067
                    if (this._size && this._size[0] !== width) {                                                       // 3068
                        this._size[0] = width;                                                                         // 3069
                        this._sizeDirty = true;                                                                        // 3070
                    }                                                                                                  // 3071
                    size[0] = width;                                                                                   // 3072
                } else {                                                                                               // 3073
                    if (this._size) size[0] = this._size[0];                                                           // 3074
                }                                                                                                      // 3075
            }                                                                                                          // 3076
            if (size[1] === true){                                                                                     // 3077
                if (this._trueSizeCheck || (this._size[1] === 0)) {                                                    // 3078
                    var height = target.offsetHeight;                                                                  // 3079
                    if (this._size && this._size[1] !== height) {                                                      // 3080
                        this._size[1] = height;                                                                        // 3081
                        this._sizeDirty = true;                                                                        // 3082
                    }                                                                                                  // 3083
                    size[1] = height;                                                                                  // 3084
                } else {                                                                                               // 3085
                    if (this._size) size[1] = this._size[1];                                                           // 3086
                }                                                                                                      // 3087
            }                                                                                                          // 3088
            this._trueSizeCheck = false;                                                                               // 3089
        }                                                                                                              // 3090
    }                                                                                                                  // 3091
                                                                                                                       // 3092
    if (_xyNotEquals(this._size, size)) {                                                                              // 3093
        if (!this._size) this._size = [0, 0];                                                                          // 3094
        this._size[0] = size[0];                                                                                       // 3095
        this._size[1] = size[1];                                                                                       // 3096
                                                                                                                       // 3097
        this._sizeDirty = true;                                                                                        // 3098
    }                                                                                                                  // 3099
                                                                                                                       // 3100
    if (this._sizeDirty) {                                                                                             // 3101
        if (this._size) {                                                                                              // 3102
            target.style.width = (this.size && this.size[0] === true) ? '' : this._size[0] + 'px';                     // 3103
            target.style.height = (this.size && this.size[1] === true) ?  '' : this._size[1] + 'px';                   // 3104
        }                                                                                                              // 3105
                                                                                                                       // 3106
        this._eventOutput.emit('resize');                                                                              // 3107
    }                                                                                                                  // 3108
                                                                                                                       // 3109
    if (this._contentDirty) {                                                                                          // 3110
        this.deploy(target);                                                                                           // 3111
        this._eventOutput.emit('deploy');                                                                              // 3112
        this._contentDirty = false;                                                                                    // 3113
        this._trueSizeCheck = true;                                                                                    // 3114
    }                                                                                                                  // 3115
                                                                                                                       // 3116
    ElementOutput.prototype.commit.call(this, context);                                                                // 3117
};                                                                                                                     // 3118
                                                                                                                       // 3119
/**                                                                                                                    // 3120
 *  Remove all Famous-relevant attributes from a document element.                                                     // 3121
 *    This is called by SurfaceManager's detach().                                                                     // 3122
 *    This is in some sense the reverse of .deploy().                                                                  // 3123
 *                                                                                                                     // 3124
 * @private                                                                                                            // 3125
 * @method cleanup                                                                                                     // 3126
 * @param {ElementAllocator} allocator                                                                                 // 3127
 */                                                                                                                    // 3128
Surface.prototype.cleanup = function cleanup(allocator) {                                                              // 3129
    var i = 0;                                                                                                         // 3130
    var target = this._currentTarget;                                                                                  // 3131
    this._eventOutput.emit('recall');                                                                                  // 3132
    this.recall(target);                                                                                               // 3133
    target.style.display = 'none';                                                                                     // 3134
    target.style.opacity = '';                                                                                         // 3135
    target.style.width = '';                                                                                           // 3136
    target.style.height = '';                                                                                          // 3137
    _cleanupStyles.call(this, target);                                                                                 // 3138
    _cleanupAttributes.call(this, target);                                                                             // 3139
    var classList = this.getClassList();                                                                               // 3140
    _cleanupClasses.call(this, target);                                                                                // 3141
    for (i = 0; i < classList.length; i++) target.classList.remove(classList[i]);                                      // 3142
    if (this.elementClass) {                                                                                           // 3143
        if (this.elementClass instanceof Array) {                                                                      // 3144
            for (i = 0; i < this.elementClass.length; i++) {                                                           // 3145
                target.classList.remove(this.elementClass[i]);                                                         // 3146
            }                                                                                                          // 3147
        }                                                                                                              // 3148
        else {                                                                                                         // 3149
            target.classList.remove(this.elementClass);                                                                // 3150
        }                                                                                                              // 3151
    }                                                                                                                  // 3152
    this.detach(target);                                                                                               // 3153
    this._currentTarget = null;                                                                                        // 3154
    allocator.deallocate(target);                                                                                      // 3155
};                                                                                                                     // 3156
                                                                                                                       // 3157
/**                                                                                                                    // 3158
 * Place the document element that this component manages into the document.                                           // 3159
 *                                                                                                                     // 3160
 * @private                                                                                                            // 3161
 * @method deploy                                                                                                      // 3162
 * @param {Node} target document parent of this container                                                              // 3163
 */                                                                                                                    // 3164
Surface.prototype.deploy = function deploy(target) {                                                                   // 3165
    var content = this.getContent();                                                                                   // 3166
    if (content instanceof Node) {                                                                                     // 3167
        while (target.hasChildNodes()) target.removeChild(target.firstChild);                                          // 3168
        target.appendChild(content);                                                                                   // 3169
    }                                                                                                                  // 3170
    else target.innerHTML = content;                                                                                   // 3171
};                                                                                                                     // 3172
                                                                                                                       // 3173
/**                                                                                                                    // 3174
 * Remove any contained document content associated with this surface                                                  // 3175
 *   from the actual document.                                                                                         // 3176
 *                                                                                                                     // 3177
 * @private                                                                                                            // 3178
 * @method recall                                                                                                      // 3179
 */                                                                                                                    // 3180
Surface.prototype.recall = function recall(target) {                                                                   // 3181
    var df = document.createDocumentFragment();                                                                        // 3182
    while (target.hasChildNodes()) df.appendChild(target.firstChild);                                                  // 3183
    this.setContent(df);                                                                                               // 3184
};                                                                                                                     // 3185
                                                                                                                       // 3186
/**                                                                                                                    // 3187
 *  Get the x and y dimensions of the surface.                                                                         // 3188
 *                                                                                                                     // 3189
 * @method getSize                                                                                                     // 3190
 * @return {Array.Number} [x,y] size of surface                                                                        // 3191
 */                                                                                                                    // 3192
Surface.prototype.getSize = function getSize() {                                                                       // 3193
    return this._size ? this._size : this.size;                                                                        // 3194
};                                                                                                                     // 3195
                                                                                                                       // 3196
/**                                                                                                                    // 3197
 * Set x and y dimensions of the surface.                                                                              // 3198
 *                                                                                                                     // 3199
 * @method setSize                                                                                                     // 3200
 * @chainable                                                                                                          // 3201
 * @param {Array.Number} size as [width, height]                                                                       // 3202
 */                                                                                                                    // 3203
Surface.prototype.setSize = function setSize(size) {                                                                   // 3204
    this.size = size ? [size[0], size[1]] : null;                                                                      // 3205
    this._sizeDirty = true;                                                                                            // 3206
    return this;                                                                                                       // 3207
};                                                                                                                     // 3208
                                                                                                                       // 3209
module.exports = Surface;                                                                                              // 3210
},{"./ElementOutput":3}],15:[function(_dereq_,module,exports){                                                         // 3211
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3212
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3213
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3214
 *                                                                                                                     // 3215
 * Owner: mark@famo.us                                                                                                 // 3216
 * @license MPL 2.0                                                                                                    // 3217
 * @copyright Famous Industries, Inc. 2014                                                                             // 3218
 */                                                                                                                    // 3219
                                                                                                                       // 3220
                                                                                                                       // 3221
                                                                                                                       // 3222
                                                                                                                       // 3223
/**                                                                                                                    // 3224
 *  A high-performance static matrix math library used to calculate                                                    // 3225
 *    affine transforms on surfaces and other renderables.                                                             // 3226
 *    Famo.us uses 4x4 matrices corresponding directly to                                                              // 3227
 *    WebKit matrices (column-major order).                                                                            // 3228
 *                                                                                                                     // 3229
 *    The internal "type" of a Matrix is a 16-long float array in                                                      // 3230
 *    row-major order, with:                                                                                           // 3231
 *    elements [0],[1],[2],[4],[5],[6],[8],[9],[10] forming the 3x3                                                    // 3232
 *          transformation matrix;                                                                                     // 3233
 *    elements [12], [13], [14] corresponding to the t_x, t_y, t_z                                                     // 3234
 *           translation;                                                                                              // 3235
 *    elements [3], [7], [11] set to 0;                                                                                // 3236
 *    element [15] set to 1.                                                                                           // 3237
 *    All methods are static.                                                                                          // 3238
 *                                                                                                                     // 3239
 * @static                                                                                                             // 3240
 *                                                                                                                     // 3241
 * @class Transform                                                                                                    // 3242
 */                                                                                                                    // 3243
var Transform = {};                                                                                                    // 3244
                                                                                                                       // 3245
// WARNING: these matrices correspond to WebKit matrices, which are                                                    // 3246
//    transposed from their math counterparts                                                                          // 3247
Transform.precision = 1e-6;                                                                                            // 3248
Transform.identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                                 // 3249
                                                                                                                       // 3250
/**                                                                                                                    // 3251
 * Multiply two or more Transform matrix types to return a Transform matrix.                                           // 3252
 *                                                                                                                     // 3253
 * @method multiply4x4                                                                                                 // 3254
 * @static                                                                                                             // 3255
 * @param {Transform} a left Transform                                                                                 // 3256
 * @param {Transform} b right Transform                                                                                // 3257
 * @return {Transform}                                                                                                 // 3258
 */                                                                                                                    // 3259
Transform.multiply4x4 = function multiply4x4(a, b) {                                                                   // 3260
    return [                                                                                                           // 3261
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3],                                                        // 3262
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3],                                                        // 3263
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3],                                                       // 3264
        a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3],                                                       // 3265
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7],                                                        // 3266
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7],                                                        // 3267
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7],                                                       // 3268
        a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7],                                                       // 3269
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11],                                                      // 3270
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11],                                                      // 3271
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11],                                                     // 3272
        a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11],                                                     // 3273
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15],                                                    // 3274
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15],                                                    // 3275
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15],                                                   // 3276
        a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]                                                    // 3277
    ];                                                                                                                 // 3278
};                                                                                                                     // 3279
                                                                                                                       // 3280
/**                                                                                                                    // 3281
 * Fast-multiply two or more Transform matrix types to return a                                                        // 3282
 *    Matrix, assuming bottom row on each is [0 0 0 1].                                                                // 3283
 *                                                                                                                     // 3284
 * @method multiply                                                                                                    // 3285
 * @static                                                                                                             // 3286
 * @param {Transform} a left Transform                                                                                 // 3287
 * @param {Transform} b right Transform                                                                                // 3288
 * @return {Transform}                                                                                                 // 3289
 */                                                                                                                    // 3290
Transform.multiply = function multiply(a, b) {                                                                         // 3291
    return [                                                                                                           // 3292
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2],                                                                       // 3293
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2],                                                                       // 3294
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2],                                                                      // 3295
        0,                                                                                                             // 3296
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6],                                                                       // 3297
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6],                                                                       // 3298
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6],                                                                      // 3299
        0,                                                                                                             // 3300
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10],                                                                      // 3301
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10],                                                                      // 3302
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10],                                                                     // 3303
        0,                                                                                                             // 3304
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12],                                                            // 3305
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13],                                                            // 3306
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14],                                                           // 3307
        1                                                                                                              // 3308
    ];                                                                                                                 // 3309
};                                                                                                                     // 3310
                                                                                                                       // 3311
/**                                                                                                                    // 3312
 * Return a Transform translated by additional amounts in each                                                         // 3313
 *    dimension. This is equivalent to the result of                                                                   // 3314
 *                                                                                                                     // 3315
 *    Transform.multiply(Matrix.translate(t[0], t[1], t[2]), m).                                                       // 3316
 *                                                                                                                     // 3317
 * @method thenMove                                                                                                    // 3318
 * @static                                                                                                             // 3319
 * @param {Transform} m a Transform                                                                                    // 3320
 * @param {Array.Number} t floats delta vector of length 2 or 3                                                        // 3321
 * @return {Transform}                                                                                                 // 3322
 */                                                                                                                    // 3323
Transform.thenMove = function thenMove(m, t) {                                                                         // 3324
    if (!t[2]) t[2] = 0;                                                                                               // 3325
    return [m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, m[12] + t[0], m[13] + t[1], m[14] + t[2], 1];
};                                                                                                                     // 3327
                                                                                                                       // 3328
/**                                                                                                                    // 3329
 * Return a Transform matrix which represents the result of a transform matrix                                         // 3330
 *    applied after a move. This is faster than the equivalent multiply.                                               // 3331
 *    This is equivalent to the result of:                                                                             // 3332
 *                                                                                                                     // 3333
 *    Transform.multiply(m, Transform.translate(t[0], t[1], t[2])).                                                    // 3334
 *                                                                                                                     // 3335
 * @method moveThen                                                                                                    // 3336
 * @static                                                                                                             // 3337
 * @param {Array.Number} v vector representing initial movement                                                        // 3338
 * @param {Transform} m matrix to apply afterwards                                                                     // 3339
 * @return {Transform} the resulting matrix                                                                            // 3340
 */                                                                                                                    // 3341
Transform.moveThen = function moveThen(v, m) {                                                                         // 3342
    if (!v[2]) v[2] = 0;                                                                                               // 3343
    var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];                                                                  // 3344
    var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];                                                                  // 3345
    var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];                                                                 // 3346
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3347
};                                                                                                                     // 3348
                                                                                                                       // 3349
/**                                                                                                                    // 3350
 * Return a Transform which represents a translation by specified                                                      // 3351
 *    amounts in each dimension.                                                                                       // 3352
 *                                                                                                                     // 3353
 * @method translate                                                                                                   // 3354
 * @static                                                                                                             // 3355
 * @param {Number} x x translation                                                                                     // 3356
 * @param {Number} y y translation                                                                                     // 3357
 * @param {Number} z z translation                                                                                     // 3358
 * @return {Transform}                                                                                                 // 3359
 */                                                                                                                    // 3360
Transform.translate = function translate(x, y, z) {                                                                    // 3361
    if (z === undefined) z = 0;                                                                                        // 3362
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];                                                           // 3363
};                                                                                                                     // 3364
                                                                                                                       // 3365
/**                                                                                                                    // 3366
 * Return a Transform scaled by a vector in each                                                                       // 3367
 *    dimension. This is a more performant equivalent to the result of                                                 // 3368
 *                                                                                                                     // 3369
 *    Transform.multiply(Transform.scale(s[0], s[1], s[2]), m).                                                        // 3370
 *                                                                                                                     // 3371
 * @method thenScale                                                                                                   // 3372
 * @static                                                                                                             // 3373
 * @param {Transform} m a matrix                                                                                       // 3374
 * @param {Array.Number} s delta vector (array of floats &&                                                            // 3375
 *    array.length == 3)                                                                                               // 3376
 * @return {Transform}                                                                                                 // 3377
 */                                                                                                                    // 3378
Transform.thenScale = function thenScale(m, s) {                                                                       // 3379
    return [                                                                                                           // 3380
        s[0] * m[0], s[1] * m[1], s[2] * m[2], 0,                                                                      // 3381
        s[0] * m[4], s[1] * m[5], s[2] * m[6], 0,                                                                      // 3382
        s[0] * m[8], s[1] * m[9], s[2] * m[10], 0,                                                                     // 3383
        s[0] * m[12], s[1] * m[13], s[2] * m[14], 1                                                                    // 3384
    ];                                                                                                                 // 3385
};                                                                                                                     // 3386
                                                                                                                       // 3387
/**                                                                                                                    // 3388
 * Return a Transform which represents a scale by specified amounts                                                    // 3389
 *    in each dimension.                                                                                               // 3390
 *                                                                                                                     // 3391
 * @method scale                                                                                                       // 3392
 * @static                                                                                                             // 3393
 * @param {Number} x x scale factor                                                                                    // 3394
 * @param {Number} y y scale factor                                                                                    // 3395
 * @param {Number} z z scale factor                                                                                    // 3396
 * @return {Transform}                                                                                                 // 3397
 */                                                                                                                    // 3398
Transform.scale = function scale(x, y, z) {                                                                            // 3399
    if (z === undefined) z = 1;                                                                                        // 3400
    if (y === undefined) y = x;                                                                                        // 3401
    return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];                                                           // 3402
};                                                                                                                     // 3403
                                                                                                                       // 3404
/**                                                                                                                    // 3405
 * Return a Transform which represents a clockwise                                                                     // 3406
 *    rotation around the x axis.                                                                                      // 3407
 *                                                                                                                     // 3408
 * @method rotateX                                                                                                     // 3409
 * @static                                                                                                             // 3410
 * @param {Number} theta radians                                                                                       // 3411
 * @return {Transform}                                                                                                 // 3412
 */                                                                                                                    // 3413
Transform.rotateX = function rotateX(theta) {                                                                          // 3414
    var cosTheta = Math.cos(theta);                                                                                    // 3415
    var sinTheta = Math.sin(theta);                                                                                    // 3416
    return [1, 0, 0, 0, 0, cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1];                              // 3417
};                                                                                                                     // 3418
                                                                                                                       // 3419
/**                                                                                                                    // 3420
 * Return a Transform which represents a clockwise                                                                     // 3421
 *    rotation around the y axis.                                                                                      // 3422
 *                                                                                                                     // 3423
 * @method rotateY                                                                                                     // 3424
 * @static                                                                                                             // 3425
 * @param {Number} theta radians                                                                                       // 3426
 * @return {Transform}                                                                                                 // 3427
 */                                                                                                                    // 3428
Transform.rotateY = function rotateY(theta) {                                                                          // 3429
    var cosTheta = Math.cos(theta);                                                                                    // 3430
    var sinTheta = Math.sin(theta);                                                                                    // 3431
    return [cosTheta, 0, -sinTheta, 0, 0, 1, 0, 0, sinTheta, 0, cosTheta, 0, 0, 0, 0, 1];                              // 3432
};                                                                                                                     // 3433
                                                                                                                       // 3434
/**                                                                                                                    // 3435
 * Return a Transform which represents a clockwise                                                                     // 3436
 *    rotation around the z axis.                                                                                      // 3437
 *                                                                                                                     // 3438
 * @method rotateZ                                                                                                     // 3439
 * @static                                                                                                             // 3440
 * @param {Number} theta radians                                                                                       // 3441
 * @return {Transform}                                                                                                 // 3442
 */                                                                                                                    // 3443
Transform.rotateZ = function rotateZ(theta) {                                                                          // 3444
    var cosTheta = Math.cos(theta);                                                                                    // 3445
    var sinTheta = Math.sin(theta);                                                                                    // 3446
    return [cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                              // 3447
};                                                                                                                     // 3448
                                                                                                                       // 3449
/**                                                                                                                    // 3450
 * Return a Transform which represents composed clockwise                                                              // 3451
 *    rotations along each of the axes. Equivalent to the result of                                                    // 3452
 *    Matrix.multiply(rotateX(phi), rotateY(theta), rotateZ(psi)).                                                     // 3453
 *                                                                                                                     // 3454
 * @method rotate                                                                                                      // 3455
 * @static                                                                                                             // 3456
 * @param {Number} phi radians to rotate about the positive x axis                                                     // 3457
 * @param {Number} theta radians to rotate about the positive y axis                                                   // 3458
 * @param {Number} psi radians to rotate about the positive z axis                                                     // 3459
 * @return {Transform}                                                                                                 // 3460
 */                                                                                                                    // 3461
Transform.rotate = function rotate(phi, theta, psi) {                                                                  // 3462
    var cosPhi = Math.cos(phi);                                                                                        // 3463
    var sinPhi = Math.sin(phi);                                                                                        // 3464
    var cosTheta = Math.cos(theta);                                                                                    // 3465
    var sinTheta = Math.sin(theta);                                                                                    // 3466
    var cosPsi = Math.cos(psi);                                                                                        // 3467
    var sinPsi = Math.sin(psi);                                                                                        // 3468
    var result = [                                                                                                     // 3469
        cosTheta * cosPsi,                                                                                             // 3470
        cosPhi * sinPsi + sinPhi * sinTheta * cosPsi,                                                                  // 3471
        sinPhi * sinPsi - cosPhi * sinTheta * cosPsi,                                                                  // 3472
        0,                                                                                                             // 3473
        -cosTheta * sinPsi,                                                                                            // 3474
        cosPhi * cosPsi - sinPhi * sinTheta * sinPsi,                                                                  // 3475
        sinPhi * cosPsi + cosPhi * sinTheta * sinPsi,                                                                  // 3476
        0,                                                                                                             // 3477
        sinTheta,                                                                                                      // 3478
        -sinPhi * cosTheta,                                                                                            // 3479
        cosPhi * cosTheta,                                                                                             // 3480
        0,                                                                                                             // 3481
        0, 0, 0, 1                                                                                                     // 3482
    ];                                                                                                                 // 3483
    return result;                                                                                                     // 3484
};                                                                                                                     // 3485
                                                                                                                       // 3486
/**                                                                                                                    // 3487
 * Return a Transform which represents an axis-angle rotation                                                          // 3488
 *                                                                                                                     // 3489
 * @method rotateAxis                                                                                                  // 3490
 * @static                                                                                                             // 3491
 * @param {Array.Number} v unit vector representing the axis to rotate about                                           // 3492
 * @param {Number} theta radians to rotate clockwise about the axis                                                    // 3493
 * @return {Transform}                                                                                                 // 3494
 */                                                                                                                    // 3495
Transform.rotateAxis = function rotateAxis(v, theta) {                                                                 // 3496
    var sinTheta = Math.sin(theta);                                                                                    // 3497
    var cosTheta = Math.cos(theta);                                                                                    // 3498
    var verTheta = 1 - cosTheta; // versine of theta                                                                   // 3499
                                                                                                                       // 3500
    var xxV = v[0] * v[0] * verTheta;                                                                                  // 3501
    var xyV = v[0] * v[1] * verTheta;                                                                                  // 3502
    var xzV = v[0] * v[2] * verTheta;                                                                                  // 3503
    var yyV = v[1] * v[1] * verTheta;                                                                                  // 3504
    var yzV = v[1] * v[2] * verTheta;                                                                                  // 3505
    var zzV = v[2] * v[2] * verTheta;                                                                                  // 3506
    var xs = v[0] * sinTheta;                                                                                          // 3507
    var ys = v[1] * sinTheta;                                                                                          // 3508
    var zs = v[2] * sinTheta;                                                                                          // 3509
                                                                                                                       // 3510
    var result = [                                                                                                     // 3511
        xxV + cosTheta, xyV + zs, xzV - ys, 0,                                                                         // 3512
        xyV - zs, yyV + cosTheta, yzV + xs, 0,                                                                         // 3513
        xzV + ys, yzV - xs, zzV + cosTheta, 0,                                                                         // 3514
        0, 0, 0, 1                                                                                                     // 3515
    ];                                                                                                                 // 3516
    return result;                                                                                                     // 3517
};                                                                                                                     // 3518
                                                                                                                       // 3519
/**                                                                                                                    // 3520
 * Return a Transform which represents a transform matrix applied about                                                // 3521
 * a separate origin point.                                                                                            // 3522
 *                                                                                                                     // 3523
 * @method aboutOrigin                                                                                                 // 3524
 * @static                                                                                                             // 3525
 * @param {Array.Number} v origin point to apply matrix                                                                // 3526
 * @param {Transform} m matrix to apply                                                                                // 3527
 * @return {Transform}                                                                                                 // 3528
 */                                                                                                                    // 3529
Transform.aboutOrigin = function aboutOrigin(v, m) {                                                                   // 3530
    var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);                                                         // 3531
    var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);                                                         // 3532
    var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);                                                        // 3533
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3534
};                                                                                                                     // 3535
                                                                                                                       // 3536
/**                                                                                                                    // 3537
 * Return a Transform representation of a skew transformation                                                          // 3538
 *                                                                                                                     // 3539
 * @method skew                                                                                                        // 3540
 * @static                                                                                                             // 3541
 * @param {Number} phi scale factor skew in the x axis                                                                 // 3542
 * @param {Number} theta scale factor skew in the y axis                                                               // 3543
 * @param {Number} psi scale factor skew in the z axis                                                                 // 3544
 * @return {Transform}                                                                                                 // 3545
 */                                                                                                                    // 3546
Transform.skew = function skew(phi, theta, psi) {                                                                      // 3547
    return [1, Math.tan(theta), 0, 0, Math.tan(psi), 1, 0, 0, 0, Math.tan(phi), 1, 0, 0, 0, 0, 1];                     // 3548
};                                                                                                                     // 3549
                                                                                                                       // 3550
/**                                                                                                                    // 3551
 * Return a Transform representation of a skew in the x-direction                                                      // 3552
 *                                                                                                                     // 3553
 * @method skewX                                                                                                       // 3554
 * @static                                                                                                             // 3555
 * @param {Number} angle the angle between the top and left sides                                                      // 3556
 * @return {Transform}                                                                                                 // 3557
 */                                                                                                                    // 3558
Transform.skewX = function skewX(angle) {                                                                              // 3559
    return [1, 0, 0, 0, Math.tan(angle), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3560
};                                                                                                                     // 3561
                                                                                                                       // 3562
/**                                                                                                                    // 3563
 * Return a Transform representation of a skew in the y-direction                                                      // 3564
 *                                                                                                                     // 3565
 * @method skewY                                                                                                       // 3566
 * @static                                                                                                             // 3567
 * @param {Number} angle the angle between the top and right sides                                                     // 3568
 * @return {Transform}                                                                                                 // 3569
 */                                                                                                                    // 3570
Transform.skewY = function skewY(angle) {                                                                              // 3571
    return [1, Math.tan(angle), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3572
};                                                                                                                     // 3573
                                                                                                                       // 3574
/**                                                                                                                    // 3575
 * Returns a perspective Transform matrix                                                                              // 3576
 *                                                                                                                     // 3577
 * @method perspective                                                                                                 // 3578
 * @static                                                                                                             // 3579
 * @param {Number} focusZ z position of focal point                                                                    // 3580
 * @return {Transform}                                                                                                 // 3581
 */                                                                                                                    // 3582
Transform.perspective = function perspective(focusZ) {                                                                 // 3583
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1 / focusZ, 0, 0, 0, 1];                                                 // 3584
};                                                                                                                     // 3585
                                                                                                                       // 3586
/**                                                                                                                    // 3587
 * Return translation vector component of given Transform                                                              // 3588
 *                                                                                                                     // 3589
 * @method getTranslate                                                                                                // 3590
 * @static                                                                                                             // 3591
 * @param {Transform} m Transform                                                                                      // 3592
 * @return {Array.Number} the translation vector [t_x, t_y, t_z]                                                       // 3593
 */                                                                                                                    // 3594
Transform.getTranslate = function getTranslate(m) {                                                                    // 3595
    return [m[12], m[13], m[14]];                                                                                      // 3596
};                                                                                                                     // 3597
                                                                                                                       // 3598
/**                                                                                                                    // 3599
 * Return inverse affine transform for given Transform.                                                                // 3600
 *   Note: This assumes m[3] = m[7] = m[11] = 0, and m[15] = 1.                                                        // 3601
 *   Will provide incorrect results if not invertible or preconditions not met.                                        // 3602
 *                                                                                                                     // 3603
 * @method inverse                                                                                                     // 3604
 * @static                                                                                                             // 3605
 * @param {Transform} m Transform                                                                                      // 3606
 * @return {Transform}                                                                                                 // 3607
 */                                                                                                                    // 3608
Transform.inverse = function inverse(m) {                                                                              // 3609
    // only need to consider 3x3 section for affine                                                                    // 3610
    var c0 = m[5] * m[10] - m[6] * m[9];                                                                               // 3611
    var c1 = m[4] * m[10] - m[6] * m[8];                                                                               // 3612
    var c2 = m[4] * m[9] - m[5] * m[8];                                                                                // 3613
    var c4 = m[1] * m[10] - m[2] * m[9];                                                                               // 3614
    var c5 = m[0] * m[10] - m[2] * m[8];                                                                               // 3615
    var c6 = m[0] * m[9] - m[1] * m[8];                                                                                // 3616
    var c8 = m[1] * m[6] - m[2] * m[5];                                                                                // 3617
    var c9 = m[0] * m[6] - m[2] * m[4];                                                                                // 3618
    var c10 = m[0] * m[5] - m[1] * m[4];                                                                               // 3619
    var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;                                                                      // 3620
    var invD = 1 / detM;                                                                                               // 3621
    var result = [                                                                                                     // 3622
        invD * c0, -invD * c4, invD * c8, 0,                                                                           // 3623
        -invD * c1, invD * c5, -invD * c9, 0,                                                                          // 3624
        invD * c2, -invD * c6, invD * c10, 0,                                                                          // 3625
        0, 0, 0, 1                                                                                                     // 3626
    ];                                                                                                                 // 3627
    result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];                                           // 3628
    result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];                                           // 3629
    result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];                                          // 3630
    return result;                                                                                                     // 3631
};                                                                                                                     // 3632
                                                                                                                       // 3633
/**                                                                                                                    // 3634
 * Returns the transpose of a 4x4 matrix                                                                               // 3635
 *                                                                                                                     // 3636
 * @method transpose                                                                                                   // 3637
 * @static                                                                                                             // 3638
 * @param {Transform} m matrix                                                                                         // 3639
 * @return {Transform} the resulting transposed matrix                                                                 // 3640
 */                                                                                                                    // 3641
Transform.transpose = function transpose(m) {                                                                          // 3642
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];     // 3643
};                                                                                                                     // 3644
                                                                                                                       // 3645
function _normSquared(v) {                                                                                             // 3646
    return (v.length === 2) ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];                     // 3647
}                                                                                                                      // 3648
function _norm(v) {                                                                                                    // 3649
    return Math.sqrt(_normSquared(v));                                                                                 // 3650
}                                                                                                                      // 3651
function _sign(n) {                                                                                                    // 3652
    return (n < 0) ? -1 : 1;                                                                                           // 3653
}                                                                                                                      // 3654
                                                                                                                       // 3655
/**                                                                                                                    // 3656
 * Decompose Transform into separate .translate, .rotate, .scale,                                                      // 3657
 *    and .skew components.                                                                                            // 3658
 *                                                                                                                     // 3659
 * @method interpret                                                                                                   // 3660
 * @static                                                                                                             // 3661
 * @param {Transform} M transform matrix                                                                               // 3662
 * @return {Object} matrix spec object with component matrices .translate,                                             // 3663
 *    .rotate, .scale, .skew                                                                                           // 3664
 */                                                                                                                    // 3665
Transform.interpret = function interpret(M) {                                                                          // 3666
                                                                                                                       // 3667
    // QR decomposition via Householder reflections                                                                    // 3668
    //FIRST ITERATION                                                                                                  // 3669
                                                                                                                       // 3670
    //default Q1 to the identity matrix;                                                                               // 3671
    var x = [M[0], M[1], M[2]];                // first column vector                                                  // 3672
    var sgn = _sign(x[0]);                     // sign of first component of x (for stability)                         // 3673
    var xNorm = _norm(x);                      // norm of first column vector                                          // 3674
    var v = [x[0] + sgn * xNorm, x[1], x[2]];  // v = x + sign(x[0])|x|e1                                              // 3675
    var mult = 2 / _normSquared(v);            // mult = 2/v'v                                                         // 3676
                                                                                                                       // 3677
    //bail out if our Matrix is singular                                                                               // 3678
    if (mult >= Infinity) {                                                                                            // 3679
        return {translate: Transform.getTranslate(M), rotate: [0, 0, 0], scale: [0, 0, 0], skew: [0, 0, 0]};           // 3680
    }                                                                                                                  // 3681
                                                                                                                       // 3682
    //evaluate Q1 = I - 2vv'/v'v                                                                                       // 3683
    var Q1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3684
                                                                                                                       // 3685
    //diagonals                                                                                                        // 3686
    Q1[0]  = 1 - mult * v[0] * v[0];    // 0,0 entry                                                                   // 3687
    Q1[5]  = 1 - mult * v[1] * v[1];    // 1,1 entry                                                                   // 3688
    Q1[10] = 1 - mult * v[2] * v[2];    // 2,2 entry                                                                   // 3689
                                                                                                                       // 3690
    //upper diagonal                                                                                                   // 3691
    Q1[1] = -mult * v[0] * v[1];        // 0,1 entry                                                                   // 3692
    Q1[2] = -mult * v[0] * v[2];        // 0,2 entry                                                                   // 3693
    Q1[6] = -mult * v[1] * v[2];        // 1,2 entry                                                                   // 3694
                                                                                                                       // 3695
    //lower diagonal                                                                                                   // 3696
    Q1[4] = Q1[1];                      // 1,0 entry                                                                   // 3697
    Q1[8] = Q1[2];                      // 2,0 entry                                                                   // 3698
    Q1[9] = Q1[6];                      // 2,1 entry                                                                   // 3699
                                                                                                                       // 3700
    //reduce first column of M                                                                                         // 3701
    var MQ1 = Transform.multiply(Q1, M);                                                                               // 3702
                                                                                                                       // 3703
    //SECOND ITERATION on (1,1) minor                                                                                  // 3704
    var x2 = [MQ1[5], MQ1[6]];                                                                                         // 3705
    var sgn2 = _sign(x2[0]);                    // sign of first component of x (for stability)                        // 3706
    var x2Norm = _norm(x2);                     // norm of first column vector                                         // 3707
    var v2 = [x2[0] + sgn2 * x2Norm, x2[1]];    // v = x + sign(x[0])|x|e1                                             // 3708
    var mult2 = 2 / _normSquared(v2);           // mult = 2/v'v                                                        // 3709
                                                                                                                       // 3710
    //evaluate Q2 = I - 2vv'/v'v                                                                                       // 3711
    var Q2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3712
                                                                                                                       // 3713
    //diagonal                                                                                                         // 3714
    Q2[5]  = 1 - mult2 * v2[0] * v2[0]; // 1,1 entry                                                                   // 3715
    Q2[10] = 1 - mult2 * v2[1] * v2[1]; // 2,2 entry                                                                   // 3716
                                                                                                                       // 3717
    //off diagonals                                                                                                    // 3718
    Q2[6] = -mult2 * v2[0] * v2[1];     // 2,1 entry                                                                   // 3719
    Q2[9] = Q2[6];                      // 1,2 entry                                                                   // 3720
                                                                                                                       // 3721
    //calc QR decomposition. Q = Q1*Q2, R = Q'*M                                                                       // 3722
    var Q = Transform.multiply(Q2, Q1);      //note: really Q transpose                                                // 3723
    var R = Transform.multiply(Q, M);                                                                                  // 3724
                                                                                                                       // 3725
    //remove negative scaling                                                                                          // 3726
    var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);                           // 3727
    R = Transform.multiply(R, remover);                                                                                // 3728
    Q = Transform.multiply(remover, Q);                                                                                // 3729
                                                                                                                       // 3730
    //decompose into rotate/scale/skew matrices                                                                        // 3731
    var result = {};                                                                                                   // 3732
    result.translate = Transform.getTranslate(M);                                                                      // 3733
    result.rotate = [Math.atan2(-Q[6], Q[10]), Math.asin(Q[2]), Math.atan2(-Q[1], Q[0])];                              // 3734
    if (!result.rotate[0]) {                                                                                           // 3735
        result.rotate[0] = 0;                                                                                          // 3736
        result.rotate[2] = Math.atan2(Q[4], Q[5]);                                                                     // 3737
    }                                                                                                                  // 3738
    result.scale = [R[0], R[5], R[10]];                                                                                // 3739
    result.skew = [Math.atan2(R[9], result.scale[2]), Math.atan2(R[8], result.scale[2]), Math.atan2(R[4], result.scale[0])];
                                                                                                                       // 3741
    //double rotation workaround                                                                                       // 3742
    if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {                                     // 3743
        result.rotate[1] = Math.PI - result.rotate[1];                                                                 // 3744
        if (result.rotate[1] > Math.PI) result.rotate[1] -= 2 * Math.PI;                                               // 3745
        if (result.rotate[1] < -Math.PI) result.rotate[1] += 2 * Math.PI;                                              // 3746
        if (result.rotate[0] < 0) result.rotate[0] += Math.PI;                                                         // 3747
        else result.rotate[0] -= Math.PI;                                                                              // 3748
        if (result.rotate[2] < 0) result.rotate[2] += Math.PI;                                                         // 3749
        else result.rotate[2] -= Math.PI;                                                                              // 3750
    }                                                                                                                  // 3751
                                                                                                                       // 3752
    return result;                                                                                                     // 3753
};                                                                                                                     // 3754
                                                                                                                       // 3755
/**                                                                                                                    // 3756
 * Weighted average between two matrices by averaging their                                                            // 3757
 *     translation, rotation, scale, skew components.                                                                  // 3758
 *     f(M1,M2,t) = (1 - t) * M1 + t * M2                                                                              // 3759
 *                                                                                                                     // 3760
 * @method average                                                                                                     // 3761
 * @static                                                                                                             // 3762
 * @param {Transform} M1 f(M1,M2,0) = M1                                                                               // 3763
 * @param {Transform} M2 f(M1,M2,1) = M2                                                                               // 3764
 * @param {Number} t                                                                                                   // 3765
 * @return {Transform}                                                                                                 // 3766
 */                                                                                                                    // 3767
Transform.average = function average(M1, M2, t) {                                                                      // 3768
    t = (t === undefined) ? 0.5 : t;                                                                                   // 3769
    var specM1 = Transform.interpret(M1);                                                                              // 3770
    var specM2 = Transform.interpret(M2);                                                                              // 3771
                                                                                                                       // 3772
    var specAvg = {                                                                                                    // 3773
        translate: [0, 0, 0],                                                                                          // 3774
        rotate: [0, 0, 0],                                                                                             // 3775
        scale: [0, 0, 0],                                                                                              // 3776
        skew: [0, 0, 0]                                                                                                // 3777
    };                                                                                                                 // 3778
                                                                                                                       // 3779
    for (var i = 0; i < 3; i++) {                                                                                      // 3780
        specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];                                // 3781
        specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];                                         // 3782
        specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];                                            // 3783
        specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];                                               // 3784
    }                                                                                                                  // 3785
    return Transform.build(specAvg);                                                                                   // 3786
};                                                                                                                     // 3787
                                                                                                                       // 3788
/**                                                                                                                    // 3789
 * Compose .translate, .rotate, .scale, .skew components into                                                          // 3790
 * Transform matrix                                                                                                    // 3791
 *                                                                                                                     // 3792
 * @method build                                                                                                       // 3793
 * @static                                                                                                             // 3794
 * @param {matrixSpec} spec object with component matrices .translate,                                                 // 3795
 *    .rotate, .scale, .skew                                                                                           // 3796
 * @return {Transform} composed transform                                                                              // 3797
 */                                                                                                                    // 3798
Transform.build = function build(spec) {                                                                               // 3799
    var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);                                    // 3800
    var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);                                         // 3801
    var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);                               // 3802
    return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
};                                                                                                                     // 3804
                                                                                                                       // 3805
/**                                                                                                                    // 3806
 * Determine if two Transforms are component-wise equal                                                                // 3807
 *   Warning: breaks on perspective Transforms                                                                         // 3808
 *                                                                                                                     // 3809
 * @method equals                                                                                                      // 3810
 * @static                                                                                                             // 3811
 * @param {Transform} a matrix                                                                                         // 3812
 * @param {Transform} b matrix                                                                                         // 3813
 * @return {boolean}                                                                                                   // 3814
 */                                                                                                                    // 3815
Transform.equals = function equals(a, b) {                                                                             // 3816
    return !Transform.notEquals(a, b);                                                                                 // 3817
};                                                                                                                     // 3818
                                                                                                                       // 3819
/**                                                                                                                    // 3820
 * Determine if two Transforms are component-wise unequal                                                              // 3821
 *   Warning: breaks on perspective Transforms                                                                         // 3822
 *                                                                                                                     // 3823
 * @method notEquals                                                                                                   // 3824
 * @static                                                                                                             // 3825
 * @param {Transform} a matrix                                                                                         // 3826
 * @param {Transform} b matrix                                                                                         // 3827
 * @return {boolean}                                                                                                   // 3828
 */                                                                                                                    // 3829
Transform.notEquals = function notEquals(a, b) {                                                                       // 3830
    if (a === b) return false;                                                                                         // 3831
                                                                                                                       // 3832
    // shortci                                                                                                         // 3833
    return !(a && b) ||                                                                                                // 3834
        a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] ||                                                       // 3835
        a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] ||                                                             // 3836
        a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] ||                                                             // 3837
        a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];                                                             // 3838
};                                                                                                                     // 3839
                                                                                                                       // 3840
/**                                                                                                                    // 3841
 * Constrain angle-trio components to range of [-pi, pi).                                                              // 3842
 *                                                                                                                     // 3843
 * @method normalizeRotation                                                                                           // 3844
 * @static                                                                                                             // 3845
 * @param {Array.Number} rotation phi, theta, psi (array of floats                                                     // 3846
 *    && array.length == 3)                                                                                            // 3847
 * @return {Array.Number} new phi, theta, psi triplet                                                                  // 3848
 *    (array of floats && array.length == 3)                                                                           // 3849
 */                                                                                                                    // 3850
Transform.normalizeRotation = function normalizeRotation(rotation) {                                                   // 3851
    var result = rotation.slice(0);                                                                                    // 3852
    if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {                                                 // 3853
        result[0] = -result[0];                                                                                        // 3854
        result[1] = Math.PI - result[1];                                                                               // 3855
        result[2] -= Math.PI;                                                                                          // 3856
    }                                                                                                                  // 3857
    if (result[0] > Math.PI * 0.5) {                                                                                   // 3858
        result[0] = result[0] - Math.PI;                                                                               // 3859
        result[1] = Math.PI - result[1];                                                                               // 3860
        result[2] -= Math.PI;                                                                                          // 3861
    }                                                                                                                  // 3862
    if (result[0] < -Math.PI * 0.5) {                                                                                  // 3863
        result[0] = result[0] + Math.PI;                                                                               // 3864
        result[1] = -Math.PI - result[1];                                                                              // 3865
        result[2] -= Math.PI;                                                                                          // 3866
    }                                                                                                                  // 3867
    while (result[1] < -Math.PI) result[1] += 2 * Math.PI;                                                             // 3868
    while (result[1] >= Math.PI) result[1] -= 2 * Math.PI;                                                             // 3869
    while (result[2] < -Math.PI) result[2] += 2 * Math.PI;                                                             // 3870
    while (result[2] >= Math.PI) result[2] -= 2 * Math.PI;                                                             // 3871
    return result;                                                                                                     // 3872
};                                                                                                                     // 3873
                                                                                                                       // 3874
/**                                                                                                                    // 3875
 * (Property) Array defining a translation forward in z by 1                                                           // 3876
 *                                                                                                                     // 3877
 * @property {array} inFront                                                                                           // 3878
 * @static                                                                                                             // 3879
 * @final                                                                                                              // 3880
 */                                                                                                                    // 3881
Transform.inFront = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1e-3, 1];                                               // 3882
                                                                                                                       // 3883
/**                                                                                                                    // 3884
 * (Property) Array defining a translation backwards in z by 1                                                         // 3885
 *                                                                                                                     // 3886
 * @property {array} behind                                                                                            // 3887
 * @static                                                                                                             // 3888
 * @final                                                                                                              // 3889
 */                                                                                                                    // 3890
Transform.behind = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1e-3, 1];                                               // 3891
                                                                                                                       // 3892
module.exports = Transform;                                                                                            // 3893
},{}],16:[function(_dereq_,module,exports){                                                                            // 3894
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3895
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3896
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3897
 *                                                                                                                     // 3898
 * Owner: mark@famo.us                                                                                                 // 3899
 * @license MPL 2.0                                                                                                    // 3900
 * @copyright Famous Industries, Inc. 2014                                                                             // 3901
 */                                                                                                                    // 3902
                                                                                                                       // 3903
var EventHandler = _dereq_('./EventHandler');                                                                          // 3904
var OptionsManager = _dereq_('./OptionsManager');                                                                      // 3905
var RenderNode = _dereq_('./RenderNode');                                                                              // 3906
var Utility = _dereq_('../utilities/Utility');                                                                         // 3907
                                                                                                                       // 3908
/**                                                                                                                    // 3909
 * Useful for quickly creating elements within applications                                                            // 3910
 *   with large event systems.  Consists of a RenderNode paired with                                                   // 3911
 *   an input EventHandler and an output EventHandler.                                                                 // 3912
 *   Meant to be extended by the developer.                                                                            // 3913
 *                                                                                                                     // 3914
 * @class View                                                                                                         // 3915
 * @uses EventHandler                                                                                                  // 3916
 * @uses OptionsManager                                                                                                // 3917
 * @uses RenderNode                                                                                                    // 3918
 * @constructor                                                                                                        // 3919
 */                                                                                                                    // 3920
function View(options) {                                                                                               // 3921
    this._node = new RenderNode();                                                                                     // 3922
                                                                                                                       // 3923
    this._eventInput = new EventHandler();                                                                             // 3924
    this._eventOutput = new EventHandler();                                                                            // 3925
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 3926
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 3927
                                                                                                                       // 3928
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);                            // 3929
    this._optionsManager = new OptionsManager(this.options);                                                           // 3930
                                                                                                                       // 3931
    if (options) this.setOptions(options);                                                                             // 3932
}                                                                                                                      // 3933
                                                                                                                       // 3934
View.DEFAULT_OPTIONS = {}; // no defaults                                                                              // 3935
                                                                                                                       // 3936
/**                                                                                                                    // 3937
 * Look up options value by key                                                                                        // 3938
 * @method getOptions                                                                                                  // 3939
 *                                                                                                                     // 3940
 * @param {string} key key                                                                                             // 3941
 * @return {Object} associated object                                                                                  // 3942
 */                                                                                                                    // 3943
View.prototype.getOptions = function getOptions(key) {                                                                 // 3944
    return this._optionsManager.getOptions(key);                                                                       // 3945
};                                                                                                                     // 3946
                                                                                                                       // 3947
/*                                                                                                                     // 3948
 *  Set internal options.                                                                                              // 3949
 *  No defaults options are set in View.                                                                               // 3950
 *                                                                                                                     // 3951
 *  @method setOptions                                                                                                 // 3952
 *  @param {Object} options                                                                                            // 3953
 */                                                                                                                    // 3954
View.prototype.setOptions = function setOptions(options) {                                                             // 3955
    this._optionsManager.patch(options);                                                                               // 3956
};                                                                                                                     // 3957
                                                                                                                       // 3958
/**                                                                                                                    // 3959
 * Add a child renderable to the view.                                                                                 // 3960
 *   Note: This is meant to be used by an inheriting class                                                             // 3961
 *   rather than from outside the prototype chain.                                                                     // 3962
 *                                                                                                                     // 3963
 * @method add                                                                                                         // 3964
 * @return {RenderNode}                                                                                                // 3965
 * @protected                                                                                                          // 3966
 */                                                                                                                    // 3967
View.prototype.add = function add() {                                                                                  // 3968
    return this._node.add.apply(this._node, arguments);                                                                // 3969
};                                                                                                                     // 3970
                                                                                                                       // 3971
/**                                                                                                                    // 3972
 * Alias for add                                                                                                       // 3973
 * @method _add                                                                                                        // 3974
 */                                                                                                                    // 3975
View.prototype._add = View.prototype.add;                                                                              // 3976
                                                                                                                       // 3977
/**                                                                                                                    // 3978
 * Generate a render spec from the contents of this component.                                                         // 3979
 *                                                                                                                     // 3980
 * @private                                                                                                            // 3981
 * @method render                                                                                                      // 3982
 * @return {number} Render spec for this component                                                                     // 3983
 */                                                                                                                    // 3984
View.prototype.render = function render() {                                                                            // 3985
    return this._node.render();                                                                                        // 3986
};                                                                                                                     // 3987
                                                                                                                       // 3988
/**                                                                                                                    // 3989
 * Return size of contained element.                                                                                   // 3990
 *                                                                                                                     // 3991
 * @method getSize                                                                                                     // 3992
 * @return {Array.Number} [width, height]                                                                              // 3993
 */                                                                                                                    // 3994
View.prototype.getSize = function getSize() {                                                                          // 3995
    if (this._node && this._node.getSize) {                                                                            // 3996
        return this._node.getSize.apply(this._node, arguments) || this.options.size;                                   // 3997
    }                                                                                                                  // 3998
    else return this.options.size;                                                                                     // 3999
};                                                                                                                     // 4000
                                                                                                                       // 4001
module.exports = View;                                                                                                 // 4002
},{"../utilities/Utility":95,"./EventHandler":7,"./OptionsManager":10,"./RenderNode":11}],17:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4004
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4005
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4006
 *                                                                                                                     // 4007
 * Owner: mark@famo.us                                                                                                 // 4008
 * @license MPL 2.0                                                                                                    // 4009
 * @copyright Famous Industries, Inc. 2014                                                                             // 4010
 */                                                                                                                    // 4011
                                                                                                                       // 4012
                                                                                                                       // 4013
                                                                                                                       // 4014
                                                                                                                       // 4015
/**                                                                                                                    // 4016
 * Helper object used to iterate through items sequentially. Used in                                                   // 4017
 *   views that deal with layout.  A ViewSequence object conceptually points                                           // 4018
 *   to a node in a linked list.                                                                                       // 4019
 *                                                                                                                     // 4020
 * @class ViewSequence                                                                                                 // 4021
 *                                                                                                                     // 4022
 * @constructor                                                                                                        // 4023
 * @param {Object|Array} options Options object, or content array.                                                     // 4024
 * @param {Number} [options.index] starting index.                                                                     // 4025
 * @param {Number} [options.array] Array of elements to populate the ViewSequence                                      // 4026
 * @param {Object} [options._] Optional backing store (internal                                                        // 4027
 * @param {Boolean} [options.loop] Whether to wrap when accessing elements just past the end                           // 4028
 *   (or beginning) of the sequence.                                                                                   // 4029
 */                                                                                                                    // 4030
function ViewSequence(options) {                                                                                       // 4031
    if (!options) options = [];                                                                                        // 4032
    if (options instanceof Array) options = {array: options};                                                          // 4033
                                                                                                                       // 4034
    this._ = null;                                                                                                     // 4035
    this.index = options.index || 0;                                                                                   // 4036
                                                                                                                       // 4037
    if (options.array) this._ = new (this.constructor.Backing)(options.array);                                         // 4038
    else if (options._) this._ = options._;                                                                            // 4039
                                                                                                                       // 4040
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4041
    if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                            // 4042
                                                                                                                       // 4043
    if (options.loop !== undefined) this._.loop = options.loop;                                                        // 4044
                                                                                                                       // 4045
    if (options.trackSize !== undefined) this._.trackSize = options.trackSize;                                         // 4046
                                                                                                                       // 4047
    this._previousNode = null;                                                                                         // 4048
    this._nextNode = null;                                                                                             // 4049
}                                                                                                                      // 4050
                                                                                                                       // 4051
// constructor for internal storage                                                                                    // 4052
ViewSequence.Backing = function Backing(array) {                                                                       // 4053
    this.array = array;                                                                                                // 4054
    this.firstIndex = 0;                                                                                               // 4055
    this.loop = false;                                                                                                 // 4056
    this.firstNode = null;                                                                                             // 4057
    this.lastNode = null;                                                                                              // 4058
    this.cumulativeSizes = [[0, 0]];                                                                                   // 4059
    this.sizeDirty = true;                                                                                             // 4060
    this.trackSize = false;                                                                                            // 4061
};                                                                                                                     // 4062
                                                                                                                       // 4063
// Get value "i" slots away from the first index.                                                                      // 4064
ViewSequence.Backing.prototype.getValue = function getValue(i) {                                                       // 4065
    var _i = i - this.firstIndex;                                                                                      // 4066
    if (_i < 0 || _i >= this.array.length) return null;                                                                // 4067
    return this.array[_i];                                                                                             // 4068
};                                                                                                                     // 4069
                                                                                                                       // 4070
// Set value "i" slots away from the first index.                                                                      // 4071
ViewSequence.Backing.prototype.setValue = function setValue(i, value) {                                                // 4072
    this.array[i - this.firstIndex] = value;                                                                           // 4073
};                                                                                                                     // 4074
                                                                                                                       // 4075
// Get sequence size from backing up to index                                                                          // 4076
// TODO: remove from viewSequence with proper abstraction                                                              // 4077
ViewSequence.Backing.prototype.getSize = function getSize(index) {                                                     // 4078
    return this.cumulativeSizes[index];                                                                                // 4079
};                                                                                                                     // 4080
                                                                                                                       // 4081
// Calculates cumulative size                                                                                          // 4082
// TODO: remove from viewSequence with proper abstraction                                                              // 4083
ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {                                         // 4084
    index = index || this.array.length;                                                                                // 4085
    var size = [0, 0];                                                                                                 // 4086
    for (var i = 0; i < index; i++) {                                                                                  // 4087
        var nodeSize = this.array[i].getSize();                                                                        // 4088
        if (!nodeSize) return undefined;                                                                               // 4089
        if (size[0] !== undefined) {                                                                                   // 4090
            if (nodeSize[0] === undefined) size[0] = undefined;                                                        // 4091
            else size[0] += nodeSize[0];                                                                               // 4092
        }                                                                                                              // 4093
        if (size[1] !== undefined) {                                                                                   // 4094
            if (nodeSize[1] === undefined) size[1] = undefined;                                                        // 4095
            else size[1] += nodeSize[1];                                                                               // 4096
        }                                                                                                              // 4097
        this.cumulativeSizes[i + 1] = size.slice();                                                                    // 4098
    }                                                                                                                  // 4099
    this.sizeDirty = false;                                                                                            // 4100
    return size;                                                                                                       // 4101
};                                                                                                                     // 4102
                                                                                                                       // 4103
// After splicing into the backing store, restore the indexes of each node correctly.                                  // 4104
ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {                           // 4105
    if (!this.array[0]) return;                                                                                        // 4106
                                                                                                                       // 4107
    var i = 0;                                                                                                         // 4108
    var index = this.firstIndex;                                                                                       // 4109
    var indexShiftAmount = insertCount - removeCount;                                                                  // 4110
    var node = this.firstNode;                                                                                         // 4111
                                                                                                                       // 4112
    // find node to begin                                                                                              // 4113
    while (index < start - 1) {                                                                                        // 4114
        node = node.getNext();                                                                                         // 4115
        index++;                                                                                                       // 4116
    }                                                                                                                  // 4117
    // skip removed nodes                                                                                              // 4118
    var spliceStartNode = node;                                                                                        // 4119
    for (i = 0; i < removeCount; i++) {                                                                                // 4120
        node = node.getNext();                                                                                         // 4121
        if (node) node._previousNode = spliceStartNode;                                                                // 4122
    }                                                                                                                  // 4123
    var spliceResumeNode = node ? node.getNext() : null;                                                               // 4124
    // generate nodes for inserted items                                                                               // 4125
    spliceStartNode._nextNode = null;                                                                                  // 4126
    node = spliceStartNode;                                                                                            // 4127
    for (i = 0; i < insertCount; i++) node = node.getNext();                                                           // 4128
    index += insertCount;                                                                                              // 4129
    // resume the chain                                                                                                // 4130
    if (node !== spliceResumeNode) {                                                                                   // 4131
        node._nextNode = spliceResumeNode;                                                                             // 4132
        if (spliceResumeNode) spliceResumeNode._previousNode = node;                                                   // 4133
    }                                                                                                                  // 4134
    if (spliceResumeNode) {                                                                                            // 4135
        node = spliceResumeNode;                                                                                       // 4136
        index++;                                                                                                       // 4137
        while (node && index < this.array.length + this.firstIndex) {                                                  // 4138
            if (node._nextNode) node.index += indexShiftAmount;                                                        // 4139
            else node.index = index;                                                                                   // 4140
            node = node.getNext();                                                                                     // 4141
            index++;                                                                                                   // 4142
        }                                                                                                              // 4143
    }                                                                                                                  // 4144
    if (this.trackSize) this.sizeDirty = true;                                                                         // 4145
};                                                                                                                     // 4146
                                                                                                                       // 4147
/**                                                                                                                    // 4148
 * Return ViewSequence node previous to this node in the list, respecting looping if applied.                          // 4149
 *                                                                                                                     // 4150
 * @method getPrevious                                                                                                 // 4151
 * @return {ViewSequence} previous node.                                                                               // 4152
 */                                                                                                                    // 4153
ViewSequence.prototype.getPrevious = function getPrevious() {                                                          // 4154
    var len = this._.array.length;                                                                                     // 4155
    if (!len) {                                                                                                        // 4156
        this._previousNode = null;                                                                                     // 4157
    }                                                                                                                  // 4158
    else if (this.index === this._.firstIndex) {                                                                       // 4159
        if (this._.loop) {                                                                                             // 4160
            this._previousNode = this._.lastNode || new (this.constructor)({_: this._, index: this._.firstIndex + len - 1});
            this._previousNode._nextNode = this;                                                                       // 4162
        }                                                                                                              // 4163
        else {                                                                                                         // 4164
            this._previousNode = null;                                                                                 // 4165
        }                                                                                                              // 4166
    }                                                                                                                  // 4167
    else if (!this._previousNode) {                                                                                    // 4168
        this._previousNode = new (this.constructor)({_: this._, index: this.index - 1});                               // 4169
        this._previousNode._nextNode = this;                                                                           // 4170
    }                                                                                                                  // 4171
    return this._previousNode;                                                                                         // 4172
};                                                                                                                     // 4173
                                                                                                                       // 4174
/**                                                                                                                    // 4175
 * Return ViewSequence node next after this node in the list, respecting looping if applied.                           // 4176
 *                                                                                                                     // 4177
 * @method getNext                                                                                                     // 4178
 * @return {ViewSequence} previous node.                                                                               // 4179
 */                                                                                                                    // 4180
ViewSequence.prototype.getNext = function getNext() {                                                                  // 4181
    var len = this._.array.length;                                                                                     // 4182
    if (!len) {                                                                                                        // 4183
        this._nextNode = null;                                                                                         // 4184
    }                                                                                                                  // 4185
    else if (this.index === this._.firstIndex + len - 1) {                                                             // 4186
        if (this._.loop) {                                                                                             // 4187
            this._nextNode = this._.firstNode || new (this.constructor)({_: this._, index: this._.firstIndex});        // 4188
            this._nextNode._previousNode = this;                                                                       // 4189
        }                                                                                                              // 4190
        else {                                                                                                         // 4191
            this._nextNode = null;                                                                                     // 4192
        }                                                                                                              // 4193
    }                                                                                                                  // 4194
    else if (!this._nextNode) {                                                                                        // 4195
        this._nextNode = new (this.constructor)({_: this._, index: this.index + 1});                                   // 4196
        this._nextNode._previousNode = this;                                                                           // 4197
    }                                                                                                                  // 4198
    return this._nextNode;                                                                                             // 4199
};                                                                                                                     // 4200
                                                                                                                       // 4201
/**                                                                                                                    // 4202
 * Return index of the provided item in the backing array                                                              // 4203
 *                                                                                                                     // 4204
 * @method indexOf                                                                                                     // 4205
 * @return {Number} index or -1 if not found                                                                           // 4206
 */                                                                                                                    // 4207
ViewSequence.prototype.indexOf = function indexOf(item) {                                                              // 4208
    return this._.array.indexOf(item);                                                                                 // 4209
};                                                                                                                     // 4210
                                                                                                                       // 4211
/**                                                                                                                    // 4212
 * Return index of this ViewSequence node.                                                                             // 4213
 *                                                                                                                     // 4214
 * @method getIndex                                                                                                    // 4215
 * @return {Number} index                                                                                              // 4216
 */                                                                                                                    // 4217
ViewSequence.prototype.getIndex = function getIndex() {                                                                // 4218
    return this.index;                                                                                                 // 4219
};                                                                                                                     // 4220
                                                                                                                       // 4221
/**                                                                                                                    // 4222
 * Return printable version of this ViewSequence node.                                                                 // 4223
 *                                                                                                                     // 4224
 * @method toString                                                                                                    // 4225
 * @return {string} this index as a string                                                                             // 4226
 */                                                                                                                    // 4227
ViewSequence.prototype.toString = function toString() {                                                                // 4228
    return '' + this.index;                                                                                            // 4229
};                                                                                                                     // 4230
                                                                                                                       // 4231
/**                                                                                                                    // 4232
 * Add one or more objects to the beginning of the sequence.                                                           // 4233
 *                                                                                                                     // 4234
 * @method unshift                                                                                                     // 4235
 * @param {...Object} value arguments array of objects                                                                 // 4236
 */                                                                                                                    // 4237
ViewSequence.prototype.unshift = function unshift(value) {                                                             // 4238
    this._.array.unshift.apply(this._.array, arguments);                                                               // 4239
    this._.firstIndex -= arguments.length;                                                                             // 4240
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4241
};                                                                                                                     // 4242
                                                                                                                       // 4243
/**                                                                                                                    // 4244
 * Add one or more objects to the end of the sequence.                                                                 // 4245
 *                                                                                                                     // 4246
 * @method push                                                                                                        // 4247
 * @param {...Object} value arguments array of objects                                                                 // 4248
 */                                                                                                                    // 4249
ViewSequence.prototype.push = function push(value) {                                                                   // 4250
    this._.array.push.apply(this._.array, arguments);                                                                  // 4251
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4252
};                                                                                                                     // 4253
                                                                                                                       // 4254
/**                                                                                                                    // 4255
 * Remove objects from the sequence                                                                                    // 4256
 *                                                                                                                     // 4257
 * @method splice                                                                                                      // 4258
 * @param {Number} index starting index for removal                                                                    // 4259
 * @param {Number} howMany how many elements to remove                                                                 // 4260
 * @param {...Object} value arguments array of objects                                                                 // 4261
 */                                                                                                                    // 4262
ViewSequence.prototype.splice = function splice(index, howMany) {                                                      // 4263
    var values = Array.prototype.slice.call(arguments, 2);                                                             // 4264
    this._.array.splice.apply(this._.array, [index - this._.firstIndex, howMany].concat(values));                      // 4265
    this._.reindex(index, howMany, values.length);                                                                     // 4266
};                                                                                                                     // 4267
                                                                                                                       // 4268
/**                                                                                                                    // 4269
 * Exchange this element's sequence position with another's.                                                           // 4270
 *                                                                                                                     // 4271
 * @method swap                                                                                                        // 4272
 * @param {ViewSequence} other element to swap with.                                                                   // 4273
 */                                                                                                                    // 4274
ViewSequence.prototype.swap = function swap(other) {                                                                   // 4275
    var otherValue = other.get();                                                                                      // 4276
    var myValue = this.get();                                                                                          // 4277
    this._.setValue(this.index, otherValue);                                                                           // 4278
    this._.setValue(other.index, myValue);                                                                             // 4279
                                                                                                                       // 4280
    var myPrevious = this._previousNode;                                                                               // 4281
    var myNext = this._nextNode;                                                                                       // 4282
    var myIndex = this.index;                                                                                          // 4283
    var otherPrevious = other._previousNode;                                                                           // 4284
    var otherNext = other._nextNode;                                                                                   // 4285
    var otherIndex = other.index;                                                                                      // 4286
                                                                                                                       // 4287
    this.index = otherIndex;                                                                                           // 4288
    this._previousNode = (otherPrevious === this) ? other : otherPrevious;                                             // 4289
    if (this._previousNode) this._previousNode._nextNode = this;                                                       // 4290
    this._nextNode = (otherNext === this) ? other : otherNext;                                                         // 4291
    if (this._nextNode) this._nextNode._previousNode = this;                                                           // 4292
                                                                                                                       // 4293
    other.index = myIndex;                                                                                             // 4294
    other._previousNode = (myPrevious === other) ? this : myPrevious;                                                  // 4295
    if (other._previousNode) other._previousNode._nextNode = other;                                                    // 4296
    other._nextNode = (myNext === other) ? this : myNext;                                                              // 4297
    if (other._nextNode) other._nextNode._previousNode = other;                                                        // 4298
                                                                                                                       // 4299
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4300
    else if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                       // 4301
    if (other.index === this._.firstIndex) this._.firstNode = other;                                                   // 4302
    else if (other.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = other;                     // 4303
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4304
};                                                                                                                     // 4305
                                                                                                                       // 4306
   /**                                                                                                                 // 4307
 * Return value of this ViewSequence node.                                                                             // 4308
 *                                                                                                                     // 4309
 * @method get                                                                                                         // 4310
 * @return {Object} value of thiss                                                                                     // 4311
 */                                                                                                                    // 4312
ViewSequence.prototype.get = function get() {                                                                          // 4313
    return this._.getValue(this.index);                                                                                // 4314
};                                                                                                                     // 4315
                                                                                                                       // 4316
   /**                                                                                                                 // 4317
 * Call getSize() on the contained View.                                                                               // 4318
 *                                                                                                                     // 4319
 * @method getSize                                                                                                     // 4320
 * @return {Array.Number} [width, height]                                                                              // 4321
 */                                                                                                                    // 4322
ViewSequence.prototype.getSize = function getSize() {                                                                  // 4323
    var target = this.get();                                                                                           // 4324
    return target ? target.getSize() : null;                                                                           // 4325
};                                                                                                                     // 4326
                                                                                                                       // 4327
/**                                                                                                                    // 4328
 * Generate a render spec from the contents of this component.                                                         // 4329
 * Specifically, this will render the value at the current index.                                                      // 4330
 * @private                                                                                                            // 4331
 * @method render                                                                                                      // 4332
 * @return {number} Render spec for this component                                                                     // 4333
 */                                                                                                                    // 4334
ViewSequence.prototype.render = function render() {                                                                    // 4335
    if (this._.trackSize && this._.sizeDirty) this._.calculateSize();                                                  // 4336
    var target = this.get();                                                                                           // 4337
    return target ? target.render.apply(target, arguments) : null;                                                     // 4338
};                                                                                                                     // 4339
                                                                                                                       // 4340
module.exports = ViewSequence;                                                                                         // 4341
},{}],18:[function(_dereq_,module,exports){                                                                            // 4342
module.exports = {                                                                                                     // 4343
  Context: _dereq_('./Context'),                                                                                       // 4344
  ElementAllocator: _dereq_('./ElementAllocator'),                                                                     // 4345
  ElementOutput: _dereq_('./ElementOutput'),                                                                           // 4346
  Engine: _dereq_('./Engine'),                                                                                         // 4347
  Entity: _dereq_('./Entity'),                                                                                         // 4348
  EventEmitter: _dereq_('./EventEmitter'),                                                                             // 4349
  EventHandler: _dereq_('./EventHandler'),                                                                             // 4350
  Group: _dereq_('./Group'),                                                                                           // 4351
  Modifier: _dereq_('./Modifier'),                                                                                     // 4352
  OptionsManager: _dereq_('./OptionsManager'),                                                                         // 4353
  RenderNode: _dereq_('./RenderNode'),                                                                                 // 4354
  SpecParser: _dereq_('./SpecParser'),                                                                                 // 4355
  Surface: _dereq_('./Surface'),                                                                                       // 4356
  Scene: _dereq_('./Scene'),                                                                                           // 4357
  Transform: _dereq_('./Transform'),                                                                                   // 4358
  View: _dereq_('./View'),                                                                                             // 4359
  ViewSequence: _dereq_('./ViewSequence')                                                                              // 4360
};                                                                                                                     // 4361
                                                                                                                       // 4362
},{"./Context":1,"./ElementAllocator":2,"./ElementOutput":3,"./Engine":4,"./Entity":5,"./EventEmitter":6,"./EventHandler":7,"./Group":8,"./Modifier":9,"./OptionsManager":10,"./RenderNode":11,"./Scene":12,"./SpecParser":13,"./Surface":14,"./Transform":15,"./View":16,"./ViewSequence":17}],19:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4364
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4365
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4366
 *                                                                                                                     // 4367
 * Owner: david@famo.us                                                                                                // 4368
 * @license MPL 2.0                                                                                                    // 4369
 * @copyright Famous Industries, Inc. 2014                                                                             // 4370
 */                                                                                                                    // 4371
                                                                                                                       // 4372
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4373
                                                                                                                       // 4374
/**                                                                                                                    // 4375
 * A switch which wraps several event destinations and                                                                 // 4376
 *  redirects received events to at most one of them.                                                                  // 4377
 *  Setting the 'mode' of the object dictates which one                                                                // 4378
 *  of these destinations will receive events.                                                                         // 4379
 *                                                                                                                     // 4380
 * @class EventArbiter                                                                                                 // 4381
 * @constructor                                                                                                        // 4382
 *                                                                                                                     // 4383
 * @param {Number | string} startMode initial setting of switch,                                                       // 4384
 */                                                                                                                    // 4385
function EventArbiter(startMode) {                                                                                     // 4386
    this.dispatchers = {};                                                                                             // 4387
    this.currMode = undefined;                                                                                         // 4388
    this.setMode(startMode);                                                                                           // 4389
}                                                                                                                      // 4390
                                                                                                                       // 4391
/**                                                                                                                    // 4392
 * Set switch to this mode, passing events to the corresponding                                                        // 4393
 *   EventHandler.  If mode has changed, emits 'change' event,                                                         // 4394
 *   emits 'unpipe' event to the old mode's handler, and emits 'pipe'                                                  // 4395
 *   event to the new mode's handler.                                                                                  // 4396
 *                                                                                                                     // 4397
 * @method setMode                                                                                                     // 4398
 *                                                                                                                     // 4399
 * @param {string | number} mode indicating which event handler to send to.                                            // 4400
 */                                                                                                                    // 4401
EventArbiter.prototype.setMode = function setMode(mode) {                                                              // 4402
    if (mode !== this.currMode) {                                                                                      // 4403
        var startMode = this.currMode;                                                                                 // 4404
                                                                                                                       // 4405
        if (this.dispatchers[this.currMode]) this.dispatchers[this.currMode].trigger('unpipe');                        // 4406
        this.currMode = mode;                                                                                          // 4407
        if (this.dispatchers[mode]) this.dispatchers[mode].emit('pipe');                                               // 4408
        this.emit('change', {from: startMode, to: mode});                                                              // 4409
    }                                                                                                                  // 4410
};                                                                                                                     // 4411
                                                                                                                       // 4412
/**                                                                                                                    // 4413
 * Return the existing EventHandler corresponding to this                                                              // 4414
 *   mode, creating one if it doesn't exist.                                                                           // 4415
 *                                                                                                                     // 4416
 * @method forMode                                                                                                     // 4417
 *                                                                                                                     // 4418
 * @param {string | number} mode mode to which this eventHandler corresponds                                           // 4419
 *                                                                                                                     // 4420
 * @return {EventHandler} eventHandler corresponding to this mode                                                      // 4421
 */                                                                                                                    // 4422
EventArbiter.prototype.forMode = function forMode(mode) {                                                              // 4423
    if (!this.dispatchers[mode]) this.dispatchers[mode] = new EventHandler();                                          // 4424
    return this.dispatchers[mode];                                                                                     // 4425
};                                                                                                                     // 4426
                                                                                                                       // 4427
/**                                                                                                                    // 4428
 * Trigger an event, sending to currently selected handler, if                                                         // 4429
 *   it is listening for provided 'type' key.                                                                          // 4430
 *                                                                                                                     // 4431
 * @method emit                                                                                                        // 4432
 *                                                                                                                     // 4433
 * @param {string} eventType event type key (for example, 'click')                                                     // 4434
 * @param {Object} event event data                                                                                    // 4435
 * @return {EventHandler} this                                                                                         // 4436
 */                                                                                                                    // 4437
EventArbiter.prototype.emit = function emit(eventType, event) {                                                        // 4438
    if (this.currMode === undefined) return false;                                                                     // 4439
    if (!event) event = {};                                                                                            // 4440
    var dispatcher = this.dispatchers[this.currMode];                                                                  // 4441
    if (dispatcher) return dispatcher.trigger(eventType, event);                                                       // 4442
};                                                                                                                     // 4443
                                                                                                                       // 4444
module.exports = EventArbiter;                                                                                         // 4445
},{"../core/EventHandler":7}],20:[function(_dereq_,module,exports){                                                    // 4446
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4447
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4448
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4449
 *                                                                                                                     // 4450
 * Owner: david@famo.us                                                                                                // 4451
 * @license MPL 2.0                                                                                                    // 4452
 * @copyright Famous Industries, Inc. 2014                                                                             // 4453
 */                                                                                                                    // 4454
                                                                                                                       // 4455
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4456
                                                                                                                       // 4457
/**                                                                                                                    // 4458
 * EventFilter regulates the broadcasting of events based on                                                           // 4459
 *  a specified condition function of standard event type: function(type, data).                                       // 4460
 *                                                                                                                     // 4461
 * @class EventFilter                                                                                                  // 4462
 * @constructor                                                                                                        // 4463
 *                                                                                                                     // 4464
 * @param {function} condition function to determine whether or not                                                    // 4465
 *    events are emitted.                                                                                              // 4466
 */                                                                                                                    // 4467
function EventFilter(condition) {                                                                                      // 4468
    EventHandler.call(this);                                                                                           // 4469
    this._condition = condition;                                                                                       // 4470
}                                                                                                                      // 4471
EventFilter.prototype = Object.create(EventHandler.prototype);                                                         // 4472
EventFilter.prototype.constructor = EventFilter;                                                                       // 4473
                                                                                                                       // 4474
/**                                                                                                                    // 4475
 * If filter condition is met, trigger an event, sending to all downstream handlers                                    // 4476
 *   listening for provided 'type' key.                                                                                // 4477
 *                                                                                                                     // 4478
 * @method emit                                                                                                        // 4479
 *                                                                                                                     // 4480
 * @param {string} type event type key (for example, 'click')                                                          // 4481
 * @param {Object} data event data                                                                                     // 4482
 * @return {EventHandler} this                                                                                         // 4483
 */                                                                                                                    // 4484
EventFilter.prototype.emit = function emit(type, data) {                                                               // 4485
    if (this._condition(type, data))                                                                                   // 4486
        return EventHandler.prototype.emit.apply(this, arguments);                                                     // 4487
};                                                                                                                     // 4488
                                                                                                                       // 4489
/**                                                                                                                    // 4490
 * An alias of emit. Trigger determines whether to send                                                                // 4491
 *  events based on the return value of it's condition function                                                        // 4492
 *  when passed the event type and associated data.                                                                    // 4493
 *                                                                                                                     // 4494
 * @method trigger                                                                                                     // 4495
 * @param {string} type name of the event                                                                              // 4496
 * @param {object} data associated data                                                                                // 4497
 */                                                                                                                    // 4498
EventFilter.prototype.trigger = EventFilter.prototype.emit;                                                            // 4499
                                                                                                                       // 4500
module.exports = EventFilter;                                                                                          // 4501
},{"../core/EventHandler":7}],21:[function(_dereq_,module,exports){                                                    // 4502
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4503
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4504
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4505
 *                                                                                                                     // 4506
 * Owner: david@famo.us                                                                                                // 4507
 * @license MPL 2.0                                                                                                    // 4508
 * @copyright Famous Industries, Inc. 2014                                                                             // 4509
 */                                                                                                                    // 4510
                                                                                                                       // 4511
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4512
                                                                                                                       // 4513
/**                                                                                                                    // 4514
 * EventMapper routes events to various event destinations                                                             // 4515
 *  based on custom logic.  The function signature is arbitrary.                                                       // 4516
 *                                                                                                                     // 4517
 * @class EventMapper                                                                                                  // 4518
 * @constructor                                                                                                        // 4519
 *                                                                                                                     // 4520
 * @param {function} mappingFunction function to determine where                                                       // 4521
 *  events are routed to.                                                                                              // 4522
 */                                                                                                                    // 4523
function EventMapper(mappingFunction) {                                                                                // 4524
    EventHandler.call(this);                                                                                           // 4525
    this._mappingFunction = mappingFunction;                                                                           // 4526
}                                                                                                                      // 4527
EventMapper.prototype = Object.create(EventHandler.prototype);                                                         // 4528
EventMapper.prototype.constructor = EventMapper;                                                                       // 4529
                                                                                                                       // 4530
EventMapper.prototype.subscribe = null;                                                                                // 4531
EventMapper.prototype.unsubscribe = null;                                                                              // 4532
                                                                                                                       // 4533
/**                                                                                                                    // 4534
 * Trigger an event, sending to all mapped downstream handlers                                                         // 4535
 *   listening for provided 'type' key.                                                                                // 4536
 *                                                                                                                     // 4537
 * @method emit                                                                                                        // 4538
 *                                                                                                                     // 4539
 * @param {string} type event type key (for example, 'click')                                                          // 4540
 * @param {Object} data event data                                                                                     // 4541
 * @return {EventHandler} this                                                                                         // 4542
 */                                                                                                                    // 4543
EventMapper.prototype.emit = function emit(type, data) {                                                               // 4544
    var target = this._mappingFunction.apply(this, arguments);                                                         // 4545
    if (target && (target.emit instanceof Function)) target.emit(type, data);                                          // 4546
};                                                                                                                     // 4547
                                                                                                                       // 4548
/**                                                                                                                    // 4549
 * Alias of emit.                                                                                                      // 4550
 * @method trigger                                                                                                     // 4551
 */                                                                                                                    // 4552
EventMapper.prototype.trigger = EventMapper.prototype.emit;                                                            // 4553
                                                                                                                       // 4554
module.exports = EventMapper;                                                                                          // 4555
},{"../core/EventHandler":7}],22:[function(_dereq_,module,exports){                                                    // 4556
module.exports = {                                                                                                     // 4557
  EventArbiter: _dereq_('./EventArbiter'),                                                                             // 4558
  EventFilter: _dereq_('./EventFilter'),                                                                               // 4559
  EventMapper: _dereq_('./EventMapper')                                                                                // 4560
};                                                                                                                     // 4561
                                                                                                                       // 4562
},{"./EventArbiter":19,"./EventFilter":20,"./EventMapper":21}],23:[function(_dereq_,module,exports){                   // 4563
module.exports = {                                                                                                     // 4564
  core: _dereq_('./core'),                                                                                             // 4565
  events: _dereq_('./events'),                                                                                         // 4566
  inputs: _dereq_('./inputs'),                                                                                         // 4567
  modifiers: _dereq_('./modifiers'),                                                                                   // 4568
  math: _dereq_('./math'),                                                                                             // 4569
  physics: _dereq_('./physics'),                                                                                       // 4570
  surfaces: _dereq_('./surfaces'),                                                                                     // 4571
  utilities: _dereq_('./utilities'),                                                                                   // 4572
  transitions: _dereq_('./transitions'),                                                                               // 4573
  views: _dereq_('./views'),                                                                                           // 4574
  widgets: _dereq_('./widgets')                                                                                        // 4575
};                                                                                                                     // 4576
                                                                                                                       // 4577
},{"./core":18,"./events":22,"./inputs":36,"./math":42,"./modifiers":47,"./physics":71,"./surfaces":82,"./transitions":92,"./utilities":96,"./views":111,"./widgets":116}],24:[function(_dereq_,module,exports){
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4579
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 4580
                                                                                                                       // 4581
/**                                                                                                                    // 4582
 * Accumulates differentials of event sources that emit a `delta`                                                      // 4583
 *  attribute taking a Number or Array of Number types. The accumulated                                                // 4584
 *  value is stored in a getter/setter.                                                                                // 4585
 *                                                                                                                     // 4586
 * @class Accumulator                                                                                                  // 4587
 * @constructor                                                                                                        // 4588
 * @param value {Number|Array|Transitionable}   Initializing value                                                     // 4589
 * @param [eventName='update'] {String}         Name of update event                                                   // 4590
 */                                                                                                                    // 4591
function Accumulator(value, eventName) {                                                                               // 4592
    if (eventName === undefined) eventName = 'update';                                                                 // 4593
                                                                                                                       // 4594
    this._state = (value && value.get && value.set)                                                                    // 4595
        ? value                                                                                                        // 4596
        : new Transitionable(value || 0);                                                                              // 4597
                                                                                                                       // 4598
    this._eventInput = new EventHandler();                                                                             // 4599
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4600
                                                                                                                       // 4601
    this._eventInput.on(eventName, _handleUpdate.bind(this));                                                          // 4602
}                                                                                                                      // 4603
                                                                                                                       // 4604
function _handleUpdate(data) {                                                                                         // 4605
    var delta = data.delta;                                                                                            // 4606
    var state = this.get();                                                                                            // 4607
                                                                                                                       // 4608
    if (delta.constructor === state.constructor){                                                                      // 4609
        var newState = (delta instanceof Array)                                                                        // 4610
            ? [state[0] + delta[0], state[1] + delta[1]]                                                               // 4611
            : state + delta;                                                                                           // 4612
        this.set(newState);                                                                                            // 4613
    }                                                                                                                  // 4614
}                                                                                                                      // 4615
                                                                                                                       // 4616
/**                                                                                                                    // 4617
 * Basic getter                                                                                                        // 4618
 *                                                                                                                     // 4619
 * @method get                                                                                                         // 4620
 * @return {Number|Array} current value                                                                                // 4621
 */                                                                                                                    // 4622
Accumulator.prototype.get = function get() {                                                                           // 4623
    return this._state.get();                                                                                          // 4624
};                                                                                                                     // 4625
                                                                                                                       // 4626
/**                                                                                                                    // 4627
 * Basic setter                                                                                                        // 4628
 *                                                                                                                     // 4629
 * @method set                                                                                                         // 4630
 * @param value {Number|Array} new value                                                                               // 4631
 */                                                                                                                    // 4632
Accumulator.prototype.set = function set(value) {                                                                      // 4633
    this._state.set(value);                                                                                            // 4634
};                                                                                                                     // 4635
                                                                                                                       // 4636
module.exports = Accumulator;                                                                                          // 4637
},{"../core/EventHandler":7,"../transitions/Transitionable":88}],25:[function(_dereq_,module,exports){                 // 4638
var hasTouch = 'ontouchstart' in window;                                                                               // 4639
                                                                                                                       // 4640
function kill(type) {                                                                                                  // 4641
    window.addEventListener(type, function(event) {                                                                    // 4642
        event.stopPropagation();                                                                                       // 4643
        return false;                                                                                                  // 4644
    }, true);                                                                                                          // 4645
}                                                                                                                      // 4646
                                                                                                                       // 4647
if (hasTouch) {                                                                                                        // 4648
    kill('mousedown');                                                                                                 // 4649
    kill('mousemove');                                                                                                 // 4650
    kill('mouseup');                                                                                                   // 4651
    kill('mouseleave');                                                                                                // 4652
}                                                                                                                      // 4653
},{}],26:[function(_dereq_,module,exports){                                                                            // 4654
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4655
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4656
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4657
 *                                                                                                                     // 4658
 * Owner: mark@famo.us                                                                                                 // 4659
 * @license MPL 2.0                                                                                                    // 4660
 * @copyright Famous Industries, Inc. 2014                                                                             // 4661
 */                                                                                                                    // 4662
                                                                                                                       // 4663
                                                                                                                       // 4664
                                                                                                                       // 4665
/**                                                                                                                    // 4666
 * FastClick is an override shim which maps event pairs of                                                             // 4667
 *   'touchstart' and 'touchend' which differ by less than a certain                                                   // 4668
 *   threshold to the 'click' event.                                                                                   // 4669
 *   This is used to speed up clicks on some browsers.                                                                 // 4670
 */                                                                                                                    // 4671
(function() {                                                                                                          // 4672
  if (!window.CustomEvent) return;                                                                                     // 4673
  var clickThreshold = 300;                                                                                            // 4674
  var clickWindow = 500;                                                                                               // 4675
  var potentialClicks = {};                                                                                            // 4676
  var recentlyDispatched = {};                                                                                         // 4677
  var _now = Date.now;                                                                                                 // 4678
                                                                                                                       // 4679
  window.addEventListener('touchstart', function(event) {                                                              // 4680
      var timestamp = _now();                                                                                          // 4681
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4682
          var touch = event.changedTouches[i];                                                                         // 4683
          potentialClicks[touch.identifier] = timestamp;                                                               // 4684
      }                                                                                                                // 4685
  });                                                                                                                  // 4686
                                                                                                                       // 4687
  window.addEventListener('touchmove', function(event) {                                                               // 4688
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4689
          var touch = event.changedTouches[i];                                                                         // 4690
          delete potentialClicks[touch.identifier];                                                                    // 4691
      }                                                                                                                // 4692
  });                                                                                                                  // 4693
                                                                                                                       // 4694
  window.addEventListener('touchend', function(event) {                                                                // 4695
      var currTime = _now();                                                                                           // 4696
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4697
          var touch = event.changedTouches[i];                                                                         // 4698
          var startTime = potentialClicks[touch.identifier];                                                           // 4699
          if (startTime && currTime - startTime < clickThreshold) {                                                    // 4700
              var clickEvt = new window.CustomEvent('click', {                                                         // 4701
                  'bubbles': true,                                                                                     // 4702
                  'detail': touch                                                                                      // 4703
              });                                                                                                      // 4704
              recentlyDispatched[currTime] = event;                                                                    // 4705
              event.target.dispatchEvent(clickEvt);                                                                    // 4706
          }                                                                                                            // 4707
          delete potentialClicks[touch.identifier];                                                                    // 4708
      }                                                                                                                // 4709
  });                                                                                                                  // 4710
                                                                                                                       // 4711
  window.addEventListener('click', function(event) {                                                                   // 4712
      var currTime = _now();                                                                                           // 4713
      for (var i in recentlyDispatched) {                                                                              // 4714
          var previousEvent = recentlyDispatched[i];                                                                   // 4715
          if (currTime - i < clickWindow) {                                                                            // 4716
              if (event instanceof window.MouseEvent && event.target === previousEvent.target) event.stopPropagation();
          }                                                                                                            // 4718
          else delete recentlyDispatched[i];                                                                           // 4719
      }                                                                                                                // 4720
  }, true);                                                                                                            // 4721
})();                                                                                                                  // 4722
},{}],27:[function(_dereq_,module,exports){                                                                            // 4723
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4724
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4725
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4726
 *                                                                                                                     // 4727
 * Owner: mark@famo.us                                                                                                 // 4728
 * @license MPL 2.0                                                                                                    // 4729
 * @copyright Famous Industries, Inc. 2014                                                                             // 4730
 */                                                                                                                    // 4731
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4732
                                                                                                                       // 4733
/**                                                                                                                    // 4734
 * Combines multiple types of sync classes (e.g. mouse, touch,                                                         // 4735
 *  scrolling) into one standardized interface for inclusion in widgets.                                               // 4736
 *                                                                                                                     // 4737
 *  Sync classes are first registered with a key, and then can be accessed                                             // 4738
 *  globally by key.                                                                                                   // 4739
 *                                                                                                                     // 4740
 *  Emits 'start', 'update' and 'end' events as a union of the sync class                                              // 4741
 *  providers.                                                                                                         // 4742
 *                                                                                                                     // 4743
 * @class GenericSync                                                                                                  // 4744
 * @constructor                                                                                                        // 4745
 * @param syncs {Object|Array} object with fields {sync key : sync options}                                            // 4746
 *    or an array of registered sync keys                                                                              // 4747
 * @param [options] {Object|Array} options object to set on all syncs                                                  // 4748
 */                                                                                                                    // 4749
function GenericSync(syncs, options) {                                                                                 // 4750
    this._eventInput = new EventHandler();                                                                             // 4751
    this._eventOutput = new EventHandler();                                                                            // 4752
                                                                                                                       // 4753
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4754
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4755
                                                                                                                       // 4756
    this._syncs = {};                                                                                                  // 4757
    if (syncs) this.addSync(syncs);                                                                                    // 4758
    if (options) this.setOptions(options);                                                                             // 4759
}                                                                                                                      // 4760
                                                                                                                       // 4761
GenericSync.DIRECTION_X = 0;                                                                                           // 4762
GenericSync.DIRECTION_Y = 1;                                                                                           // 4763
GenericSync.DIRECTION_Z = 2;                                                                                           // 4764
                                                                                                                       // 4765
// Global registry of sync classes. Append only.                                                                       // 4766
var registry = {};                                                                                                     // 4767
                                                                                                                       // 4768
/**                                                                                                                    // 4769
 * Register a global sync class with an identifying key                                                                // 4770
 *                                                                                                                     // 4771
 * @static                                                                                                             // 4772
 * @method register                                                                                                    // 4773
 *                                                                                                                     // 4774
 * @param syncObject {Object} an object of {sync key : sync options} fields                                            // 4775
 */                                                                                                                    // 4776
GenericSync.register = function register(syncObject) {                                                                 // 4777
    for (var key in syncObject){                                                                                       // 4778
        if (registry[key]){                                                                                            // 4779
            if (registry[key] === syncObject[key]) return; // redundant registration                                   // 4780
            else throw new Error('this key is registered to a different sync class');                                  // 4781
        }                                                                                                              // 4782
        else registry[key] = syncObject[key];                                                                          // 4783
    }                                                                                                                  // 4784
};                                                                                                                     // 4785
                                                                                                                       // 4786
/**                                                                                                                    // 4787
 * Helper to set options on all sync instances                                                                         // 4788
 *                                                                                                                     // 4789
 * @method setOptions                                                                                                  // 4790
 * @param options {Object} options object                                                                              // 4791
 */                                                                                                                    // 4792
GenericSync.prototype.setOptions = function(options) {                                                                 // 4793
    for (var key in this._syncs){                                                                                      // 4794
        this._syncs[key].setOptions(options);                                                                          // 4795
    }                                                                                                                  // 4796
};                                                                                                                     // 4797
                                                                                                                       // 4798
/**                                                                                                                    // 4799
 * Pipe events to a sync class                                                                                         // 4800
 *                                                                                                                     // 4801
 * @method pipeSync                                                                                                    // 4802
 * @param key {String} identifier for sync class                                                                       // 4803
 */                                                                                                                    // 4804
GenericSync.prototype.pipeSync = function pipeToSync(key) {                                                            // 4805
    var sync = this._syncs[key];                                                                                       // 4806
    this._eventInput.pipe(sync);                                                                                       // 4807
    sync.pipe(this._eventOutput);                                                                                      // 4808
};                                                                                                                     // 4809
                                                                                                                       // 4810
/**                                                                                                                    // 4811
 * Unpipe events from a sync class                                                                                     // 4812
 *                                                                                                                     // 4813
 * @method unpipeSync                                                                                                  // 4814
 * @param key {String} identifier for sync class                                                                       // 4815
 */                                                                                                                    // 4816
GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {                                                      // 4817
    var sync = this._syncs[key];                                                                                       // 4818
    this._eventInput.unpipe(sync);                                                                                     // 4819
    sync.unpipe(this._eventOutput);                                                                                    // 4820
};                                                                                                                     // 4821
                                                                                                                       // 4822
function _addSingleSync(key, options) {                                                                                // 4823
    if (!registry[key]) return;                                                                                        // 4824
    this._syncs[key] = new (registry[key])(options);                                                                   // 4825
    this.pipeSync(key);                                                                                                // 4826
}                                                                                                                      // 4827
                                                                                                                       // 4828
/**                                                                                                                    // 4829
 * Add a sync class to from the registered classes                                                                     // 4830
 *                                                                                                                     // 4831
 * @method addSync                                                                                                     // 4832
 * @param syncs {Object|Array.String} an array of registered sync keys                                                 // 4833
 *    or an object with fields {sync key : sync options}                                                               // 4834
 */                                                                                                                    // 4835
GenericSync.prototype.addSync = function addSync(syncs) {                                                              // 4836
    if (syncs instanceof Array)                                                                                        // 4837
        for (var i = 0; i < syncs.length; i++)                                                                         // 4838
            _addSingleSync.call(this, syncs[i]);                                                                       // 4839
    else if (syncs instanceof Object)                                                                                  // 4840
        for (var key in syncs)                                                                                         // 4841
            _addSingleSync.call(this, key, syncs[key]);                                                                // 4842
};                                                                                                                     // 4843
                                                                                                                       // 4844
module.exports = GenericSync;                                                                                          // 4845
},{"../core/EventHandler":7}],28:[function(_dereq_,module,exports){                                                    // 4846
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4847
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4848
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4849
 *                                                                                                                     // 4850
 * Owner: mark@famo.us                                                                                                 // 4851
 * @license MPL 2.0                                                                                                    // 4852
 * @copyright Famous Industries, Inc. 2014                                                                             // 4853
 */                                                                                                                    // 4854
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4855
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 4856
                                                                                                                       // 4857
/**                                                                                                                    // 4858
 * Handles piped in mouse drag events. Outputs an object with the position delta from last frame, position from start, // 4859
 * current velocity averaged out over the velocitySampleLength (set via options), clientX, clientY, offsetX, and offsetY.
 *                                                                                                                     // 4861
 * Emits 'start', 'update' and 'end' events. Designed to be used either as a standalone MouseSync, or as part of a     // 4862
 * GenericSync.                                                                                                        // 4863
 *                                                                                                                     // 4864
 * @class MouseSync                                                                                                    // 4865
 * @constructor                                                                                                        // 4866
 *                                                                                                                     // 4867
 * @example                                                                                                            // 4868
 *   var Surface = require('../core/Surface');                                                                         // 4869
 *   var MouseSync = require('../inputs/MouseSync');                                                                   // 4870
 *                                                                                                                     // 4871
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 4872
 *   var mouseSync = new MouseSync();                                                                                  // 4873
 *   surface.pipe(mouseSync);                                                                                          // 4874
 *                                                                                                                     // 4875
 *   mouseSync.on('start', function (e) { // react to start });                                                        // 4876
 *   mouseSync.on('update', function (e) { // react to update });                                                      // 4877
 *   mouseSync.on('end', function (e) { // react to end });                                                            // 4878
 *                                                                                                                     // 4879
 * @param [options] {Object}                An object of the following configurable options.                           // 4880
 * @param [options.clickThreshold] {Number} Absolute distance from click origin that will still trigger a click.       // 4881
 * @param [options.direction] {Number}      Read from a particular axis. Valid options are: undefined, 0 or 1. 0 corresponds to x, and 1 to y. Default is undefined, which allows both x and y.
 * @param [options.rails] {Boolean}         Read from axis with the greatest differential.                             // 4883
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 4884
 * @param [options.propogate] {Boolean}     Add a listener to document on mouseleave. This allows drag events to continue across the entire page.
 */                                                                                                                    // 4886
function MouseSync(options) {                                                                                          // 4887
    this.options =  Object.create(MouseSync.DEFAULT_OPTIONS);                                                          // 4888
    this._optionsManager = new OptionsManager(this.options);                                                           // 4889
                                                                                                                       // 4890
    if (options) this.setOptions(options);                                                                             // 4891
                                                                                                                       // 4892
    this._eventInput = new EventHandler();                                                                             // 4893
    this._eventOutput = new EventHandler();                                                                            // 4894
                                                                                                                       // 4895
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4896
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4897
                                                                                                                       // 4898
    this._eventInput.on('mousedown', _handleStart.bind(this));                                                         // 4899
    this._eventInput.on('mousemove', _handleMove.bind(this));                                                          // 4900
    this._eventInput.on('mouseup', _handleEnd.bind(this));                                                             // 4901
                                                                                                                       // 4902
    if (this.options.propogate) this._eventInput.on('mouseleave', _handleLeave.bind(this));                            // 4903
    else this._eventInput.on('mouseleave', _handleEnd.bind(this));                                                     // 4904
                                                                                                                       // 4905
    if (this.options.clickThreshold) {                                                                                 // 4906
        window.addEventListener('click', function(event) {                                                             // 4907
            if (Math.sqrt(Math.pow(this._displacement[0], 2) + Math.pow(this._displacement[1], 2)) > this.options.clickThreshold) {
                event.stopPropagation();                                                                               // 4909
            }                                                                                                          // 4910
        }.bind(this), true);                                                                                           // 4911
    }                                                                                                                  // 4912
                                                                                                                       // 4913
    this._payload = {                                                                                                  // 4914
        delta    : null,                                                                                               // 4915
        position : null,                                                                                               // 4916
        velocity : null,                                                                                               // 4917
        clientX  : 0,                                                                                                  // 4918
        clientY  : 0,                                                                                                  // 4919
        offsetX  : 0,                                                                                                  // 4920
        offsetY  : 0                                                                                                   // 4921
    };                                                                                                                 // 4922
                                                                                                                       // 4923
    this._positionHistory = [];                                                                                        // 4924
    this._position = null;      // to be deprecated                                                                    // 4925
    this._prevCoord = undefined;                                                                                       // 4926
    this._prevTime = undefined;                                                                                        // 4927
    this._down = false;                                                                                                // 4928
    this._moved = false;                                                                                               // 4929
    this._displacement = [0,0];                                                                                        // 4930
    this._documentActive = false;                                                                                      // 4931
}                                                                                                                      // 4932
                                                                                                                       // 4933
MouseSync.DEFAULT_OPTIONS = {                                                                                          // 4934
    clickThreshold: undefined,                                                                                         // 4935
    direction: undefined,                                                                                              // 4936
    rails: false,                                                                                                      // 4937
    scale: 1,                                                                                                          // 4938
    propogate: true,  // events piped to document on mouseleave                                                        // 4939
    velocitySampleLength: 10,                                                                                          // 4940
    preventDefault: true                                                                                               // 4941
};                                                                                                                     // 4942
                                                                                                                       // 4943
MouseSync.DIRECTION_X = 0;                                                                                             // 4944
MouseSync.DIRECTION_Y = 1;                                                                                             // 4945
                                                                                                                       // 4946
var MINIMUM_TICK_TIME = 8;                                                                                             // 4947
                                                                                                                       // 4948
/**                                                                                                                    // 4949
 *  Triggered by mousedown.                                                                                            // 4950
 *                                                                                                                     // 4951
 *  @method _handleStart                                                                                               // 4952
 *  @private                                                                                                           // 4953
 */                                                                                                                    // 4954
function _handleStart(event) {                                                                                         // 4955
    var delta;                                                                                                         // 4956
    var velocity;                                                                                                      // 4957
    if (this.options.preventDefault) event.preventDefault(); // prevent drag                                           // 4958
                                                                                                                       // 4959
    var x = event.clientX;                                                                                             // 4960
    var y = event.clientY;                                                                                             // 4961
                                                                                                                       // 4962
    this._prevCoord = [x, y];                                                                                          // 4963
    this._prevTime = Date.now();                                                                                       // 4964
    this._down = true;                                                                                                 // 4965
    this._move = false;                                                                                                // 4966
                                                                                                                       // 4967
    if (this.options.direction !== undefined) {                                                                        // 4968
        this._position = 0;                                                                                            // 4969
        delta = 0;                                                                                                     // 4970
        velocity = 0;                                                                                                  // 4971
    }                                                                                                                  // 4972
    else {                                                                                                             // 4973
        this._position = [0, 0];                                                                                       // 4974
        delta = [0, 0];                                                                                                // 4975
        velocity = [0, 0];                                                                                             // 4976
    }                                                                                                                  // 4977
                                                                                                                       // 4978
    if (this.options.clickThreshold) {                                                                                 // 4979
        this._displacement = [0,0];                                                                                    // 4980
    }                                                                                                                  // 4981
                                                                                                                       // 4982
    var payload = this._payload;                                                                                       // 4983
    payload.delta = delta;                                                                                             // 4984
    payload.position = this._position;                                                                                 // 4985
    payload.velocity = velocity;                                                                                       // 4986
    payload.clientX = x;                                                                                               // 4987
    payload.clientY = y;                                                                                               // 4988
    payload.offsetX = event.offsetX;                                                                                   // 4989
    payload.offsetY = event.offsetY;                                                                                   // 4990
                                                                                                                       // 4991
    this._positionHistory.push({                                                                                       // 4992
        position: payload.position.slice ? payload.position.slice(0) : payload.position,                               // 4993
        time: this._prevTime                                                                                           // 4994
    });                                                                                                                // 4995
                                                                                                                       // 4996
    this._eventOutput.emit('start', payload);                                                                          // 4997
    this._documentActive = false;                                                                                      // 4998
}                                                                                                                      // 4999
                                                                                                                       // 5000
/**                                                                                                                    // 5001
 *  Triggered by mousemove.                                                                                            // 5002
 *                                                                                                                     // 5003
 *  @method _handleMove                                                                                                // 5004
 *  @private                                                                                                           // 5005
 */                                                                                                                    // 5006
function _handleMove(event) {                                                                                          // 5007
    if (!this._prevCoord) return;                                                                                      // 5008
                                                                                                                       // 5009
    var prevCoord = this._prevCoord;                                                                                   // 5010
    var prevTime = this._prevTime;                                                                                     // 5011
                                                                                                                       // 5012
    var x = event.clientX;                                                                                             // 5013
    var y = event.clientY;                                                                                             // 5014
                                                                                                                       // 5015
    var currTime = Date.now();                                                                                         // 5016
                                                                                                                       // 5017
    var diffX = x - prevCoord[0];                                                                                      // 5018
    var diffY = y - prevCoord[1];                                                                                      // 5019
                                                                                                                       // 5020
    if (this.options.rails) {                                                                                          // 5021
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5022
        else diffX = 0;                                                                                                // 5023
    }                                                                                                                  // 5024
                                                                                                                       // 5025
    var diffTime = Math.max(currTime - this._positionHistory[0].time, MINIMUM_TICK_TIME); // minimum tick time         // 5026
                                                                                                                       // 5027
    var scale = this.options.scale;                                                                                    // 5028
    var nextVel;                                                                                                       // 5029
    var nextDelta;                                                                                                     // 5030
                                                                                                                       // 5031
    if (this.options.direction === MouseSync.DIRECTION_X) {                                                            // 5032
        nextDelta = scale * diffX;                                                                                     // 5033
        this._position += nextDelta;                                                                                   // 5034
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;                             // 5035
    }                                                                                                                  // 5036
    else if (this.options.direction === MouseSync.DIRECTION_Y) {                                                       // 5037
        nextDelta = scale * diffY;                                                                                     // 5038
        this._position += nextDelta;                                                                                   // 5039
        nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;                             // 5040
    }                                                                                                                  // 5041
    else {                                                                                                             // 5042
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5043
        nextVel = [                                                                                                    // 5044
            scale * (this._position[0] - this._positionHistory[0].position[0]) / diffTime,                             // 5045
            scale * (this._position[1] - this._positionHistory[0].position[1]) / diffTime                              // 5046
        ];                                                                                                             // 5047
        this._position[0] += nextDelta[0];                                                                             // 5048
        this._position[1] += nextDelta[1];                                                                             // 5049
    }                                                                                                                  // 5050
                                                                                                                       // 5051
    if (this.options.clickThreshold !== false) {                                                                       // 5052
        this._displacement[0] += diffX;                                                                                // 5053
        this._displacement[1] += diffY;                                                                                // 5054
    }                                                                                                                  // 5055
                                                                                                                       // 5056
    var payload = this._payload;                                                                                       // 5057
    payload.delta    = nextDelta;                                                                                      // 5058
    payload.position = this._position;                                                                                 // 5059
    payload.velocity = nextVel;                                                                                        // 5060
    payload.clientX  = x;                                                                                              // 5061
    payload.clientY  = y;                                                                                              // 5062
    payload.offsetX  = event.offsetX;                                                                                  // 5063
    payload.offsetY  = event.offsetY;                                                                                  // 5064
                                                                                                                       // 5065
    if (this._positionHistory.length === this.options.velocitySampleLength) {                                          // 5066
      this._positionHistory.shift();                                                                                   // 5067
    }                                                                                                                  // 5068
                                                                                                                       // 5069
    this._positionHistory.push({                                                                                       // 5070
      position: payload.position.slice ? payload.position.slice(0) : payload.position,                                 // 5071
      time: currTime                                                                                                   // 5072
    });                                                                                                                // 5073
                                                                                                                       // 5074
    this._eventOutput.emit('update', payload);                                                                         // 5075
                                                                                                                       // 5076
    this._prevCoord = [x, y];                                                                                          // 5077
    this._prevTime = currTime;                                                                                         // 5078
    this._move = true;                                                                                                 // 5079
}                                                                                                                      // 5080
                                                                                                                       // 5081
/**                                                                                                                    // 5082
 *  Triggered by mouseup on the element or document body if propagation is enabled, or                                 // 5083
 *  mouseleave if propagation is off.                                                                                  // 5084
 *                                                                                                                     // 5085
 *  @method _handleEnd                                                                                                 // 5086
 *  @private                                                                                                           // 5087
 */                                                                                                                    // 5088
function _handleEnd(event) {                                                                                           // 5089
    if (!this._down) return;                                                                                           // 5090
                                                                                                                       // 5091
    this._eventOutput.emit('end', this._payload);                                                                      // 5092
    this._prevCoord = undefined;                                                                                       // 5093
    this._prevTime = undefined;                                                                                        // 5094
    this._down = false;                                                                                                // 5095
    this._move = false;                                                                                                // 5096
    this._positionHistory = [];                                                                                        // 5097
}                                                                                                                      // 5098
                                                                                                                       // 5099
/**                                                                                                                    // 5100
 *  Switches the mousemove listener to the document body, if propagation is enabled.                                   // 5101
 *  @method _handleLeave                                                                                               // 5102
 *  @private                                                                                                           // 5103
 */                                                                                                                    // 5104
function _handleLeave(event) {                                                                                         // 5105
    if (!this._down || !this._move) return;                                                                            // 5106
                                                                                                                       // 5107
    if (!this._documentActive) {                                                                                       // 5108
      var boundMove = _handleMove.bind(this);                                                                          // 5109
      var boundEnd = function(event) {                                                                                 // 5110
          _handleEnd.call(this, event);                                                                                // 5111
          document.removeEventListener('mousemove', boundMove);                                                        // 5112
          document.removeEventListener('mouseup', boundEnd);                                                           // 5113
      }.bind(this, event);                                                                                             // 5114
      document.addEventListener('mousemove', boundMove);                                                               // 5115
      document.addEventListener('mouseup', boundEnd);                                                                  // 5116
      this._documentActive = true;                                                                                     // 5117
    }                                                                                                                  // 5118
}                                                                                                                      // 5119
                                                                                                                       // 5120
/**                                                                                                                    // 5121
 * Return entire options dictionary, including defaults.                                                               // 5122
 *                                                                                                                     // 5123
 * @method getOptions                                                                                                  // 5124
 * @return {Object} configuration options                                                                              // 5125
 */                                                                                                                    // 5126
MouseSync.prototype.getOptions = function getOptions() {                                                               // 5127
    return this.options;                                                                                               // 5128
};                                                                                                                     // 5129
                                                                                                                       // 5130
/**                                                                                                                    // 5131
 * Set internal options, overriding any default options                                                                // 5132
 *                                                                                                                     // 5133
 * @method setOptions                                                                                                  // 5134
 *                                                                                                                     // 5135
 * @param [options] {Object}             default options overrides                                                     // 5136
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5137
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5138
 * @param [options.propogate] {Boolean}  add listened to document on mouseleave                                        // 5139
 */                                                                                                                    // 5140
MouseSync.prototype.setOptions = function setOptions(options) {                                                        // 5141
    return this._optionsManager.setOptions(options);                                                                   // 5142
};                                                                                                                     // 5143
                                                                                                                       // 5144
module.exports = MouseSync;                                                                                            // 5145
},{"../core/EventHandler":7,"../core/OptionsManager":10}],29:[function(_dereq_,module,exports){                        // 5146
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5147
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5148
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5149
 *                                                                                                                     // 5150
 * Owner: mark@famo.us                                                                                                 // 5151
 * @license MPL 2.0                                                                                                    // 5152
 * @copyright Famous Industries, Inc. 2014                                                                             // 5153
 */                                                                                                                    // 5154
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5155
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5156
                                                                                                                       // 5157
/**                                                                                                                    // 5158
 * Handles piped in two-finger touch events to change position via pinching / expanding.                               // 5159
 *   Emits 'start', 'update' and 'end' events with                                                                     // 5160
 *   position, velocity, touch ids, and distance between fingers.                                                      // 5161
 *                                                                                                                     // 5162
 * @class PinchSync                                                                                                    // 5163
 * @extends TwoFingerSync                                                                                              // 5164
 * @constructor                                                                                                        // 5165
 * @param {Object} options default options overrides                                                                   // 5166
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5167
 */                                                                                                                    // 5168
function PinchSync(options) {                                                                                          // 5169
    TwoFingerSync.call(this);                                                                                          // 5170
                                                                                                                       // 5171
    this.options = Object.create(PinchSync.DEFAULT_OPTIONS);                                                           // 5172
    this._optionsManager = new OptionsManager(this.options);                                                           // 5173
    if (options) this.setOptions(options);                                                                             // 5174
                                                                                                                       // 5175
    this._displacement = 0;                                                                                            // 5176
    this._previousDistance = 0;                                                                                        // 5177
}                                                                                                                      // 5178
                                                                                                                       // 5179
PinchSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5180
PinchSync.prototype.constructor = PinchSync;                                                                           // 5181
                                                                                                                       // 5182
PinchSync.DEFAULT_OPTIONS = {                                                                                          // 5183
    scale : 1                                                                                                          // 5184
};                                                                                                                     // 5185
                                                                                                                       // 5186
PinchSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5187
    this._previousDistance = TwoFingerSync.calculateDistance(this.posA, this.posB);                                    // 5188
    this._displacement = 0;                                                                                            // 5189
                                                                                                                       // 5190
    this._eventOutput.emit('start', {                                                                                  // 5191
        count: event.touches.length,                                                                                   // 5192
        touches: [this.touchAId, this.touchBId],                                                                       // 5193
        distance: this._dist,                                                                                          // 5194
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5195
    });                                                                                                                // 5196
};                                                                                                                     // 5197
                                                                                                                       // 5198
PinchSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5199
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5200
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5201
                                                                                                                       // 5202
    var scale = this.options.scale;                                                                                    // 5203
    var delta = scale * (currDist - this._previousDistance);                                                           // 5204
    var velocity = delta / diffTime;                                                                                   // 5205
                                                                                                                       // 5206
    this._previousDistance = currDist;                                                                                 // 5207
    this._displacement += delta;                                                                                       // 5208
                                                                                                                       // 5209
    this._eventOutput.emit('update', {                                                                                 // 5210
        delta : delta,                                                                                                 // 5211
        velocity: velocity,                                                                                            // 5212
        distance: currDist,                                                                                            // 5213
        displacement: this._displacement,                                                                              // 5214
        center: center,                                                                                                // 5215
        touches: [this.touchAId, this.touchBId]                                                                        // 5216
    });                                                                                                                // 5217
};                                                                                                                     // 5218
                                                                                                                       // 5219
/**                                                                                                                    // 5220
 * Return entire options dictionary, including defaults.                                                               // 5221
 *                                                                                                                     // 5222
 * @method getOptions                                                                                                  // 5223
 * @return {Object} configuration options                                                                              // 5224
 */                                                                                                                    // 5225
PinchSync.prototype.getOptions = function getOptions() {                                                               // 5226
    return this.options;                                                                                               // 5227
};                                                                                                                     // 5228
                                                                                                                       // 5229
/**                                                                                                                    // 5230
 * Set internal options, overriding any default options                                                                // 5231
 *                                                                                                                     // 5232
 * @method setOptions                                                                                                  // 5233
 *                                                                                                                     // 5234
 * @param {Object} [options] overrides of default options                                                              // 5235
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5236
 */                                                                                                                    // 5237
PinchSync.prototype.setOptions = function setOptions(options) {                                                        // 5238
    return this._optionsManager.setOptions(options);                                                                   // 5239
};                                                                                                                     // 5240
                                                                                                                       // 5241
module.exports = PinchSync;                                                                                            // 5242
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],30:[function(_dereq_,module,exports){                            // 5243
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5244
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5245
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5246
 *                                                                                                                     // 5247
 * Owner: mark@famo.us                                                                                                 // 5248
 * @license MPL 2.0                                                                                                    // 5249
 * @copyright Famous Industries, Inc. 2014                                                                             // 5250
 */                                                                                                                    // 5251
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5252
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5253
                                                                                                                       // 5254
/**                                                                                                                    // 5255
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5256
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, and angle.                 // 5257
 *   Useful for determining a rotation factor from initial two-finger touch.                                           // 5258
 *                                                                                                                     // 5259
 * @class RotateSync                                                                                                   // 5260
 * @extends TwoFingerSync                                                                                              // 5261
 * @constructor                                                                                                        // 5262
 * @param {Object} options default options overrides                                                                   // 5263
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5264
 */                                                                                                                    // 5265
function RotateSync(options) {                                                                                         // 5266
    TwoFingerSync.call(this);                                                                                          // 5267
                                                                                                                       // 5268
    this.options = Object.create(RotateSync.DEFAULT_OPTIONS);                                                          // 5269
    this._optionsManager = new OptionsManager(this.options);                                                           // 5270
    if (options) this.setOptions(options);                                                                             // 5271
                                                                                                                       // 5272
    this._angle = 0;                                                                                                   // 5273
    this._previousAngle = 0;                                                                                           // 5274
}                                                                                                                      // 5275
                                                                                                                       // 5276
RotateSync.prototype = Object.create(TwoFingerSync.prototype);                                                         // 5277
RotateSync.prototype.constructor = RotateSync;                                                                         // 5278
                                                                                                                       // 5279
RotateSync.DEFAULT_OPTIONS = {                                                                                         // 5280
    scale : 1                                                                                                          // 5281
};                                                                                                                     // 5282
                                                                                                                       // 5283
RotateSync.prototype._startUpdate = function _startUpdate(event) {                                                     // 5284
    this._angle = 0;                                                                                                   // 5285
    this._previousAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                          // 5286
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5287
    this._eventOutput.emit('start', {                                                                                  // 5288
        count: event.touches.length,                                                                                   // 5289
        angle: this._angle,                                                                                            // 5290
        center: center,                                                                                                // 5291
        touches: [this.touchAId, this.touchBId]                                                                        // 5292
    });                                                                                                                // 5293
};                                                                                                                     // 5294
                                                                                                                       // 5295
RotateSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                    // 5296
    var scale = this.options.scale;                                                                                    // 5297
                                                                                                                       // 5298
    var currAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                                // 5299
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5300
                                                                                                                       // 5301
    var diffTheta = scale * (currAngle - this._previousAngle);                                                         // 5302
    var velTheta = diffTheta / diffTime;                                                                               // 5303
                                                                                                                       // 5304
    this._angle += diffTheta;                                                                                          // 5305
                                                                                                                       // 5306
    this._eventOutput.emit('update', {                                                                                 // 5307
        delta : diffTheta,                                                                                             // 5308
        velocity: velTheta,                                                                                            // 5309
        angle: this._angle,                                                                                            // 5310
        center: center,                                                                                                // 5311
        touches: [this.touchAId, this.touchBId]                                                                        // 5312
    });                                                                                                                // 5313
                                                                                                                       // 5314
    this._previousAngle = currAngle;                                                                                   // 5315
};                                                                                                                     // 5316
                                                                                                                       // 5317
/**                                                                                                                    // 5318
 * Return entire options dictionary, including defaults.                                                               // 5319
 *                                                                                                                     // 5320
 * @method getOptions                                                                                                  // 5321
 * @return {Object} configuration options                                                                              // 5322
 */                                                                                                                    // 5323
RotateSync.prototype.getOptions = function getOptions() {                                                              // 5324
    return this.options;                                                                                               // 5325
};                                                                                                                     // 5326
                                                                                                                       // 5327
/**                                                                                                                    // 5328
 * Set internal options, overriding any default options                                                                // 5329
 *                                                                                                                     // 5330
 * @method setOptions                                                                                                  // 5331
 *                                                                                                                     // 5332
 * @param {Object} [options] overrides of default options                                                              // 5333
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5334
 */                                                                                                                    // 5335
RotateSync.prototype.setOptions = function setOptions(options) {                                                       // 5336
    return this._optionsManager.setOptions(options);                                                                   // 5337
};                                                                                                                     // 5338
                                                                                                                       // 5339
module.exports = RotateSync;                                                                                           // 5340
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],31:[function(_dereq_,module,exports){                            // 5341
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5342
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5343
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5344
 *                                                                                                                     // 5345
 * Owner: mark@famo.us                                                                                                 // 5346
 * @license MPL 2.0                                                                                                    // 5347
 * @copyright Famous Industries, Inc. 2014                                                                             // 5348
 */                                                                                                                    // 5349
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5350
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5351
                                                                                                                       // 5352
/**                                                                                                                    // 5353
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5354
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, distance, and scale factor.
 *   Useful for determining a scaling factor from initial two-finger touch.                                            // 5356
 *                                                                                                                     // 5357
 * @class ScaleSync                                                                                                    // 5358
 * @extends TwoFingerSync                                                                                              // 5359
 * @constructor                                                                                                        // 5360
 * @param {Object} options default options overrides                                                                   // 5361
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5362
 */                                                                                                                    // 5363
function ScaleSync(options) {                                                                                          // 5364
    TwoFingerSync.call(this);                                                                                          // 5365
                                                                                                                       // 5366
    this.options = Object.create(ScaleSync.DEFAULT_OPTIONS);                                                           // 5367
    this._optionsManager = new OptionsManager(this.options);                                                           // 5368
    if (options) this.setOptions(options);                                                                             // 5369
                                                                                                                       // 5370
    this._scaleFactor = 1;                                                                                             // 5371
    this._startDist = 0;                                                                                               // 5372
    this._eventInput.on('pipe', _reset.bind(this));                                                                    // 5373
}                                                                                                                      // 5374
                                                                                                                       // 5375
ScaleSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5376
ScaleSync.prototype.constructor = ScaleSync;                                                                           // 5377
                                                                                                                       // 5378
ScaleSync.DEFAULT_OPTIONS = {                                                                                          // 5379
    scale : 1                                                                                                          // 5380
};                                                                                                                     // 5381
                                                                                                                       // 5382
function _reset() {                                                                                                    // 5383
    this.touchAId = undefined;                                                                                         // 5384
    this.touchBId = undefined;                                                                                         // 5385
}                                                                                                                      // 5386
                                                                                                                       // 5387
// handles initial touch of two fingers                                                                                // 5388
ScaleSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5389
    this._scaleFactor = 1;                                                                                             // 5390
    this._startDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                           // 5391
    this._eventOutput.emit('start', {                                                                                  // 5392
        count: event.touches.length,                                                                                   // 5393
        touches: [this.touchAId, this.touchBId],                                                                       // 5394
        distance: this._startDist,                                                                                     // 5395
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5396
    });                                                                                                                // 5397
};                                                                                                                     // 5398
                                                                                                                       // 5399
// handles movement of two fingers                                                                                     // 5400
ScaleSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5401
    var scale = this.options.scale;                                                                                    // 5402
                                                                                                                       // 5403
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5404
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5405
                                                                                                                       // 5406
    var delta = (currDist - this._startDist) / this._startDist;                                                        // 5407
    var newScaleFactor = Math.max(1 + scale * delta, 0);                                                               // 5408
    var veloScale = (newScaleFactor - this._scaleFactor) / diffTime;                                                   // 5409
                                                                                                                       // 5410
    this._eventOutput.emit('update', {                                                                                 // 5411
        delta : delta,                                                                                                 // 5412
        scale: newScaleFactor,                                                                                         // 5413
        velocity: veloScale,                                                                                           // 5414
        distance: currDist,                                                                                            // 5415
        center : center,                                                                                               // 5416
        touches: [this.touchAId, this.touchBId]                                                                        // 5417
    });                                                                                                                // 5418
                                                                                                                       // 5419
    this._scaleFactor = newScaleFactor;                                                                                // 5420
};                                                                                                                     // 5421
                                                                                                                       // 5422
/**                                                                                                                    // 5423
 * Return entire options dictionary, including defaults.                                                               // 5424
 *                                                                                                                     // 5425
 * @method getOptions                                                                                                  // 5426
 * @return {Object} configuration options                                                                              // 5427
 */                                                                                                                    // 5428
ScaleSync.prototype.getOptions = function getOptions() {                                                               // 5429
    return this.options;                                                                                               // 5430
};                                                                                                                     // 5431
                                                                                                                       // 5432
/**                                                                                                                    // 5433
 * Set internal options, overriding any default options                                                                // 5434
 *                                                                                                                     // 5435
 * @method setOptions                                                                                                  // 5436
 *                                                                                                                     // 5437
 * @param {Object} [options] overrides of default options                                                              // 5438
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5439
 */                                                                                                                    // 5440
ScaleSync.prototype.setOptions = function setOptions(options) {                                                        // 5441
    return this._optionsManager.setOptions(options);                                                                   // 5442
};                                                                                                                     // 5443
                                                                                                                       // 5444
module.exports = ScaleSync;                                                                                            // 5445
},{"../core/OptionsManager":10,"./TwoFingerSync":35}],32:[function(_dereq_,module,exports){                            // 5446
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5447
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5448
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5449
 *                                                                                                                     // 5450
 * Owner: mark@famo.us                                                                                                 // 5451
 * @license MPL 2.0                                                                                                    // 5452
 * @copyright Famous Industries, Inc. 2014                                                                             // 5453
 */                                                                                                                    // 5454
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5455
var Engine = _dereq_('../core/Engine');                                                                                // 5456
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5457
                                                                                                                       // 5458
/**                                                                                                                    // 5459
 * Handles piped in mousewheel events.                                                                                 // 5460
 *   Emits 'start', 'update', and 'end' events with payloads including:                                                // 5461
 *   delta: change since last position,                                                                                // 5462
 *   position: accumulated deltas,                                                                                     // 5463
 *   velocity: speed of change in pixels per ms,                                                                       // 5464
 *   slip: true (unused).                                                                                              // 5465
 *                                                                                                                     // 5466
 *   Can be used as delegate of GenericSync.                                                                           // 5467
 *                                                                                                                     // 5468
 * @class ScrollSync                                                                                                   // 5469
 * @constructor                                                                                                        // 5470
 * @param {Object} [options] overrides of default options                                                              // 5471
 * @param {Number} [options.direction] Pay attention to x changes (ScrollSync.DIRECTION_X),                            // 5472
 *   y changes (ScrollSync.DIRECTION_Y) or both (undefined)                                                            // 5473
 * @param {Number} [options.minimumEndSpeed] End speed calculation floors at this number, in pixels per ms             // 5474
 * @param {boolean} [options.rails] whether to snap position calculations to nearest axis                              // 5475
 * @param {Number | Array.Number} [options.scale] scale outputs in by scalar or pair of scalars                        // 5476
 * @param {Number} [options.stallTime] reset time for velocity calculation in ms                                       // 5477
 */                                                                                                                    // 5478
function ScrollSync(options) {                                                                                         // 5479
    this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);                                                          // 5480
    this._optionsManager = new OptionsManager(this.options);                                                           // 5481
    if (options) this.setOptions(options);                                                                             // 5482
                                                                                                                       // 5483
    this._payload = {                                                                                                  // 5484
        delta    : null,                                                                                               // 5485
        position : null,                                                                                               // 5486
        velocity : null,                                                                                               // 5487
        slip     : true                                                                                                // 5488
    };                                                                                                                 // 5489
                                                                                                                       // 5490
    this._eventInput = new EventHandler();                                                                             // 5491
    this._eventOutput = new EventHandler();                                                                            // 5492
                                                                                                                       // 5493
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 5494
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5495
                                                                                                                       // 5496
    this._position = (this.options.direction === undefined) ? [0,0] : 0;                                               // 5497
    this._prevTime = undefined;                                                                                        // 5498
    this._prevVel = undefined;                                                                                         // 5499
    this._eventInput.on('mousewheel', _handleMove.bind(this));                                                         // 5500
    this._eventInput.on('wheel', _handleMove.bind(this));                                                              // 5501
    this._inProgress = false;                                                                                          // 5502
    this._loopBound = false;                                                                                           // 5503
}                                                                                                                      // 5504
                                                                                                                       // 5505
ScrollSync.DEFAULT_OPTIONS = {                                                                                         // 5506
    direction: undefined,                                                                                              // 5507
    minimumEndSpeed: Infinity,                                                                                         // 5508
    rails: false,                                                                                                      // 5509
    scale: 1,                                                                                                          // 5510
    stallTime: 50,                                                                                                     // 5511
    lineHeight: 40,                                                                                                    // 5512
    preventDefault: true                                                                                               // 5513
};                                                                                                                     // 5514
                                                                                                                       // 5515
ScrollSync.DIRECTION_X = 0;                                                                                            // 5516
ScrollSync.DIRECTION_Y = 1;                                                                                            // 5517
                                                                                                                       // 5518
var MINIMUM_TICK_TIME = 8;                                                                                             // 5519
                                                                                                                       // 5520
var _now = Date.now;                                                                                                   // 5521
                                                                                                                       // 5522
function _newFrame() {                                                                                                 // 5523
    if (this._inProgress && (_now() - this._prevTime) > this.options.stallTime) {                                      // 5524
        this._inProgress = false;                                                                                      // 5525
                                                                                                                       // 5526
        var finalVel = (Math.abs(this._prevVel) >= this.options.minimumEndSpeed)                                       // 5527
            ? this._prevVel                                                                                            // 5528
            : 0;                                                                                                       // 5529
                                                                                                                       // 5530
        var payload = this._payload;                                                                                   // 5531
        payload.position = this._position;                                                                             // 5532
        payload.velocity = finalVel;                                                                                   // 5533
        payload.slip = true;                                                                                           // 5534
                                                                                                                       // 5535
        this._eventOutput.emit('end', payload);                                                                        // 5536
    }                                                                                                                  // 5537
}                                                                                                                      // 5538
                                                                                                                       // 5539
function _handleMove(event) {                                                                                          // 5540
    if (this.options.preventDefault) event.preventDefault();                                                           // 5541
                                                                                                                       // 5542
    if (!this._inProgress) {                                                                                           // 5543
        this._inProgress = true;                                                                                       // 5544
        this._position = (this.options.direction === undefined) ? [0,0] : 0;                                           // 5545
        payload = this._payload;                                                                                       // 5546
        payload.slip = true;                                                                                           // 5547
        payload.position = this._position;                                                                             // 5548
        payload.clientX = event.clientX;                                                                               // 5549
        payload.clientY = event.clientY;                                                                               // 5550
        payload.offsetX = event.offsetX;                                                                               // 5551
        payload.offsetY = event.offsetY;                                                                               // 5552
        this._eventOutput.emit('start', payload);                                                                      // 5553
        if (!this._loopBound) {                                                                                        // 5554
            Engine.on('prerender', _newFrame.bind(this));                                                              // 5555
            this._loopBound = true;                                                                                    // 5556
        }                                                                                                              // 5557
    }                                                                                                                  // 5558
                                                                                                                       // 5559
    var currTime = _now();                                                                                             // 5560
    var prevTime = this._prevTime || currTime;                                                                         // 5561
                                                                                                                       // 5562
    var diffX = (event.wheelDeltaX !== undefined) ? event.wheelDeltaX : -event.deltaX;                                 // 5563
    var diffY = (event.wheelDeltaY !== undefined) ? event.wheelDeltaY : -event.deltaY;                                 // 5564
                                                                                                                       // 5565
    if (event.deltaMode === 1) { // units in lines, not pixels                                                         // 5566
        diffX *= this.options.lineHeight;                                                                              // 5567
        diffY *= this.options.lineHeight;                                                                              // 5568
    }                                                                                                                  // 5569
                                                                                                                       // 5570
    if (this.options.rails) {                                                                                          // 5571
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5572
        else diffX = 0;                                                                                                // 5573
    }                                                                                                                  // 5574
                                                                                                                       // 5575
    var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME); // minimum tick time                              // 5576
                                                                                                                       // 5577
    var velX = diffX / diffTime;                                                                                       // 5578
    var velY = diffY / diffTime;                                                                                       // 5579
                                                                                                                       // 5580
    var scale = this.options.scale;                                                                                    // 5581
    var nextVel;                                                                                                       // 5582
    var nextDelta;                                                                                                     // 5583
                                                                                                                       // 5584
    if (this.options.direction === ScrollSync.DIRECTION_X) {                                                           // 5585
        nextDelta = scale * diffX;                                                                                     // 5586
        nextVel = scale * velX;                                                                                        // 5587
        this._position += nextDelta;                                                                                   // 5588
    }                                                                                                                  // 5589
    else if (this.options.direction === ScrollSync.DIRECTION_Y) {                                                      // 5590
        nextDelta = scale * diffY;                                                                                     // 5591
        nextVel = scale * velY;                                                                                        // 5592
        this._position += nextDelta;                                                                                   // 5593
    }                                                                                                                  // 5594
    else {                                                                                                             // 5595
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5596
        nextVel = [scale * velX, scale * velY];                                                                        // 5597
        this._position[0] += nextDelta[0];                                                                             // 5598
        this._position[1] += nextDelta[1];                                                                             // 5599
    }                                                                                                                  // 5600
                                                                                                                       // 5601
    var payload = this._payload;                                                                                       // 5602
    payload.delta    = nextDelta;                                                                                      // 5603
    payload.velocity = nextVel;                                                                                        // 5604
    payload.position = this._position;                                                                                 // 5605
    payload.slip     = true;                                                                                           // 5606
                                                                                                                       // 5607
    this._eventOutput.emit('update', payload);                                                                         // 5608
                                                                                                                       // 5609
    this._prevTime = currTime;                                                                                         // 5610
    this._prevVel = nextVel;                                                                                           // 5611
}                                                                                                                      // 5612
                                                                                                                       // 5613
/**                                                                                                                    // 5614
 * Return entire options dictionary, including defaults.                                                               // 5615
 *                                                                                                                     // 5616
 * @method getOptions                                                                                                  // 5617
 * @return {Object} configuration options                                                                              // 5618
 */                                                                                                                    // 5619
ScrollSync.prototype.getOptions = function getOptions() {                                                              // 5620
    return this.options;                                                                                               // 5621
};                                                                                                                     // 5622
                                                                                                                       // 5623
/**                                                                                                                    // 5624
 * Set internal options, overriding any default options                                                                // 5625
 *                                                                                                                     // 5626
 * @method setOptions                                                                                                  // 5627
 *                                                                                                                     // 5628
 * @param {Object} [options] overrides of default options                                                              // 5629
 * @param {Number} [options.minimimEndSpeed] If final velocity smaller than this, round down to 0.                     // 5630
 * @param {Number} [options.stallTime] ms of non-motion before 'end' emitted                                           // 5631
 * @param {Number} [options.rails] whether to constrain to nearest axis.                                               // 5632
 * @param {Number} [options.direction] ScrollSync.DIRECTION_X, DIRECTION_Y -                                           // 5633
 *    pay attention to one specific direction.                                                                         // 5634
 * @param {Number} [options.scale] constant factor to scale velocity output                                            // 5635
 */                                                                                                                    // 5636
ScrollSync.prototype.setOptions = function setOptions(options) {                                                       // 5637
    return this._optionsManager.setOptions(options);                                                                   // 5638
};                                                                                                                     // 5639
                                                                                                                       // 5640
module.exports = ScrollSync;                                                                                           // 5641
},{"../core/Engine":4,"../core/EventHandler":7,"../core/OptionsManager":10}],33:[function(_dereq_,module,exports){     // 5642
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5643
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5644
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5645
 *                                                                                                                     // 5646
 * Owner: mark@famo.us                                                                                                 // 5647
 * @license MPL 2.0                                                                                                    // 5648
 * @copyright Famous Industries, Inc. 2014                                                                             // 5649
 */                                                                                                                    // 5650
var TouchTracker = _dereq_('./TouchTracker');                                                                          // 5651
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5652
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5653
                                                                                                                       // 5654
/**                                                                                                                    // 5655
 * Handles piped in touch events. Emits 'start', 'update', and 'events'                                                // 5656
 *   events with delta, position, velocity, acceleration, clientX, clientY, count, and touch id.                       // 5657
 *   Useful for dealing with inputs on touch devices. Designed to be used either as standalone, or                     // 5658
 *   included in a GenericSync.                                                                                        // 5659
 *                                                                                                                     // 5660
 * @class TouchSync                                                                                                    // 5661
 * @constructor                                                                                                        // 5662
 *                                                                                                                     // 5663
 * @example                                                                                                            // 5664
 *   var Surface = require('../core/Surface');                                                                         // 5665
 *   var TouchSync = require('../inputs/TouchSync');                                                                   // 5666
 *                                                                                                                     // 5667
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 5668
 *   var touchSync = new TouchSync();                                                                                  // 5669
 *   surface.pipe(touchSync);                                                                                          // 5670
 *                                                                                                                     // 5671
 *   touchSync.on('start', function (e) { // react to start });                                                        // 5672
 *   touchSync.on('update', function (e) { // react to update });                                                      // 5673
 *   touchSync.on('end', function (e) { // react to end });*                                                           // 5674
 *                                                                                                                     // 5675
 * @param [options] {Object}             default options overrides                                                     // 5676
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5677
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5678
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 5679
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5680
 * @param [options.touchLimit] {Number}  touchLimit upper bound for emitting events based on number of touches         // 5681
 */                                                                                                                    // 5682
function TouchSync(options) {                                                                                          // 5683
    this.options =  Object.create(TouchSync.DEFAULT_OPTIONS);                                                          // 5684
    this._optionsManager = new OptionsManager(this.options);                                                           // 5685
    if (options) this.setOptions(options);                                                                             // 5686
                                                                                                                       // 5687
    this._eventOutput = new EventHandler();                                                                            // 5688
    this._touchTracker = new TouchTracker({                                                                            // 5689
        touchLimit: this.options.touchLimit                                                                            // 5690
    });                                                                                                                // 5691
                                                                                                                       // 5692
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5693
    EventHandler.setInputHandler(this, this._touchTracker);                                                            // 5694
                                                                                                                       // 5695
    this._touchTracker.on('trackstart', _handleStart.bind(this));                                                      // 5696
    this._touchTracker.on('trackmove', _handleMove.bind(this));                                                        // 5697
    this._touchTracker.on('trackend', _handleEnd.bind(this));                                                          // 5698
                                                                                                                       // 5699
    this._payload = {                                                                                                  // 5700
        delta    : null,                                                                                               // 5701
        position : null,                                                                                               // 5702
        velocity : null,                                                                                               // 5703
        clientX  : undefined,                                                                                          // 5704
        clientY  : undefined,                                                                                          // 5705
        count    : 0,                                                                                                  // 5706
        touch    : undefined                                                                                           // 5707
    };                                                                                                                 // 5708
                                                                                                                       // 5709
    this._position = null; // to be deprecated                                                                         // 5710
}                                                                                                                      // 5711
                                                                                                                       // 5712
TouchSync.DEFAULT_OPTIONS = {                                                                                          // 5713
    direction: undefined,                                                                                              // 5714
    rails: false,                                                                                                      // 5715
    touchLimit: 1,                                                                                                     // 5716
    velocitySampleLength: 10,                                                                                          // 5717
    scale: 1                                                                                                           // 5718
};                                                                                                                     // 5719
                                                                                                                       // 5720
TouchSync.DIRECTION_X = 0;                                                                                             // 5721
TouchSync.DIRECTION_Y = 1;                                                                                             // 5722
                                                                                                                       // 5723
var MINIMUM_TICK_TIME = 8;                                                                                             // 5724
                                                                                                                       // 5725
/**                                                                                                                    // 5726
 *  Triggered by trackstart.                                                                                           // 5727
 *  @method _handleStart                                                                                               // 5728
 *  @private                                                                                                           // 5729
 */                                                                                                                    // 5730
function _handleStart(data) {                                                                                          // 5731
    var velocity;                                                                                                      // 5732
    var delta;                                                                                                         // 5733
    if (this.options.direction !== undefined){                                                                         // 5734
        this._position = 0;                                                                                            // 5735
        velocity = 0;                                                                                                  // 5736
        delta = 0;                                                                                                     // 5737
    }                                                                                                                  // 5738
    else {                                                                                                             // 5739
        this._position = [0, 0];                                                                                       // 5740
        velocity = [0, 0];                                                                                             // 5741
        delta = [0, 0];                                                                                                // 5742
    }                                                                                                                  // 5743
                                                                                                                       // 5744
    var payload = this._payload;                                                                                       // 5745
    payload.delta = delta;                                                                                             // 5746
    payload.position = this._position;                                                                                 // 5747
    payload.velocity = velocity;                                                                                       // 5748
    payload.clientX = data.x;                                                                                          // 5749
    payload.clientY = data.y;                                                                                          // 5750
    payload.count = data.count;                                                                                        // 5751
    payload.touch = data.identifier;                                                                                   // 5752
                                                                                                                       // 5753
    this._eventOutput.emit('start', payload);                                                                          // 5754
}                                                                                                                      // 5755
                                                                                                                       // 5756
/**                                                                                                                    // 5757
 *  Triggered by trackmove.                                                                                            // 5758
 *  @method _handleMove                                                                                                // 5759
 *  @private                                                                                                           // 5760
 */                                                                                                                    // 5761
function _handleMove(data) {                                                                                           // 5762
    var history = data.history;                                                                                        // 5763
                                                                                                                       // 5764
    var currHistory = history[history.length - 1];                                                                     // 5765
    var prevHistory = history[history.length - 2];                                                                     // 5766
                                                                                                                       // 5767
    var distantHistory = history[history.length - this.options.velocitySampleLength] ?                                 // 5768
      history[history.length - this.options.velocitySampleLength] :                                                    // 5769
      history[history.length - 2];                                                                                     // 5770
                                                                                                                       // 5771
    var distantTime = distantHistory.timestamp;                                                                        // 5772
    var currTime = currHistory.timestamp;                                                                              // 5773
                                                                                                                       // 5774
    var diffX = currHistory.x - prevHistory.x;                                                                         // 5775
    var diffY = currHistory.y - prevHistory.y;                                                                         // 5776
                                                                                                                       // 5777
    var velDiffX = currHistory.x - distantHistory.x;                                                                   // 5778
    var velDiffY = currHistory.y - distantHistory.y;                                                                   // 5779
                                                                                                                       // 5780
    if (this.options.rails) {                                                                                          // 5781
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5782
        else diffX = 0;                                                                                                // 5783
                                                                                                                       // 5784
        if (Math.abs(velDiffX) > Math.abs(velDiffY)) velDiffY = 0;                                                     // 5785
        else velDiffX = 0;                                                                                             // 5786
    }                                                                                                                  // 5787
                                                                                                                       // 5788
    var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);                                                // 5789
                                                                                                                       // 5790
    var velX = velDiffX / diffTime;                                                                                    // 5791
    var velY = velDiffY / diffTime;                                                                                    // 5792
                                                                                                                       // 5793
    var scale = this.options.scale;                                                                                    // 5794
    var nextVel;                                                                                                       // 5795
    var nextDelta;                                                                                                     // 5796
                                                                                                                       // 5797
    if (this.options.direction === TouchSync.DIRECTION_X) {                                                            // 5798
        nextDelta = scale * diffX;                                                                                     // 5799
        nextVel = scale * velX;                                                                                        // 5800
        this._position += nextDelta;                                                                                   // 5801
    }                                                                                                                  // 5802
    else if (this.options.direction === TouchSync.DIRECTION_Y) {                                                       // 5803
        nextDelta = scale * diffY;                                                                                     // 5804
        nextVel = scale * velY;                                                                                        // 5805
        this._position += nextDelta;                                                                                   // 5806
    }                                                                                                                  // 5807
    else {                                                                                                             // 5808
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5809
        nextVel = [scale * velX, scale * velY];                                                                        // 5810
        this._position[0] += nextDelta[0];                                                                             // 5811
        this._position[1] += nextDelta[1];                                                                             // 5812
    }                                                                                                                  // 5813
                                                                                                                       // 5814
    var payload = this._payload;                                                                                       // 5815
    payload.delta    = nextDelta;                                                                                      // 5816
    payload.velocity = nextVel;                                                                                        // 5817
    payload.position = this._position;                                                                                 // 5818
    payload.clientX  = data.x;                                                                                         // 5819
    payload.clientY  = data.y;                                                                                         // 5820
    payload.count    = data.count;                                                                                     // 5821
    payload.touch    = data.identifier;                                                                                // 5822
                                                                                                                       // 5823
    this._eventOutput.emit('update', payload);                                                                         // 5824
}                                                                                                                      // 5825
                                                                                                                       // 5826
/**                                                                                                                    // 5827
 *  Triggered by trackend.                                                                                             // 5828
 *  @method _handleEnd                                                                                                 // 5829
 *  @private                                                                                                           // 5830
 */                                                                                                                    // 5831
function _handleEnd(data) {                                                                                            // 5832
    this._payload.count = data.count;                                                                                  // 5833
    this._eventOutput.emit('end', this._payload);                                                                      // 5834
}                                                                                                                      // 5835
                                                                                                                       // 5836
/**                                                                                                                    // 5837
 * Set internal options, overriding any default options                                                                // 5838
 *                                                                                                                     // 5839
 * @method setOptions                                                                                                  // 5840
 *                                                                                                                     // 5841
 * @param [options] {Object}             default options overrides                                                     // 5842
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5843
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5844
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5845
 */                                                                                                                    // 5846
TouchSync.prototype.setOptions = function setOptions(options) {                                                        // 5847
    return this._optionsManager.setOptions(options);                                                                   // 5848
};                                                                                                                     // 5849
                                                                                                                       // 5850
/**                                                                                                                    // 5851
 * Return entire options dictionary, including defaults.                                                               // 5852
 *                                                                                                                     // 5853
 * @method getOptions                                                                                                  // 5854
 * @return {Object} configuration options                                                                              // 5855
 */                                                                                                                    // 5856
TouchSync.prototype.getOptions = function getOptions() {                                                               // 5857
    return this.options;                                                                                               // 5858
};                                                                                                                     // 5859
                                                                                                                       // 5860
module.exports = TouchSync;                                                                                            // 5861
},{"../core/EventHandler":7,"../core/OptionsManager":10,"./TouchTracker":34}],34:[function(_dereq_,module,exports){    // 5862
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5863
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5864
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5865
 *                                                                                                                     // 5866
 * Owner: mark@famo.us                                                                                                 // 5867
 * @license MPL 2.0                                                                                                    // 5868
 * @copyright Famous Industries, Inc. 2014                                                                             // 5869
 */                                                                                                                    // 5870
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5871
                                                                                                                       // 5872
var _now = Date.now;                                                                                                   // 5873
                                                                                                                       // 5874
function _timestampTouch(touch, event, history) {                                                                      // 5875
    return {                                                                                                           // 5876
        x: touch.clientX,                                                                                              // 5877
        y: touch.clientY,                                                                                              // 5878
        identifier : touch.identifier,                                                                                 // 5879
        origin: event.origin,                                                                                          // 5880
        timestamp: _now(),                                                                                             // 5881
        count: event.touches.length,                                                                                   // 5882
        history: history                                                                                               // 5883
    };                                                                                                                 // 5884
}                                                                                                                      // 5885
                                                                                                                       // 5886
function _handleStart(event) {                                                                                         // 5887
    if (event.touches.length > this.touchLimit) return;                                                                // 5888
    this.isTouched = true;                                                                                             // 5889
                                                                                                                       // 5890
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5891
        var touch = event.changedTouches[i];                                                                           // 5892
        var data = _timestampTouch(touch, event, null);                                                                // 5893
        this.eventOutput.emit('trackstart', data);                                                                     // 5894
        if (!this.selective && !this.touchHistory[touch.identifier]) this.track(data);                                 // 5895
    }                                                                                                                  // 5896
}                                                                                                                      // 5897
                                                                                                                       // 5898
function _handleMove(event) {                                                                                          // 5899
    if (event.touches.length > this.touchLimit) return;                                                                // 5900
                                                                                                                       // 5901
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5902
        var touch = event.changedTouches[i];                                                                           // 5903
        var history = this.touchHistory[touch.identifier];                                                             // 5904
        if (history) {                                                                                                 // 5905
            var data = _timestampTouch(touch, event, history);                                                         // 5906
            this.touchHistory[touch.identifier].push(data);                                                            // 5907
            this.eventOutput.emit('trackmove', data);                                                                  // 5908
        }                                                                                                              // 5909
    }                                                                                                                  // 5910
}                                                                                                                      // 5911
                                                                                                                       // 5912
function _handleEnd(event) {                                                                                           // 5913
    if (!this.isTouched) return;                                                                                       // 5914
                                                                                                                       // 5915
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5916
        var touch = event.changedTouches[i];                                                                           // 5917
        var history = this.touchHistory[touch.identifier];                                                             // 5918
        if (history) {                                                                                                 // 5919
            var data = _timestampTouch(touch, event, history);                                                         // 5920
            this.eventOutput.emit('trackend', data);                                                                   // 5921
            delete this.touchHistory[touch.identifier];                                                                // 5922
        }                                                                                                              // 5923
    }                                                                                                                  // 5924
                                                                                                                       // 5925
    this.isTouched = false;                                                                                            // 5926
}                                                                                                                      // 5927
                                                                                                                       // 5928
function _handleUnpipe() {                                                                                             // 5929
    for (var i in this.touchHistory) {                                                                                 // 5930
        var history = this.touchHistory[i];                                                                            // 5931
        this.eventOutput.emit('trackend', {                                                                            // 5932
            touch: history[history.length - 1].touch,                                                                  // 5933
            timestamp: Date.now(),                                                                                     // 5934
            count: 0,                                                                                                  // 5935
            history: history                                                                                           // 5936
        });                                                                                                            // 5937
        delete this.touchHistory[i];                                                                                   // 5938
    }                                                                                                                  // 5939
}                                                                                                                      // 5940
                                                                                                                       // 5941
/**                                                                                                                    // 5942
 * Helper to TouchSync – tracks piped in touch events, organizes touch                                                 // 5943
 *   events by ID, and emits track events back to TouchSync.                                                           // 5944
 *   Emits 'trackstart', 'trackmove', and 'trackend' events upstream.                                                  // 5945
 *                                                                                                                     // 5946
 * @class TouchTracker                                                                                                 // 5947
 * @constructor                                                                                                        // 5948
 * @param {Object} options default options overrides                                                                   // 5949
 * @param [options.selective] {Boolean} selective if false, saves state for each touch                                 // 5950
 * @param [options.touchLimit] {Number} touchLimit upper bound for emitting events based on number of touches          // 5951
 */                                                                                                                    // 5952
function TouchTracker(options) {                                                                                       // 5953
    this.selective = options.selective;                                                                                // 5954
    this.touchLimit = options.touchLimit || 1;                                                                         // 5955
                                                                                                                       // 5956
    this.touchHistory = {};                                                                                            // 5957
                                                                                                                       // 5958
    this.eventInput = new EventHandler();                                                                              // 5959
    this.eventOutput = new EventHandler();                                                                             // 5960
                                                                                                                       // 5961
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 5962
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 5963
                                                                                                                       // 5964
    this.eventInput.on('touchstart', _handleStart.bind(this));                                                         // 5965
    this.eventInput.on('touchmove', _handleMove.bind(this));                                                           // 5966
    this.eventInput.on('touchend', _handleEnd.bind(this));                                                             // 5967
    this.eventInput.on('touchcancel', _handleEnd.bind(this));                                                          // 5968
    this.eventInput.on('unpipe', _handleUnpipe.bind(this));                                                            // 5969
                                                                                                                       // 5970
    this.isTouched = false;                                                                                            // 5971
}                                                                                                                      // 5972
                                                                                                                       // 5973
/**                                                                                                                    // 5974
 * Record touch data, if selective is false.                                                                           // 5975
 * @private                                                                                                            // 5976
 * @method track                                                                                                       // 5977
 * @param {Object} data touch data                                                                                     // 5978
 */                                                                                                                    // 5979
TouchTracker.prototype.track = function track(data) {                                                                  // 5980
    this.touchHistory[data.identifier] = [data];                                                                       // 5981
};                                                                                                                     // 5982
                                                                                                                       // 5983
module.exports = TouchTracker;                                                                                         // 5984
},{"../core/EventHandler":7}],35:[function(_dereq_,module,exports){                                                    // 5985
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5986
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5987
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5988
 *                                                                                                                     // 5989
 * Owner: mark@famo.us                                                                                                 // 5990
 * @license MPL 2.0                                                                                                    // 5991
 * @copyright Famous Industries, Inc. 2014                                                                             // 5992
 */                                                                                                                    // 5993
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5994
                                                                                                                       // 5995
/**                                                                                                                    // 5996
 * Helper to PinchSync, RotateSync, and ScaleSync.  Generalized handling of                                            // 5997
 *   two-finger touch events.                                                                                          // 5998
 *   This class is meant to be overridden and not used directly.                                                       // 5999
 *                                                                                                                     // 6000
 * @class TwoFingerSync                                                                                                // 6001
 * @constructor                                                                                                        // 6002
 */                                                                                                                    // 6003
function TwoFingerSync() {                                                                                             // 6004
    this._eventInput = new EventHandler();                                                                             // 6005
    this._eventOutput = new EventHandler();                                                                            // 6006
                                                                                                                       // 6007
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 6008
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 6009
                                                                                                                       // 6010
    this.touchAEnabled = false;                                                                                        // 6011
    this.touchAId = 0;                                                                                                 // 6012
    this.posA = null;                                                                                                  // 6013
    this.timestampA = 0;                                                                                               // 6014
    this.touchBEnabled = false;                                                                                        // 6015
    this.touchBId = 0;                                                                                                 // 6016
    this.posB = null;                                                                                                  // 6017
    this.timestampB = 0;                                                                                               // 6018
                                                                                                                       // 6019
    this._eventInput.on('touchstart', this.handleStart.bind(this));                                                    // 6020
    this._eventInput.on('touchmove', this.handleMove.bind(this));                                                      // 6021
    this._eventInput.on('touchend', this.handleEnd.bind(this));                                                        // 6022
    this._eventInput.on('touchcancel', this.handleEnd.bind(this));                                                     // 6023
}                                                                                                                      // 6024
                                                                                                                       // 6025
TwoFingerSync.calculateAngle = function(posA, posB) {                                                                  // 6026
    var diffX = posB[0] - posA[0];                                                                                     // 6027
    var diffY = posB[1] - posA[1];                                                                                     // 6028
    return Math.atan2(diffY, diffX);                                                                                   // 6029
};                                                                                                                     // 6030
                                                                                                                       // 6031
TwoFingerSync.calculateDistance = function(posA, posB) {                                                               // 6032
    var diffX = posB[0] - posA[0];                                                                                     // 6033
    var diffY = posB[1] - posA[1];                                                                                     // 6034
    return Math.sqrt(diffX * diffX + diffY * diffY);                                                                   // 6035
};                                                                                                                     // 6036
                                                                                                                       // 6037
TwoFingerSync.calculateCenter = function(posA, posB) {                                                                 // 6038
    return [(posA[0] + posB[0]) / 2.0, (posA[1] + posB[1]) / 2.0];                                                     // 6039
};                                                                                                                     // 6040
                                                                                                                       // 6041
var _now = Date.now;                                                                                                   // 6042
                                                                                                                       // 6043
// private                                                                                                             // 6044
TwoFingerSync.prototype.handleStart = function handleStart(event) {                                                    // 6045
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6046
        var touch = event.changedTouches[i];                                                                           // 6047
        if (!this.touchAEnabled) {                                                                                     // 6048
            this.touchAId = touch.identifier;                                                                          // 6049
            this.touchAEnabled = true;                                                                                 // 6050
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6051
            this.timestampA = _now();                                                                                  // 6052
        }                                                                                                              // 6053
        else if (!this.touchBEnabled) {                                                                                // 6054
            this.touchBId = touch.identifier;                                                                          // 6055
            this.touchBEnabled = true;                                                                                 // 6056
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6057
            this.timestampB = _now();                                                                                  // 6058
            this._startUpdate(event);                                                                                  // 6059
        }                                                                                                              // 6060
    }                                                                                                                  // 6061
};                                                                                                                     // 6062
                                                                                                                       // 6063
// private                                                                                                             // 6064
TwoFingerSync.prototype.handleMove = function handleMove(event) {                                                      // 6065
    if (!(this.touchAEnabled && this.touchBEnabled)) return;                                                           // 6066
    var prevTimeA = this.timestampA;                                                                                   // 6067
    var prevTimeB = this.timestampB;                                                                                   // 6068
    var diffTime;                                                                                                      // 6069
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6070
        var touch = event.changedTouches[i];                                                                           // 6071
        if (touch.identifier === this.touchAId) {                                                                      // 6072
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6073
            this.timestampA = _now();                                                                                  // 6074
            diffTime = this.timestampA - prevTimeA;                                                                    // 6075
        }                                                                                                              // 6076
        else if (touch.identifier === this.touchBId) {                                                                 // 6077
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6078
            this.timestampB = _now();                                                                                  // 6079
            diffTime = this.timestampB - prevTimeB;                                                                    // 6080
        }                                                                                                              // 6081
    }                                                                                                                  // 6082
    if (diffTime) this._moveUpdate(diffTime);                                                                          // 6083
};                                                                                                                     // 6084
                                                                                                                       // 6085
// private                                                                                                             // 6086
TwoFingerSync.prototype.handleEnd = function handleEnd(event) {                                                        // 6087
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6088
        var touch = event.changedTouches[i];                                                                           // 6089
        if (touch.identifier === this.touchAId || touch.identifier === this.touchBId) {                                // 6090
            if (this.touchAEnabled && this.touchBEnabled) {                                                            // 6091
                this._eventOutput.emit('end', {                                                                        // 6092
                    touches : [this.touchAId, this.touchBId],                                                          // 6093
                    angle   : this._angle                                                                              // 6094
                });                                                                                                    // 6095
            }                                                                                                          // 6096
            this.touchAEnabled = false;                                                                                // 6097
            this.touchAId = 0;                                                                                         // 6098
            this.touchBEnabled = false;                                                                                // 6099
            this.touchBId = 0;                                                                                         // 6100
        }                                                                                                              // 6101
    }                                                                                                                  // 6102
};                                                                                                                     // 6103
                                                                                                                       // 6104
module.exports = TwoFingerSync;                                                                                        // 6105
},{"../core/EventHandler":7}],36:[function(_dereq_,module,exports){                                                    // 6106
module.exports = {                                                                                                     // 6107
  Accumulator: _dereq_('./Accumulator'),                                                                               // 6108
  DesktopEmulationMode: _dereq_('./DesktopEmulationMode'),                                                             // 6109
  FastClick: _dereq_('./FastClick'),                                                                                   // 6110
  GenericSync: _dereq_('./GenericSync'),                                                                               // 6111
  MouseSync: _dereq_('./MouseSync'),                                                                                   // 6112
  PinchSync: _dereq_('./PinchSync'),                                                                                   // 6113
  RotateSync: _dereq_('./RotateSync'),                                                                                 // 6114
  ScaleSync: _dereq_('./ScaleSync'),                                                                                   // 6115
  ScrollSync: _dereq_('./ScrollSync'),                                                                                 // 6116
  TouchSync: _dereq_('./TouchSync'),                                                                                   // 6117
  TouchTracker: _dereq_('./TouchTracker'),                                                                             // 6118
  TwoFingerSync: _dereq_('./TwoFingerSync')                                                                            // 6119
};                                                                                                                     // 6120
                                                                                                                       // 6121
},{"./Accumulator":24,"./DesktopEmulationMode":25,"./FastClick":26,"./GenericSync":27,"./MouseSync":28,"./PinchSync":29,"./RotateSync":30,"./ScaleSync":31,"./ScrollSync":32,"./TouchSync":33,"./TouchTracker":34,"./TwoFingerSync":35}],37:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6123
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6124
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6125
 *                                                                                                                     // 6126
 * Owner: david@famo.us                                                                                                // 6127
 * @license MPL 2.0                                                                                                    // 6128
 * @copyright Famous Industries, Inc. 2014                                                                             // 6129
 */                                                                                                                    // 6130
                                                                                                                       // 6131
var Vector = _dereq_('./Vector');                                                                                      // 6132
                                                                                                                       // 6133
/**                                                                                                                    // 6134
 * A library for using a 3x3 numerical matrix, represented as a two-level array.                                       // 6135
 *                                                                                                                     // 6136
 * @class Matrix                                                                                                       // 6137
 * @constructor                                                                                                        // 6138
 *                                                                                                                     // 6139
 * @param {Array.Array} values array of rows                                                                           // 6140
 */                                                                                                                    // 6141
function Matrix(values) {                                                                                              // 6142
    this.values = values ||                                                                                            // 6143
        [                                                                                                              // 6144
            [1,0,0],                                                                                                   // 6145
            [0,1,0],                                                                                                   // 6146
            [0,0,1]                                                                                                    // 6147
        ];                                                                                                             // 6148
                                                                                                                       // 6149
    return this;                                                                                                       // 6150
}                                                                                                                      // 6151
                                                                                                                       // 6152
var _register = new Matrix();                                                                                          // 6153
var _vectorRegister = new Vector();                                                                                    // 6154
                                                                                                                       // 6155
/**                                                                                                                    // 6156
 * Return the values in the matrix as an array of numerical row arrays                                                 // 6157
 *                                                                                                                     // 6158
 * @method get                                                                                                         // 6159
 *                                                                                                                     // 6160
 * @return {Array.array} matrix values as array of rows.                                                               // 6161
 */                                                                                                                    // 6162
Matrix.prototype.get = function get() {                                                                                // 6163
    return this.values;                                                                                                // 6164
};                                                                                                                     // 6165
                                                                                                                       // 6166
/**                                                                                                                    // 6167
 * Set the nested array of rows in the matrix.                                                                         // 6168
 *                                                                                                                     // 6169
 * @method set                                                                                                         // 6170
 *                                                                                                                     // 6171
 * @param {Array.array} values matrix values as array of rows.                                                         // 6172
 */                                                                                                                    // 6173
Matrix.prototype.set = function set(values) {                                                                          // 6174
    this.values = values;                                                                                              // 6175
};                                                                                                                     // 6176
                                                                                                                       // 6177
/**                                                                                                                    // 6178
 * Take this matrix as A, input vector V as a column vector, and return matrix product (A)(V).                         // 6179
 *   Note: This sets the internal vector register.  Current handles to the vector register                             // 6180
 *   will see values changed.                                                                                          // 6181
 *                                                                                                                     // 6182
 * @method vectorMultiply                                                                                              // 6183
 *                                                                                                                     // 6184
 * @param {Vector} v input vector V                                                                                    // 6185
 * @return {Vector} result of multiplication, as a handle to the internal vector register                              // 6186
 */                                                                                                                    // 6187
Matrix.prototype.vectorMultiply = function vectorMultiply(v) {                                                         // 6188
    var M = this.get();                                                                                                // 6189
    var v0 = v.x;                                                                                                      // 6190
    var v1 = v.y;                                                                                                      // 6191
    var v2 = v.z;                                                                                                      // 6192
                                                                                                                       // 6193
    var M0 = M[0];                                                                                                     // 6194
    var M1 = M[1];                                                                                                     // 6195
    var M2 = M[2];                                                                                                     // 6196
                                                                                                                       // 6197
    var M00 = M0[0];                                                                                                   // 6198
    var M01 = M0[1];                                                                                                   // 6199
    var M02 = M0[2];                                                                                                   // 6200
    var M10 = M1[0];                                                                                                   // 6201
    var M11 = M1[1];                                                                                                   // 6202
    var M12 = M1[2];                                                                                                   // 6203
    var M20 = M2[0];                                                                                                   // 6204
    var M21 = M2[1];                                                                                                   // 6205
    var M22 = M2[2];                                                                                                   // 6206
                                                                                                                       // 6207
    return _vectorRegister.setXYZ(                                                                                     // 6208
        M00*v0 + M01*v1 + M02*v2,                                                                                      // 6209
        M10*v0 + M11*v1 + M12*v2,                                                                                      // 6210
        M20*v0 + M21*v1 + M22*v2                                                                                       // 6211
    );                                                                                                                 // 6212
};                                                                                                                     // 6213
                                                                                                                       // 6214
/**                                                                                                                    // 6215
 * Multiply the provided matrix M2 with this matrix.  Result is (this) * (M2).                                         // 6216
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6217
 *   will see values changed.                                                                                          // 6218
 *                                                                                                                     // 6219
 * @method multiply                                                                                                    // 6220
 *                                                                                                                     // 6221
 * @param {Matrix} M2 input matrix to multiply on the right                                                            // 6222
 * @return {Matrix} result of multiplication, as a handle to the internal register                                     // 6223
 */                                                                                                                    // 6224
Matrix.prototype.multiply = function multiply(M2) {                                                                    // 6225
    var M1 = this.get();                                                                                               // 6226
    var result = [[]];                                                                                                 // 6227
    for (var i = 0; i < 3; i++) {                                                                                      // 6228
        result[i] = [];                                                                                                // 6229
        for (var j = 0; j < 3; j++) {                                                                                  // 6230
            var sum = 0;                                                                                               // 6231
            for (var k = 0; k < 3; k++) {                                                                              // 6232
                sum += M1[i][k] * M2[k][j];                                                                            // 6233
            }                                                                                                          // 6234
            result[i][j] = sum;                                                                                        // 6235
        }                                                                                                              // 6236
    }                                                                                                                  // 6237
    return _register.set(result);                                                                                      // 6238
};                                                                                                                     // 6239
                                                                                                                       // 6240
/**                                                                                                                    // 6241
 * Creates a Matrix which is the transpose of this matrix.                                                             // 6242
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6243
 *   will see values changed.                                                                                          // 6244
 *                                                                                                                     // 6245
 * @method transpose                                                                                                   // 6246
 *                                                                                                                     // 6247
 * @return {Matrix} result of transpose, as a handle to the internal register                                          // 6248
 */                                                                                                                    // 6249
Matrix.prototype.transpose = function transpose() {                                                                    // 6250
    var result = [];                                                                                                   // 6251
    var M = this.get();                                                                                                // 6252
    for (var row = 0; row < 3; row++) {                                                                                // 6253
        for (var col = 0; col < 3; col++) {                                                                            // 6254
            result[row][col] = M[col][row];                                                                            // 6255
        }                                                                                                              // 6256
    }                                                                                                                  // 6257
    return _register.set(result);                                                                                      // 6258
};                                                                                                                     // 6259
                                                                                                                       // 6260
/**                                                                                                                    // 6261
 * Clones the matrix                                                                                                   // 6262
 *                                                                                                                     // 6263
 * @method clone                                                                                                       // 6264
 * @return {Matrix} New copy of the original matrix                                                                    // 6265
 */                                                                                                                    // 6266
Matrix.prototype.clone = function clone() {                                                                            // 6267
    var values = this.get();                                                                                           // 6268
    var M = [];                                                                                                        // 6269
    for (var row = 0; row < 3; row++)                                                                                  // 6270
        M[row] = values[row].slice();                                                                                  // 6271
    return new Matrix(M);                                                                                              // 6272
};                                                                                                                     // 6273
                                                                                                                       // 6274
module.exports = Matrix;                                                                                               // 6275
},{"./Vector":41}],38:[function(_dereq_,module,exports){                                                               // 6276
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6277
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6278
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6279
 *                                                                                                                     // 6280
 * Owner: david@famo.us                                                                                                // 6281
 * @license MPL 2.0                                                                                                    // 6282
 * @copyright Famous Industries, Inc. 2014                                                                             // 6283
 */                                                                                                                    // 6284
                                                                                                                       // 6285
var Matrix = _dereq_('./Matrix');                                                                                      // 6286
                                                                                                                       // 6287
/**                                                                                                                    // 6288
 * @class Quaternion                                                                                                   // 6289
 * @constructor                                                                                                        // 6290
 *                                                                                                                     // 6291
 * @param {Number} w                                                                                                   // 6292
 * @param {Number} x                                                                                                   // 6293
 * @param {Number} y                                                                                                   // 6294
 * @param {Number} z                                                                                                   // 6295
 */                                                                                                                    // 6296
function Quaternion(w,x,y,z) {                                                                                         // 6297
    if (arguments.length === 1) this.set(w);                                                                           // 6298
    else {                                                                                                             // 6299
        this.w = (w !== undefined) ? w : 1;  //Angle                                                                   // 6300
        this.x = (x !== undefined) ? x : 0;  //Axis.x                                                                  // 6301
        this.y = (y !== undefined) ? y : 0;  //Axis.y                                                                  // 6302
        this.z = (z !== undefined) ? z : 0;  //Axis.z                                                                  // 6303
    }                                                                                                                  // 6304
    return this;                                                                                                       // 6305
}                                                                                                                      // 6306
                                                                                                                       // 6307
var register = new Quaternion(1,0,0,0);                                                                                // 6308
                                                                                                                       // 6309
/**                                                                                                                    // 6310
 * Doc: TODO                                                                                                           // 6311
 * @method add                                                                                                         // 6312
 * @param {Quaternion} q                                                                                               // 6313
 * @return {Quaternion}                                                                                                // 6314
 */                                                                                                                    // 6315
Quaternion.prototype.add = function add(q) {                                                                           // 6316
    return register.setWXYZ(                                                                                           // 6317
        this.w + q.w,                                                                                                  // 6318
        this.x + q.x,                                                                                                  // 6319
        this.y + q.y,                                                                                                  // 6320
        this.z + q.z                                                                                                   // 6321
    );                                                                                                                 // 6322
};                                                                                                                     // 6323
                                                                                                                       // 6324
/*                                                                                                                     // 6325
 * Docs: TODO                                                                                                          // 6326
 *                                                                                                                     // 6327
 * @method sub                                                                                                         // 6328
 * @param {Quaternion} q                                                                                               // 6329
 * @return {Quaternion}                                                                                                // 6330
 */                                                                                                                    // 6331
Quaternion.prototype.sub = function sub(q) {                                                                           // 6332
    return register.setWXYZ(                                                                                           // 6333
        this.w - q.w,                                                                                                  // 6334
        this.x - q.x,                                                                                                  // 6335
        this.y - q.y,                                                                                                  // 6336
        this.z - q.z                                                                                                   // 6337
    );                                                                                                                 // 6338
};                                                                                                                     // 6339
                                                                                                                       // 6340
/**                                                                                                                    // 6341
 * Doc: TODO                                                                                                           // 6342
 *                                                                                                                     // 6343
 * @method scalarDivide                                                                                                // 6344
 * @param {Number} s                                                                                                   // 6345
 * @return {Quaternion}                                                                                                // 6346
 */                                                                                                                    // 6347
Quaternion.prototype.scalarDivide = function scalarDivide(s) {                                                         // 6348
    return this.scalarMultiply(1/s);                                                                                   // 6349
};                                                                                                                     // 6350
                                                                                                                       // 6351
/*                                                                                                                     // 6352
 * Docs: TODO                                                                                                          // 6353
 *                                                                                                                     // 6354
 * @method scalarMultiply                                                                                              // 6355
 * @param {Number} s                                                                                                   // 6356
 * @return {Quaternion}                                                                                                // 6357
 */                                                                                                                    // 6358
Quaternion.prototype.scalarMultiply = function scalarMultiply(s) {                                                     // 6359
    return register.setWXYZ(                                                                                           // 6360
        this.w * s,                                                                                                    // 6361
        this.x * s,                                                                                                    // 6362
        this.y * s,                                                                                                    // 6363
        this.z * s                                                                                                     // 6364
    );                                                                                                                 // 6365
};                                                                                                                     // 6366
                                                                                                                       // 6367
/*                                                                                                                     // 6368
 * Docs: TODO                                                                                                          // 6369
 *                                                                                                                     // 6370
 * @method multiply                                                                                                    // 6371
 * @param {Quaternion} q                                                                                               // 6372
 * @return {Quaternion}                                                                                                // 6373
 */                                                                                                                    // 6374
Quaternion.prototype.multiply = function multiply(q) {                                                                 // 6375
    //left-handed coordinate system multiplication                                                                     // 6376
    var x1 = this.x;                                                                                                   // 6377
    var y1 = this.y;                                                                                                   // 6378
    var z1 = this.z;                                                                                                   // 6379
    var w1 = this.w;                                                                                                   // 6380
    var x2 = q.x;                                                                                                      // 6381
    var y2 = q.y;                                                                                                      // 6382
    var z2 = q.z;                                                                                                      // 6383
    var w2 = q.w || 0;                                                                                                 // 6384
                                                                                                                       // 6385
    return register.setWXYZ(                                                                                           // 6386
        w1*w2 - x1*x2 - y1*y2 - z1*z2,                                                                                 // 6387
        x1*w2 + x2*w1 + y2*z1 - y1*z2,                                                                                 // 6388
        y1*w2 + y2*w1 + x1*z2 - x2*z1,                                                                                 // 6389
        z1*w2 + z2*w1 + x2*y1 - x1*y2                                                                                  // 6390
    );                                                                                                                 // 6391
};                                                                                                                     // 6392
                                                                                                                       // 6393
var conj = new Quaternion(1,0,0,0);                                                                                    // 6394
                                                                                                                       // 6395
/*                                                                                                                     // 6396
 * Docs: TODO                                                                                                          // 6397
 *                                                                                                                     // 6398
 * @method rotateVector                                                                                                // 6399
 * @param {Vector} v                                                                                                   // 6400
 * @return {Quaternion}                                                                                                // 6401
 */                                                                                                                    // 6402
Quaternion.prototype.rotateVector = function rotateVector(v) {                                                         // 6403
    conj.set(this.conj());                                                                                             // 6404
    return register.set(this.multiply(v).multiply(conj));                                                              // 6405
};                                                                                                                     // 6406
                                                                                                                       // 6407
/*                                                                                                                     // 6408
 * Docs: TODO                                                                                                          // 6409
 *                                                                                                                     // 6410
 * @method inverse                                                                                                     // 6411
 * @return {Quaternion}                                                                                                // 6412
 */                                                                                                                    // 6413
Quaternion.prototype.inverse = function inverse() {                                                                    // 6414
    return register.set(this.conj().scalarDivide(this.normSquared()));                                                 // 6415
};                                                                                                                     // 6416
                                                                                                                       // 6417
/*                                                                                                                     // 6418
 * Docs: TODO                                                                                                          // 6419
 *                                                                                                                     // 6420
 * @method negate                                                                                                      // 6421
 * @return {Quaternion}                                                                                                // 6422
 */                                                                                                                    // 6423
Quaternion.prototype.negate = function negate() {                                                                      // 6424
    return this.scalarMultiply(-1);                                                                                    // 6425
};                                                                                                                     // 6426
                                                                                                                       // 6427
/*                                                                                                                     // 6428
 * Docs: TODO                                                                                                          // 6429
 *                                                                                                                     // 6430
 * @method conj                                                                                                        // 6431
 * @return {Quaternion}                                                                                                // 6432
 */                                                                                                                    // 6433
Quaternion.prototype.conj = function conj() {                                                                          // 6434
    return register.setWXYZ(                                                                                           // 6435
         this.w,                                                                                                       // 6436
        -this.x,                                                                                                       // 6437
        -this.y,                                                                                                       // 6438
        -this.z                                                                                                        // 6439
    );                                                                                                                 // 6440
};                                                                                                                     // 6441
                                                                                                                       // 6442
/*                                                                                                                     // 6443
 * Docs: TODO                                                                                                          // 6444
 *                                                                                                                     // 6445
 * @method normalize                                                                                                   // 6446
 * @param {Number} length                                                                                              // 6447
 * @return {Quaternion}                                                                                                // 6448
 */                                                                                                                    // 6449
Quaternion.prototype.normalize = function normalize(length) {                                                          // 6450
    length = (length === undefined) ? 1 : length;                                                                      // 6451
    return this.scalarDivide(length * this.norm());                                                                    // 6452
};                                                                                                                     // 6453
                                                                                                                       // 6454
/*                                                                                                                     // 6455
 * Docs: TODO                                                                                                          // 6456
 *                                                                                                                     // 6457
 * @method makeFromAngleAndAxis                                                                                        // 6458
 * @param {Number} angle                                                                                               // 6459
 * @param {Vector} v                                                                                                   // 6460
 * @return {Quaternion}                                                                                                // 6461
 */                                                                                                                    // 6462
Quaternion.prototype.makeFromAngleAndAxis = function makeFromAngleAndAxis(angle, v) {                                  // 6463
    //left handed quaternion creation: theta -> -theta                                                                 // 6464
    var n  = v.normalize();                                                                                            // 6465
    var ha = angle*0.5;                                                                                                // 6466
    var s  = -Math.sin(ha);                                                                                            // 6467
    this.x = s*n.x;                                                                                                    // 6468
    this.y = s*n.y;                                                                                                    // 6469
    this.z = s*n.z;                                                                                                    // 6470
    this.w = Math.cos(ha);                                                                                             // 6471
    return this;                                                                                                       // 6472
};                                                                                                                     // 6473
                                                                                                                       // 6474
/*                                                                                                                     // 6475
 * Docs: TODO                                                                                                          // 6476
 *                                                                                                                     // 6477
 * @method setWXYZ                                                                                                     // 6478
 * @param {Number} w                                                                                                   // 6479
 * @param {Number} x                                                                                                   // 6480
 * @param {Number} y                                                                                                   // 6481
 * @param {Number} z                                                                                                   // 6482
 * @return {Quaternion}                                                                                                // 6483
 */                                                                                                                    // 6484
Quaternion.prototype.setWXYZ = function setWXYZ(w,x,y,z) {                                                             // 6485
    register.clear();                                                                                                  // 6486
    this.w = w;                                                                                                        // 6487
    this.x = x;                                                                                                        // 6488
    this.y = y;                                                                                                        // 6489
    this.z = z;                                                                                                        // 6490
    return this;                                                                                                       // 6491
};                                                                                                                     // 6492
                                                                                                                       // 6493
/*                                                                                                                     // 6494
 * Docs: TODO                                                                                                          // 6495
 *                                                                                                                     // 6496
 * @method set                                                                                                         // 6497
 * @param {Array|Quaternion} v                                                                                         // 6498
 * @return {Quaternion}                                                                                                // 6499
 */                                                                                                                    // 6500
Quaternion.prototype.set = function set(v) {                                                                           // 6501
    if (v instanceof Array) {                                                                                          // 6502
        this.w = 0;                                                                                                    // 6503
        this.x = v[0];                                                                                                 // 6504
        this.y = v[1];                                                                                                 // 6505
        this.z = v[2];                                                                                                 // 6506
    }                                                                                                                  // 6507
    else {                                                                                                             // 6508
        this.w = v.w;                                                                                                  // 6509
        this.x = v.x;                                                                                                  // 6510
        this.y = v.y;                                                                                                  // 6511
        this.z = v.z;                                                                                                  // 6512
    }                                                                                                                  // 6513
    if (this !== register) register.clear();                                                                           // 6514
    return this;                                                                                                       // 6515
};                                                                                                                     // 6516
                                                                                                                       // 6517
/**                                                                                                                    // 6518
 * Docs: TODO                                                                                                          // 6519
 *                                                                                                                     // 6520
 * @method put                                                                                                         // 6521
 * @param {Quaternion} q                                                                                               // 6522
 * @return {Quaternion}                                                                                                // 6523
 */                                                                                                                    // 6524
Quaternion.prototype.put = function put(q) {                                                                           // 6525
    q.set(register);                                                                                                   // 6526
};                                                                                                                     // 6527
                                                                                                                       // 6528
/**                                                                                                                    // 6529
 * Doc: TODO                                                                                                           // 6530
 *                                                                                                                     // 6531
 * @method clone                                                                                                       // 6532
 * @return {Quaternion}                                                                                                // 6533
 */                                                                                                                    // 6534
Quaternion.prototype.clone = function clone() {                                                                        // 6535
    return new Quaternion(this);                                                                                       // 6536
};                                                                                                                     // 6537
                                                                                                                       // 6538
/**                                                                                                                    // 6539
 * Doc: TODO                                                                                                           // 6540
 *                                                                                                                     // 6541
 * @method clear                                                                                                       // 6542
 * @return {Quaternion}                                                                                                // 6543
 */                                                                                                                    // 6544
Quaternion.prototype.clear = function clear() {                                                                        // 6545
    this.w = 1;                                                                                                        // 6546
    this.x = 0;                                                                                                        // 6547
    this.y = 0;                                                                                                        // 6548
    this.z = 0;                                                                                                        // 6549
    return this;                                                                                                       // 6550
};                                                                                                                     // 6551
                                                                                                                       // 6552
/**                                                                                                                    // 6553
 * Doc: TODO                                                                                                           // 6554
 *                                                                                                                     // 6555
 * @method isEqual                                                                                                     // 6556
 * @param {Quaternion} q                                                                                               // 6557
 * @return {Boolean}                                                                                                   // 6558
 */                                                                                                                    // 6559
Quaternion.prototype.isEqual = function isEqual(q) {                                                                   // 6560
    return q.w === this.w && q.x === this.x && q.y === this.y && q.z === this.z;                                       // 6561
};                                                                                                                     // 6562
                                                                                                                       // 6563
/**                                                                                                                    // 6564
 * Doc: TODO                                                                                                           // 6565
 *                                                                                                                     // 6566
 * @method dot                                                                                                         // 6567
 * @param {Quaternion} q                                                                                               // 6568
 * @return {Number}                                                                                                    // 6569
 */                                                                                                                    // 6570
Quaternion.prototype.dot = function dot(q) {                                                                           // 6571
    return this.w * q.w + this.x * q.x + this.y * q.y + this.z * q.z;                                                  // 6572
};                                                                                                                     // 6573
                                                                                                                       // 6574
/**                                                                                                                    // 6575
 * Doc: TODO                                                                                                           // 6576
 *                                                                                                                     // 6577
 * @method normSquared                                                                                                 // 6578
 * @return {Number}                                                                                                    // 6579
 */                                                                                                                    // 6580
Quaternion.prototype.normSquared = function normSquared() {                                                            // 6581
    return this.dot(this);                                                                                             // 6582
};                                                                                                                     // 6583
                                                                                                                       // 6584
/**                                                                                                                    // 6585
 * Doc: TODO                                                                                                           // 6586
 *                                                                                                                     // 6587
 * @method norm                                                                                                        // 6588
 * @return {Number}                                                                                                    // 6589
 */                                                                                                                    // 6590
Quaternion.prototype.norm = function norm() {                                                                          // 6591
    return Math.sqrt(this.normSquared());                                                                              // 6592
};                                                                                                                     // 6593
                                                                                                                       // 6594
/**                                                                                                                    // 6595
 * Doc: TODO                                                                                                           // 6596
 *                                                                                                                     // 6597
 * @method isZero                                                                                                      // 6598
 * @return {Boolean}                                                                                                   // 6599
 */                                                                                                                    // 6600
Quaternion.prototype.isZero = function isZero() {                                                                      // 6601
    return !(this.x || this.y || this.z);                                                                              // 6602
};                                                                                                                     // 6603
                                                                                                                       // 6604
/**                                                                                                                    // 6605
 * Doc: TODO                                                                                                           // 6606
 *                                                                                                                     // 6607
 * @method getTransform                                                                                                // 6608
 * @return {Transform}                                                                                                 // 6609
 */                                                                                                                    // 6610
Quaternion.prototype.getTransform = function getTransform() {                                                          // 6611
    var temp = this.normalize(1);                                                                                      // 6612
    var x = temp.x;                                                                                                    // 6613
    var y = temp.y;                                                                                                    // 6614
    var z = temp.z;                                                                                                    // 6615
    var w = temp.w;                                                                                                    // 6616
                                                                                                                       // 6617
    //LHC system flattened to column major = RHC flattened to row major                                                // 6618
    return [                                                                                                           // 6619
        1 - 2*y*y - 2*z*z,                                                                                             // 6620
            2*x*y - 2*z*w,                                                                                             // 6621
            2*x*z + 2*y*w,                                                                                             // 6622
        0,                                                                                                             // 6623
            2*x*y + 2*z*w,                                                                                             // 6624
        1 - 2*x*x - 2*z*z,                                                                                             // 6625
            2*y*z - 2*x*w,                                                                                             // 6626
        0,                                                                                                             // 6627
            2*x*z - 2*y*w,                                                                                             // 6628
            2*y*z + 2*x*w,                                                                                             // 6629
        1 - 2*x*x - 2*y*y,                                                                                             // 6630
        0,                                                                                                             // 6631
        0,                                                                                                             // 6632
        0,                                                                                                             // 6633
        0,                                                                                                             // 6634
        1                                                                                                              // 6635
    ];                                                                                                                 // 6636
};                                                                                                                     // 6637
                                                                                                                       // 6638
var matrixRegister = new Matrix();                                                                                     // 6639
                                                                                                                       // 6640
/**                                                                                                                    // 6641
 * Doc: TODO                                                                                                           // 6642
 *                                                                                                                     // 6643
 * @method getMatrix                                                                                                   // 6644
 * @return {Transform}                                                                                                 // 6645
 */                                                                                                                    // 6646
Quaternion.prototype.getMatrix = function getMatrix() {                                                                // 6647
    var temp = this.normalize(1);                                                                                      // 6648
    var x = temp.x;                                                                                                    // 6649
    var y = temp.y;                                                                                                    // 6650
    var z = temp.z;                                                                                                    // 6651
    var w = temp.w;                                                                                                    // 6652
                                                                                                                       // 6653
    //LHC system flattened to row major                                                                                // 6654
    return matrixRegister.set([                                                                                        // 6655
        [                                                                                                              // 6656
            1 - 2*y*y - 2*z*z,                                                                                         // 6657
                2*x*y + 2*z*w,                                                                                         // 6658
                2*x*z - 2*y*w                                                                                          // 6659
        ],                                                                                                             // 6660
        [                                                                                                              // 6661
                2*x*y - 2*z*w,                                                                                         // 6662
            1 - 2*x*x - 2*z*z,                                                                                         // 6663
                2*y*z + 2*x*w                                                                                          // 6664
        ],                                                                                                             // 6665
        [                                                                                                              // 6666
                2*x*z + 2*y*w,                                                                                         // 6667
                2*y*z - 2*x*w,                                                                                         // 6668
            1 - 2*x*x - 2*y*y                                                                                          // 6669
        ]                                                                                                              // 6670
    ]);                                                                                                                // 6671
};                                                                                                                     // 6672
                                                                                                                       // 6673
var epsilon = 1e-5;                                                                                                    // 6674
                                                                                                                       // 6675
/**                                                                                                                    // 6676
 * Doc: TODO                                                                                                           // 6677
 *                                                                                                                     // 6678
 * @method slerp                                                                                                       // 6679
 * @param {Quaternion} q                                                                                               // 6680
 * @param {Number} t                                                                                                   // 6681
 * @return {Transform}                                                                                                 // 6682
 */                                                                                                                    // 6683
Quaternion.prototype.slerp = function slerp(q, t) {                                                                    // 6684
    var omega;                                                                                                         // 6685
    var cosomega;                                                                                                      // 6686
    var sinomega;                                                                                                      // 6687
    var scaleFrom;                                                                                                     // 6688
    var scaleTo;                                                                                                       // 6689
                                                                                                                       // 6690
    cosomega = this.dot(q);                                                                                            // 6691
    if ((1.0 - cosomega) > epsilon) {                                                                                  // 6692
        omega       = Math.acos(cosomega);                                                                             // 6693
        sinomega    = Math.sin(omega);                                                                                 // 6694
        scaleFrom   = Math.sin((1.0 - t) * omega) / sinomega;                                                          // 6695
        scaleTo     = Math.sin(t * omega) / sinomega;                                                                  // 6696
    }                                                                                                                  // 6697
    else {                                                                                                             // 6698
        scaleFrom   = 1.0 - t;                                                                                         // 6699
        scaleTo     = t;                                                                                               // 6700
    }                                                                                                                  // 6701
    return register.set(this.scalarMultiply(scaleFrom/scaleTo).add(q).multiply(scaleTo));                              // 6702
};                                                                                                                     // 6703
                                                                                                                       // 6704
module.exports = Quaternion;                                                                                           // 6705
},{"./Matrix":37}],39:[function(_dereq_,module,exports){                                                               // 6706
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6707
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6708
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6709
 *                                                                                                                     // 6710
 * Owner: david@famo.us                                                                                                // 6711
 * @license MPL 2.0                                                                                                    // 6712
 * @copyright Famous Industries, Inc. 2014                                                                             // 6713
 */                                                                                                                    // 6714
                                                                                                                       // 6715
                                                                                                                       // 6716
                                                                                                                       // 6717
                                                                                                                       // 6718
var RAND = Math.random;                                                                                                // 6719
                                                                                                                       // 6720
function _randomFloat(min,max) {                                                                                       // 6721
    return min + RAND() * (max - min);                                                                                 // 6722
}                                                                                                                      // 6723
                                                                                                                       // 6724
function _randomInteger(min,max) {                                                                                     // 6725
    return (min + RAND() * (max - min + 1)) >> 0;                                                                      // 6726
}                                                                                                                      // 6727
                                                                                                                       // 6728
/**                                                                                                                    // 6729
 * Very simple uniform random number generator library wrapping Math.random().                                         // 6730
 *                                                                                                                     // 6731
 * @class Random                                                                                                       // 6732
 * @static                                                                                                             // 6733
 */                                                                                                                    // 6734
var Random = {};                                                                                                       // 6735
                                                                                                                       // 6736
/**                                                                                                                    // 6737
 * Get single random integer between min and max (inclusive), or array                                                 // 6738
 *   of size dim if specified.                                                                                         // 6739
 *                                                                                                                     // 6740
 * @method integer                                                                                                     // 6741
 *                                                                                                                     // 6742
 * @param {Number} min lower bound, default 0                                                                          // 6743
 * @param {Number} max upper bound, default 1                                                                          // 6744
 * @param {Number} dim (optional) dimension of output array, if specified                                              // 6745
 * @return {number | array<number>} random integer, or optionally, an array of random integers                         // 6746
 */                                                                                                                    // 6747
Random.integer = function integer(min,max,dim) {                                                                       // 6748
    min = (min !== undefined) ? min : 0;                                                                               // 6749
    max = (max !== undefined) ? max : 1;                                                                               // 6750
    if (dim !== undefined) {                                                                                           // 6751
        var result = [];                                                                                               // 6752
        for (var i = 0; i < dim; i++) result.push(_randomInteger(min,max));                                            // 6753
        return result;                                                                                                 // 6754
    }                                                                                                                  // 6755
    else return _randomInteger(min,max);                                                                               // 6756
};                                                                                                                     // 6757
                                                                                                                       // 6758
/**                                                                                                                    // 6759
 * Get single random float between min and max (inclusive), or array                                                   // 6760
 *   of size dim if specified                                                                                          // 6761
 *                                                                                                                     // 6762
 * @method range                                                                                                       // 6763
 *                                                                                                                     // 6764
 * @param {Number} min lower bound, default 0                                                                          // 6765
 * @param {Number} max upper bound, default 1                                                                          // 6766
 * @param {Number} [dim] dimension of output array, if specified                                                       // 6767
 * @return {Number} random float, or optionally an array                                                               // 6768
 */                                                                                                                    // 6769
Random.range = function range(min,max,dim) {                                                                           // 6770
    min = (min !== undefined) ? min : 0;                                                                               // 6771
    max = (max !== undefined) ? max : 1;                                                                               // 6772
    if (dim !== undefined) {                                                                                           // 6773
        var result = [];                                                                                               // 6774
        for (var i = 0; i < dim; i++) result.push(_randomFloat(min,max));                                              // 6775
        return result;                                                                                                 // 6776
    }                                                                                                                  // 6777
    else return _randomFloat(min,max);                                                                                 // 6778
};                                                                                                                     // 6779
                                                                                                                       // 6780
/**                                                                                                                    // 6781
 * Return random number among the set {-1 ,1}                                                                          // 6782
 *                                                                                                                     // 6783
 * @method sign                                                                                                        // 6784
 *                                                                                                                     // 6785
 * @param {Number} prob probability of returning 1, default 0.5                                                        // 6786
 * @return {Number} random sign (-1 or 1)                                                                              // 6787
 */                                                                                                                    // 6788
Random.sign = function sign(prob) {                                                                                    // 6789
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6790
    return (RAND() < prob) ? 1 : -1;                                                                                   // 6791
};                                                                                                                     // 6792
                                                                                                                       // 6793
/**                                                                                                                    // 6794
 * Return random boolean value, true or false.                                                                         // 6795
 *                                                                                                                     // 6796
 * @method bool                                                                                                        // 6797
 *                                                                                                                     // 6798
 * @param {Number} prob probability of returning true, default 0.5                                                     // 6799
 * @return {Boolean} random boolean                                                                                    // 6800
 */                                                                                                                    // 6801
Random.bool = function bool(prob) {                                                                                    // 6802
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6803
    return RAND() < prob;                                                                                              // 6804
};                                                                                                                     // 6805
                                                                                                                       // 6806
module.exports = Random;                                                                                               // 6807
},{}],40:[function(_dereq_,module,exports){                                                                            // 6808
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6809
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6810
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6811
 *                                                                                                                     // 6812
 * Owner: mark@famo.us                                                                                                 // 6813
 * @license MPL 2.0                                                                                                    // 6814
 * @copyright Famous Industries, Inc. 2014                                                                             // 6815
 */                                                                                                                    // 6816
                                                                                                                       // 6817
                                                                                                                       // 6818
                                                                                                                       // 6819
/**                                                                                                                    // 6820
 * A few static methods.                                                                                               // 6821
 *                                                                                                                     // 6822
 * @class Utilities                                                                                                    // 6823
 * @static                                                                                                             // 6824
 */                                                                                                                    // 6825
var Utilities = {};                                                                                                    // 6826
                                                                                                                       // 6827
/**                                                                                                                    // 6828
 * Constrain input to range.                                                                                           // 6829
 *                                                                                                                     // 6830
 * @method clamp                                                                                                       // 6831
 * @param {Number} value input                                                                                         // 6832
 * @param {Array.Number} range [min, max]                                                                              // 6833
 * @static                                                                                                             // 6834
 */                                                                                                                    // 6835
Utilities.clamp = function clamp(value, range) {                                                                       // 6836
    return Math.max(Math.min(value, range[1]), range[0]);                                                              // 6837
};                                                                                                                     // 6838
                                                                                                                       // 6839
/**                                                                                                                    // 6840
 * Euclidean length of numerical array.                                                                                // 6841
 *                                                                                                                     // 6842
 * @method length                                                                                                      // 6843
 * @param {Array.Number} array array of numbers                                                                        // 6844
 * @static                                                                                                             // 6845
 */                                                                                                                    // 6846
Utilities.length = function length(array) {                                                                            // 6847
    var distanceSquared = 0;                                                                                           // 6848
    for (var i = 0; i < array.length; i++) {                                                                           // 6849
        distanceSquared += array[i] * array[i];                                                                        // 6850
    }                                                                                                                  // 6851
    return Math.sqrt(distanceSquared);                                                                                 // 6852
};                                                                                                                     // 6853
                                                                                                                       // 6854
module.exports = Utilities;                                                                                            // 6855
},{}],41:[function(_dereq_,module,exports){                                                                            // 6856
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6857
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6858
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6859
 *                                                                                                                     // 6860
 * Owner: david@famo.us                                                                                                // 6861
 * @license MPL 2.0                                                                                                    // 6862
 * @copyright Famous Industries, Inc. 2014                                                                             // 6863
 */                                                                                                                    // 6864
                                                                                                                       // 6865
                                                                                                                       // 6866
                                                                                                                       // 6867
                                                                                                                       // 6868
/**                                                                                                                    // 6869
 * Three-element floating point vector.                                                                                // 6870
 *                                                                                                                     // 6871
 * @class Vector                                                                                                       // 6872
 * @constructor                                                                                                        // 6873
 *                                                                                                                     // 6874
 * @param {number} x x element value                                                                                   // 6875
 * @param {number} y y element value                                                                                   // 6876
 * @param {number} z z element value                                                                                   // 6877
 */                                                                                                                    // 6878
function Vector(x,y,z) {                                                                                               // 6879
    if (arguments.length === 1 && x !== undefined) this.set(x);                                                        // 6880
    else {                                                                                                             // 6881
        this.x = x || 0;                                                                                               // 6882
        this.y = y || 0;                                                                                               // 6883
        this.z = z || 0;                                                                                               // 6884
    }                                                                                                                  // 6885
    return this;                                                                                                       // 6886
}                                                                                                                      // 6887
                                                                                                                       // 6888
var _register = new Vector(0,0,0);                                                                                     // 6889
                                                                                                                       // 6890
/**                                                                                                                    // 6891
 * Add this element-wise to another Vector, element-wise.                                                              // 6892
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6893
 *                                                                                                                     // 6894
 * @method add                                                                                                         // 6895
 * @param {Vector} v addend                                                                                            // 6896
 * @return {Vector} vector sum                                                                                         // 6897
 */                                                                                                                    // 6898
Vector.prototype.add = function add(v) {                                                                               // 6899
    return _setXYZ.call(_register,                                                                                     // 6900
        this.x + v.x,                                                                                                  // 6901
        this.y + v.y,                                                                                                  // 6902
        this.z + v.z                                                                                                   // 6903
    );                                                                                                                 // 6904
};                                                                                                                     // 6905
                                                                                                                       // 6906
/**                                                                                                                    // 6907
 * Subtract another vector from this vector, element-wise.                                                             // 6908
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6909
 *                                                                                                                     // 6910
 * @method sub                                                                                                         // 6911
 * @param {Vector} v subtrahend                                                                                        // 6912
 * @return {Vector} vector difference                                                                                  // 6913
 */                                                                                                                    // 6914
Vector.prototype.sub = function sub(v) {                                                                               // 6915
    return _setXYZ.call(_register,                                                                                     // 6916
        this.x - v.x,                                                                                                  // 6917
        this.y - v.y,                                                                                                  // 6918
        this.z - v.z                                                                                                   // 6919
    );                                                                                                                 // 6920
};                                                                                                                     // 6921
                                                                                                                       // 6922
/**                                                                                                                    // 6923
 * Scale Vector by floating point r.                                                                                   // 6924
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6925
 *                                                                                                                     // 6926
 * @method mult                                                                                                        // 6927
 *                                                                                                                     // 6928
 * @param {number} r scalar                                                                                            // 6929
 * @return {Vector} vector result                                                                                      // 6930
 */                                                                                                                    // 6931
Vector.prototype.mult = function mult(r) {                                                                             // 6932
    return _setXYZ.call(_register,                                                                                     // 6933
        r * this.x,                                                                                                    // 6934
        r * this.y,                                                                                                    // 6935
        r * this.z                                                                                                     // 6936
    );                                                                                                                 // 6937
};                                                                                                                     // 6938
                                                                                                                       // 6939
/**                                                                                                                    // 6940
 * Scale Vector by floating point 1/r.                                                                                 // 6941
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6942
 *                                                                                                                     // 6943
 * @method div                                                                                                         // 6944
 *                                                                                                                     // 6945
 * @param {number} r scalar                                                                                            // 6946
 * @return {Vector} vector result                                                                                      // 6947
 */                                                                                                                    // 6948
Vector.prototype.div = function div(r) {                                                                               // 6949
    return this.mult(1 / r);                                                                                           // 6950
};                                                                                                                     // 6951
                                                                                                                       // 6952
/**                                                                                                                    // 6953
 * Given another vector v, return cross product (v)x(this).                                                            // 6954
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6955
 *                                                                                                                     // 6956
 * @method cross                                                                                                       // 6957
 * @param {Vector} v Left Hand Vector                                                                                  // 6958
 * @return {Vector} vector result                                                                                      // 6959
 */                                                                                                                    // 6960
Vector.prototype.cross = function cross(v) {                                                                           // 6961
    var x = this.x;                                                                                                    // 6962
    var y = this.y;                                                                                                    // 6963
    var z = this.z;                                                                                                    // 6964
    var vx = v.x;                                                                                                      // 6965
    var vy = v.y;                                                                                                      // 6966
    var vz = v.z;                                                                                                      // 6967
                                                                                                                       // 6968
    return _setXYZ.call(_register,                                                                                     // 6969
        z * vy - y * vz,                                                                                               // 6970
        x * vz - z * vx,                                                                                               // 6971
        y * vx - x * vy                                                                                                // 6972
    );                                                                                                                 // 6973
};                                                                                                                     // 6974
                                                                                                                       // 6975
/**                                                                                                                    // 6976
 * Component-wise equality test between this and Vector v.                                                             // 6977
 * @method equals                                                                                                      // 6978
 * @param {Vector} v vector to compare                                                                                 // 6979
 * @return {boolean}                                                                                                   // 6980
 */                                                                                                                    // 6981
Vector.prototype.equals = function equals(v) {                                                                         // 6982
    return (v.x === this.x && v.y === this.y && v.z === this.z);                                                       // 6983
};                                                                                                                     // 6984
                                                                                                                       // 6985
/**                                                                                                                    // 6986
 * Rotate clockwise around x-axis by theta radians.                                                                    // 6987
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6988
 * @method rotateX                                                                                                     // 6989
 * @param {number} theta radians                                                                                       // 6990
 * @return {Vector} rotated vector                                                                                     // 6991
 */                                                                                                                    // 6992
Vector.prototype.rotateX = function rotateX(theta) {                                                                   // 6993
    var x = this.x;                                                                                                    // 6994
    var y = this.y;                                                                                                    // 6995
    var z = this.z;                                                                                                    // 6996
                                                                                                                       // 6997
    var cosTheta = Math.cos(theta);                                                                                    // 6998
    var sinTheta = Math.sin(theta);                                                                                    // 6999
                                                                                                                       // 7000
    return _setXYZ.call(_register,                                                                                     // 7001
        x,                                                                                                             // 7002
        y * cosTheta - z * sinTheta,                                                                                   // 7003
        y * sinTheta + z * cosTheta                                                                                    // 7004
    );                                                                                                                 // 7005
};                                                                                                                     // 7006
                                                                                                                       // 7007
/**                                                                                                                    // 7008
 * Rotate clockwise around y-axis by theta radians.                                                                    // 7009
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7010
 * @method rotateY                                                                                                     // 7011
 * @param {number} theta radians                                                                                       // 7012
 * @return {Vector} rotated vector                                                                                     // 7013
 */                                                                                                                    // 7014
Vector.prototype.rotateY = function rotateY(theta) {                                                                   // 7015
    var x = this.x;                                                                                                    // 7016
    var y = this.y;                                                                                                    // 7017
    var z = this.z;                                                                                                    // 7018
                                                                                                                       // 7019
    var cosTheta = Math.cos(theta);                                                                                    // 7020
    var sinTheta = Math.sin(theta);                                                                                    // 7021
                                                                                                                       // 7022
    return _setXYZ.call(_register,                                                                                     // 7023
        z * sinTheta + x * cosTheta,                                                                                   // 7024
        y,                                                                                                             // 7025
        z * cosTheta - x * sinTheta                                                                                    // 7026
    );                                                                                                                 // 7027
};                                                                                                                     // 7028
                                                                                                                       // 7029
/**                                                                                                                    // 7030
 * Rotate clockwise around z-axis by theta radians.                                                                    // 7031
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7032
 * @method rotateZ                                                                                                     // 7033
 * @param {number} theta radians                                                                                       // 7034
 * @return {Vector} rotated vector                                                                                     // 7035
 */                                                                                                                    // 7036
Vector.prototype.rotateZ = function rotateZ(theta) {                                                                   // 7037
    var x = this.x;                                                                                                    // 7038
    var y = this.y;                                                                                                    // 7039
    var z = this.z;                                                                                                    // 7040
                                                                                                                       // 7041
    var cosTheta = Math.cos(theta);                                                                                    // 7042
    var sinTheta = Math.sin(theta);                                                                                    // 7043
                                                                                                                       // 7044
    return _setXYZ.call(_register,                                                                                     // 7045
        x * cosTheta - y * sinTheta,                                                                                   // 7046
        x * sinTheta + y * cosTheta,                                                                                   // 7047
        z                                                                                                              // 7048
    );                                                                                                                 // 7049
};                                                                                                                     // 7050
                                                                                                                       // 7051
/**                                                                                                                    // 7052
 * Return dot product of this with a second Vector                                                                     // 7053
 * @method dot                                                                                                         // 7054
 * @param {Vector} v second vector                                                                                     // 7055
 * @return {number} dot product                                                                                        // 7056
 */                                                                                                                    // 7057
Vector.prototype.dot = function dot(v) {                                                                               // 7058
    return this.x * v.x + this.y * v.y + this.z * v.z;                                                                 // 7059
};                                                                                                                     // 7060
                                                                                                                       // 7061
/**                                                                                                                    // 7062
 * Return squared length of this vector                                                                                // 7063
 * @method normSquared                                                                                                 // 7064
 * @return {number} squared length                                                                                     // 7065
 */                                                                                                                    // 7066
Vector.prototype.normSquared = function normSquared() {                                                                // 7067
    return this.dot(this);                                                                                             // 7068
};                                                                                                                     // 7069
                                                                                                                       // 7070
/**                                                                                                                    // 7071
 * Return length of this vector                                                                                        // 7072
 * @method norm                                                                                                        // 7073
 * @return {number} length                                                                                             // 7074
 */                                                                                                                    // 7075
Vector.prototype.norm = function norm() {                                                                              // 7076
    return Math.sqrt(this.normSquared());                                                                              // 7077
};                                                                                                                     // 7078
                                                                                                                       // 7079
/**                                                                                                                    // 7080
 * Scale Vector to specified length.                                                                                   // 7081
 *   If length is less than internal tolerance, set vector to [length, 0, 0].                                          // 7082
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7083
 * @method normalize                                                                                                   // 7084
 *                                                                                                                     // 7085
 * @param {number} length target length, default 1.0                                                                   // 7086
 * @return {Vector}                                                                                                    // 7087
 */                                                                                                                    // 7088
Vector.prototype.normalize = function normalize(length) {                                                              // 7089
    if (arguments.length === 0) length = 1;                                                                            // 7090
    var norm = this.norm();                                                                                            // 7091
                                                                                                                       // 7092
    if (norm > 1e-7) return _setFromVector.call(_register, this.mult(length / norm));                                  // 7093
    else return _setXYZ.call(_register, length, 0, 0);                                                                 // 7094
};                                                                                                                     // 7095
                                                                                                                       // 7096
/**                                                                                                                    // 7097
 * Make a separate copy of the Vector.                                                                                 // 7098
 *                                                                                                                     // 7099
 * @method clone                                                                                                       // 7100
 *                                                                                                                     // 7101
 * @return {Vector}                                                                                                    // 7102
 */                                                                                                                    // 7103
Vector.prototype.clone = function clone() {                                                                            // 7104
    return new Vector(this);                                                                                           // 7105
};                                                                                                                     // 7106
                                                                                                                       // 7107
/**                                                                                                                    // 7108
 * True if and only if every value is 0 (or falsy)                                                                     // 7109
 *                                                                                                                     // 7110
 * @method isZero                                                                                                      // 7111
 *                                                                                                                     // 7112
 * @return {boolean}                                                                                                   // 7113
 */                                                                                                                    // 7114
Vector.prototype.isZero = function isZero() {                                                                          // 7115
    return !(this.x || this.y || this.z);                                                                              // 7116
};                                                                                                                     // 7117
                                                                                                                       // 7118
function _setXYZ(x,y,z) {                                                                                              // 7119
    this.x = x;                                                                                                        // 7120
    this.y = y;                                                                                                        // 7121
    this.z = z;                                                                                                        // 7122
    return this;                                                                                                       // 7123
}                                                                                                                      // 7124
                                                                                                                       // 7125
function _setFromArray(v) {                                                                                            // 7126
    return _setXYZ.call(this,v[0],v[1],v[2] || 0);                                                                     // 7127
}                                                                                                                      // 7128
                                                                                                                       // 7129
function _setFromVector(v) {                                                                                           // 7130
    return _setXYZ.call(this, v.x, v.y, v.z);                                                                          // 7131
}                                                                                                                      // 7132
                                                                                                                       // 7133
function _setFromNumber(x) {                                                                                           // 7134
    return _setXYZ.call(this,x,0,0);                                                                                   // 7135
}                                                                                                                      // 7136
                                                                                                                       // 7137
/**                                                                                                                    // 7138
 * Set this Vector to the values in the provided Array or Vector.                                                      // 7139
 *                                                                                                                     // 7140
 * @method set                                                                                                         // 7141
 * @param {object} v array, Vector, or number                                                                          // 7142
 * @return {Vector} this                                                                                               // 7143
 */                                                                                                                    // 7144
Vector.prototype.set = function set(v) {                                                                               // 7145
    if (v instanceof Array) return _setFromArray.call(this, v);                                                        // 7146
    if (typeof v === 'number') return _setFromNumber.call(this, v);                                                    // 7147
    return _setFromVector.call(this, v);                                                                               // 7148
};                                                                                                                     // 7149
                                                                                                                       // 7150
Vector.prototype.setXYZ = function(x,y,z) {                                                                            // 7151
    return _setXYZ.apply(this, arguments);                                                                             // 7152
};                                                                                                                     // 7153
                                                                                                                       // 7154
Vector.prototype.set1D = function(x) {                                                                                 // 7155
    return _setFromNumber.call(this, x);                                                                               // 7156
};                                                                                                                     // 7157
                                                                                                                       // 7158
/**                                                                                                                    // 7159
 * Put result of last internal register calculation in specified output vector.                                        // 7160
 *                                                                                                                     // 7161
 * @method put                                                                                                         // 7162
 * @param {Vector} v destination vector                                                                                // 7163
 * @return {Vector} destination vector                                                                                 // 7164
 */                                                                                                                    // 7165
                                                                                                                       // 7166
Vector.prototype.put = function put(v) {                                                                               // 7167
    if (this === _register) _setFromVector.call(v, _register);                                                         // 7168
    else _setFromVector.call(v, this);                                                                                 // 7169
};                                                                                                                     // 7170
                                                                                                                       // 7171
/**                                                                                                                    // 7172
 * Set this vector to [0,0,0]                                                                                          // 7173
 *                                                                                                                     // 7174
 * @method clear                                                                                                       // 7175
 */                                                                                                                    // 7176
Vector.prototype.clear = function clear() {                                                                            // 7177
    return _setXYZ.call(this,0,0,0);                                                                                   // 7178
};                                                                                                                     // 7179
                                                                                                                       // 7180
/**                                                                                                                    // 7181
 * Scale this Vector down to specified "cap" length.                                                                   // 7182
 *   If Vector shorter than cap, or cap is Infinity, do nothing.                                                       // 7183
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7184
 *                                                                                                                     // 7185
 * @method cap                                                                                                         // 7186
 * @return {Vector} capped vector                                                                                      // 7187
 */                                                                                                                    // 7188
Vector.prototype.cap = function cap(cap) {                                                                             // 7189
    if (cap === Infinity) return _setFromVector.call(_register, this);                                                 // 7190
    var norm = this.norm();                                                                                            // 7191
    if (norm > cap) return _setFromVector.call(_register, this.mult(cap / norm));                                      // 7192
    else return _setFromVector.call(_register, this);                                                                  // 7193
};                                                                                                                     // 7194
                                                                                                                       // 7195
/**                                                                                                                    // 7196
 * Return projection of this Vector onto another.                                                                      // 7197
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7198
 *                                                                                                                     // 7199
 * @method project                                                                                                     // 7200
 * @param {Vector} n vector to project upon                                                                            // 7201
 * @return {Vector} projected vector                                                                                   // 7202
 */                                                                                                                    // 7203
Vector.prototype.project = function project(n) {                                                                       // 7204
    return n.mult(this.dot(n));                                                                                        // 7205
};                                                                                                                     // 7206
                                                                                                                       // 7207
/**                                                                                                                    // 7208
 * Reflect this Vector across provided vector.                                                                         // 7209
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7210
 *                                                                                                                     // 7211
 * @method reflectAcross                                                                                               // 7212
 * @param {Vector} n vector to reflect across                                                                          // 7213
 * @return {Vector} reflected vector                                                                                   // 7214
 */                                                                                                                    // 7215
Vector.prototype.reflectAcross = function reflectAcross(n) {                                                           // 7216
    n.normalize().put(n);                                                                                              // 7217
    return _setFromVector(_register, this.sub(this.project(n).mult(2)));                                               // 7218
};                                                                                                                     // 7219
                                                                                                                       // 7220
/**                                                                                                                    // 7221
 * Convert Vector to three-element array.                                                                              // 7222
 *                                                                                                                     // 7223
 * @method get                                                                                                         // 7224
 * @return {array<number>} three-element array                                                                         // 7225
 */                                                                                                                    // 7226
Vector.prototype.get = function get() {                                                                                // 7227
    return [this.x, this.y, this.z];                                                                                   // 7228
};                                                                                                                     // 7229
                                                                                                                       // 7230
Vector.prototype.get1D = function() {                                                                                  // 7231
    return this.x;                                                                                                     // 7232
};                                                                                                                     // 7233
                                                                                                                       // 7234
module.exports = Vector;                                                                                               // 7235
},{}],42:[function(_dereq_,module,exports){                                                                            // 7236
module.exports = {                                                                                                     // 7237
  Matrix: _dereq_('./Matrix'),                                                                                         // 7238
  Quaternion: _dereq_('./Quaternion'),                                                                                 // 7239
  Random: _dereq_('./Random'),                                                                                         // 7240
  Utilities: _dereq_('./Utilities'),                                                                                   // 7241
  Vector: _dereq_('./Vector')                                                                                          // 7242
};                                                                                                                     // 7243
                                                                                                                       // 7244
},{"./Matrix":37,"./Quaternion":38,"./Random":39,"./Utilities":40,"./Vector":41}],43:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7246
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7247
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7248
 *                                                                                                                     // 7249
 * Owner: david@famo.us                                                                                                // 7250
 * @license MPL 2.0                                                                                                    // 7251
 * @copyright Famous Industries, Inc. 2014                                                                             // 7252
 */                                                                                                                    // 7253
                                                                                                                       // 7254
var Transform = _dereq_('../core/Transform');                                                                          // 7255
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7256
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 7257
var Utilities = _dereq_('../math/Utilities');                                                                          // 7258
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 7259
var MouseSync = _dereq_('../inputs/MouseSync');                                                                        // 7260
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 7261
GenericSync.register({'mouse': MouseSync, 'touch': TouchSync});                                                        // 7262
                                                                                                                       // 7263
/**                                                                                                                    // 7264
 * Makes added render nodes responsive to drag beahvior.                                                               // 7265
 *   Emits events 'start', 'update', 'end'.                                                                            // 7266
 * @class Draggable                                                                                                    // 7267
 * @constructor                                                                                                        // 7268
 * @param {Object} [options] options configuration object.                                                             // 7269
 * @param {Number} [options.snapX] grid width for snapping during drag                                                 // 7270
 * @param {Number} [options.snapY] grid height for snapping during drag                                                // 7271
 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag              // 7272
 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag              // 7273
 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion      // 7274
 * @param {Number} [options.projection] User should set to Draggable._direction.x or                                   // 7275
 *    Draggable._direction.y to constrain to one axis.                                                                 // 7276
 *                                                                                                                     // 7277
 */                                                                                                                    // 7278
function Draggable(options) {                                                                                          // 7279
    this.options = Object.create(Draggable.DEFAULT_OPTIONS);                                                           // 7280
    if (options) this.setOptions(options);                                                                             // 7281
                                                                                                                       // 7282
    this._positionState = new Transitionable([0,0]);                                                                   // 7283
    this._differential  = [0,0];                                                                                       // 7284
    this._active = true;                                                                                               // 7285
                                                                                                                       // 7286
    this.sync = new GenericSync(['mouse', 'touch'], {scale : this.options.scale});                                     // 7287
    this.eventOutput = new EventHandler();                                                                             // 7288
    EventHandler.setInputHandler(this,  this.sync);                                                                    // 7289
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 7290
                                                                                                                       // 7291
    _bindEvents.call(this);                                                                                            // 7292
}                                                                                                                      // 7293
                                                                                                                       // 7294
//binary representation of directions for bitwise operations                                                           // 7295
var _direction = {                                                                                                     // 7296
    x : 0x01,         //001                                                                                            // 7297
    y : 0x02          //010                                                                                            // 7298
};                                                                                                                     // 7299
                                                                                                                       // 7300
Draggable.DIRECTION_X = _direction.x;                                                                                  // 7301
Draggable.DIRECTION_Y = _direction.y;                                                                                  // 7302
                                                                                                                       // 7303
var _clamp = Utilities.clamp;                                                                                          // 7304
                                                                                                                       // 7305
Draggable.DEFAULT_OPTIONS = {                                                                                          // 7306
    projection  : _direction.x | _direction.y,                                                                         // 7307
    scale       : 1,                                                                                                   // 7308
    xRange      : null,                                                                                                // 7309
    yRange      : null,                                                                                                // 7310
    snapX       : 0,                                                                                                   // 7311
    snapY       : 0,                                                                                                   // 7312
    transition  : {duration : 0}                                                                                       // 7313
};                                                                                                                     // 7314
                                                                                                                       // 7315
function _mapDifferential(differential) {                                                                              // 7316
    var opts        = this.options;                                                                                    // 7317
    var projection  = opts.projection;                                                                                 // 7318
    var snapX       = opts.snapX;                                                                                      // 7319
    var snapY       = opts.snapY;                                                                                      // 7320
                                                                                                                       // 7321
    //axes                                                                                                             // 7322
    var tx = (projection & _direction.x) ? differential[0] : 0;                                                        // 7323
    var ty = (projection & _direction.y) ? differential[1] : 0;                                                        // 7324
                                                                                                                       // 7325
    //snapping                                                                                                         // 7326
    if (snapX > 0) tx -= tx % snapX;                                                                                   // 7327
    if (snapY > 0) ty -= ty % snapY;                                                                                   // 7328
                                                                                                                       // 7329
    return [tx, ty];                                                                                                   // 7330
}                                                                                                                      // 7331
                                                                                                                       // 7332
function _handleStart() {                                                                                              // 7333
    if (!this._active) return;                                                                                         // 7334
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7335
    this.eventOutput.emit('start', {position : this.getPosition()});                                                   // 7336
}                                                                                                                      // 7337
                                                                                                                       // 7338
function _handleMove(event) {                                                                                          // 7339
    if (!this._active) return;                                                                                         // 7340
                                                                                                                       // 7341
    var options = this.options;                                                                                        // 7342
    this._differential = event.position;                                                                               // 7343
    var newDifferential = _mapDifferential.call(this, this._differential);                                             // 7344
                                                                                                                       // 7345
    //buffer the differential if snapping is set                                                                       // 7346
    this._differential[0] -= newDifferential[0];                                                                       // 7347
    this._differential[1] -= newDifferential[1];                                                                       // 7348
                                                                                                                       // 7349
    var pos = this.getPosition();                                                                                      // 7350
                                                                                                                       // 7351
    //modify position, retain reference                                                                                // 7352
    pos[0] += newDifferential[0];                                                                                      // 7353
    pos[1] += newDifferential[1];                                                                                      // 7354
                                                                                                                       // 7355
    //handle bounding box                                                                                              // 7356
    if (options.xRange){                                                                                               // 7357
        var xRange = [options.xRange[0] + 0.5 * options.snapX, options.xRange[1] - 0.5 * options.snapX];               // 7358
        pos[0] = _clamp(pos[0], xRange);                                                                               // 7359
    }                                                                                                                  // 7360
                                                                                                                       // 7361
    if (options.yRange){                                                                                               // 7362
        var yRange = [options.yRange[0] + 0.5 * options.snapY, options.yRange[1] - 0.5 * options.snapY];               // 7363
        pos[1] = _clamp(pos[1], yRange);                                                                               // 7364
    }                                                                                                                  // 7365
                                                                                                                       // 7366
    this.eventOutput.emit('update', {position : pos});                                                                 // 7367
}                                                                                                                      // 7368
                                                                                                                       // 7369
function _handleEnd() {                                                                                                // 7370
    if (!this._active) return;                                                                                         // 7371
    this.eventOutput.emit('end', {position : this.getPosition()});                                                     // 7372
}                                                                                                                      // 7373
                                                                                                                       // 7374
function _bindEvents() {                                                                                               // 7375
    this.sync.on('start', _handleStart.bind(this));                                                                    // 7376
    this.sync.on('update', _handleMove.bind(this));                                                                    // 7377
    this.sync.on('end', _handleEnd.bind(this));                                                                        // 7378
}                                                                                                                      // 7379
                                                                                                                       // 7380
/**                                                                                                                    // 7381
 * Set internal options, overriding any default options                                                                // 7382
 *                                                                                                                     // 7383
 * @method setOptions                                                                                                  // 7384
 *                                                                                                                     // 7385
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7386
 */                                                                                                                    // 7387
Draggable.prototype.setOptions = function setOptions(options) {                                                        // 7388
    var currentOptions = this.options;                                                                                 // 7389
    if (options.projection !== undefined) {                                                                            // 7390
        var proj = options.projection;                                                                                 // 7391
        this.options.projection = 0;                                                                                   // 7392
        ['x', 'y'].forEach(function(val) {                                                                             // 7393
            if (proj.indexOf(val) !== -1) currentOptions.projection |= _direction[val];                                // 7394
        });                                                                                                            // 7395
    }                                                                                                                  // 7396
    if (options.scale  !== undefined) {                                                                                // 7397
        currentOptions.scale  = options.scale;                                                                         // 7398
        this.sync.setOptions({                                                                                         // 7399
            scale: options.scale                                                                                       // 7400
        });                                                                                                            // 7401
    }                                                                                                                  // 7402
    if (options.xRange !== undefined) currentOptions.xRange = options.xRange;                                          // 7403
    if (options.yRange !== undefined) currentOptions.yRange = options.yRange;                                          // 7404
    if (options.snapX  !== undefined) currentOptions.snapX  = options.snapX;                                           // 7405
    if (options.snapY  !== undefined) currentOptions.snapY  = options.snapY;                                           // 7406
};                                                                                                                     // 7407
                                                                                                                       // 7408
/**                                                                                                                    // 7409
 * Get current delta in position from where this draggable started.                                                    // 7410
 *                                                                                                                     // 7411
 * @method getPosition                                                                                                 // 7412
 *                                                                                                                     // 7413
 * @return {array<number>} [x, y] position delta from start.                                                           // 7414
 */                                                                                                                    // 7415
Draggable.prototype.getPosition = function getPosition() {                                                             // 7416
    return this._positionState.get();                                                                                  // 7417
};                                                                                                                     // 7418
                                                                                                                       // 7419
/**                                                                                                                    // 7420
 * Transition the element to the desired relative position via provided transition.                                    // 7421
 *  For example, calling this with [0,0] will not change the position.                                                 // 7422
 *  Callback will be executed on completion.                                                                           // 7423
 *                                                                                                                     // 7424
 * @method setRelativePosition                                                                                         // 7425
 *                                                                                                                     // 7426
 * @param {array<number>} position end state to which we interpolate                                                   // 7427
 * @param {transition} transition transition object specifying how object moves to new position                        // 7428
 * @param {function} callback zero-argument function to call on observed completion                                    // 7429
 */                                                                                                                    // 7430
Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {               // 7431
    var currPos = this.getPosition();                                                                                  // 7432
    var relativePosition = [currPos[0] + position[0], currPos[1] + position[1]];                                       // 7433
    this.setPosition(relativePosition, transition, callback);                                                          // 7434
};                                                                                                                     // 7435
                                                                                                                       // 7436
/**                                                                                                                    // 7437
 * Transition the element to the desired absolute position via provided transition.                                    // 7438
 *  Callback will be executed on completion.                                                                           // 7439
 *                                                                                                                     // 7440
 * @method setPosition                                                                                                 // 7441
 *                                                                                                                     // 7442
 * @param {array<number>} position end state to which we interpolate                                                   // 7443
 * @param {transition} transition transition object specifying how object moves to new position                        // 7444
 * @param {function} callback zero-argument function to call on observed completion                                    // 7445
 */                                                                                                                    // 7446
Draggable.prototype.setPosition = function setPosition(position, transition, callback) {                               // 7447
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7448
    this._positionState.set(position, transition, callback);                                                           // 7449
};                                                                                                                     // 7450
                                                                                                                       // 7451
/**                                                                                                                    // 7452
 * Set this draggable to respond to user input.                                                                        // 7453
 *                                                                                                                     // 7454
 * @method activate                                                                                                    // 7455
 *                                                                                                                     // 7456
 */                                                                                                                    // 7457
Draggable.prototype.activate = function activate() {                                                                   // 7458
    this._active = true;                                                                                               // 7459
};                                                                                                                     // 7460
                                                                                                                       // 7461
/**                                                                                                                    // 7462
 * Set this draggable to ignore user input.                                                                            // 7463
 *                                                                                                                     // 7464
 * @method deactivate                                                                                                  // 7465
 *                                                                                                                     // 7466
 */                                                                                                                    // 7467
Draggable.prototype.deactivate = function deactivate() {                                                               // 7468
    this._active = false;                                                                                              // 7469
};                                                                                                                     // 7470
                                                                                                                       // 7471
/**                                                                                                                    // 7472
 * Switch the input response stage between active and inactive.                                                        // 7473
 *                                                                                                                     // 7474
 * @method toggle                                                                                                      // 7475
 *                                                                                                                     // 7476
 */                                                                                                                    // 7477
Draggable.prototype.toggle = function toggle() {                                                                       // 7478
    this._active = !this._active;                                                                                      // 7479
};                                                                                                                     // 7480
                                                                                                                       // 7481
/**                                                                                                                    // 7482
 * Return render spec for this Modifier, applying to the provided                                                      // 7483
 *    target component.  This is similar to render() for Surfaces.                                                     // 7484
 *                                                                                                                     // 7485
 * @private                                                                                                            // 7486
 * @method modify                                                                                                      // 7487
 *                                                                                                                     // 7488
 * @param {Object} target (already rendered) render spec to                                                            // 7489
 *    which to apply the transform.                                                                                    // 7490
 * @return {Object} render spec for this Modifier, including the                                                       // 7491
 *    provided target                                                                                                  // 7492
 */                                                                                                                    // 7493
Draggable.prototype.modify = function modify(target) {                                                                 // 7494
    var pos = this.getPosition();                                                                                      // 7495
    return {                                                                                                           // 7496
        transform: Transform.translate(pos[0], pos[1]),                                                                // 7497
        target: target                                                                                                 // 7498
    };                                                                                                                 // 7499
};                                                                                                                     // 7500
                                                                                                                       // 7501
module.exports = Draggable;                                                                                            // 7502
},{"../core/EventHandler":7,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":33,"../math/Utilities":40,"../transitions/Transitionable":88}],44:[function(_dereq_,module,exports){
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7504
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 7505
                                                                                                                       // 7506
/**                                                                                                                    // 7507
 * Modifier that allows you to fade the opacity of affected renderables in and out.                                    // 7508
 * @class Fader                                                                                                        // 7509
 * @constructor                                                                                                        // 7510
 * @param {Object} [options] options configuration object.                                                             // 7511
 * @param {Boolean} [options.cull=false] Stops returning affected renderables up the tree when they're fully faded when true.
 * @param {Transition} [options.transition=true] The main transition for showing and hiding.                           // 7513
 * @param {Transition} [options.pulseInTransition=true] Controls the transition to a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7515
 * @param {Transition} [options.pulseOutTransition=true]Controls the transition back from a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7517
 *                                                                                                                     // 7518
 */                                                                                                                    // 7519
function Fader(options, startState) {                                                                                  // 7520
    this.options = Object.create(Fader.DEFAULT_OPTIONS);                                                               // 7521
    this._optionsManager = new OptionsManager(this.options);                                                           // 7522
                                                                                                                       // 7523
    if (options) this.setOptions(options);                                                                             // 7524
                                                                                                                       // 7525
    if (!startState) startState = 0;                                                                                   // 7526
    this.transitionHelper = new Transitionable(startState);                                                            // 7527
}                                                                                                                      // 7528
                                                                                                                       // 7529
Fader.DEFAULT_OPTIONS = {                                                                                              // 7530
    cull: false,                                                                                                       // 7531
    transition: true,                                                                                                  // 7532
    pulseInTransition: true,                                                                                           // 7533
    pulseOutTransition: true                                                                                           // 7534
};                                                                                                                     // 7535
                                                                                                                       // 7536
/**                                                                                                                    // 7537
 * Set internal options, overriding any default options                                                                // 7538
 *                                                                                                                     // 7539
 * @method setOptions                                                                                                  // 7540
 *                                                                                                                     // 7541
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7542
 */                                                                                                                    // 7543
Fader.prototype.setOptions = function setOptions(options) {                                                            // 7544
    return this._optionsManager.setOptions(options);                                                                   // 7545
};                                                                                                                     // 7546
                                                                                                                       // 7547
/**                                                                                                                    // 7548
 * Fully displays the Fader instance's associated renderables.                                                         // 7549
 *                                                                                                                     // 7550
 * @method show                                                                                                        // 7551
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7552
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully shown state.            // 7553
 */                                                                                                                    // 7554
Fader.prototype.show = function show(transition, callback) {                                                           // 7555
    transition = transition || this.options.transition;                                                                // 7556
    this.set(1, transition, callback);                                                                                 // 7557
};                                                                                                                     // 7558
                                                                                                                       // 7559
/**                                                                                                                    // 7560
 * Fully fades the Fader instance's associated renderables.                                                            // 7561
 *                                                                                                                     // 7562
 * @method hide                                                                                                        // 7563
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7564
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully faded state.            // 7565
 */                                                                                                                    // 7566
Fader.prototype.hide = function hide(transition, callback) {                                                           // 7567
    transition = transition || this.options.transition;                                                                // 7568
    this.set(0, transition, callback);                                                                                 // 7569
};                                                                                                                     // 7570
                                                                                                                       // 7571
/**                                                                                                                    // 7572
 * Manually sets the opacity state of the fader to the passed-in one. Executes with an optional                        // 7573
 * transition and callback.                                                                                            // 7574
 *                                                                                                                     // 7575
 * @method set                                                                                                         // 7576
 * @param {Number} state A number from zero to one: the amount of opacity you want to set to.                          // 7577
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7578
 * @param {Function} [callback] A callback that executes once you've finished executing the pulse.                     // 7579
 */                                                                                                                    // 7580
Fader.prototype.set = function set(state, transition, callback) {                                                      // 7581
    this.halt();                                                                                                       // 7582
    this.transitionHelper.set(state, transition, callback);                                                            // 7583
};                                                                                                                     // 7584
                                                                                                                       // 7585
/**                                                                                                                    // 7586
 * Halt the transition                                                                                                 // 7587
 *                                                                                                                     // 7588
 * @method halt                                                                                                        // 7589
 */                                                                                                                    // 7590
Fader.prototype.halt = function halt() {                                                                               // 7591
    this.transitionHelper.halt();                                                                                      // 7592
};                                                                                                                     // 7593
                                                                                                                       // 7594
/**                                                                                                                    // 7595
 * Tells you if your Fader instance is above its visibility threshold.                                                 // 7596
 *                                                                                                                     // 7597
 * @method isVisible                                                                                                   // 7598
 * @return {Boolean} Whether or not your Fader instance is visible.                                                    // 7599
 */                                                                                                                    // 7600
Fader.prototype.isVisible = function isVisible() {                                                                     // 7601
    return (this.transitionHelper.get() > 0);                                                                          // 7602
};                                                                                                                     // 7603
                                                                                                                       // 7604
/**                                                                                                                    // 7605
 * Return render spec for this Modifier, applying to the provided                                                      // 7606
 *    target component.  This is similar to render() for Surfaces.                                                     // 7607
 *                                                                                                                     // 7608
 * @private                                                                                                            // 7609
 * @method modify                                                                                                      // 7610
 *                                                                                                                     // 7611
 * @param {Object} target (already rendered) render spec to                                                            // 7612
 *    which to apply the transform.                                                                                    // 7613
 * @return {Object} render spec for this Modifier, including the                                                       // 7614
 *    provided target                                                                                                  // 7615
 */                                                                                                                    // 7616
Fader.prototype.modify = function modify(target) {                                                                     // 7617
    var currOpacity = this.transitionHelper.get();                                                                     // 7618
    if (this.options.cull && !currOpacity) return undefined;                                                           // 7619
    else return {opacity: currOpacity, target: target};                                                                // 7620
};                                                                                                                     // 7621
                                                                                                                       // 7622
module.exports = Fader;                                                                                                // 7623
},{"../core/OptionsManager":10,"../transitions/Transitionable":88}],45:[function(_dereq_,module,exports){              // 7624
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7625
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7626
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7627
 *                                                                                                                     // 7628
 * Owner: david@famo.us                                                                                                // 7629
 * @license MPL 2.0                                                                                                    // 7630
 * @copyright Famous Industries, Inc. 2014                                                                             // 7631
 */                                                                                                                    // 7632
                                                                                                                       // 7633
                                                                                                                       // 7634
                                                                                                                       // 7635
                                                                                                                       // 7636
/**                                                                                                                    // 7637
 * A class to add and remove a chain of modifiers                                                                      // 7638
 *   at a single point in the render tree                                                                              // 7639
 *                                                                                                                     // 7640
 * @class ModifierChain                                                                                                // 7641
 * @constructor                                                                                                        // 7642
 */                                                                                                                    // 7643
function ModifierChain() {                                                                                             // 7644
    this._chain = [];                                                                                                  // 7645
    if (arguments.length) this.addModifier.apply(this, arguments);                                                     // 7646
}                                                                                                                      // 7647
                                                                                                                       // 7648
/**                                                                                                                    // 7649
 * Add a modifier, or comma separated modifiers, to the modifier chain.                                                // 7650
 *                                                                                                                     // 7651
 * @method addModifier                                                                                                 // 7652
 *                                                                                                                     // 7653
 * @param {...Modifier*} varargs args list of Modifiers                                                                // 7654
 */                                                                                                                    // 7655
ModifierChain.prototype.addModifier = function addModifier(varargs) {                                                  // 7656
    Array.prototype.push.apply(this._chain, arguments);                                                                // 7657
};                                                                                                                     // 7658
                                                                                                                       // 7659
/**                                                                                                                    // 7660
 * Remove a modifier from the modifier chain.                                                                          // 7661
 *                                                                                                                     // 7662
 * @method removeModifier                                                                                              // 7663
 *                                                                                                                     // 7664
 * @param {Modifier} modifier                                                                                          // 7665
 */                                                                                                                    // 7666
ModifierChain.prototype.removeModifier = function removeModifier(modifier) {                                           // 7667
    var index = this._chain.indexOf(modifier);                                                                         // 7668
    if (index < 0) return;                                                                                             // 7669
    this._chain.splice(index, 1);                                                                                      // 7670
};                                                                                                                     // 7671
                                                                                                                       // 7672
/**                                                                                                                    // 7673
 * Return render spec for this Modifier, applying to the provided                                                      // 7674
 *    target component.  This is similar to render() for Surfaces.                                                     // 7675
 *                                                                                                                     // 7676
 * @private                                                                                                            // 7677
 * @method modify                                                                                                      // 7678
 *                                                                                                                     // 7679
 * @param {Object} input (already rendered) render spec to                                                             // 7680
 *    which to apply the transform.                                                                                    // 7681
 * @return {Object} render spec for this Modifier, including the                                                       // 7682
 *    provided target                                                                                                  // 7683
 */                                                                                                                    // 7684
ModifierChain.prototype.modify = function modify(input) {                                                              // 7685
    var chain  = this._chain;                                                                                          // 7686
    var result = input;                                                                                                // 7687
    for (var i = 0; i < chain.length; i++) {                                                                           // 7688
        result = chain[i].modify(result);                                                                              // 7689
    }                                                                                                                  // 7690
    return result;                                                                                                     // 7691
};                                                                                                                     // 7692
                                                                                                                       // 7693
module.exports = ModifierChain;                                                                                        // 7694
},{}],46:[function(_dereq_,module,exports){                                                                            // 7695
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7696
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7697
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7698
 *                                                                                                                     // 7699
 * Owner: mark@famo.us                                                                                                 // 7700
 * @license MPL 2.0                                                                                                    // 7701
 * @copyright Famous Industries, Inc. 2014                                                                             // 7702
 */                                                                                                                    // 7703
                                                                                                                       // 7704
var Modifier = _dereq_('../core/Modifier');                                                                            // 7705
var Transform = _dereq_('../core/Transform');                                                                          // 7706
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7707
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 7708
                                                                                                                       // 7709
/**                                                                                                                    // 7710
 *  A collection of visual changes to be                                                                               // 7711
 *    applied to another renderable component, strongly coupled with the state that defines                            // 7712
 *    those changes. This collection includes a                                                                        // 7713
 *    transform matrix, an opacity constant, a size, an origin specifier, and an alignment specifier.                  // 7714
 *    StateModifier objects can be added to any RenderNode or object                                                   // 7715
 *    capable of displaying renderables.  The StateModifier's children and descendants                                 // 7716
 *    are transformed by the amounts specified in the modifier's properties.                                           // 7717
 *                                                                                                                     // 7718
 * @class StateModifier                                                                                                // 7719
 * @constructor                                                                                                        // 7720
 * @param {Object} [options] overrides of default options                                                              // 7721
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 7722
 * @param {Number} [options.opacity]                                                                                   // 7723
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 7724
 * @param {Array.Number} [options.align] align adjustment                                                              // 7725
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 7726
 * @param {Array.Number} [options.propportions] proportions to apply to descendants                                    // 7727
 */                                                                                                                    // 7728
function StateModifier(options) {                                                                                      // 7729
    this._transformState = new TransitionableTransform(Transform.identity);                                            // 7730
    this._opacityState = new Transitionable(1);                                                                        // 7731
    this._originState = new Transitionable([0, 0]);                                                                    // 7732
    this._alignState = new Transitionable([0, 0]);                                                                     // 7733
    this._sizeState = new Transitionable([0, 0]);                                                                      // 7734
    this._proportionsState = new Transitionable([0, 0]);                                                               // 7735
                                                                                                                       // 7736
    this._modifier = new Modifier({                                                                                    // 7737
        transform: this._transformState,                                                                               // 7738
        opacity: this._opacityState,                                                                                   // 7739
        origin: null,                                                                                                  // 7740
        align: null,                                                                                                   // 7741
        size: null,                                                                                                    // 7742
        proportions: null                                                                                              // 7743
    });                                                                                                                // 7744
                                                                                                                       // 7745
    this._hasOrigin = false;                                                                                           // 7746
    this._hasAlign = false;                                                                                            // 7747
    this._hasSize = false;                                                                                             // 7748
    this._hasProportions = false;                                                                                      // 7749
                                                                                                                       // 7750
    if (options) {                                                                                                     // 7751
        if (options.transform) this.setTransform(options.transform);                                                   // 7752
        if (options.opacity !== undefined) this.setOpacity(options.opacity);                                           // 7753
        if (options.origin) this.setOrigin(options.origin);                                                            // 7754
        if (options.align) this.setAlign(options.align);                                                               // 7755
        if (options.size) this.setSize(options.size);                                                                  // 7756
        if (options.proportions) this.setProportions(options.proportions);                                             // 7757
    }                                                                                                                  // 7758
}                                                                                                                      // 7759
                                                                                                                       // 7760
/**                                                                                                                    // 7761
 * Set the transform matrix of this modifier, either statically or                                                     // 7762
 *   through a provided Transitionable.                                                                                // 7763
 *                                                                                                                     // 7764
 * @method setTransform                                                                                                // 7765
 *                                                                                                                     // 7766
 * @param {Transform} transform Transform to transition to.                                                            // 7767
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7768
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7769
 *    instantaneous.                                                                                                   // 7770
 * @param {Function} [callback] callback to call after transition completes                                            // 7771
 * @return {StateModifier} this                                                                                        // 7772
 */                                                                                                                    // 7773
StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {                        // 7774
    this._transformState.set(transform, transition, callback);                                                         // 7775
    return this;                                                                                                       // 7776
};                                                                                                                     // 7777
                                                                                                                       // 7778
/**                                                                                                                    // 7779
 * Set the opacity of this modifier, either statically or                                                              // 7780
 *   through a provided Transitionable.                                                                                // 7781
 *                                                                                                                     // 7782
 * @method setOpacity                                                                                                  // 7783
 *                                                                                                                     // 7784
 * @param {Number} opacity Opacity value to transition to.                                                             // 7785
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7786
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7787
 *    instantaneous.                                                                                                   // 7788
 * @param {Function} callback callback to call after transition completes                                              // 7789
 * @return {StateModifier} this                                                                                        // 7790
 */                                                                                                                    // 7791
StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                              // 7792
    this._opacityState.set(opacity, transition, callback);                                                             // 7793
    return this;                                                                                                       // 7794
};                                                                                                                     // 7795
                                                                                                                       // 7796
/**                                                                                                                    // 7797
 * Set the origin of this modifier, either statically or                                                               // 7798
 *   through a provided Transitionable.                                                                                // 7799
 *                                                                                                                     // 7800
 * @method setOrigin                                                                                                   // 7801
 *                                                                                                                     // 7802
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 7803
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7804
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7805
 *    instantaneous.                                                                                                   // 7806
 * @param {Function} callback callback to call after transition completes                                              // 7807
 * @return {StateModifier} this                                                                                        // 7808
 */                                                                                                                    // 7809
StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                 // 7810
    if (origin === null) {                                                                                             // 7811
        if (this._hasOrigin) {                                                                                         // 7812
            this._modifier.originFrom(null);                                                                           // 7813
            this._hasOrigin = false;                                                                                   // 7814
        }                                                                                                              // 7815
        return this;                                                                                                   // 7816
    }                                                                                                                  // 7817
    else if (!this._hasOrigin) {                                                                                       // 7818
        this._hasOrigin = true;                                                                                        // 7819
        this._modifier.originFrom(this._originState);                                                                  // 7820
    }                                                                                                                  // 7821
    this._originState.set(origin, transition, callback);                                                               // 7822
    return this;                                                                                                       // 7823
};                                                                                                                     // 7824
                                                                                                                       // 7825
/**                                                                                                                    // 7826
 * Set the alignment of this modifier, either statically or                                                            // 7827
 *   through a provided Transitionable.                                                                                // 7828
 *                                                                                                                     // 7829
 * @method setAlign                                                                                                    // 7830
 *                                                                                                                     // 7831
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 7832
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7833
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7834
 *    instantaneous.                                                                                                   // 7835
 * @param {Function} callback callback to call after transition completes                                              // 7836
 * @return {StateModifier} this                                                                                        // 7837
 */                                                                                                                    // 7838
StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {                                   // 7839
    if (align === null) {                                                                                              // 7840
        if (this._hasAlign) {                                                                                          // 7841
            this._modifier.alignFrom(null);                                                                            // 7842
            this._hasAlign = false;                                                                                    // 7843
        }                                                                                                              // 7844
        return this;                                                                                                   // 7845
    }                                                                                                                  // 7846
    else if (!this._hasAlign) {                                                                                        // 7847
        this._hasAlign = true;                                                                                         // 7848
        this._modifier.alignFrom(this._alignState);                                                                    // 7849
    }                                                                                                                  // 7850
    this._alignState.set(align, transition, callback);                                                                 // 7851
    return this;                                                                                                       // 7852
};                                                                                                                     // 7853
                                                                                                                       // 7854
/**                                                                                                                    // 7855
 * Set the size of this modifier, either statically or                                                                 // 7856
 *   through a provided Transitionable.                                                                                // 7857
 *                                                                                                                     // 7858
 * @method setSize                                                                                                     // 7859
 *                                                                                                                     // 7860
 * @param {Array.Number} size two element array of [width, height]                                                     // 7861
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7862
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7863
 *    instantaneous.                                                                                                   // 7864
 * @param {Function} callback callback to call after transition completes                                              // 7865
 * @return {StateModifier} this                                                                                        // 7866
 */                                                                                                                    // 7867
StateModifier.prototype.setSize = function setSize(size, transition, callback) {                                       // 7868
    if (size === null) {                                                                                               // 7869
        if (this._hasSize) {                                                                                           // 7870
            this._modifier.sizeFrom(null);                                                                             // 7871
            this._hasSize = false;                                                                                     // 7872
        }                                                                                                              // 7873
        return this;                                                                                                   // 7874
    }                                                                                                                  // 7875
    else if (!this._hasSize) {                                                                                         // 7876
        this._hasSize = true;                                                                                          // 7877
        this._modifier.sizeFrom(this._sizeState);                                                                      // 7878
    }                                                                                                                  // 7879
    this._sizeState.set(size, transition, callback);                                                                   // 7880
    return this;                                                                                                       // 7881
};                                                                                                                     // 7882
                                                                                                                       // 7883
/**                                                                                                                    // 7884
 * Set the proportions of this modifier, either statically or                                                          // 7885
 *   through a provided Transitionable.                                                                                // 7886
 *                                                                                                                     // 7887
 * @method setProportions                                                                                              // 7888
 *                                                                                                                     // 7889
 * @param {Array.Number} proportions two element array with values between 0 and 1.                                    // 7890
 * @param {Transitionable} transition Valid transitionable object                                                      // 7891
 * @param {Function} callback callback to call after transition completes                                              // 7892
 * @return {StateModifier} this                                                                                        // 7893
 */                                                                                                                    // 7894
StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {                         // 7895
    if (proportions === null) {                                                                                        // 7896
        if (this._hasProportions) {                                                                                    // 7897
            this._modifier.proportionsFrom(null);                                                                      // 7898
            this._hasProportions = false;                                                                              // 7899
        }                                                                                                              // 7900
        return this;                                                                                                   // 7901
    }                                                                                                                  // 7902
    else if (!this._hasProportions) {                                                                                  // 7903
        this._hasProportions = true;                                                                                   // 7904
        this._modifier.proportionsFrom(this._proportionsState);                                                        // 7905
    }                                                                                                                  // 7906
    this._proportionsState.set(proportions, transition, callback);                                                     // 7907
    return this;                                                                                                       // 7908
};                                                                                                                     // 7909
                                                                                                                       // 7910
/**                                                                                                                    // 7911
 * Stop the transition.                                                                                                // 7912
 *                                                                                                                     // 7913
 * @method halt                                                                                                        // 7914
 */                                                                                                                    // 7915
StateModifier.prototype.halt = function halt() {                                                                       // 7916
    this._transformState.halt();                                                                                       // 7917
    this._opacityState.halt();                                                                                         // 7918
    this._originState.halt();                                                                                          // 7919
    this._alignState.halt();                                                                                           // 7920
    this._sizeState.halt();                                                                                            // 7921
    this._proportionsState.halt();                                                                                     // 7922
};                                                                                                                     // 7923
                                                                                                                       // 7924
/**                                                                                                                    // 7925
 * Get the current state of the transform matrix component.                                                            // 7926
 *                                                                                                                     // 7927
 * @method getTransform                                                                                                // 7928
 * @return {Object} transform provider object                                                                          // 7929
 */                                                                                                                    // 7930
StateModifier.prototype.getTransform = function getTransform() {                                                       // 7931
    return this._transformState.get();                                                                                 // 7932
};                                                                                                                     // 7933
                                                                                                                       // 7934
/**                                                                                                                    // 7935
 * Get the destination state of the transform component.                                                               // 7936
 *                                                                                                                     // 7937
 * @method getFinalTransform                                                                                           // 7938
 * @return {Transform} transform matrix                                                                                // 7939
 */                                                                                                                    // 7940
StateModifier.prototype.getFinalTransform = function getFinalTransform() {                                             // 7941
    return this._transformState.getFinal();                                                                            // 7942
};                                                                                                                     // 7943
                                                                                                                       // 7944
/**                                                                                                                    // 7945
 * Get the current state of the opacity component.                                                                     // 7946
 *                                                                                                                     // 7947
 * @method getOpacity                                                                                                  // 7948
 * @return {Object} opacity provider object                                                                            // 7949
 */                                                                                                                    // 7950
StateModifier.prototype.getOpacity = function getOpacity() {                                                           // 7951
    return this._opacityState.get();                                                                                   // 7952
};                                                                                                                     // 7953
                                                                                                                       // 7954
/**                                                                                                                    // 7955
 * Get the current state of the origin component.                                                                      // 7956
 *                                                                                                                     // 7957
 * @method getOrigin                                                                                                   // 7958
 * @return {Object} origin provider object                                                                             // 7959
 */                                                                                                                    // 7960
StateModifier.prototype.getOrigin = function getOrigin() {                                                             // 7961
    return this._hasOrigin ? this._originState.get() : null;                                                           // 7962
};                                                                                                                     // 7963
                                                                                                                       // 7964
/**                                                                                                                    // 7965
 * Get the current state of the align component.                                                                       // 7966
 *                                                                                                                     // 7967
 * @method getAlign                                                                                                    // 7968
 * @return {Object} align provider object                                                                              // 7969
 */                                                                                                                    // 7970
StateModifier.prototype.getAlign = function getAlign() {                                                               // 7971
    return this._hasAlign ? this._alignState.get() : null;                                                             // 7972
};                                                                                                                     // 7973
                                                                                                                       // 7974
/**                                                                                                                    // 7975
 * Get the current state of the size component.                                                                        // 7976
 *                                                                                                                     // 7977
 * @method getSize                                                                                                     // 7978
 * @return {Object} size provider object                                                                               // 7979
 */                                                                                                                    // 7980
StateModifier.prototype.getSize = function getSize() {                                                                 // 7981
    return this._hasSize ? this._sizeState.get() : null;                                                               // 7982
};                                                                                                                     // 7983
                                                                                                                       // 7984
/**                                                                                                                    // 7985
 * Get the current state of the propportions component.                                                                // 7986
 *                                                                                                                     // 7987
 * @method getProportions                                                                                              // 7988
 * @return {Object} size provider object                                                                               // 7989
 */                                                                                                                    // 7990
StateModifier.prototype.getProportions = function getProportions() {                                                   // 7991
    return this._hasProportions ? this._proportionsState.get() : null;                                                 // 7992
};                                                                                                                     // 7993
                                                                                                                       // 7994
/**                                                                                                                    // 7995
 * Return render spec for this StateModifier, applying to the provided                                                 // 7996
 *    target component.  This is similar to render() for Surfaces.                                                     // 7997
 *                                                                                                                     // 7998
 * @private                                                                                                            // 7999
 * @method modify                                                                                                      // 8000
 *                                                                                                                     // 8001
 * @param {Object} target (already rendered) render spec to                                                            // 8002
 *    which to apply the transform.                                                                                    // 8003
 * @return {Object} render spec for this StateModifier, including the                                                  // 8004
 *    provided target                                                                                                  // 8005
 */                                                                                                                    // 8006
StateModifier.prototype.modify = function modify(target) {                                                             // 8007
    return this._modifier.modify(target);                                                                              // 8008
};                                                                                                                     // 8009
                                                                                                                       // 8010
module.exports = StateModifier;                                                                                        // 8011
},{"../core/Modifier":9,"../core/Transform":15,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89}],47:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 8013
  Draggable: _dereq_('./Draggable'),                                                                                   // 8014
  Fader: _dereq_('./Fader'),                                                                                           // 8015
  StateModifier: _dereq_('./StateModifier'),                                                                           // 8016
  ModifierChain: _dereq_('./ModifierChain')                                                                            // 8017
};                                                                                                                     // 8018
                                                                                                                       // 8019
},{"./Draggable":43,"./Fader":44,"./ModifierChain":45,"./StateModifier":46}],48:[function(_dereq_,module,exports){     // 8020
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8021
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8022
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8023
 *                                                                                                                     // 8024
 * @license MPL 2.0                                                                                                    // 8025
 * @copyright Famous Industries, Inc. 2014                                                                             // 8026
 */                                                                                                                    // 8027
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 8028
                                                                                                                       // 8029
/**                                                                                                                    // 8030
 * The Physics Engine is responsible for mediating bodies with their                                                   // 8031
 *   interaction with forces and constraints (agents). Specifically, it                                                // 8032
 *   is responsible for:                                                                                               // 8033
 *                                                                                                                     // 8034
 *   - adding and removing bodies                                                                                      // 8035
 *   - updating a body's state over time                                                                               // 8036
 *   - attaching and detaching agents                                                                                  // 8037
 *   - sleeping upon equillibrium and waking upon excitation                                                           // 8038
 *                                                                                                                     // 8039
 * @class PhysicsEngine                                                                                                // 8040
 * @constructor                                                                                                        // 8041
 * @param options {Object} options                                                                                     // 8042
 */                                                                                                                    // 8043
function PhysicsEngine(options) {                                                                                      // 8044
    this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);                                                       // 8045
    if (options) this.setOptions(options);                                                                             // 8046
                                                                                                                       // 8047
    this._particles      = [];   //list of managed particles                                                           // 8048
    this._bodies         = [];   //list of managed bodies                                                              // 8049
    this._agentData      = {};   //hash of managed agent data                                                          // 8050
    this._forces         = [];   //list of Ids of agents that are forces                                               // 8051
    this._constraints    = [];   //list of Ids of agents that are constraints                                          // 8052
                                                                                                                       // 8053
    this._buffer         = 0.0;                                                                                        // 8054
    this._prevTime       = now();                                                                                      // 8055
    this._isSleeping     = false;                                                                                      // 8056
    this._eventHandler   = null;                                                                                       // 8057
    this._currAgentId    = 0;                                                                                          // 8058
    this._hasBodies      = false;                                                                                      // 8059
    this._eventHandler   = null;                                                                                       // 8060
}                                                                                                                      // 8061
                                                                                                                       // 8062
/** const */                                                                                                           // 8063
var TIMESTEP = 17;                                                                                                     // 8064
var MIN_TIME_STEP = 1000 / 120;                                                                                        // 8065
var MAX_TIME_STEP = 17;                                                                                                // 8066
                                                                                                                       // 8067
var now = Date.now;                                                                                                    // 8068
                                                                                                                       // 8069
// Catalogue of outputted events                                                                                       // 8070
var _events = {                                                                                                        // 8071
    start : 'start',                                                                                                   // 8072
    update : 'update',                                                                                                 // 8073
    end : 'end'                                                                                                        // 8074
};                                                                                                                     // 8075
                                                                                                                       // 8076
/**                                                                                                                    // 8077
 * @property PhysicsEngine.DEFAULT_OPTIONS                                                                             // 8078
 * @type Object                                                                                                        // 8079
 * @protected                                                                                                          // 8080
 * @static                                                                                                             // 8081
 */                                                                                                                    // 8082
PhysicsEngine.DEFAULT_OPTIONS = {                                                                                      // 8083
                                                                                                                       // 8084
    /**                                                                                                                // 8085
     * The number of iterations the engine takes to resolve constraints                                                // 8086
     * @attribute constraintSteps                                                                                      // 8087
     * @type Number                                                                                                    // 8088
     */                                                                                                                // 8089
    constraintSteps : 1,                                                                                               // 8090
                                                                                                                       // 8091
    /**                                                                                                                // 8092
     * The energy threshold required for the Physics Engine to update                                                  // 8093
     * @attribute sleepTolerance                                                                                       // 8094
     * @type Number                                                                                                    // 8095
     */                                                                                                                // 8096
    sleepTolerance : 1e-7,                                                                                             // 8097
                                                                                                                       // 8098
    /**                                                                                                                // 8099
     * The maximum velocity magnitude of a physics body                                                                // 8100
     *      Range : [0, Infinity]                                                                                      // 8101
     * @attribute velocityCap                                                                                          // 8102
     * @type Number                                                                                                    // 8103
     */                                                                                                                // 8104
    velocityCap : undefined,                                                                                           // 8105
                                                                                                                       // 8106
    /**                                                                                                                // 8107
     * The maximum angular velocity magnitude of a physics body                                                        // 8108
     *      Range : [0, Infinity]                                                                                      // 8109
     * @attribute angularVelocityCap                                                                                   // 8110
     * @type Number                                                                                                    // 8111
     */                                                                                                                // 8112
    angularVelocityCap : undefined                                                                                     // 8113
};                                                                                                                     // 8114
                                                                                                                       // 8115
/**                                                                                                                    // 8116
 * Options setter                                                                                                      // 8117
 *                                                                                                                     // 8118
 * @method setOptions                                                                                                  // 8119
 * @param opts {Object}                                                                                                // 8120
 */                                                                                                                    // 8121
PhysicsEngine.prototype.setOptions = function setOptions(opts) {                                                       // 8122
    for (var key in opts) if (this.options[key]) this.options[key] = opts[key];                                        // 8123
};                                                                                                                     // 8124
                                                                                                                       // 8125
/**                                                                                                                    // 8126
 * Method to add a physics body to the engine. Necessary to update the                                                 // 8127
 *   body over time.                                                                                                   // 8128
 *                                                                                                                     // 8129
 * @method addBody                                                                                                     // 8130
 * @param body {Body}                                                                                                  // 8131
 * @return body {Body}                                                                                                 // 8132
 */                                                                                                                    // 8133
PhysicsEngine.prototype.addBody = function addBody(body) {                                                             // 8134
    body._engine = this;                                                                                               // 8135
    if (body.isBody) {                                                                                                 // 8136
        this._bodies.push(body);                                                                                       // 8137
        this._hasBodies = true;                                                                                        // 8138
    }                                                                                                                  // 8139
    else this._particles.push(body);                                                                                   // 8140
    body.on('start', this.wake.bind(this));                                                                            // 8141
    return body;                                                                                                       // 8142
};                                                                                                                     // 8143
                                                                                                                       // 8144
/**                                                                                                                    // 8145
 * Remove a body from the engine. Detaches body from all forces and                                                    // 8146
 *   constraints.                                                                                                      // 8147
 *                                                                                                                     // 8148
 * TODO: Fix for in loop                                                                                               // 8149
 *                                                                                                                     // 8150
 * @method removeBody                                                                                                  // 8151
 * @param body {Body}                                                                                                  // 8152
 */                                                                                                                    // 8153
PhysicsEngine.prototype.removeBody = function removeBody(body) {                                                       // 8154
    var array = (body.isBody) ? this._bodies : this._particles;                                                        // 8155
    var index = array.indexOf(body);                                                                                   // 8156
    if (index > -1) {                                                                                                  // 8157
        for (var agentKey in this._agentData) {                                                                        // 8158
            if (this._agentData.hasOwnProperty(agentKey)) {                                                            // 8159
                this.detachFrom(this._agentData[agentKey].id, body);                                                   // 8160
            }                                                                                                          // 8161
        }                                                                                                              // 8162
        array.splice(index,1);                                                                                         // 8163
    }                                                                                                                  // 8164
    if (this.getBodies().length === 0) this._hasBodies = false;                                                        // 8165
};                                                                                                                     // 8166
                                                                                                                       // 8167
function _mapAgentArray(agent) {                                                                                       // 8168
    if (agent.applyForce)      return this._forces;                                                                    // 8169
    if (agent.applyConstraint) return this._constraints;                                                               // 8170
}                                                                                                                      // 8171
                                                                                                                       // 8172
function _attachOne(agent, targets, source) {                                                                          // 8173
    if (targets === undefined) targets = this.getParticlesAndBodies();                                                 // 8174
    if (!(targets instanceof Array)) targets = [targets];                                                              // 8175
                                                                                                                       // 8176
    agent.on('change', this.wake.bind(this));                                                                          // 8177
                                                                                                                       // 8178
    this._agentData[this._currAgentId] = {                                                                             // 8179
        agent   : agent,                                                                                               // 8180
        id      : this._currAgentId,                                                                                   // 8181
        targets : targets,                                                                                             // 8182
        source  : source                                                                                               // 8183
    };                                                                                                                 // 8184
                                                                                                                       // 8185
    _mapAgentArray.call(this, agent).push(this._currAgentId);                                                          // 8186
    return this._currAgentId++;                                                                                        // 8187
}                                                                                                                      // 8188
                                                                                                                       // 8189
/**                                                                                                                    // 8190
 * Attaches a force or constraint to a Body. Returns an AgentId of the                                                 // 8191
 *   attached agent which can be used to detach the agent.                                                             // 8192
 *                                                                                                                     // 8193
 * @method attach                                                                                                      // 8194
 * @param agents {Agent|Array.Agent} A force, constraint, or array of them.                                            // 8195
 * @param [targets=All] {Body|Array.Body} The Body or Bodies affected by the agent                                     // 8196
 * @param [source] {Body} The source of the agent                                                                      // 8197
 * @return AgentId {Number}                                                                                            // 8198
 */                                                                                                                    // 8199
PhysicsEngine.prototype.attach = function attach(agents, targets, source) {                                            // 8200
    this.wake();                                                                                                       // 8201
                                                                                                                       // 8202
    if (agents instanceof Array) {                                                                                     // 8203
        var agentIDs = [];                                                                                             // 8204
        for (var i = 0; i < agents.length; i++)                                                                        // 8205
            agentIDs[i] = _attachOne.call(this, agents[i], targets, source);                                           // 8206
        return agentIDs;                                                                                               // 8207
    }                                                                                                                  // 8208
    else return _attachOne.call(this, agents, targets, source);                                                        // 8209
};                                                                                                                     // 8210
                                                                                                                       // 8211
/**                                                                                                                    // 8212
 * Append a body to the targets of a previously defined physics agent.                                                 // 8213
 *                                                                                                                     // 8214
 * @method attachTo                                                                                                    // 8215
 * @param agentID {AgentId} The agentId of a previously defined agent                                                  // 8216
 * @param target {Body} The Body affected by the agent                                                                 // 8217
 */                                                                                                                    // 8218
PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {                                                // 8219
    _getAgentData.call(this, agentID).targets.push(target);                                                            // 8220
};                                                                                                                     // 8221
                                                                                                                       // 8222
/**                                                                                                                    // 8223
 * Undoes PhysicsEngine.attach. Removes an agent and its associated                                                    // 8224
 *   effect on its affected Bodies.                                                                                    // 8225
 *                                                                                                                     // 8226
 * @method detach                                                                                                      // 8227
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8228
 */                                                                                                                    // 8229
PhysicsEngine.prototype.detach = function detach(id) {                                                                 // 8230
    // detach from forces/constraints array                                                                            // 8231
    var agent = this.getAgent(id);                                                                                     // 8232
    var agentArray = _mapAgentArray.call(this, agent);                                                                 // 8233
    var index = agentArray.indexOf(id);                                                                                // 8234
    agentArray.splice(index,1);                                                                                        // 8235
                                                                                                                       // 8236
    // detach agents array                                                                                             // 8237
    delete this._agentData[id];                                                                                        // 8238
};                                                                                                                     // 8239
                                                                                                                       // 8240
/**                                                                                                                    // 8241
 * Remove a single Body from a previously defined agent.                                                               // 8242
 *                                                                                                                     // 8243
 * @method detach                                                                                                      // 8244
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8245
 * @param target {Body} The body to remove from the agent                                                              // 8246
 */                                                                                                                    // 8247
PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {                                                 // 8248
    var boundAgent = _getAgentData.call(this, id);                                                                     // 8249
    if (boundAgent.source === target) this.detach(id);                                                                 // 8250
    else {                                                                                                             // 8251
        var targets = boundAgent.targets;                                                                              // 8252
        var index = targets.indexOf(target);                                                                           // 8253
        if (index > -1) targets.splice(index,1);                                                                       // 8254
    }                                                                                                                  // 8255
};                                                                                                                     // 8256
                                                                                                                       // 8257
/**                                                                                                                    // 8258
 * A convenience method to give the Physics Engine a clean slate of                                                    // 8259
 * agents. Preserves all added Body objects.                                                                           // 8260
 *                                                                                                                     // 8261
 * @method detachAll                                                                                                   // 8262
 */                                                                                                                    // 8263
PhysicsEngine.prototype.detachAll = function detachAll() {                                                             // 8264
    this._agentData     = {};                                                                                          // 8265
    this._forces        = [];                                                                                          // 8266
    this._constraints   = [];                                                                                          // 8267
    this._currAgentId   = 0;                                                                                           // 8268
};                                                                                                                     // 8269
                                                                                                                       // 8270
function _getAgentData(id) {                                                                                           // 8271
    return this._agentData[id];                                                                                        // 8272
}                                                                                                                      // 8273
                                                                                                                       // 8274
/**                                                                                                                    // 8275
 * Returns the corresponding agent given its agentId.                                                                  // 8276
 *                                                                                                                     // 8277
 * @method getAgent                                                                                                    // 8278
 * @param id {AgentId}                                                                                                 // 8279
 */                                                                                                                    // 8280
PhysicsEngine.prototype.getAgent = function getAgent(id) {                                                             // 8281
    return _getAgentData.call(this, id).agent;                                                                         // 8282
};                                                                                                                     // 8283
                                                                                                                       // 8284
/**                                                                                                                    // 8285
 * Returns all particles that are currently managed by the Physics Engine.                                             // 8286
 *                                                                                                                     // 8287
 * @method getParticles                                                                                                // 8288
 * @return particles {Array.Particles}                                                                                 // 8289
 */                                                                                                                    // 8290
PhysicsEngine.prototype.getParticles = function getParticles() {                                                       // 8291
    return this._particles;                                                                                            // 8292
};                                                                                                                     // 8293
                                                                                                                       // 8294
/**                                                                                                                    // 8295
 * Returns all bodies, except particles, that are currently managed by the Physics Engine.                             // 8296
 *                                                                                                                     // 8297
 * @method getBodies                                                                                                   // 8298
 * @return bodies {Array.Bodies}                                                                                       // 8299
 */                                                                                                                    // 8300
PhysicsEngine.prototype.getBodies = function getBodies() {                                                             // 8301
    return this._bodies;                                                                                               // 8302
};                                                                                                                     // 8303
                                                                                                                       // 8304
/**                                                                                                                    // 8305
 * Returns all bodies that are currently managed by the Physics Engine.                                                // 8306
 *                                                                                                                     // 8307
 * @method getBodies                                                                                                   // 8308
 * @return bodies {Array.Bodies}                                                                                       // 8309
 */                                                                                                                    // 8310
PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {                                     // 8311
    return this.getParticles().concat(this.getBodies());                                                               // 8312
};                                                                                                                     // 8313
                                                                                                                       // 8314
/**                                                                                                                    // 8315
 * Iterates over every Particle and applies a function whose first                                                     // 8316
 *   argument is the Particle                                                                                          // 8317
 *                                                                                                                     // 8318
 * @method forEachParticle                                                                                             // 8319
 * @param fn {Function} Function to iterate over                                                                       // 8320
 * @param [dt] {Number} Delta time                                                                                     // 8321
 */                                                                                                                    // 8322
PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {                                           // 8323
    var particles = this.getParticles();                                                                               // 8324
    for (var index = 0, len = particles.length; index < len; index++)                                                  // 8325
        fn.call(this, particles[index], dt);                                                                           // 8326
};                                                                                                                     // 8327
                                                                                                                       // 8328
/**                                                                                                                    // 8329
 * Iterates over every Body that isn't a Particle and applies                                                          // 8330
 *   a function whose first argument is the Body                                                                       // 8331
 *                                                                                                                     // 8332
 * @method forEachBody                                                                                                 // 8333
 * @param fn {Function} Function to iterate over                                                                       // 8334
 * @param [dt] {Number} Delta time                                                                                     // 8335
 */                                                                                                                    // 8336
PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {                                                   // 8337
    if (!this._hasBodies) return;                                                                                      // 8338
    var bodies = this.getBodies();                                                                                     // 8339
    for (var index = 0, len = bodies.length; index < len; index++)                                                     // 8340
        fn.call(this, bodies[index], dt);                                                                              // 8341
};                                                                                                                     // 8342
                                                                                                                       // 8343
/**                                                                                                                    // 8344
 * Iterates over every Body and applies a function whose first                                                         // 8345
 *   argument is the Body                                                                                              // 8346
 *                                                                                                                     // 8347
 * @method forEach                                                                                                     // 8348
 * @param fn {Function} Function to iterate over                                                                       // 8349
 * @param [dt] {Number} Delta time                                                                                     // 8350
 */                                                                                                                    // 8351
PhysicsEngine.prototype.forEach = function forEach(fn, dt) {                                                           // 8352
    this.forEachParticle(fn, dt);                                                                                      // 8353
    this.forEachBody(fn, dt);                                                                                          // 8354
};                                                                                                                     // 8355
                                                                                                                       // 8356
function _updateForce(index) {                                                                                         // 8357
    var boundAgent = _getAgentData.call(this, this._forces[index]);                                                    // 8358
    boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);                                                // 8359
}                                                                                                                      // 8360
                                                                                                                       // 8361
function _updateForces() {                                                                                             // 8362
    for (var index = this._forces.length - 1; index > -1; index--)                                                     // 8363
        _updateForce.call(this, index);                                                                                // 8364
}                                                                                                                      // 8365
                                                                                                                       // 8366
function _updateConstraint(index, dt) {                                                                                // 8367
    var boundAgent = this._agentData[this._constraints[index]];                                                        // 8368
    return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);                                // 8369
}                                                                                                                      // 8370
                                                                                                                       // 8371
function _updateConstraints(dt) {                                                                                      // 8372
    var iteration = 0;                                                                                                 // 8373
    while (iteration < this.options.constraintSteps) {                                                                 // 8374
        for (var index = this._constraints.length - 1; index > -1; index--)                                            // 8375
            _updateConstraint.call(this, index, dt);                                                                   // 8376
        iteration++;                                                                                                   // 8377
    }                                                                                                                  // 8378
}                                                                                                                      // 8379
                                                                                                                       // 8380
function _updateVelocities(body, dt) {                                                                                 // 8381
    body.integrateVelocity(dt);                                                                                        // 8382
    if (this.options.velocityCap)                                                                                      // 8383
        body.velocity.cap(this.options.velocityCap).put(body.velocity);                                                // 8384
}                                                                                                                      // 8385
                                                                                                                       // 8386
function _updateAngularVelocities(body, dt) {                                                                          // 8387
    body.integrateAngularMomentum(dt);                                                                                 // 8388
    body.updateAngularVelocity();                                                                                      // 8389
    if (this.options.angularVelocityCap)                                                                               // 8390
        body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);                           // 8391
}                                                                                                                      // 8392
                                                                                                                       // 8393
function _updateOrientations(body, dt) {                                                                               // 8394
    body.integrateOrientation(dt);                                                                                     // 8395
}                                                                                                                      // 8396
                                                                                                                       // 8397
function _updatePositions(body, dt) {                                                                                  // 8398
    body.integratePosition(dt);                                                                                        // 8399
    body.emit(_events.update, body);                                                                                   // 8400
}                                                                                                                      // 8401
                                                                                                                       // 8402
function _integrate(dt) {                                                                                              // 8403
    _updateForces.call(this, dt);                                                                                      // 8404
    this.forEach(_updateVelocities, dt);                                                                               // 8405
    this.forEachBody(_updateAngularVelocities, dt);                                                                    // 8406
    _updateConstraints.call(this, dt);                                                                                 // 8407
    this.forEachBody(_updateOrientations, dt);                                                                         // 8408
    this.forEach(_updatePositions, dt);                                                                                // 8409
}                                                                                                                      // 8410
                                                                                                                       // 8411
function _getParticlesEnergy() {                                                                                       // 8412
    var energy = 0.0;                                                                                                  // 8413
    var particleEnergy = 0.0;                                                                                          // 8414
    this.forEach(function(particle) {                                                                                  // 8415
        particleEnergy = particle.getEnergy();                                                                         // 8416
        energy += particleEnergy;                                                                                      // 8417
    });                                                                                                                // 8418
    return energy;                                                                                                     // 8419
}                                                                                                                      // 8420
                                                                                                                       // 8421
function _getAgentsEnergy() {                                                                                          // 8422
    var energy = 0;                                                                                                    // 8423
    for (var id in this._agentData)                                                                                    // 8424
        energy += this.getAgentEnergy(id);                                                                             // 8425
    return energy;                                                                                                     // 8426
}                                                                                                                      // 8427
                                                                                                                       // 8428
/**                                                                                                                    // 8429
 * Calculates the potential energy of an agent, like a spring, by its Id                                               // 8430
 *                                                                                                                     // 8431
 * @method getAgentEnergy                                                                                              // 8432
 * @param agentId {Number} The attached agent Id                                                                       // 8433
 * @return energy {Number}                                                                                             // 8434
 */                                                                                                                    // 8435
PhysicsEngine.prototype.getAgentEnergy = function(agentId) {                                                           // 8436
    var agentData = _getAgentData.call(this, agentId);                                                                 // 8437
    return agentData.agent.getEnergy(agentData.targets, agentData.source);                                             // 8438
};                                                                                                                     // 8439
                                                                                                                       // 8440
/**                                                                                                                    // 8441
 * Calculates the kinetic energy of all Body objects and potential energy                                              // 8442
 *   of all attached agents.                                                                                           // 8443
 *                                                                                                                     // 8444
 * TODO: implement.                                                                                                    // 8445
 * @method getEnergy                                                                                                   // 8446
 * @return energy {Number}                                                                                             // 8447
 */                                                                                                                    // 8448
PhysicsEngine.prototype.getEnergy = function getEnergy() {                                                             // 8449
    return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);                                               // 8450
};                                                                                                                     // 8451
                                                                                                                       // 8452
/**                                                                                                                    // 8453
 * Updates all Body objects managed by the physics engine over the                                                     // 8454
 *   time duration since the last time step was called.                                                                // 8455
 *                                                                                                                     // 8456
 * @method step                                                                                                        // 8457
 */                                                                                                                    // 8458
PhysicsEngine.prototype.step = function step() {                                                                       // 8459
    if (this.isSleeping()) return;                                                                                     // 8460
                                                                                                                       // 8461
    //set current frame's time                                                                                         // 8462
    var currTime = now();                                                                                              // 8463
                                                                                                                       // 8464
    //milliseconds elapsed since last frame                                                                            // 8465
    var dtFrame = currTime - this._prevTime;                                                                           // 8466
                                                                                                                       // 8467
    this._prevTime = currTime;                                                                                         // 8468
                                                                                                                       // 8469
    if (dtFrame < MIN_TIME_STEP) return;                                                                               // 8470
    if (dtFrame > MAX_TIME_STEP) dtFrame = MAX_TIME_STEP;                                                              // 8471
                                                                                                                       // 8472
    //robust integration                                                                                               // 8473
//        this._buffer += dtFrame;                                                                                     // 8474
//        while (this._buffer > this._timestep){                                                                       // 8475
//            _integrate.call(this, this._timestep);                                                                   // 8476
//            this._buffer -= this._timestep;                                                                          // 8477
//        };                                                                                                           // 8478
//        _integrate.call(this, this._buffer);                                                                         // 8479
//        this._buffer = 0.0;                                                                                          // 8480
                                                                                                                       // 8481
    _integrate.call(this, TIMESTEP);                                                                                   // 8482
                                                                                                                       // 8483
    this.emit(_events.update, this);                                                                                   // 8484
                                                                                                                       // 8485
    if (this.getEnergy() < this.options.sleepTolerance) this.sleep();                                                  // 8486
};                                                                                                                     // 8487
                                                                                                                       // 8488
/**                                                                                                                    // 8489
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8490
 *                                                                                                                     // 8491
 * @method isSleeping                                                                                                  // 8492
 * @return {Boolean}                                                                                                   // 8493
 */                                                                                                                    // 8494
PhysicsEngine.prototype.isSleeping = function isSleeping() {                                                           // 8495
    return this._isSleeping;                                                                                           // 8496
};                                                                                                                     // 8497
                                                                                                                       // 8498
/**                                                                                                                    // 8499
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8500
 *                                                                                                                     // 8501
 * @method isActive                                                                                                    // 8502
 * @return {Boolean}                                                                                                   // 8503
 */                                                                                                                    // 8504
PhysicsEngine.prototype.isActive = function isSleeping() {                                                             // 8505
    return !this._isSleeping;                                                                                          // 8506
};                                                                                                                     // 8507
                                                                                                                       // 8508
/**                                                                                                                    // 8509
 * Stops the Physics Engine update loop. Emits an 'end' event.                                                         // 8510
 *                                                                                                                     // 8511
 * @method sleep                                                                                                       // 8512
 */                                                                                                                    // 8513
PhysicsEngine.prototype.sleep = function sleep() {                                                                     // 8514
    if (this._isSleeping) return;                                                                                      // 8515
    this.forEach(function(body) {                                                                                      // 8516
        body.sleep();                                                                                                  // 8517
    });                                                                                                                // 8518
    this.emit(_events.end, this);                                                                                      // 8519
    this._isSleeping = true;                                                                                           // 8520
};                                                                                                                     // 8521
                                                                                                                       // 8522
/**                                                                                                                    // 8523
 * Restarts the Physics Engine update loop. Emits an 'start' event.                                                    // 8524
 *                                                                                                                     // 8525
 * @method wake                                                                                                        // 8526
 */                                                                                                                    // 8527
PhysicsEngine.prototype.wake = function wake() {                                                                       // 8528
    if (!this._isSleeping) return;                                                                                     // 8529
    this._prevTime = now();                                                                                            // 8530
    this.emit(_events.start, this);                                                                                    // 8531
    this._isSleeping = false;                                                                                          // 8532
};                                                                                                                     // 8533
                                                                                                                       // 8534
PhysicsEngine.prototype.emit = function emit(type, data) {                                                             // 8535
    if (this._eventHandler === null) return;                                                                           // 8536
    this._eventHandler.emit(type, data);                                                                               // 8537
};                                                                                                                     // 8538
                                                                                                                       // 8539
PhysicsEngine.prototype.on = function on(event, fn) {                                                                  // 8540
    if (this._eventHandler === null) this._eventHandler = new EventHandler();                                          // 8541
    this._eventHandler.on(event, fn);                                                                                  // 8542
};                                                                                                                     // 8543
                                                                                                                       // 8544
module.exports = PhysicsEngine;                                                                                        // 8545
},{"../core/EventHandler":7}],49:[function(_dereq_,module,exports){                                                    // 8546
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8547
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8548
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8549
 *                                                                                                                     // 8550
 * Owner: david@famo.us                                                                                                // 8551
 * @license MPL 2.0                                                                                                    // 8552
 * @copyright Famous Industries, Inc. 2014                                                                             // 8553
 */                                                                                                                    // 8554
                                                                                                                       // 8555
var Particle = _dereq_('./Particle');                                                                                  // 8556
var Transform = _dereq_('../../core/Transform');                                                                       // 8557
var Vector = _dereq_('../../math/Vector');                                                                             // 8558
var Quaternion = _dereq_('../../math/Quaternion');                                                                     // 8559
var Matrix = _dereq_('../../math/Matrix');                                                                             // 8560
var Integrator = _dereq_('../integrators/SymplecticEuler');                                                            // 8561
                                                                                                                       // 8562
/**                                                                                                                    // 8563
 * A unit controlled by the physics engine which extends the zero-dimensional                                          // 8564
 *   Particle to include geometry. In addition to maintaining the state                                                // 8565
 *   of a Particle its state includes orientation, angular velocity                                                    // 8566
 *   and angular momentum and responds to torque forces.                                                               // 8567
 *                                                                                                                     // 8568
 * @class Body                                                                                                         // 8569
 * @extends Particle                                                                                                   // 8570
 * @constructor                                                                                                        // 8571
 */                                                                                                                    // 8572
function Body(options) {                                                                                               // 8573
    Particle.call(this, options);                                                                                      // 8574
    options = options || {};                                                                                           // 8575
                                                                                                                       // 8576
    this.orientation     = new Quaternion();                                                                           // 8577
    this.angularVelocity = new Vector();                                                                               // 8578
    this.angularMomentum = new Vector();                                                                               // 8579
    this.torque          = new Vector();                                                                               // 8580
                                                                                                                       // 8581
    if (options.orientation)     this.orientation.set(options.orientation);                                            // 8582
    if (options.angularVelocity) this.angularVelocity.set(options.angularVelocity);                                    // 8583
    if (options.angularMomentum) this.angularMomentum.set(options.angularMomentum);                                    // 8584
    if (options.torque)          this.torque.set(options.torque);                                                      // 8585
                                                                                                                       // 8586
    this.angularVelocity.w = 0;        //quaternify the angular velocity                                               // 8587
    this.setMomentsOfInertia();                                                                                        // 8588
                                                                                                                       // 8589
    // registers                                                                                                       // 8590
    this.pWorld = new Vector();        //placeholder for world space position                                          // 8591
}                                                                                                                      // 8592
                                                                                                                       // 8593
Body.DEFAULT_OPTIONS = Particle.DEFAULT_OPTIONS;                                                                       // 8594
Body.DEFAULT_OPTIONS.orientation = [0, 0, 0, 1];                                                                       // 8595
Body.DEFAULT_OPTIONS.angularVelocity = [0, 0, 0];                                                                      // 8596
                                                                                                                       // 8597
Body.prototype = Object.create(Particle.prototype);                                                                    // 8598
Body.prototype.constructor = Body;                                                                                     // 8599
                                                                                                                       // 8600
Body.prototype.isBody = true;                                                                                          // 8601
                                                                                                                       // 8602
Body.prototype.setMass = function setMass() {                                                                          // 8603
    Particle.prototype.setMass.apply(this, arguments);                                                                 // 8604
    this.setMomentsOfInertia();                                                                                        // 8605
};                                                                                                                     // 8606
                                                                                                                       // 8607
/**                                                                                                                    // 8608
 * Setter for moment of inertia, which is necessary to give proper                                                     // 8609
 *   angular inertia depending on the geometry of the body.                                                            // 8610
 *                                                                                                                     // 8611
 * @method setMomentsOfInertia                                                                                         // 8612
 */                                                                                                                    // 8613
Body.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                  // 8614
    this.inertia = new Matrix();                                                                                       // 8615
    this.inverseInertia = new Matrix();                                                                                // 8616
};                                                                                                                     // 8617
                                                                                                                       // 8618
/**                                                                                                                    // 8619
 * Update the angular velocity from the angular momentum state.                                                        // 8620
 *                                                                                                                     // 8621
 * @method updateAngularVelocity                                                                                       // 8622
 */                                                                                                                    // 8623
Body.prototype.updateAngularVelocity = function updateAngularVelocity() {                                              // 8624
    this.angularVelocity.set(this.inverseInertia.vectorMultiply(this.angularMomentum));                                // 8625
};                                                                                                                     // 8626
                                                                                                                       // 8627
/**                                                                                                                    // 8628
 * Determine world coordinates from the local coordinate system. Useful                                                // 8629
 *   if the Body has rotated in space.                                                                                 // 8630
 *                                                                                                                     // 8631
 * @method toWorldCoordinates                                                                                          // 8632
 * @param localPosition {Vector} local coordinate vector                                                               // 8633
 * @return global coordinate vector {Vector}                                                                           // 8634
 */                                                                                                                    // 8635
Body.prototype.toWorldCoordinates = function toWorldCoordinates(localPosition) {                                       // 8636
    return this.pWorld.set(this.orientation.rotateVector(localPosition));                                              // 8637
};                                                                                                                     // 8638
                                                                                                                       // 8639
/**                                                                                                                    // 8640
 * Calculates the kinetic and intertial energy of a body.                                                              // 8641
 *                                                                                                                     // 8642
 * @method getEnergy                                                                                                   // 8643
 * @return energy {Number}                                                                                             // 8644
 */                                                                                                                    // 8645
Body.prototype.getEnergy = function getEnergy() {                                                                      // 8646
    return Particle.prototype.getEnergy.call(this)                                                                     // 8647
        + 0.5 * this.inertia.vectorMultiply(this.angularVelocity).dot(this.angularVelocity);                           // 8648
};                                                                                                                     // 8649
                                                                                                                       // 8650
/**                                                                                                                    // 8651
 * Extends Particle.reset to reset orientation, angular velocity                                                       // 8652
 *   and angular momentum.                                                                                             // 8653
 *                                                                                                                     // 8654
 * @method reset                                                                                                       // 8655
 * @param [p] {Array|Vector} position                                                                                  // 8656
 * @param [v] {Array|Vector} velocity                                                                                  // 8657
 * @param [q] {Array|Quaternion} orientation                                                                           // 8658
 * @param [L] {Array|Vector} angular momentum                                                                          // 8659
 */                                                                                                                    // 8660
Body.prototype.reset = function reset(p, v, q, L) {                                                                    // 8661
    Particle.prototype.reset.call(this, p, v);                                                                         // 8662
    this.angularVelocity.clear();                                                                                      // 8663
    this.setOrientation(q || [1,0,0,0]);                                                                               // 8664
    this.setAngularMomentum(L || [0,0,0]);                                                                             // 8665
};                                                                                                                     // 8666
                                                                                                                       // 8667
/**                                                                                                                    // 8668
 * Setter for orientation                                                                                              // 8669
 *                                                                                                                     // 8670
 * @method setOrientation                                                                                              // 8671
 * @param q {Array|Quaternion} orientation                                                                             // 8672
 */                                                                                                                    // 8673
Body.prototype.setOrientation = function setOrientation(q) {                                                           // 8674
    this.orientation.set(q);                                                                                           // 8675
};                                                                                                                     // 8676
                                                                                                                       // 8677
/**                                                                                                                    // 8678
 * Setter for angular velocity                                                                                         // 8679
 *                                                                                                                     // 8680
 * @method setAngularVelocity                                                                                          // 8681
 * @param w {Array|Vector} angular velocity                                                                            // 8682
 */                                                                                                                    // 8683
Body.prototype.setAngularVelocity = function setAngularVelocity(w) {                                                   // 8684
    this.wake();                                                                                                       // 8685
    this.angularVelocity.set(w);                                                                                       // 8686
};                                                                                                                     // 8687
                                                                                                                       // 8688
/**                                                                                                                    // 8689
 * Setter for angular momentum                                                                                         // 8690
 *                                                                                                                     // 8691
 * @method setAngularMomentum                                                                                          // 8692
 * @param L {Array|Vector} angular momentum                                                                            // 8693
 */                                                                                                                    // 8694
Body.prototype.setAngularMomentum = function setAngularMomentum(L) {                                                   // 8695
    this.wake();                                                                                                       // 8696
    this.angularMomentum.set(L);                                                                                       // 8697
};                                                                                                                     // 8698
                                                                                                                       // 8699
/**                                                                                                                    // 8700
 * Extends Particle.applyForce with an optional argument                                                               // 8701
 *   to apply the force at an off-centered location, resulting in a torque.                                            // 8702
 *                                                                                                                     // 8703
 * @method applyForce                                                                                                  // 8704
 * @param force {Vector} force                                                                                         // 8705
 * @param [location] {Vector} off-center location on the body                                                          // 8706
 */                                                                                                                    // 8707
Body.prototype.applyForce = function applyForce(force, location) {                                                     // 8708
    Particle.prototype.applyForce.call(this, force);                                                                   // 8709
    if (location !== undefined) this.applyTorque(location.cross(force));                                               // 8710
};                                                                                                                     // 8711
                                                                                                                       // 8712
/**                                                                                                                    // 8713
 * Applied a torque force to a body, inducing a rotation.                                                              // 8714
 *                                                                                                                     // 8715
 * @method applyTorque                                                                                                 // 8716
 * @param torque {Vector} torque                                                                                       // 8717
 */                                                                                                                    // 8718
Body.prototype.applyTorque = function applyTorque(torque) {                                                            // 8719
    this.wake();                                                                                                       // 8720
    this.torque.set(this.torque.add(torque));                                                                          // 8721
};                                                                                                                     // 8722
                                                                                                                       // 8723
/**                                                                                                                    // 8724
 * Extends Particle.getTransform to include a rotational component                                                     // 8725
 *   derived from the particle's orientation.                                                                          // 8726
 *                                                                                                                     // 8727
 * @method getTransform                                                                                                // 8728
 * @return transform {Transform}                                                                                       // 8729
 */                                                                                                                    // 8730
Body.prototype.getTransform = function getTransform() {                                                                // 8731
    return Transform.thenMove(                                                                                         // 8732
        this.orientation.getTransform(),                                                                               // 8733
        Transform.getTranslate(Particle.prototype.getTransform.call(this))                                             // 8734
    );                                                                                                                 // 8735
};                                                                                                                     // 8736
                                                                                                                       // 8737
/**                                                                                                                    // 8738
 * Extends Particle._integrate to also update the rotational states                                                    // 8739
 *   of the body.                                                                                                      // 8740
 *                                                                                                                     // 8741
 * @method getTransform                                                                                                // 8742
 * @protected                                                                                                          // 8743
 * @param dt {Number} delta time                                                                                       // 8744
 */                                                                                                                    // 8745
Body.prototype._integrate = function _integrate(dt) {                                                                  // 8746
    Particle.prototype._integrate.call(this, dt);                                                                      // 8747
    this.integrateAngularMomentum(dt);                                                                                 // 8748
    this.updateAngularVelocity(dt);                                                                                    // 8749
    this.integrateOrientation(dt);                                                                                     // 8750
};                                                                                                                     // 8751
                                                                                                                       // 8752
/**                                                                                                                    // 8753
 * Updates the angular momentum via the its integrator.                                                                // 8754
 *                                                                                                                     // 8755
 * @method integrateAngularMomentum                                                                                    // 8756
 * @param dt {Number} delta time                                                                                       // 8757
 */                                                                                                                    // 8758
Body.prototype.integrateAngularMomentum = function integrateAngularMomentum(dt) {                                      // 8759
    Integrator.integrateAngularMomentum(this, dt);                                                                     // 8760
};                                                                                                                     // 8761
                                                                                                                       // 8762
/**                                                                                                                    // 8763
 * Updates the orientation via the its integrator.                                                                     // 8764
 *                                                                                                                     // 8765
 * @method integrateOrientation                                                                                        // 8766
 * @param dt {Number} delta time                                                                                       // 8767
 */                                                                                                                    // 8768
Body.prototype.integrateOrientation = function integrateOrientation(dt) {                                              // 8769
    Integrator.integrateOrientation(this, dt);                                                                         // 8770
};                                                                                                                     // 8771
                                                                                                                       // 8772
module.exports = Body;                                                                                                 // 8773
},{"../../core/Transform":15,"../../math/Matrix":37,"../../math/Quaternion":38,"../../math/Vector":41,"../integrators/SymplecticEuler":72,"./Particle":51}],50:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8775
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8776
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8777
 *                                                                                                                     // 8778
 * Owner: david@famo.us                                                                                                // 8779
 * @license MPL 2.0                                                                                                    // 8780
 * @copyright Famous Industries, Inc. 2014                                                                             // 8781
 */                                                                                                                    // 8782
                                                                                                                       // 8783
var Body = _dereq_('./Body');                                                                                          // 8784
var Matrix = _dereq_('../../math/Matrix');                                                                             // 8785
                                                                                                                       // 8786
/**                                                                                                                    // 8787
 * Implements a circle, or spherical, geometry for a Body with                                                         // 8788
 * radius.                                                                                                             // 8789
 *                                                                                                                     // 8790
 * @class Circle                                                                                                       // 8791
 * @extends Body                                                                                                       // 8792
 * @constructor                                                                                                        // 8793
 */                                                                                                                    // 8794
function Circle(options) {                                                                                             // 8795
    options = options || {};                                                                                           // 8796
    this.setRadius(options.radius || 0);                                                                               // 8797
    Body.call(this, options);                                                                                          // 8798
}                                                                                                                      // 8799
                                                                                                                       // 8800
Circle.prototype = Object.create(Body.prototype);                                                                      // 8801
Circle.prototype.constructor = Circle;                                                                                 // 8802
                                                                                                                       // 8803
/**                                                                                                                    // 8804
 * Basic setter for radius.                                                                                            // 8805
 * @method setRadius                                                                                                   // 8806
 * @param r {Number} radius                                                                                            // 8807
 */                                                                                                                    // 8808
Circle.prototype.setRadius = function setRadius(r) {                                                                   // 8809
    this.radius = r;                                                                                                   // 8810
    this.size = [2*this.radius, 2*this.radius];                                                                        // 8811
    this.setMomentsOfInertia();                                                                                        // 8812
};                                                                                                                     // 8813
                                                                                                                       // 8814
Circle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                // 8815
    var m = this.mass;                                                                                                 // 8816
    var r = this.radius;                                                                                               // 8817
                                                                                                                       // 8818
    this.inertia = new Matrix([                                                                                        // 8819
        [0.25 * m * r * r, 0, 0],                                                                                      // 8820
        [0, 0.25 * m * r * r, 0],                                                                                      // 8821
        [0, 0, 0.5 * m * r * r]                                                                                        // 8822
    ]);                                                                                                                // 8823
                                                                                                                       // 8824
    this.inverseInertia = new Matrix([                                                                                 // 8825
        [4 / (m * r * r), 0, 0],                                                                                       // 8826
        [0, 4 / (m * r * r), 0],                                                                                       // 8827
        [0, 0, 2 / (m * r * r)]                                                                                        // 8828
    ]);                                                                                                                // 8829
};                                                                                                                     // 8830
                                                                                                                       // 8831
module.exports = Circle;                                                                                               // 8832
},{"../../math/Matrix":37,"./Body":49}],51:[function(_dereq_,module,exports){                                          // 8833
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8834
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8835
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8836
 *                                                                                                                     // 8837
 * Owner: david@famo.us                                                                                                // 8838
 * @license MPL 2.0                                                                                                    // 8839
 * @copyright Famous Industries, Inc. 2014                                                                             // 8840
 */                                                                                                                    // 8841
                                                                                                                       // 8842
var Vector = _dereq_('../../math/Vector');                                                                             // 8843
var Transform = _dereq_('../../core/Transform');                                                                       // 8844
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 8845
var Integrator = _dereq_('../integrators/SymplecticEuler');                                                            // 8846
                                                                                                                       // 8847
/**                                                                                                                    // 8848
 * A point body that is controlled by the Physics Engine. A particle has                                               // 8849
 *   position and velocity states that are updated by the Physics Engine.                                              // 8850
 *   Ultimately, a particle is a special type of modifier, and can be added to                                         // 8851
 *   the Famo.us Scene Graph like any other modifier.                                                                  // 8852
 *                                                                                                                     // 8853
 * @class Particle                                                                                                     // 8854
 * @uses EventHandler                                                                                                  // 8855
 * @extensionfor Body                                                                                                  // 8856
 *                                                                                                                     // 8857
 * @param [options] {Options}           An object of configurable options.                                             // 8858
 * @param [options.position] {Array}    The position of the particle.                                                  // 8859
 * @param [options.velocity] {Array}    The velocity of the particle.                                                  // 8860
 * @param [options.mass] {Number}       The mass of the particle.                                                      // 8861
 */                                                                                                                    // 8862
 function Particle(options) {                                                                                          // 8863
    options = options || {};                                                                                           // 8864
    var defaults = Particle.DEFAULT_OPTIONS;                                                                           // 8865
                                                                                                                       // 8866
    // registers                                                                                                       // 8867
    this.position = new Vector();                                                                                      // 8868
    this.velocity = new Vector();                                                                                      // 8869
    this.force = new Vector();                                                                                         // 8870
                                                                                                                       // 8871
    // state variables                                                                                                 // 8872
    this._engine = null;                                                                                               // 8873
    this._isSleeping = true;                                                                                           // 8874
    this._eventOutput = null;                                                                                          // 8875
                                                                                                                       // 8876
    // set scalars                                                                                                     // 8877
    this.mass = (options.mass !== undefined)                                                                           // 8878
        ? options.mass                                                                                                 // 8879
        : defaults.mass;                                                                                               // 8880
                                                                                                                       // 8881
    this.inverseMass = 1 / this.mass;                                                                                  // 8882
                                                                                                                       // 8883
    // set vectors                                                                                                     // 8884
    this.setPosition(options.position || defaults.position);                                                           // 8885
    this.setVelocity(options.velocity || defaults.velocity);                                                           // 8886
    this.force.set(options.force || [0,0,0]);                                                                          // 8887
                                                                                                                       // 8888
    this.transform = Transform.identity.slice();                                                                       // 8889
                                                                                                                       // 8890
    // cached _spec                                                                                                    // 8891
    this._spec = {                                                                                                     // 8892
        size : [true, true],                                                                                           // 8893
        target : {                                                                                                     // 8894
            transform : this.transform,                                                                                // 8895
            origin : [0.5, 0.5],                                                                                       // 8896
            target : null                                                                                              // 8897
        }                                                                                                              // 8898
    };                                                                                                                 // 8899
}                                                                                                                      // 8900
                                                                                                                       // 8901
Particle.DEFAULT_OPTIONS = {                                                                                           // 8902
    position : [0, 0, 0],                                                                                              // 8903
    velocity : [0, 0, 0],                                                                                              // 8904
    mass : 1                                                                                                           // 8905
};                                                                                                                     // 8906
                                                                                                                       // 8907
//Catalogue of outputted events                                                                                        // 8908
var _events = {                                                                                                        // 8909
    start : 'start',                                                                                                   // 8910
    update : 'update',                                                                                                 // 8911
    end : 'end'                                                                                                        // 8912
};                                                                                                                     // 8913
                                                                                                                       // 8914
// Cached timing function                                                                                              // 8915
var now = Date.now;                                                                                                    // 8916
                                                                                                                       // 8917
/**                                                                                                                    // 8918
 * @attribute isBody                                                                                                   // 8919
 * @type Boolean                                                                                                       // 8920
 * @static                                                                                                             // 8921
 */                                                                                                                    // 8922
Particle.prototype.isBody = false;                                                                                     // 8923
                                                                                                                       // 8924
/**                                                                                                                    // 8925
 * Determines if particle is active                                                                                    // 8926
 *                                                                                                                     // 8927
 * @method isActive                                                                                                    // 8928
 * @return {Boolean}                                                                                                   // 8929
 */                                                                                                                    // 8930
Particle.prototype.isActive = function isActive() {                                                                    // 8931
    return !this._isSleeping;                                                                                          // 8932
};                                                                                                                     // 8933
                                                                                                                       // 8934
/**                                                                                                                    // 8935
 * Stops the particle from updating                                                                                    // 8936
 *                                                                                                                     // 8937
 * @method sleep                                                                                                       // 8938
 */                                                                                                                    // 8939
Particle.prototype.sleep = function sleep() {                                                                          // 8940
    if (this._isSleeping) return;                                                                                      // 8941
    this.emit(_events.end, this);                                                                                      // 8942
    this._isSleeping = true;                                                                                           // 8943
};                                                                                                                     // 8944
                                                                                                                       // 8945
/**                                                                                                                    // 8946
 * Starts the particle update                                                                                          // 8947
 *                                                                                                                     // 8948
 * @method wake                                                                                                        // 8949
 */                                                                                                                    // 8950
Particle.prototype.wake = function wake() {                                                                            // 8951
    if (!this._isSleeping) return;                                                                                     // 8952
    this.emit(_events.start, this);                                                                                    // 8953
    this._isSleeping = false;                                                                                          // 8954
    this._prevTime = now();                                                                                            // 8955
    if (this._engine) this._engine.wake();                                                                             // 8956
};                                                                                                                     // 8957
                                                                                                                       // 8958
/**                                                                                                                    // 8959
 * Basic setter for position                                                                                           // 8960
 *                                                                                                                     // 8961
 * @method setPosition                                                                                                 // 8962
 * @param position {Array|Vector}                                                                                      // 8963
 */                                                                                                                    // 8964
Particle.prototype.setPosition = function setPosition(position) {                                                      // 8965
    this.position.set(position);                                                                                       // 8966
};                                                                                                                     // 8967
                                                                                                                       // 8968
/**                                                                                                                    // 8969
 * 1-dimensional setter for position                                                                                   // 8970
 *                                                                                                                     // 8971
 * @method setPosition1D                                                                                               // 8972
 * @param x {Number}                                                                                                   // 8973
 */                                                                                                                    // 8974
Particle.prototype.setPosition1D = function setPosition1D(x) {                                                         // 8975
    this.position.x = x;                                                                                               // 8976
};                                                                                                                     // 8977
                                                                                                                       // 8978
/**                                                                                                                    // 8979
 * Basic getter function for position                                                                                  // 8980
 *                                                                                                                     // 8981
 * @method getPosition                                                                                                 // 8982
 * @return position {Array}                                                                                            // 8983
 */                                                                                                                    // 8984
Particle.prototype.getPosition = function getPosition() {                                                              // 8985
    this._engine.step();                                                                                               // 8986
    return this.position.get();                                                                                        // 8987
};                                                                                                                     // 8988
                                                                                                                       // 8989
/**                                                                                                                    // 8990
 * 1-dimensional getter for position                                                                                   // 8991
 *                                                                                                                     // 8992
 * @method getPosition1D                                                                                               // 8993
 * @return value {Number}                                                                                              // 8994
 */                                                                                                                    // 8995
Particle.prototype.getPosition1D = function getPosition1D() {                                                          // 8996
    this._engine.step();                                                                                               // 8997
    return this.position.x;                                                                                            // 8998
};                                                                                                                     // 8999
                                                                                                                       // 9000
/**                                                                                                                    // 9001
 * Basic setter function for velocity Vector                                                                           // 9002
 *                                                                                                                     // 9003
 * @method setVelocity                                                                                                 // 9004
 * @function                                                                                                           // 9005
 */                                                                                                                    // 9006
Particle.prototype.setVelocity = function setVelocity(velocity) {                                                      // 9007
    this.velocity.set(velocity);                                                                                       // 9008
    if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0))                                                // 9009
        this.wake();                                                                                                   // 9010
};                                                                                                                     // 9011
                                                                                                                       // 9012
/**                                                                                                                    // 9013
 * 1-dimensional setter for velocity                                                                                   // 9014
 *                                                                                                                     // 9015
 * @method setVelocity1D                                                                                               // 9016
 * @param x {Number}                                                                                                   // 9017
 */                                                                                                                    // 9018
Particle.prototype.setVelocity1D = function setVelocity1D(x) {                                                         // 9019
    this.velocity.x = x;                                                                                               // 9020
    if (x !== 0) this.wake();                                                                                          // 9021
};                                                                                                                     // 9022
                                                                                                                       // 9023
/**                                                                                                                    // 9024
 * Basic getter function for velocity Vector                                                                           // 9025
 *                                                                                                                     // 9026
 * @method getVelocity                                                                                                 // 9027
 * @return velocity {Array}                                                                                            // 9028
 */                                                                                                                    // 9029
Particle.prototype.getVelocity = function getVelocity() {                                                              // 9030
    return this.velocity.get();                                                                                        // 9031
};                                                                                                                     // 9032
                                                                                                                       // 9033
/**                                                                                                                    // 9034
 * Basic setter function for force Vector                                                                              // 9035
 *                                                                                                                     // 9036
 * @method setForce                                                                                                    // 9037
 * @return force {Array}                                                                                               // 9038
 */                                                                                                                    // 9039
Particle.prototype.setForce = function setForce(force) {                                                               // 9040
    this.force.set(force);                                                                                             // 9041
    this.wake();                                                                                                       // 9042
};                                                                                                                     // 9043
                                                                                                                       // 9044
/**                                                                                                                    // 9045
 * 1-dimensional getter for velocity                                                                                   // 9046
 *                                                                                                                     // 9047
 * @method getVelocity1D                                                                                               // 9048
 * @return velocity {Number}                                                                                           // 9049
 */                                                                                                                    // 9050
Particle.prototype.getVelocity1D = function getVelocity1D() {                                                          // 9051
    return this.velocity.x;                                                                                            // 9052
};                                                                                                                     // 9053
                                                                                                                       // 9054
/**                                                                                                                    // 9055
 * Basic setter function for mass quantity                                                                             // 9056
 *                                                                                                                     // 9057
 * @method setMass                                                                                                     // 9058
 * @param mass {Number} mass                                                                                           // 9059
 */                                                                                                                    // 9060
Particle.prototype.setMass = function setMass(mass) {                                                                  // 9061
    this.mass = mass;                                                                                                  // 9062
    this.inverseMass = 1 / mass;                                                                                       // 9063
};                                                                                                                     // 9064
                                                                                                                       // 9065
/**                                                                                                                    // 9066
 * Basic getter function for mass quantity                                                                             // 9067
 *                                                                                                                     // 9068
 * @method getMass                                                                                                     // 9069
 * @return mass {Number}                                                                                               // 9070
 */                                                                                                                    // 9071
Particle.prototype.getMass = function getMass() {                                                                      // 9072
    return this.mass;                                                                                                  // 9073
};                                                                                                                     // 9074
                                                                                                                       // 9075
/**                                                                                                                    // 9076
 * Reset position and velocity                                                                                         // 9077
 *                                                                                                                     // 9078
 * @method reset                                                                                                       // 9079
 * @param position {Array|Vector}                                                                                      // 9080
 * @param velocity {Array|Vector}                                                                                      // 9081
 */                                                                                                                    // 9082
Particle.prototype.reset = function reset(position, velocity) {                                                        // 9083
    this.setPosition(position || [0,0,0]);                                                                             // 9084
    this.setVelocity(velocity || [0,0,0]);                                                                             // 9085
};                                                                                                                     // 9086
                                                                                                                       // 9087
/**                                                                                                                    // 9088
 * Add force vector to existing internal force Vector                                                                  // 9089
 *                                                                                                                     // 9090
 * @method applyForce                                                                                                  // 9091
 * @param force {Vector}                                                                                               // 9092
 */                                                                                                                    // 9093
Particle.prototype.applyForce = function applyForce(force) {                                                           // 9094
    if (force.isZero()) return;                                                                                        // 9095
    this.force.add(force).put(this.force);                                                                             // 9096
    this.wake();                                                                                                       // 9097
};                                                                                                                     // 9098
                                                                                                                       // 9099
/**                                                                                                                    // 9100
 * Add impulse (change in velocity) Vector to this Vector's velocity.                                                  // 9101
 *                                                                                                                     // 9102
 * @method applyImpulse                                                                                                // 9103
 * @param impulse {Vector}                                                                                             // 9104
 */                                                                                                                    // 9105
Particle.prototype.applyImpulse = function applyImpulse(impulse) {                                                     // 9106
    if (impulse.isZero()) return;                                                                                      // 9107
    var velocity = this.velocity;                                                                                      // 9108
    velocity.add(impulse.mult(this.inverseMass)).put(velocity);                                                        // 9109
};                                                                                                                     // 9110
                                                                                                                       // 9111
/**                                                                                                                    // 9112
 * Update a particle's velocity from its force accumulator                                                             // 9113
 *                                                                                                                     // 9114
 * @method integrateVelocity                                                                                           // 9115
 * @param dt {Number} Time differential                                                                                // 9116
 */                                                                                                                    // 9117
Particle.prototype.integrateVelocity = function integrateVelocity(dt) {                                                // 9118
    Integrator.integrateVelocity(this, dt);                                                                            // 9119
};                                                                                                                     // 9120
                                                                                                                       // 9121
/**                                                                                                                    // 9122
 * Update a particle's position from its velocity                                                                      // 9123
 *                                                                                                                     // 9124
 * @method integratePosition                                                                                           // 9125
 * @param dt {Number} Time differential                                                                                // 9126
 */                                                                                                                    // 9127
Particle.prototype.integratePosition = function integratePosition(dt) {                                                // 9128
    Integrator.integratePosition(this, dt);                                                                            // 9129
};                                                                                                                     // 9130
                                                                                                                       // 9131
/**                                                                                                                    // 9132
 * Update the position and velocity of the particle                                                                    // 9133
 *                                                                                                                     // 9134
 * @method _integrate                                                                                                  // 9135
 * @protected                                                                                                          // 9136
 * @param dt {Number} Time differential                                                                                // 9137
 */                                                                                                                    // 9138
Particle.prototype._integrate = function _integrate(dt) {                                                              // 9139
    this.integrateVelocity(dt);                                                                                        // 9140
    this.integratePosition(dt);                                                                                        // 9141
};                                                                                                                     // 9142
                                                                                                                       // 9143
/**                                                                                                                    // 9144
 * Get kinetic energy of the particle.                                                                                 // 9145
 *                                                                                                                     // 9146
 * @method getEnergy                                                                                                   // 9147
 * @function                                                                                                           // 9148
 */                                                                                                                    // 9149
Particle.prototype.getEnergy = function getEnergy() {                                                                  // 9150
    return 0.5 * this.mass * this.velocity.normSquared();                                                              // 9151
};                                                                                                                     // 9152
                                                                                                                       // 9153
/**                                                                                                                    // 9154
 * Generate transform from the current position state                                                                  // 9155
 *                                                                                                                     // 9156
 * @method getTransform                                                                                                // 9157
 * @return Transform {Transform}                                                                                       // 9158
 */                                                                                                                    // 9159
Particle.prototype.getTransform = function getTransform() {                                                            // 9160
    this._engine.step();                                                                                               // 9161
                                                                                                                       // 9162
    var position = this.position;                                                                                      // 9163
    var transform = this.transform;                                                                                    // 9164
                                                                                                                       // 9165
    transform[12] = position.x;                                                                                        // 9166
    transform[13] = position.y;                                                                                        // 9167
    transform[14] = position.z;                                                                                        // 9168
    return transform;                                                                                                  // 9169
};                                                                                                                     // 9170
                                                                                                                       // 9171
/**                                                                                                                    // 9172
 * The modify interface of a Modifier                                                                                  // 9173
 *                                                                                                                     // 9174
 * @method modify                                                                                                      // 9175
 * @param target {Spec}                                                                                                // 9176
 * @return Spec {Spec}                                                                                                 // 9177
 */                                                                                                                    // 9178
Particle.prototype.modify = function modify(target) {                                                                  // 9179
    var _spec = this._spec.target;                                                                                     // 9180
    _spec.transform = this.getTransform();                                                                             // 9181
    _spec.target = target;                                                                                             // 9182
    return this._spec;                                                                                                 // 9183
};                                                                                                                     // 9184
                                                                                                                       // 9185
// private                                                                                                             // 9186
function _createEventOutput() {                                                                                        // 9187
    this._eventOutput = new EventHandler();                                                                            // 9188
    this._eventOutput.bindThis(this);                                                                                  // 9189
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9190
}                                                                                                                      // 9191
                                                                                                                       // 9192
Particle.prototype.emit = function emit(type, data) {                                                                  // 9193
    if (!this._eventOutput) return;                                                                                    // 9194
    this._eventOutput.emit(type, data);                                                                                // 9195
};                                                                                                                     // 9196
                                                                                                                       // 9197
Particle.prototype.on = function on() {                                                                                // 9198
    _createEventOutput.call(this);                                                                                     // 9199
    return this.on.apply(this, arguments);                                                                             // 9200
};                                                                                                                     // 9201
                                                                                                                       // 9202
Particle.prototype.removeListener = function removeListener() {                                                        // 9203
    _createEventOutput.call(this);                                                                                     // 9204
    return this.removeListener.apply(this, arguments);                                                                 // 9205
};                                                                                                                     // 9206
                                                                                                                       // 9207
Particle.prototype.pipe = function pipe() {                                                                            // 9208
    _createEventOutput.call(this);                                                                                     // 9209
    return this.pipe.apply(this, arguments);                                                                           // 9210
};                                                                                                                     // 9211
                                                                                                                       // 9212
Particle.prototype.unpipe = function unpipe() {                                                                        // 9213
    _createEventOutput.call(this);                                                                                     // 9214
    return this.unpipe.apply(this, arguments);                                                                         // 9215
};                                                                                                                     // 9216
                                                                                                                       // 9217
module.exports = Particle;                                                                                             // 9218
},{"../../core/EventHandler":7,"../../core/Transform":15,"../../math/Vector":41,"../integrators/SymplecticEuler":72}],52:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9220
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9221
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9222
 *                                                                                                                     // 9223
 * Owner: david@famo.us                                                                                                // 9224
 * @license MPL 2.0                                                                                                    // 9225
 * @copyright Famous Industries, Inc. 2014                                                                             // 9226
 */                                                                                                                    // 9227
                                                                                                                       // 9228
var Body = _dereq_('./Body');                                                                                          // 9229
var Matrix = _dereq_('../../math/Matrix');                                                                             // 9230
                                                                                                                       // 9231
/**                                                                                                                    // 9232
 * Implements a rectangular geometry for an Body with                                                                  // 9233
 * size = [width, height].                                                                                             // 9234
 *                                                                                                                     // 9235
 * @class Rectangle                                                                                                    // 9236
 * @extends Body                                                                                                       // 9237
 * @constructor                                                                                                        // 9238
 */                                                                                                                    // 9239
function Rectangle(options) {                                                                                          // 9240
    options = options || {};                                                                                           // 9241
    this.size = options.size || [0,0];                                                                                 // 9242
    Body.call(this, options);                                                                                          // 9243
}                                                                                                                      // 9244
                                                                                                                       // 9245
Rectangle.prototype = Object.create(Body.prototype);                                                                   // 9246
Rectangle.prototype.constructor = Rectangle;                                                                           // 9247
                                                                                                                       // 9248
/**                                                                                                                    // 9249
 * Basic setter for size.                                                                                              // 9250
 * @method setSize                                                                                                     // 9251
 * @param size {Array} size = [width, height]                                                                          // 9252
 */                                                                                                                    // 9253
Rectangle.prototype.setSize = function setSize(size) {                                                                 // 9254
    this.size = size;                                                                                                  // 9255
    this.setMomentsOfInertia();                                                                                        // 9256
};                                                                                                                     // 9257
                                                                                                                       // 9258
Rectangle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                             // 9259
    var m = this.mass;                                                                                                 // 9260
    var w = this.size[0];                                                                                              // 9261
    var h = this.size[1];                                                                                              // 9262
                                                                                                                       // 9263
    this.inertia = new Matrix([                                                                                        // 9264
        [m * h * h / 12, 0, 0],                                                                                        // 9265
        [0, m * w * w / 12, 0],                                                                                        // 9266
        [0, 0, m * (w * w + h * h) / 12]                                                                               // 9267
    ]);                                                                                                                // 9268
                                                                                                                       // 9269
    this.inverseInertia = new Matrix([                                                                                 // 9270
        [12 / (m * h * h), 0, 0],                                                                                      // 9271
        [0, 12 / (m * w * w), 0],                                                                                      // 9272
        [0, 0, 12 / (m * (w * w + h * h))]                                                                             // 9273
    ]);                                                                                                                // 9274
};                                                                                                                     // 9275
                                                                                                                       // 9276
module.exports = Rectangle;                                                                                            // 9277
},{"../../math/Matrix":37,"./Body":49}],53:[function(_dereq_,module,exports){                                          // 9278
module.exports = {                                                                                                     // 9279
  Body: _dereq_('./Body'),                                                                                             // 9280
  Circle: _dereq_('./Circle'),                                                                                         // 9281
  Particle: _dereq_('./Particle'),                                                                                     // 9282
  Rectangle: _dereq_('./Rectangle')                                                                                    // 9283
};                                                                                                                     // 9284
                                                                                                                       // 9285
},{"./Body":49,"./Circle":50,"./Particle":51,"./Rectangle":52}],54:[function(_dereq_,module,exports){                  // 9286
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9287
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9288
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9289
 *                                                                                                                     // 9290
 * Owner: david@famo.us                                                                                                // 9291
 * @license MPL 2.0                                                                                                    // 9292
 * @copyright Famous Industries, Inc. 2014                                                                             // 9293
 */                                                                                                                    // 9294
                                                                                                                       // 9295
var Constraint = _dereq_('./Constraint');                                                                              // 9296
var Vector = _dereq_('../../math/Vector');                                                                             // 9297
                                                                                                                       // 9298
/**                                                                                                                    // 9299
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9300
 *                                                                                                                     // 9301
 *  @class Collision                                                                                                   // 9302
 *  @constructor                                                                                                       // 9303
 *  @extends Constraint                                                                                                // 9304
 *  @param {Options} [options] An object of configurable options.                                                      // 9305
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) Range : [0, 1] // 9306
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers           // 9308
 *                                                                                                                     // 9309
 */                                                                                                                    // 9310
function Collision(options) {                                                                                          // 9311
    this.options = Object.create(Collision.DEFAULT_OPTIONS);                                                           // 9312
    if (options) this.setOptions(options);                                                                             // 9313
                                                                                                                       // 9314
    //registers                                                                                                        // 9315
    this.normal   = new Vector();                                                                                      // 9316
    this.pDiff    = new Vector();                                                                                      // 9317
    this.vDiff    = new Vector();                                                                                      // 9318
    this.impulse1 = new Vector();                                                                                      // 9319
    this.impulse2 = new Vector();                                                                                      // 9320
                                                                                                                       // 9321
    Constraint.call(this);                                                                                             // 9322
}                                                                                                                      // 9323
                                                                                                                       // 9324
Collision.prototype = Object.create(Constraint.prototype);                                                             // 9325
Collision.prototype.constructor = Collision;                                                                           // 9326
                                                                                                                       // 9327
Collision.DEFAULT_OPTIONS = {                                                                                          // 9328
    restitution : 0.5,                                                                                                 // 9329
    drift : 0.5,                                                                                                       // 9330
    slop : 0                                                                                                           // 9331
};                                                                                                                     // 9332
                                                                                                                       // 9333
function _normalVelocity(particle1, particle2) {                                                                       // 9334
    return particle1.velocity.dot(particle2.velocity);                                                                 // 9335
}                                                                                                                      // 9336
                                                                                                                       // 9337
/*                                                                                                                     // 9338
 * Setter for options.                                                                                                 // 9339
 *                                                                                                                     // 9340
 * @method setOptions                                                                                                  // 9341
 * @param options {Objects}                                                                                            // 9342
 */                                                                                                                    // 9343
Collision.prototype.setOptions = function setOptions(options) {                                                        // 9344
    for (var key in options) this.options[key] = options[key];                                                         // 9345
};                                                                                                                     // 9346
                                                                                                                       // 9347
/**                                                                                                                    // 9348
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9349
 *                                                                                                                     // 9350
 * @method applyConstraint                                                                                             // 9351
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9352
 * @param source {Body}         The source of the constraint                                                           // 9353
 * @param dt {Number}           Delta time                                                                             // 9354
 */                                                                                                                    // 9355
Collision.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                  // 9356
    if (source === undefined) return;                                                                                  // 9357
                                                                                                                       // 9358
    var v1 = source.velocity;                                                                                          // 9359
    var p1 = source.position;                                                                                          // 9360
    var w1 = source.inverseMass;                                                                                       // 9361
    var r1 = source.radius;                                                                                            // 9362
                                                                                                                       // 9363
    var options = this.options;                                                                                        // 9364
    var drift = options.drift;                                                                                         // 9365
    var slop = -options.slop;                                                                                          // 9366
    var restitution = options.restitution;                                                                             // 9367
                                                                                                                       // 9368
    var n     = this.normal;                                                                                           // 9369
    var pDiff = this.pDiff;                                                                                            // 9370
    var vDiff = this.vDiff;                                                                                            // 9371
    var impulse1 = this.impulse1;                                                                                      // 9372
    var impulse2 = this.impulse2;                                                                                      // 9373
                                                                                                                       // 9374
    for (var i = 0; i < targets.length; i++) {                                                                         // 9375
        var target = targets[i];                                                                                       // 9376
                                                                                                                       // 9377
        if (target === source) continue;                                                                               // 9378
                                                                                                                       // 9379
        var v2 = target.velocity;                                                                                      // 9380
        var p2 = target.position;                                                                                      // 9381
        var w2 = target.inverseMass;                                                                                   // 9382
        var r2 = target.radius;                                                                                        // 9383
                                                                                                                       // 9384
        pDiff.set(p2.sub(p1));                                                                                         // 9385
        vDiff.set(v2.sub(v1));                                                                                         // 9386
                                                                                                                       // 9387
        var dist    = pDiff.norm();                                                                                    // 9388
        var overlap = dist - (r1 + r2);                                                                                // 9389
        var effMass = 1/(w1 + w2);                                                                                     // 9390
        var gamma   = 0;                                                                                               // 9391
                                                                                                                       // 9392
        if (overlap < 0) {                                                                                             // 9393
                                                                                                                       // 9394
            n.set(pDiff.normalize());                                                                                  // 9395
                                                                                                                       // 9396
            if (this._eventOutput) {                                                                                   // 9397
                var collisionData = {                                                                                  // 9398
                    target  : target,                                                                                  // 9399
                    source  : source,                                                                                  // 9400
                    overlap : overlap,                                                                                 // 9401
                    normal  : n                                                                                        // 9402
                };                                                                                                     // 9403
                                                                                                                       // 9404
                this._eventOutput.emit('preCollision', collisionData);                                                 // 9405
                this._eventOutput.emit('collision', collisionData);                                                    // 9406
            }                                                                                                          // 9407
                                                                                                                       // 9408
            var lambda = (overlap <= slop)                                                                             // 9409
                ? ((1 + restitution) * n.dot(vDiff) + drift/dt * (overlap - slop)) / (gamma + dt/effMass)              // 9410
                : ((1 + restitution) * n.dot(vDiff)) / (gamma + dt/effMass);                                           // 9411
                                                                                                                       // 9412
            n.mult(dt*lambda).put(impulse1);                                                                           // 9413
            impulse1.mult(-1).put(impulse2);                                                                           // 9414
                                                                                                                       // 9415
            source.applyImpulse(impulse1);                                                                             // 9416
            target.applyImpulse(impulse2);                                                                             // 9417
                                                                                                                       // 9418
            //source.setPosition(p1.add(n.mult(overlap/2)));                                                           // 9419
            //target.setPosition(p2.sub(n.mult(overlap/2)));                                                           // 9420
                                                                                                                       // 9421
            if (this._eventOutput) this._eventOutput.emit('postCollision', collisionData);                             // 9422
                                                                                                                       // 9423
        }                                                                                                              // 9424
    }                                                                                                                  // 9425
};                                                                                                                     // 9426
                                                                                                                       // 9427
module.exports = Collision;                                                                                            // 9428
},{"../../math/Vector":41,"./Constraint":55}],55:[function(_dereq_,module,exports){                                    // 9429
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9430
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9431
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9432
 *                                                                                                                     // 9433
 * Owner: david@famo.us                                                                                                // 9434
 * @license MPL 2.0                                                                                                    // 9435
 * @copyright Famous Industries, Inc. 2014                                                                             // 9436
 */                                                                                                                    // 9437
                                                                                                                       // 9438
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 9439
                                                                                                                       // 9440
/**                                                                                                                    // 9441
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9442
 *                                                                                                                     // 9443
 *  @class Constraint                                                                                                  // 9444
 *  @constructor                                                                                                       // 9445
 *  @uses EventHandler                                                                                                 // 9446
 *  @param options {Object}                                                                                            // 9447
 */                                                                                                                    // 9448
function Constraint() {                                                                                                // 9449
    this.options = this.options || {};                                                                                 // 9450
    this._eventOutput = new EventHandler();                                                                            // 9451
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9452
}                                                                                                                      // 9453
                                                                                                                       // 9454
/*                                                                                                                     // 9455
 * Setter for options.                                                                                                 // 9456
 *                                                                                                                     // 9457
 * @method setOptions                                                                                                  // 9458
 * @param options {Objects}                                                                                            // 9459
 */                                                                                                                    // 9460
Constraint.prototype.setOptions = function setOptions(options) {                                                       // 9461
    this._eventOutput.emit('change', options);                                                                         // 9462
};                                                                                                                     // 9463
                                                                                                                       // 9464
/**                                                                                                                    // 9465
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9466
 *                                                                                                                     // 9467
 * @method applyConstraint                                                                                             // 9468
 */                                                                                                                    // 9469
Constraint.prototype.applyConstraint = function applyConstraint() {};                                                  // 9470
                                                                                                                       // 9471
/**                                                                                                                    // 9472
 * Getter for energy                                                                                                   // 9473
 *                                                                                                                     // 9474
 * @method getEnergy                                                                                                   // 9475
 * @return energy {Number}                                                                                             // 9476
 */                                                                                                                    // 9477
Constraint.prototype.getEnergy = function getEnergy() {                                                                // 9478
    return 0.0;                                                                                                        // 9479
};                                                                                                                     // 9480
                                                                                                                       // 9481
module.exports = Constraint;                                                                                           // 9482
},{"../../core/EventHandler":7}],56:[function(_dereq_,module,exports){                                                 // 9483
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9484
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9485
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9486
 *                                                                                                                     // 9487
 * Owner: david@famo.us                                                                                                // 9488
 * @license MPL 2.0                                                                                                    // 9489
 * @copyright Famous Industries, Inc. 2014                                                                             // 9490
 */                                                                                                                    // 9491
                                                                                                                       // 9492
var Constraint = _dereq_('./Constraint');                                                                              // 9493
var Vector = _dereq_('../../math/Vector');                                                                             // 9494
                                                                                                                       // 9495
/**                                                                                                                    // 9496
 *  A constraint that keeps a physics body on a given implicit curve                                                   // 9497
 *    regardless of other physical forces are applied to it.                                                           // 9498
 *                                                                                                                     // 9499
 *    A curve constraint is two surface constraints in disguise, as a curve is                                         // 9500
 *    the intersection of two surfaces, and is essentially constrained to both                                         // 9501
 *                                                                                                                     // 9502
 *  @class Curve                                                                                                       // 9503
 *  @constructor                                                                                                       // 9504
 *  @extends Constraint                                                                                                // 9505
 *  @param {Options} [options] An object of configurable options.                                                      // 9506
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y - r*r } corresponds to a circle of radius r pixels
 *  @param {Function} [options.plane] An implicitly defined second surface that the body is constrained to             // 9508
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated                          // 9509
 *  @param {Number} [options.number] The damping-like reaction when the constraint is violated                         // 9510
 */                                                                                                                    // 9511
function Curve(options) {                                                                                              // 9512
    this.options = Object.create(Curve.DEFAULT_OPTIONS);                                                               // 9513
    if (options) this.setOptions(options);                                                                             // 9514
                                                                                                                       // 9515
    //registers                                                                                                        // 9516
    this.J = new Vector();                                                                                             // 9517
    this.impulse = new Vector();                                                                                       // 9518
                                                                                                                       // 9519
    Constraint.call(this);                                                                                             // 9520
}                                                                                                                      // 9521
                                                                                                                       // 9522
Curve.prototype = Object.create(Constraint.prototype);                                                                 // 9523
Curve.prototype.constructor = Curve;                                                                                   // 9524
                                                                                                                       // 9525
/** @const */ var epsilon = 1e-7;                                                                                      // 9526
/** @const */ var pi = Math.PI;                                                                                        // 9527
                                                                                                                       // 9528
Curve.DEFAULT_OPTIONS = {                                                                                              // 9529
    equation  : function(x,y,z) {                                                                                      // 9530
        return 0;                                                                                                      // 9531
    },                                                                                                                 // 9532
    plane : function(x,y,z) {                                                                                          // 9533
        return z;                                                                                                      // 9534
    },                                                                                                                 // 9535
    period : 0,                                                                                                        // 9536
    dampingRatio : 0                                                                                                   // 9537
};                                                                                                                     // 9538
                                                                                                                       // 9539
/**                                                                                                                    // 9540
 * Basic options setter                                                                                                // 9541
 *                                                                                                                     // 9542
 * @method setOptions                                                                                                  // 9543
 * @param options {Objects}                                                                                            // 9544
 */                                                                                                                    // 9545
Curve.prototype.setOptions = function setOptions(options) {                                                            // 9546
    for (var key in options) this.options[key] = options[key];                                                         // 9547
};                                                                                                                     // 9548
                                                                                                                       // 9549
/**                                                                                                                    // 9550
 * Adds a curve impulse to a physics body.                                                                             // 9551
 *                                                                                                                     // 9552
 * @method applyConstraint                                                                                             // 9553
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 9554
 * @param source {Body} Not applicable                                                                                 // 9555
 * @param dt {Number} Delta time                                                                                       // 9556
 */                                                                                                                    // 9557
Curve.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 9558
    var options = this.options;                                                                                        // 9559
    var impulse = this.impulse;                                                                                        // 9560
    var J = this.J;                                                                                                    // 9561
                                                                                                                       // 9562
    var f = options.equation;                                                                                          // 9563
    var g = options.plane;                                                                                             // 9564
    var dampingRatio = options.dampingRatio;                                                                           // 9565
    var period = options.period;                                                                                       // 9566
                                                                                                                       // 9567
    for (var i = 0; i < targets.length; i++) {                                                                         // 9568
        var body = targets[i];                                                                                         // 9569
                                                                                                                       // 9570
        var v = body.velocity;                                                                                         // 9571
        var p = body.position;                                                                                         // 9572
        var m = body.mass;                                                                                             // 9573
                                                                                                                       // 9574
        var gamma;                                                                                                     // 9575
        var beta;                                                                                                      // 9576
                                                                                                                       // 9577
        if (period === 0) {                                                                                            // 9578
            gamma = 0;                                                                                                 // 9579
            beta = 1;                                                                                                  // 9580
        }                                                                                                              // 9581
        else {                                                                                                         // 9582
            var c = 4 * m * pi * dampingRatio / period;                                                                // 9583
            var k = 4 * m * pi * pi / (period * period);                                                               // 9584
                                                                                                                       // 9585
            gamma = 1 / (c + dt*k);                                                                                    // 9586
            beta  = dt*k / (c + dt*k);                                                                                 // 9587
        }                                                                                                              // 9588
                                                                                                                       // 9589
        var x = p.x;                                                                                                   // 9590
        var y = p.y;                                                                                                   // 9591
        var z = p.z;                                                                                                   // 9592
                                                                                                                       // 9593
        var f0  = f(x, y, z);                                                                                          // 9594
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 9595
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 9596
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 9597
                                                                                                                       // 9598
        var g0  = g(x, y, z);                                                                                          // 9599
        var dgx = (g(x + epsilon, y, z) - g0) / epsilon;                                                               // 9600
        var dgy = (g(x, y + epsilon, z) - g0) / epsilon;                                                               // 9601
        var dgz = (g(x, y, z + epsilon) - g0) / epsilon;                                                               // 9602
                                                                                                                       // 9603
        J.setXYZ(dfx + dgx, dfy + dgy, dfz + dgz);                                                                     // 9604
                                                                                                                       // 9605
        var antiDrift = beta/dt * (f0 + g0);                                                                           // 9606
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 9607
                                                                                                                       // 9608
        impulse.set(J.mult(dt*lambda));                                                                                // 9609
        body.applyImpulse(impulse);                                                                                    // 9610
    }                                                                                                                  // 9611
};                                                                                                                     // 9612
                                                                                                                       // 9613
module.exports = Curve;                                                                                                // 9614
},{"../../math/Vector":41,"./Constraint":55}],57:[function(_dereq_,module,exports){                                    // 9615
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9616
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9617
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9618
 *                                                                                                                     // 9619
 * Owner: david@famo.us                                                                                                // 9620
 * @license MPL 2.0                                                                                                    // 9621
 * @copyright Famous Industries, Inc. 2014                                                                             // 9622
 */                                                                                                                    // 9623
                                                                                                                       // 9624
var Constraint = _dereq_('./Constraint');                                                                              // 9625
var Vector = _dereq_('../../math/Vector');                                                                             // 9626
                                                                                                                       // 9627
/**                                                                                                                    // 9628
 *  A constraint that keeps a physics body a given distance away from a given                                          // 9629
 *  anchor, or another attached body.                                                                                  // 9630
 *                                                                                                                     // 9631
 *                                                                                                                     // 9632
 *  @class Distance                                                                                                    // 9633
 *  @constructor                                                                                                       // 9634
 *  @extends Constraint                                                                                                // 9635
 *  @param {Options} [options] An object of configurable options.                                                      // 9636
 *  @param {Array} [options.anchor] The location of the anchor                                                         // 9637
 *  @param {Number} [options.length] The amount of distance from the anchor the constraint should enforce              // 9638
 *  @param {Number} [options.minLength] The minimum distance before the constraint is activated. Use this property for a "rope" effect.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is broken.                           // 9640
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is broken.                    // 9641
 *                                                                                                                     // 9642
 */                                                                                                                    // 9643
function Distance(options) {                                                                                           // 9644
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9645
    if (options) this.setOptions(options);                                                                             // 9646
                                                                                                                       // 9647
    //registers                                                                                                        // 9648
    this.impulse  = new Vector();                                                                                      // 9649
    this.normal   = new Vector();                                                                                      // 9650
    this.diffP    = new Vector();                                                                                      // 9651
    this.diffV    = new Vector();                                                                                      // 9652
                                                                                                                       // 9653
    Constraint.call(this);                                                                                             // 9654
}                                                                                                                      // 9655
                                                                                                                       // 9656
Distance.prototype = Object.create(Constraint.prototype);                                                              // 9657
Distance.prototype.constructor = Distance;                                                                             // 9658
                                                                                                                       // 9659
Distance.DEFAULT_OPTIONS = {                                                                                           // 9660
    anchor : null,                                                                                                     // 9661
    length : 0,                                                                                                        // 9662
    minLength : 0,                                                                                                     // 9663
    period : 0,                                                                                                        // 9664
    dampingRatio : 0                                                                                                   // 9665
};                                                                                                                     // 9666
                                                                                                                       // 9667
/** @const */ var pi = Math.PI;                                                                                        // 9668
                                                                                                                       // 9669
/**                                                                                                                    // 9670
 * Basic options setter                                                                                                // 9671
 *                                                                                                                     // 9672
 * @method setOptions                                                                                                  // 9673
 * @param options {Objects}                                                                                            // 9674
 */                                                                                                                    // 9675
Distance.prototype.setOptions = function setOptions(options) {                                                         // 9676
    if (options.anchor) {                                                                                              // 9677
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9678
        if (options.anchor   instanceof Vector)  this.options.anchor = options.anchor;                                 // 9679
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9680
    }                                                                                                                  // 9681
    if (options.length !== undefined) this.options.length = options.length;                                            // 9682
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9683
    if (options.period !== undefined) this.options.period = options.period;                                            // 9684
    if (options.minLength !== undefined) this.options.minLength = options.minLength;                                   // 9685
};                                                                                                                     // 9686
                                                                                                                       // 9687
function _calcError(impulse, body) {                                                                                   // 9688
    return body.mass * impulse.norm();                                                                                 // 9689
}                                                                                                                      // 9690
                                                                                                                       // 9691
/**                                                                                                                    // 9692
 * Set the anchor position                                                                                             // 9693
 *                                                                                                                     // 9694
 * @method setOptions                                                                                                  // 9695
 * @param anchor {Array}                                                                                               // 9696
 */                                                                                                                    // 9697
Distance.prototype.setAnchor = function setAnchor(anchor) {                                                            // 9698
    if (!this.options.anchor) this.options.anchor = new Vector();                                                      // 9699
    this.options.anchor.set(anchor);                                                                                   // 9700
};                                                                                                                     // 9701
                                                                                                                       // 9702
/**                                                                                                                    // 9703
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9704
 *                                                                                                                     // 9705
 * @method applyConstraint                                                                                             // 9706
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9707
 * @param source {Body}         The source of the constraint                                                           // 9708
 * @param dt {Number}           Delta time                                                                             // 9709
 */                                                                                                                    // 9710
Distance.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                   // 9711
    var n        = this.normal;                                                                                        // 9712
    var diffP    = this.diffP;                                                                                         // 9713
    var diffV    = this.diffV;                                                                                         // 9714
    var impulse  = this.impulse;                                                                                       // 9715
    var options  = this.options;                                                                                       // 9716
                                                                                                                       // 9717
    var dampingRatio = options.dampingRatio;                                                                           // 9718
    var period       = options.period;                                                                                 // 9719
    var minLength    = options.minLength;                                                                              // 9720
                                                                                                                       // 9721
    var p2;                                                                                                            // 9722
    var w2;                                                                                                            // 9723
                                                                                                                       // 9724
    if (source) {                                                                                                      // 9725
        var v2 = source.velocity;                                                                                      // 9726
        p2 = source.position;                                                                                          // 9727
        w2 = source.inverseMass;                                                                                       // 9728
    }                                                                                                                  // 9729
    else {                                                                                                             // 9730
        p2 = this.options.anchor;                                                                                      // 9731
        w2 = 0;                                                                                                        // 9732
    }                                                                                                                  // 9733
                                                                                                                       // 9734
    var length = this.options.length;                                                                                  // 9735
                                                                                                                       // 9736
    for (var i = 0; i < targets.length; i++) {                                                                         // 9737
        var body = targets[i];                                                                                         // 9738
                                                                                                                       // 9739
        var v1 = body.velocity;                                                                                        // 9740
        var p1 = body.position;                                                                                        // 9741
        var w1 = body.inverseMass;                                                                                     // 9742
                                                                                                                       // 9743
        diffP.set(p1.sub(p2));                                                                                         // 9744
        n.set(diffP.normalize());                                                                                      // 9745
                                                                                                                       // 9746
        var dist = diffP.norm() - length;                                                                              // 9747
                                                                                                                       // 9748
        //rope effect                                                                                                  // 9749
        if (Math.abs(dist) < minLength) return;                                                                        // 9750
                                                                                                                       // 9751
        if (source) diffV.set(v1.sub(v2));                                                                             // 9752
        else diffV.set(v1);                                                                                            // 9753
                                                                                                                       // 9754
        var effMass = 1 / (w1 + w2);                                                                                   // 9755
        var gamma;                                                                                                     // 9756
        var beta;                                                                                                      // 9757
                                                                                                                       // 9758
        if (period === 0) {                                                                                            // 9759
            gamma = 0;                                                                                                 // 9760
            beta  = 1;                                                                                                 // 9761
        }                                                                                                              // 9762
        else {                                                                                                         // 9763
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9764
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9765
                                                                                                                       // 9766
            gamma = 1 / (c + dt*k);                                                                                    // 9767
            beta  = dt*k / (c + dt*k);                                                                                 // 9768
        }                                                                                                              // 9769
                                                                                                                       // 9770
        var antiDrift = beta/dt * dist;                                                                                // 9771
        var lambda    = -(n.dot(diffV) + antiDrift) / (gamma + dt/effMass);                                            // 9772
                                                                                                                       // 9773
        impulse.set(n.mult(dt*lambda));                                                                                // 9774
        body.applyImpulse(impulse);                                                                                    // 9775
                                                                                                                       // 9776
        if (source) source.applyImpulse(impulse.mult(-1));                                                             // 9777
    }                                                                                                                  // 9778
};                                                                                                                     // 9779
                                                                                                                       // 9780
module.exports = Distance;                                                                                             // 9781
},{"../../math/Vector":41,"./Constraint":55}],58:[function(_dereq_,module,exports){                                    // 9782
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9783
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9784
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9785
 *                                                                                                                     // 9786
 * Owner: david@famo.us                                                                                                // 9787
 * @license MPL 2.0                                                                                                    // 9788
 * @copyright Famous Industries, Inc. 2014                                                                             // 9789
 */                                                                                                                    // 9790
                                                                                                                       // 9791
var Constraint = _dereq_('./Constraint');                                                                              // 9792
var Vector = _dereq_('../../math/Vector');                                                                             // 9793
                                                                                                                       // 9794
/**                                                                                                                    // 9795
 *  A spring constraint is like a spring force, except that it is always                                               // 9796
 *    numerically stable (even for low periods), at the expense of introducing                                         // 9797
 *    damping (even with dampingRatio set to 0).                                                                       // 9798
 *                                                                                                                     // 9799
 *    Use this if you need fast spring-like behavior, e.g., snapping                                                   // 9800
 *                                                                                                                     // 9801
 *  @class Snap                                                                                                        // 9802
 *  @constructor                                                                                                       // 9803
 *  @extends Constraint                                                                                                // 9804
 *  @param {Options} [options] An object of configurable options.                                                      // 9805
 *  @param {Number} [options.period] The amount of time in milliseconds taken for one complete oscillation when there is no damping. Range : [150, Infinity]
 *  @param {Number} [options.dampingRatio] Additional damping of the spring. Range : [0, 1]. At 0 this spring will still be damped, at 1 the spring will be critically damped (the spring will never oscillate)
 *  @param {Number} [options.length] The rest length of the spring. Range: [0, Infinity].                              // 9808
 *  @param {Array} [options.anchor] The location of the spring's anchor, if not another physics body.                  // 9809
 *                                                                                                                     // 9810
 */                                                                                                                    // 9811
function Snap(options) {                                                                                               // 9812
    Constraint.call(this);                                                                                             // 9813
                                                                                                                       // 9814
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9815
    if (options) this.setOptions(options);                                                                             // 9816
                                                                                                                       // 9817
    //registers                                                                                                        // 9818
    this.pDiff  = new Vector();                                                                                        // 9819
    this.vDiff  = new Vector();                                                                                        // 9820
    this.impulse1 = new Vector();                                                                                      // 9821
    this.impulse2 = new Vector();                                                                                      // 9822
}                                                                                                                      // 9823
                                                                                                                       // 9824
Snap.prototype = Object.create(Constraint.prototype);                                                                  // 9825
Snap.prototype.constructor = Snap;                                                                                     // 9826
                                                                                                                       // 9827
Snap.DEFAULT_OPTIONS = {                                                                                               // 9828
    period : 300,                                                                                                      // 9829
    dampingRatio : 0.1,                                                                                                // 9830
    length : 0,                                                                                                        // 9831
    anchor : undefined                                                                                                 // 9832
};                                                                                                                     // 9833
                                                                                                                       // 9834
/** const */ var pi = Math.PI;                                                                                         // 9835
                                                                                                                       // 9836
/**                                                                                                                    // 9837
 * Basic options setter                                                                                                // 9838
 *                                                                                                                     // 9839
 * @method setOptions                                                                                                  // 9840
 * @param options {Objects} options                                                                                    // 9841
 */                                                                                                                    // 9842
Snap.prototype.setOptions = function setOptions(options) {                                                             // 9843
    if (options.anchor !== undefined) {                                                                                // 9844
        if (options.anchor   instanceof Vector) this.options.anchor = options.anchor;                                  // 9845
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9846
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9847
    }                                                                                                                  // 9848
    if (options.length !== undefined) this.options.length = options.length;                                            // 9849
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9850
    if (options.period !== undefined) this.options.period = options.period;                                            // 9851
    Constraint.prototype.setOptions.call(this, options);                                                               // 9852
};                                                                                                                     // 9853
                                                                                                                       // 9854
/**                                                                                                                    // 9855
 * Calculates energy of spring                                                                                         // 9856
 *                                                                                                                     // 9857
 * @method getEnergy                                                                                                   // 9858
 * @param targets {Body} target physics body                                                                           // 9859
 * @param source {Body} source physics body                                                                            // 9860
 * @return energy {Number}                                                                                             // 9861
 */                                                                                                                    // 9862
Snap.prototype.getEnergy = function getEnergy(targets, source) {                                                       // 9863
    var options     = this.options;                                                                                    // 9864
    var restLength  = options.length;                                                                                  // 9865
    var anchor      = options.anchor || source.position;                                                               // 9866
    var strength    = Math.pow(2 * pi / options.period, 2);                                                            // 9867
                                                                                                                       // 9868
    var energy = 0.0;                                                                                                  // 9869
    for (var i = 0; i < targets.length; i++){                                                                          // 9870
        var target = targets[i];                                                                                       // 9871
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 9872
        energy += 0.5 * strength * dist * dist;                                                                        // 9873
    }                                                                                                                  // 9874
    return energy;                                                                                                     // 9875
};                                                                                                                     // 9876
                                                                                                                       // 9877
/**                                                                                                                    // 9878
 * Adds a spring impulse to a physics body's velocity due to the constraint                                            // 9879
 *                                                                                                                     // 9880
 * @method applyConstraint                                                                                             // 9881
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9882
 * @param source {Body}         The source of the constraint                                                           // 9883
 * @param dt {Number}           Delta time                                                                             // 9884
 */                                                                                                                    // 9885
Snap.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 9886
    var options      = this.options;                                                                                   // 9887
    var pDiff        = this.pDiff;                                                                                     // 9888
    var vDiff        = this.vDiff;                                                                                     // 9889
    var impulse1     = this.impulse1;                                                                                  // 9890
    var impulse2     = this.impulse2;                                                                                  // 9891
    var length       = options.length;                                                                                 // 9892
    var anchor       = options.anchor || source.position;                                                              // 9893
    var period       = options.period;                                                                                 // 9894
    var dampingRatio = options.dampingRatio;                                                                           // 9895
                                                                                                                       // 9896
    for (var i = 0; i < targets.length ; i++) {                                                                        // 9897
        var target = targets[i];                                                                                       // 9898
                                                                                                                       // 9899
        var p1 = target.position;                                                                                      // 9900
        var v1 = target.velocity;                                                                                      // 9901
        var m1 = target.mass;                                                                                          // 9902
        var w1 = target.inverseMass;                                                                                   // 9903
                                                                                                                       // 9904
        pDiff.set(p1.sub(anchor));                                                                                     // 9905
        var dist = pDiff.norm() - length;                                                                              // 9906
        var effMass;                                                                                                   // 9907
                                                                                                                       // 9908
        if (source) {                                                                                                  // 9909
            var w2 = source.inverseMass;                                                                               // 9910
            var v2 = source.velocity;                                                                                  // 9911
            vDiff.set(v1.sub(v2));                                                                                     // 9912
            effMass = 1 / (w1 + w2);                                                                                   // 9913
        }                                                                                                              // 9914
        else {                                                                                                         // 9915
            vDiff.set(v1);                                                                                             // 9916
            effMass = m1;                                                                                              // 9917
        }                                                                                                              // 9918
                                                                                                                       // 9919
        var gamma;                                                                                                     // 9920
        var beta;                                                                                                      // 9921
                                                                                                                       // 9922
        if (this.options.period === 0) {                                                                               // 9923
            gamma = 0;                                                                                                 // 9924
            beta = 1;                                                                                                  // 9925
        }                                                                                                              // 9926
        else {                                                                                                         // 9927
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9928
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9929
                                                                                                                       // 9930
            beta  = dt * k / (c + dt * k);                                                                             // 9931
            gamma = 1 / (c + dt*k);                                                                                    // 9932
        }                                                                                                              // 9933
                                                                                                                       // 9934
        var antiDrift = beta/dt * dist;                                                                                // 9935
        pDiff.normalize(-antiDrift)                                                                                    // 9936
            .sub(vDiff)                                                                                                // 9937
            .mult(dt / (gamma + dt/effMass))                                                                           // 9938
            .put(impulse1);                                                                                            // 9939
                                                                                                                       // 9940
        // var n = new Vector();                                                                                       // 9941
        // n.set(pDiff.normalize());                                                                                   // 9942
        // var lambda = -(n.dot(vDiff) + antiDrift) / (gamma + dt/effMass);                                            // 9943
        // impulse2.set(n.mult(dt*lambda));                                                                            // 9944
                                                                                                                       // 9945
        target.applyImpulse(impulse1);                                                                                 // 9946
                                                                                                                       // 9947
        if (source) {                                                                                                  // 9948
            impulse1.mult(-1).put(impulse2);                                                                           // 9949
            source.applyImpulse(impulse2);                                                                             // 9950
        }                                                                                                              // 9951
    }                                                                                                                  // 9952
};                                                                                                                     // 9953
                                                                                                                       // 9954
module.exports = Snap;                                                                                                 // 9955
},{"../../math/Vector":41,"./Constraint":55}],59:[function(_dereq_,module,exports){                                    // 9956
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9957
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9958
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9959
 *                                                                                                                     // 9960
 * Owner: david@famo.us                                                                                                // 9961
 * @license MPL 2.0                                                                                                    // 9962
 * @copyright Famous Industries, Inc. 2014                                                                             // 9963
 */                                                                                                                    // 9964
                                                                                                                       // 9965
var Constraint = _dereq_('./Constraint');                                                                              // 9966
var Vector = _dereq_('../../math/Vector');                                                                             // 9967
                                                                                                                       // 9968
/**                                                                                                                    // 9969
 *  A constraint that keeps a physics body on a given implicit surface                                                 // 9970
 *    regardless of other physical forces are applied to it.                                                           // 9971
 *                                                                                                                     // 9972
 *  @class Surface                                                                                                     // 9973
 *  @constructor                                                                                                       // 9974
 *  @extends Constraint                                                                                                // 9975
 *  @param {Options} [options] An object of configurable options.                                                      // 9976
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y + z*z - r*r } corresponds to a sphere of radius r pixels.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated.                         // 9978
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is violated.                  // 9979
 */                                                                                                                    // 9980
function Surface(options) {                                                                                            // 9981
    this.options = Object.create(Surface.DEFAULT_OPTIONS);                                                             // 9982
    if (options) this.setOptions(options);                                                                             // 9983
                                                                                                                       // 9984
    this.J = new Vector();                                                                                             // 9985
    this.impulse  = new Vector();                                                                                      // 9986
                                                                                                                       // 9987
    Constraint.call(this);                                                                                             // 9988
}                                                                                                                      // 9989
                                                                                                                       // 9990
Surface.prototype = Object.create(Constraint.prototype);                                                               // 9991
Surface.prototype.constructor = Surface;                                                                               // 9992
                                                                                                                       // 9993
Surface.DEFAULT_OPTIONS = {                                                                                            // 9994
    equation : undefined,                                                                                              // 9995
    period : 0,                                                                                                        // 9996
    dampingRatio : 0                                                                                                   // 9997
};                                                                                                                     // 9998
                                                                                                                       // 9999
/** @const */ var epsilon = 1e-7;                                                                                      // 10000
/** @const */ var pi = Math.PI;                                                                                        // 10001
                                                                                                                       // 10002
/**                                                                                                                    // 10003
 * Basic options setter                                                                                                // 10004
 *                                                                                                                     // 10005
 * @method setOptions                                                                                                  // 10006
 * @param options {Objects}                                                                                            // 10007
 */                                                                                                                    // 10008
Surface.prototype.setOptions = function setOptions(options) {                                                          // 10009
    for (var key in options) this.options[key] = options[key];                                                         // 10010
};                                                                                                                     // 10011
                                                                                                                       // 10012
/**                                                                                                                    // 10013
 * Adds a surface impulse to a physics body.                                                                           // 10014
 *                                                                                                                     // 10015
 * @method applyConstraint                                                                                             // 10016
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 10017
 * @param source {Body} Not applicable                                                                                 // 10018
 * @param dt {Number} Delta time                                                                                       // 10019
 */                                                                                                                    // 10020
Surface.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                    // 10021
    var impulse = this.impulse;                                                                                        // 10022
    var J       = this.J;                                                                                              // 10023
    var options = this.options;                                                                                        // 10024
                                                                                                                       // 10025
    var f = options.equation;                                                                                          // 10026
    var dampingRatio = options.dampingRatio;                                                                           // 10027
    var period = options.period;                                                                                       // 10028
                                                                                                                       // 10029
    for (var i = 0; i < targets.length; i++) {                                                                         // 10030
        var particle = targets[i];                                                                                     // 10031
                                                                                                                       // 10032
        var v = particle.velocity;                                                                                     // 10033
        var p = particle.position;                                                                                     // 10034
        var m = particle.mass;                                                                                         // 10035
                                                                                                                       // 10036
        var gamma;                                                                                                     // 10037
        var beta;                                                                                                      // 10038
                                                                                                                       // 10039
        if (period === 0) {                                                                                            // 10040
            gamma = 0;                                                                                                 // 10041
            beta = 1;                                                                                                  // 10042
        }                                                                                                              // 10043
        else {                                                                                                         // 10044
            var c = 4 * m * pi * dampingRatio / period;                                                                // 10045
            var k = 4 * m * pi * pi / (period * period);                                                               // 10046
                                                                                                                       // 10047
            gamma = 1 / (c + dt*k);                                                                                    // 10048
            beta  = dt*k / (c + dt*k);                                                                                 // 10049
        }                                                                                                              // 10050
                                                                                                                       // 10051
        var x = p.x;                                                                                                   // 10052
        var y = p.y;                                                                                                   // 10053
        var z = p.z;                                                                                                   // 10054
                                                                                                                       // 10055
        var f0  = f(x, y, z);                                                                                          // 10056
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 10057
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 10058
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 10059
        J.setXYZ(dfx, dfy, dfz);                                                                                       // 10060
                                                                                                                       // 10061
        var antiDrift = beta/dt * f0;                                                                                  // 10062
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 10063
                                                                                                                       // 10064
        impulse.set(J.mult(dt*lambda));                                                                                // 10065
        particle.applyImpulse(impulse);                                                                                // 10066
    }                                                                                                                  // 10067
};                                                                                                                     // 10068
                                                                                                                       // 10069
module.exports = Surface;                                                                                              // 10070
},{"../../math/Vector":41,"./Constraint":55}],60:[function(_dereq_,module,exports){                                    // 10071
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10072
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10073
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10074
 *                                                                                                                     // 10075
 * Owner: david@famo.us                                                                                                // 10076
 * @license MPL 2.0                                                                                                    // 10077
 * @copyright Famous Industries, Inc. 2014                                                                             // 10078
 */                                                                                                                    // 10079
                                                                                                                       // 10080
var Constraint = _dereq_('./Constraint');                                                                              // 10081
var Vector = _dereq_('../../math/Vector');                                                                             // 10082
                                                                                                                       // 10083
/**                                                                                                                    // 10084
 *  A wall describes an infinite two-dimensional plane that physics bodies                                             // 10085
 *    can collide with. To define a wall, you must give it a distance (from                                            // 10086
 *    the center of the physics engine's origin, and a normal defining the plane                                       // 10087
 *    of the wall.                                                                                                     // 10088
 *                                                                                                                     // 10089
 *    (wall)                                                                                                           // 10090
 *      |                                                                                                              // 10091
 *      | (normal)     (origin)                                                                                        // 10092
 *      | --->            *                                                                                            // 10093
 *      |                                                                                                              // 10094
 *      |    (distance)                                                                                                // 10095
 *      ...................                                                                                            // 10096
 *            (100px)                                                                                                  // 10097
 *                                                                                                                     // 10098
 *      e.g., Wall({normal : [1,0,0], distance : 100})                                                                 // 10099
 *      would be a wall 100 pixels to the left, whose normal points right                                              // 10100
 *                                                                                                                     // 10101
 *  @class Wall                                                                                                        // 10102
 *  @constructor                                                                                                       // 10103
 *  @extends Constraint                                                                                                // 10104
 *  @param {Options} [options] An object of configurable options.                                                      // 10105
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic). Range : [0, 1]
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.          // 10108
 *  @param {Array} [options.normal] The normal direction to the wall.                                                  // 10109
 *  @param {Number} [options.distance] The distance from the origin that the wall is placed.                           // 10110
 *  @param {onContact} [options.onContact] How to handle collision against the wall.                                   // 10111
 *                                                                                                                     // 10112
 */                                                                                                                    // 10113
function Wall(options) {                                                                                               // 10114
    this.options = Object.create(Wall.DEFAULT_OPTIONS);                                                                // 10115
    if (options) this.setOptions(options);                                                                             // 10116
                                                                                                                       // 10117
    //registers                                                                                                        // 10118
    this.diff = new Vector();                                                                                          // 10119
    this.impulse = new Vector();                                                                                       // 10120
                                                                                                                       // 10121
    Constraint.call(this);                                                                                             // 10122
}                                                                                                                      // 10123
                                                                                                                       // 10124
Wall.prototype = Object.create(Constraint.prototype);                                                                  // 10125
Wall.prototype.constructor = Wall;                                                                                     // 10126
                                                                                                                       // 10127
/**                                                                                                                    // 10128
 * @property Wall.ON_CONTACT                                                                                           // 10129
 * @type Object                                                                                                        // 10130
 * @protected                                                                                                          // 10131
 * @static                                                                                                             // 10132
 */                                                                                                                    // 10133
Wall.ON_CONTACT = {                                                                                                    // 10134
                                                                                                                       // 10135
    /**                                                                                                                // 10136
     * Physical bodies bounce off the wall                                                                             // 10137
     * @attribute REFLECT                                                                                              // 10138
     */                                                                                                                // 10139
    REFLECT : 0,                                                                                                       // 10140
                                                                                                                       // 10141
    /**                                                                                                                // 10142
     * Physical bodies are unaffected. Usecase is to fire events on contact.                                           // 10143
     * @attribute SILENT                                                                                               // 10144
     */                                                                                                                // 10145
    SILENT : 1                                                                                                         // 10146
};                                                                                                                     // 10147
                                                                                                                       // 10148
Wall.DEFAULT_OPTIONS = {                                                                                               // 10149
    restitution : 0.5,                                                                                                 // 10150
    drift : 0.5,                                                                                                       // 10151
    slop : 0,                                                                                                          // 10152
    normal : [1, 0, 0],                                                                                                // 10153
    distance : 0,                                                                                                      // 10154
    onContact : Wall.ON_CONTACT.REFLECT                                                                                // 10155
};                                                                                                                     // 10156
                                                                                                                       // 10157
/*                                                                                                                     // 10158
 * Setter for options.                                                                                                 // 10159
 *                                                                                                                     // 10160
 * @method setOptions                                                                                                  // 10161
 * @param options {Objects}                                                                                            // 10162
 */                                                                                                                    // 10163
Wall.prototype.setOptions = function setOptions(options) {                                                             // 10164
    if (options.normal !== undefined) {                                                                                // 10165
        if (options.normal instanceof Vector) this.options.normal = options.normal.clone();                            // 10166
        if (options.normal instanceof Array)  this.options.normal = new Vector(options.normal);                        // 10167
    }                                                                                                                  // 10168
    if (options.restitution !== undefined) this.options.restitution = options.restitution;                             // 10169
    if (options.drift !== undefined) this.options.drift = options.drift;                                               // 10170
    if (options.slop !== undefined) this.options.slop = options.slop;                                                  // 10171
    if (options.distance !== undefined) this.options.distance = options.distance;                                      // 10172
    if (options.onContact !== undefined) this.options.onContact = options.onContact;                                   // 10173
};                                                                                                                     // 10174
                                                                                                                       // 10175
function _getNormalVelocity(n, v) {                                                                                    // 10176
    return v.dot(n);                                                                                                   // 10177
}                                                                                                                      // 10178
                                                                                                                       // 10179
function _getDistanceFromOrigin(p) {                                                                                   // 10180
    var n = this.options.normal;                                                                                       // 10181
    var d = this.options.distance;                                                                                     // 10182
    return p.dot(n) + d;                                                                                               // 10183
}                                                                                                                      // 10184
                                                                                                                       // 10185
function _onEnter(particle, overlap, dt) {                                                                             // 10186
    var p = particle.position;                                                                                         // 10187
    var v = particle.velocity;                                                                                         // 10188
    var m = particle.mass;                                                                                             // 10189
    var n = this.options.normal;                                                                                       // 10190
    var action = this.options.onContact;                                                                               // 10191
    var restitution = this.options.restitution;                                                                        // 10192
    var impulse = this.impulse;                                                                                        // 10193
                                                                                                                       // 10194
    var drift = this.options.drift;                                                                                    // 10195
    var slop = -this.options.slop;                                                                                     // 10196
    var gamma = 0;                                                                                                     // 10197
                                                                                                                       // 10198
    if (this._eventOutput) {                                                                                           // 10199
        var data = {particle : particle, wall : this, overlap : overlap, normal : n};                                  // 10200
        this._eventOutput.emit('preCollision', data);                                                                  // 10201
        this._eventOutput.emit('collision', data);                                                                     // 10202
    }                                                                                                                  // 10203
                                                                                                                       // 10204
    switch (action) {                                                                                                  // 10205
        case Wall.ON_CONTACT.REFLECT:                                                                                  // 10206
            var lambda = (overlap < slop)                                                                              // 10207
                ? -((1 + restitution) * n.dot(v) + drift / dt * (overlap - slop)) / (m * dt + gamma)                   // 10208
                : -((1 + restitution) * n.dot(v)) / (m * dt + gamma);                                                  // 10209
                                                                                                                       // 10210
            impulse.set(n.mult(dt * lambda));                                                                          // 10211
            particle.applyImpulse(impulse);                                                                            // 10212
            particle.setPosition(p.add(n.mult(-overlap)));                                                             // 10213
            break;                                                                                                     // 10214
    }                                                                                                                  // 10215
                                                                                                                       // 10216
    if (this._eventOutput) this._eventOutput.emit('postCollision', data);                                              // 10217
}                                                                                                                      // 10218
                                                                                                                       // 10219
function _onExit(particle, overlap, dt) {                                                                              // 10220
    var action = this.options.onContact;                                                                               // 10221
    var p = particle.position;                                                                                         // 10222
    var n = this.options.normal;                                                                                       // 10223
                                                                                                                       // 10224
    if (action === Wall.ON_CONTACT.REFLECT) {                                                                          // 10225
        particle.setPosition(p.add(n.mult(-overlap)));                                                                 // 10226
    }                                                                                                                  // 10227
}                                                                                                                      // 10228
                                                                                                                       // 10229
/**                                                                                                                    // 10230
 * Adds an impulse to a physics body's velocity due to the wall constraint                                             // 10231
 *                                                                                                                     // 10232
 * @method applyConstraint                                                                                             // 10233
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10234
 * @param source {Body}         The source of the constraint                                                           // 10235
 * @param dt {Number}           Delta time                                                                             // 10236
 */                                                                                                                    // 10237
Wall.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 10238
    var n = this.options.normal;                                                                                       // 10239
                                                                                                                       // 10240
    for (var i = 0; i < targets.length; i++) {                                                                         // 10241
        var particle = targets[i];                                                                                     // 10242
        var p = particle.position;                                                                                     // 10243
        var v = particle.velocity;                                                                                     // 10244
        var r = particle.radius || 0;                                                                                  // 10245
                                                                                                                       // 10246
        var overlap = _getDistanceFromOrigin.call(this, p.add(n.mult(-r)));                                            // 10247
        var nv = _getNormalVelocity.call(this, n, v);                                                                  // 10248
                                                                                                                       // 10249
        if (overlap <= 0) {                                                                                            // 10250
            if (nv < 0) _onEnter.call(this, particle, overlap, dt);                                                    // 10251
            else _onExit.call(this, particle, overlap, dt);                                                            // 10252
        }                                                                                                              // 10253
    }                                                                                                                  // 10254
};                                                                                                                     // 10255
                                                                                                                       // 10256
module.exports = Wall;                                                                                                 // 10257
},{"../../math/Vector":41,"./Constraint":55}],61:[function(_dereq_,module,exports){                                    // 10258
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10259
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10260
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10261
 *                                                                                                                     // 10262
 * Owner: david@famo.us                                                                                                // 10263
 * @license MPL 2.0                                                                                                    // 10264
 * @copyright Famous Industries, Inc. 2014                                                                             // 10265
 */                                                                                                                    // 10266
                                                                                                                       // 10267
var Constraint = _dereq_('./Constraint');                                                                              // 10268
var Wall = _dereq_('./Wall');                                                                                          // 10269
var Vector = _dereq_('../../math/Vector');                                                                             // 10270
                                                                                                                       // 10271
/**                                                                                                                    // 10272
 *  Walls combines one or more Wall primitives and exposes a simple API to                                             // 10273
 *  interact with several walls at once. A common use case would be to set up                                          // 10274
 *  a bounding box for a physics body, that would collide with each side.                                              // 10275
 *                                                                                                                     // 10276
 *  @class Walls                                                                                                       // 10277
 *  @constructor                                                                                                       // 10278
 *  @extends Constraint                                                                                                // 10279
 *  @uses Wall                                                                                                         // 10280
 *  @param {Options} [options] An object of configurable options.                                                      // 10281
 *  @param {Array} [options.sides] An array of sides e.g., [Walls.LEFT, Walls.TOP]                                     // 10282
 *  @param {Array} [options.size] The size of the bounding box of the walls.                                           // 10283
 *  @param {Array} [options.origin] The center of the wall relative to the size.                                       // 10284
 *  @param {Array} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Array} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.           // 10286
 *  @param {Array} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) The energy ratio lost in a collision (0 = stick, 1 = elastic)
 *  @param {Array} [options.onContact] How to handle collision against the wall.                                       // 10288
 */                                                                                                                    // 10289
function Walls(options) {                                                                                              // 10290
    this.options = Object.create(Walls.DEFAULT_OPTIONS);                                                               // 10291
    if (options) this.setOptions(options);                                                                             // 10292
    _createComponents.call(this, options.sides || this.options.sides);                                                 // 10293
                                                                                                                       // 10294
    Constraint.call(this);                                                                                             // 10295
}                                                                                                                      // 10296
                                                                                                                       // 10297
Walls.prototype = Object.create(Constraint.prototype);                                                                 // 10298
Walls.prototype.constructor = Walls;                                                                                   // 10299
/**                                                                                                                    // 10300
 * @property Walls.ON_CONTACT                                                                                          // 10301
 * @type Object                                                                                                        // 10302
 * @extends Wall.ON_CONTACT                                                                                            // 10303
 * @static                                                                                                             // 10304
 */                                                                                                                    // 10305
Walls.ON_CONTACT = Wall.ON_CONTACT;                                                                                    // 10306
                                                                                                                       // 10307
/**                                                                                                                    // 10308
 * An enumeration of common types of walls                                                                             // 10309
 *    LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK                                                                            // 10310
 *    TWO_DIMENSIONAL, THREE_DIMENSIONAL                                                                               // 10311
 *                                                                                                                     // 10312
 * @property Walls.SIDES                                                                                               // 10313
 * @type Object                                                                                                        // 10314
 * @final                                                                                                              // 10315
 * @static                                                                                                             // 10316
 */                                                                                                                    // 10317
Walls.SIDES = {                                                                                                        // 10318
    LEFT   : 0,                                                                                                        // 10319
    RIGHT  : 1,                                                                                                        // 10320
    TOP    : 2,                                                                                                        // 10321
    BOTTOM : 3,                                                                                                        // 10322
    FRONT  : 4,                                                                                                        // 10323
    BACK   : 5,                                                                                                        // 10324
    TWO_DIMENSIONAL : [0, 1, 2, 3],                                                                                    // 10325
    THREE_DIMENSIONAL : [0, 1, 2, 3, 4, 5]                                                                             // 10326
};                                                                                                                     // 10327
                                                                                                                       // 10328
Walls.DEFAULT_OPTIONS = {                                                                                              // 10329
    sides : Walls.SIDES.TWO_DIMENSIONAL,                                                                               // 10330
    size : [window.innerWidth, window.innerHeight, 0],                                                                 // 10331
    origin : [.5, .5, .5],                                                                                             // 10332
    drift : 0.5,                                                                                                       // 10333
    slop : 0,                                                                                                          // 10334
    restitution : 0.5,                                                                                                 // 10335
    onContact : Walls.ON_CONTACT.REFLECT                                                                               // 10336
};                                                                                                                     // 10337
                                                                                                                       // 10338
var _SIDE_NORMALS = {                                                                                                  // 10339
    0 : new Vector(1, 0, 0),                                                                                           // 10340
    1 : new Vector(-1, 0, 0),                                                                                          // 10341
    2 : new Vector(0, 1, 0),                                                                                           // 10342
    3 : new Vector(0,-1, 0),                                                                                           // 10343
    4 : new Vector(0, 0, 1),                                                                                           // 10344
    5 : new Vector(0, 0,-1)                                                                                            // 10345
};                                                                                                                     // 10346
                                                                                                                       // 10347
function _getDistance(side, size, origin) {                                                                            // 10348
    var distance;                                                                                                      // 10349
    var SIDES = Walls.SIDES;                                                                                           // 10350
    switch (parseInt(side)) {                                                                                          // 10351
        case SIDES.LEFT:                                                                                               // 10352
            distance = size[0] * origin[0];                                                                            // 10353
            break;                                                                                                     // 10354
        case SIDES.TOP:                                                                                                // 10355
            distance = size[1] * origin[1];                                                                            // 10356
            break;                                                                                                     // 10357
        case SIDES.FRONT:                                                                                              // 10358
            distance = size[2] * origin[2];                                                                            // 10359
            break;                                                                                                     // 10360
        case SIDES.RIGHT:                                                                                              // 10361
            distance = size[0] * (1 - origin[0]);                                                                      // 10362
            break;                                                                                                     // 10363
        case SIDES.BOTTOM:                                                                                             // 10364
            distance = size[1] * (1 - origin[1]);                                                                      // 10365
            break;                                                                                                     // 10366
        case SIDES.BACK:                                                                                               // 10367
            distance = size[2] * (1 - origin[2]);                                                                      // 10368
            break;                                                                                                     // 10369
    }                                                                                                                  // 10370
    return distance;                                                                                                   // 10371
}                                                                                                                      // 10372
                                                                                                                       // 10373
/*                                                                                                                     // 10374
 * Setter for options.                                                                                                 // 10375
 *                                                                                                                     // 10376
 * @method setOptions                                                                                                  // 10377
 * @param options {Objects}                                                                                            // 10378
 */                                                                                                                    // 10379
Walls.prototype.setOptions = function setOptions(options) {                                                            // 10380
    var resizeFlag = false;                                                                                            // 10381
    if (options.restitution !== undefined) _setOptionsForEach.call(this, {restitution : options.restitution});         // 10382
    if (options.drift !== undefined) _setOptionsForEach.call(this, {drift : options.drift});                           // 10383
    if (options.slop !== undefined) _setOptionsForEach.call(this, {slop : options.slop});                              // 10384
    if (options.onContact !== undefined) _setOptionsForEach.call(this, {onContact : options.onContact});               // 10385
    if (options.size !== undefined) resizeFlag = true;                                                                 // 10386
    if (options.sides !== undefined) this.options.sides = options.sides;                                               // 10387
    if (options.origin !== undefined) resizeFlag = true;                                                               // 10388
    if (resizeFlag) this.setSize(options.size, options.origin);                                                        // 10389
};                                                                                                                     // 10390
                                                                                                                       // 10391
function _createComponents(sides) {                                                                                    // 10392
    this.components = {};                                                                                              // 10393
    var components = this.components;                                                                                  // 10394
                                                                                                                       // 10395
    for (var i = 0; i < sides.length; i++) {                                                                           // 10396
        var side = sides[i];                                                                                           // 10397
        components[i] = new Wall({                                                                                     // 10398
            normal   : _SIDE_NORMALS[side].clone(),                                                                    // 10399
            distance : _getDistance(side, this.options.size, this.options.origin)                                      // 10400
        });                                                                                                            // 10401
    }                                                                                                                  // 10402
}                                                                                                                      // 10403
                                                                                                                       // 10404
/*                                                                                                                     // 10405
 * Setter for size.                                                                                                    // 10406
 *                                                                                                                     // 10407
 * @method setOptions                                                                                                  // 10408
 * @param options {Objects}                                                                                            // 10409
 */                                                                                                                    // 10410
Walls.prototype.setSize = function setSize(size, origin) {                                                             // 10411
    origin = origin || this.options.origin;                                                                            // 10412
    if (origin.length < 3) origin[2] = 0.5;                                                                            // 10413
                                                                                                                       // 10414
    this.forEach(function(wall, side) {                                                                                // 10415
        var d = _getDistance(side, size, origin);                                                                      // 10416
        wall.setOptions({distance : d});                                                                               // 10417
    });                                                                                                                // 10418
                                                                                                                       // 10419
    this.options.size   = size;                                                                                        // 10420
    this.options.origin = origin;                                                                                      // 10421
};                                                                                                                     // 10422
                                                                                                                       // 10423
function _setOptionsForEach(options) {                                                                                 // 10424
    this.forEach(function(wall) {                                                                                      // 10425
        wall.setOptions(options);                                                                                      // 10426
    });                                                                                                                // 10427
    for (var key in options) this.options[key] = options[key];                                                         // 10428
}                                                                                                                      // 10429
                                                                                                                       // 10430
/**                                                                                                                    // 10431
 * Adds an impulse to a physics body's velocity due to the walls constraint                                            // 10432
 *                                                                                                                     // 10433
 * @method applyConstraint                                                                                             // 10434
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10435
 * @param source {Body}         The source of the constraint                                                           // 10436
 * @param dt {Number}           Delta time                                                                             // 10437
 */                                                                                                                    // 10438
Walls.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 10439
    this.forEach(function(wall) {                                                                                      // 10440
        wall.applyConstraint(targets, source, dt);                                                                     // 10441
    });                                                                                                                // 10442
};                                                                                                                     // 10443
                                                                                                                       // 10444
/**                                                                                                                    // 10445
 * Apply a method to each wall making up the walls                                                                     // 10446
 *                                                                                                                     // 10447
 * @method applyConstraint                                                                                             // 10448
 * @param fn {Function}  Function that takes in a wall as its first parameter                                          // 10449
 */                                                                                                                    // 10450
Walls.prototype.forEach = function forEach(fn) {                                                                       // 10451
    var sides = this.options.sides;                                                                                    // 10452
    for (var key in this.sides) fn(sides[key], key);                                                                   // 10453
};                                                                                                                     // 10454
                                                                                                                       // 10455
/**                                                                                                                    // 10456
 * Rotates the walls by an angle in the XY-plane                                                                       // 10457
 *                                                                                                                     // 10458
 * @method applyConstraint                                                                                             // 10459
 * @param angle {Function}                                                                                             // 10460
 */                                                                                                                    // 10461
Walls.prototype.rotateZ = function rotateZ(angle) {                                                                    // 10462
    this.forEach(function(wall) {                                                                                      // 10463
        var n = wall.options.normal;                                                                                   // 10464
        n.rotateZ(angle).put(n);                                                                                       // 10465
    });                                                                                                                // 10466
};                                                                                                                     // 10467
                                                                                                                       // 10468
/**                                                                                                                    // 10469
 * Rotates the walls by an angle in the YZ-plane                                                                       // 10470
 *                                                                                                                     // 10471
 * @method applyConstraint                                                                                             // 10472
 * @param angle {Function}                                                                                             // 10473
 */                                                                                                                    // 10474
Walls.prototype.rotateX = function rotateX(angle) {                                                                    // 10475
    this.forEach(function(wall) {                                                                                      // 10476
        var n = wall.options.normal;                                                                                   // 10477
        n.rotateX(angle).put(n);                                                                                       // 10478
    });                                                                                                                // 10479
};                                                                                                                     // 10480
                                                                                                                       // 10481
/**                                                                                                                    // 10482
 * Rotates the walls by an angle in the XZ-plane                                                                       // 10483
 *                                                                                                                     // 10484
 * @method applyConstraint                                                                                             // 10485
 * @param angle {Function}                                                                                             // 10486
 */                                                                                                                    // 10487
Walls.prototype.rotateY = function rotateY(angle) {                                                                    // 10488
    this.forEach(function(wall) {                                                                                      // 10489
        var n = wall.options.normal;                                                                                   // 10490
        n.rotateY(angle).put(n);                                                                                       // 10491
    });                                                                                                                // 10492
};                                                                                                                     // 10493
                                                                                                                       // 10494
/**                                                                                                                    // 10495
 * Resets the walls to their starting oritentation                                                                     // 10496
 */                                                                                                                    // 10497
Walls.prototype.reset = function reset() {                                                                             // 10498
    var sides = this.options.sides;                                                                                    // 10499
    for (var i in sides) {                                                                                             // 10500
        var component = this.components[i];                                                                            // 10501
        component.options.normal.set(_SIDE_NORMALS[i]);                                                                // 10502
    }                                                                                                                  // 10503
};                                                                                                                     // 10504
                                                                                                                       // 10505
module.exports = Walls;                                                                                                // 10506
},{"../../math/Vector":41,"./Constraint":55,"./Wall":60}],62:[function(_dereq_,module,exports){                        // 10507
module.exports = {                                                                                                     // 10508
  Collision: _dereq_('./Collision'),                                                                                   // 10509
  Constraint: _dereq_('./Constraint'),                                                                                 // 10510
  Curve: _dereq_('./Curve'),                                                                                           // 10511
  Distance: _dereq_('./Distance'),                                                                                     // 10512
  Snap: _dereq_('./Snap'),                                                                                             // 10513
  Surface: _dereq_('./Surface'),                                                                                       // 10514
  Wall: _dereq_('./Wall'),                                                                                             // 10515
  Walls: _dereq_('./Walls')                                                                                            // 10516
};                                                                                                                     // 10517
                                                                                                                       // 10518
},{"./Collision":54,"./Constraint":55,"./Curve":56,"./Distance":57,"./Snap":58,"./Surface":59,"./Wall":60,"./Walls":61}],63:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10520
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10521
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10522
 *                                                                                                                     // 10523
 * Owner: david@famo.us                                                                                                // 10524
 * @license MPL 2.0                                                                                                    // 10525
 * @copyright Famous Industries, Inc. 2014                                                                             // 10526
 */                                                                                                                    // 10527
                                                                                                                       // 10528
var Force = _dereq_('./Force');                                                                                        // 10529
                                                                                                                       // 10530
/**                                                                                                                    // 10531
 * Drag is a force that opposes velocity. Attach it to the physics engine                                              // 10532
 * to slow down a physics body in motion.                                                                              // 10533
 *                                                                                                                     // 10534
 * @class Drag                                                                                                         // 10535
 * @constructor                                                                                                        // 10536
 * @extends Force                                                                                                      // 10537
 * @param {Object} options options to set on drag                                                                      // 10538
 */                                                                                                                    // 10539
function Drag(options) {                                                                                               // 10540
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 10541
    if (options) this.setOptions(options);                                                                             // 10542
                                                                                                                       // 10543
    Force.call(this);                                                                                                  // 10544
}                                                                                                                      // 10545
                                                                                                                       // 10546
Drag.prototype = Object.create(Force.prototype);                                                                       // 10547
Drag.prototype.constructor = Drag;                                                                                     // 10548
                                                                                                                       // 10549
/**                                                                                                                    // 10550
 * @property Drag.FORCE_FUNCTIONS                                                                                      // 10551
 * @type Object                                                                                                        // 10552
 * @protected                                                                                                          // 10553
 * @static                                                                                                             // 10554
 */                                                                                                                    // 10555
Drag.FORCE_FUNCTIONS = {                                                                                               // 10556
                                                                                                                       // 10557
    /**                                                                                                                // 10558
     * A drag force proportional to the velocity                                                                       // 10559
     * @attribute LINEAR                                                                                               // 10560
     * @type Function                                                                                                  // 10561
     * @param {Vector} velocity                                                                                        // 10562
     * @return {Vector} drag force                                                                                     // 10563
     */                                                                                                                // 10564
    LINEAR : function(velocity) {                                                                                      // 10565
        return velocity;                                                                                               // 10566
    },                                                                                                                 // 10567
                                                                                                                       // 10568
    /**                                                                                                                // 10569
     * A drag force proportional to the square of the velocity                                                         // 10570
     * @attribute QUADRATIC                                                                                            // 10571
     * @type Function                                                                                                  // 10572
     * @param {Vector} velocity                                                                                        // 10573
     * @return {Vector} drag force                                                                                     // 10574
     */                                                                                                                // 10575
    QUADRATIC : function(velocity) {                                                                                   // 10576
        return velocity.mult(velocity.norm());                                                                         // 10577
    }                                                                                                                  // 10578
};                                                                                                                     // 10579
                                                                                                                       // 10580
/**                                                                                                                    // 10581
 * @property Drag.DEFAULT_OPTIONS                                                                                      // 10582
 * @type Object                                                                                                        // 10583
 * @protected                                                                                                          // 10584
 * @static                                                                                                             // 10585
 */                                                                                                                    // 10586
Drag.DEFAULT_OPTIONS = {                                                                                               // 10587
                                                                                                                       // 10588
    /**                                                                                                                // 10589
     * The strength of the force                                                                                       // 10590
     *    Range : [0, 0.1]                                                                                             // 10591
     * @attribute strength                                                                                             // 10592
     * @type Number                                                                                                    // 10593
     * @default 0.01                                                                                                   // 10594
     */                                                                                                                // 10595
    strength : 0.01,                                                                                                   // 10596
                                                                                                                       // 10597
    /**                                                                                                                // 10598
     * The type of opposing force                                                                                      // 10599
     * @attribute forceFunction                                                                                        // 10600
     * @type Function                                                                                                  // 10601
     */                                                                                                                // 10602
    forceFunction : Drag.FORCE_FUNCTIONS.LINEAR                                                                        // 10603
};                                                                                                                     // 10604
                                                                                                                       // 10605
/**                                                                                                                    // 10606
 * Adds a drag force to a physics body's force accumulator.                                                            // 10607
 *                                                                                                                     // 10608
 * @method applyForce                                                                                                  // 10609
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 10610
 */                                                                                                                    // 10611
Drag.prototype.applyForce = function applyForce(targets) {                                                             // 10612
    var strength        = this.options.strength;                                                                       // 10613
    var forceFunction   = this.options.forceFunction;                                                                  // 10614
    var force           = this.force;                                                                                  // 10615
    var index;                                                                                                         // 10616
    var particle;                                                                                                      // 10617
                                                                                                                       // 10618
    for (index = 0; index < targets.length; index++) {                                                                 // 10619
        particle = targets[index];                                                                                     // 10620
        forceFunction(particle.velocity).mult(-strength).put(force);                                                   // 10621
        particle.applyForce(force);                                                                                    // 10622
    }                                                                                                                  // 10623
};                                                                                                                     // 10624
                                                                                                                       // 10625
/**                                                                                                                    // 10626
 * Basic options setter                                                                                                // 10627
 *                                                                                                                     // 10628
 * @method setOptions                                                                                                  // 10629
 * @param {Objects} options                                                                                            // 10630
 */                                                                                                                    // 10631
Drag.prototype.setOptions = function setOptions(options) {                                                             // 10632
    for (var key in options) this.options[key] = options[key];                                                         // 10633
};                                                                                                                     // 10634
                                                                                                                       // 10635
module.exports = Drag;                                                                                                 // 10636
},{"./Force":64}],64:[function(_dereq_,module,exports){                                                                // 10637
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10638
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10639
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10640
 *                                                                                                                     // 10641
 * Owner: david@famo.us                                                                                                // 10642
 * @license MPL 2.0                                                                                                    // 10643
 * @copyright Famous Industries, Inc. 2014                                                                             // 10644
 */                                                                                                                    // 10645
                                                                                                                       // 10646
var Vector = _dereq_('../../math/Vector');                                                                             // 10647
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 10648
                                                                                                                       // 10649
/**                                                                                                                    // 10650
 * Force base class.                                                                                                   // 10651
 *                                                                                                                     // 10652
 * @class Force                                                                                                        // 10653
 * @uses EventHandler                                                                                                  // 10654
 * @constructor                                                                                                        // 10655
 */                                                                                                                    // 10656
function Force(force) {                                                                                                // 10657
    this.force = new Vector(force);                                                                                    // 10658
    this._eventOutput = new EventHandler();                                                                            // 10659
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 10660
}                                                                                                                      // 10661
                                                                                                                       // 10662
/**                                                                                                                    // 10663
 * Basic setter for options                                                                                            // 10664
 *                                                                                                                     // 10665
 * @method setOptions                                                                                                  // 10666
 * @param options {Objects}                                                                                            // 10667
 */                                                                                                                    // 10668
Force.prototype.setOptions = function setOptions(options) {                                                            // 10669
    this._eventOutput.emit('change', options);                                                                         // 10670
};                                                                                                                     // 10671
                                                                                                                       // 10672
/**                                                                                                                    // 10673
 * Adds a force to a physics body's force accumulator.                                                                 // 10674
 *                                                                                                                     // 10675
 * @method applyForce                                                                                                  // 10676
 * @param targets {Array.Body} Array of bodies to apply a force to.                                                    // 10677
 */                                                                                                                    // 10678
Force.prototype.applyForce = function applyForce(targets) {                                                            // 10679
    var length = targets.length;                                                                                       // 10680
    while (length--) {                                                                                                 // 10681
        targets[length].applyForce(this.force);                                                                        // 10682
    }                                                                                                                  // 10683
};                                                                                                                     // 10684
                                                                                                                       // 10685
/**                                                                                                                    // 10686
 * Getter for a force's potential energy.                                                                              // 10687
 *                                                                                                                     // 10688
 * @method getEnergy                                                                                                   // 10689
 * @return energy {Number}                                                                                             // 10690
 */                                                                                                                    // 10691
Force.prototype.getEnergy = function getEnergy() {                                                                     // 10692
    return 0.0;                                                                                                        // 10693
};                                                                                                                     // 10694
                                                                                                                       // 10695
module.exports = Force;                                                                                                // 10696
},{"../../core/EventHandler":7,"../../math/Vector":41}],65:[function(_dereq_,module,exports){                          // 10697
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10698
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10699
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10700
 *                                                                                                                     // 10701
 * Owner: david@famo.us                                                                                                // 10702
 * @license MPL 2.0                                                                                                    // 10703
 * @copyright Famous Industries, Inc. 2014                                                                             // 10704
 */                                                                                                                    // 10705
                                                                                                                       // 10706
var Force = _dereq_('./Force');                                                                                        // 10707
var Vector = _dereq_('../../math/Vector');                                                                             // 10708
                                                                                                                       // 10709
/**                                                                                                                    // 10710
 *  Repulsion is a force that repels (attracts) bodies away (towards)                                                  // 10711
 *    each other. A repulsion of negative strength is attractive.                                                      // 10712
 *                                                                                                                     // 10713
 *  @class Repulsion                                                                                                   // 10714
 *  @constructor                                                                                                       // 10715
 *  @extends Force                                                                                                     // 10716
 *  @param {Object} options overwrites default options                                                                 // 10717
 */                                                                                                                    // 10718
function Repulsion(options) {                                                                                          // 10719
    this.options = Object.create(Repulsion.DEFAULT_OPTIONS);                                                           // 10720
    if (options) this.setOptions(options);                                                                             // 10721
                                                                                                                       // 10722
    //registers                                                                                                        // 10723
    this.disp  = new Vector();                                                                                         // 10724
                                                                                                                       // 10725
    Force.call(this);                                                                                                  // 10726
}                                                                                                                      // 10727
                                                                                                                       // 10728
Repulsion.prototype = Object.create(Force.prototype);                                                                  // 10729
Repulsion.prototype.constructor = Repulsion;                                                                           // 10730
/**                                                                                                                    // 10731
 * @property Repulsion.DECAY_FUNCTIONS                                                                                 // 10732
 * @type Object                                                                                                        // 10733
 * @protected                                                                                                          // 10734
 * @static                                                                                                             // 10735
 */                                                                                                                    // 10736
Repulsion.DECAY_FUNCTIONS = {                                                                                          // 10737
                                                                                                                       // 10738
    /**                                                                                                                // 10739
     * A linear decay function                                                                                         // 10740
     * @attribute LINEAR                                                                                               // 10741
     * @type Function                                                                                                  // 10742
     * @param {Number} r distance from the source body                                                                 // 10743
     * @param {Number} cutoff the effective radius of influence                                                        // 10744
     */                                                                                                                // 10745
    LINEAR : function(r, cutoff) {                                                                                     // 10746
        return Math.max(1 - (1 / cutoff) * r, 0);                                                                      // 10747
    },                                                                                                                 // 10748
                                                                                                                       // 10749
    /**                                                                                                                // 10750
     * A Morse potential decay function (http://en.wikipedia.org/wiki/Morse_potential)                                 // 10751
     * @attribute MORSE                                                                                                // 10752
     * @type Function                                                                                                  // 10753
     * @param {Number} r distance from the source body                                                                 // 10754
     * @param {Number} cutoff the minimum radius of influence                                                          // 10755
     */                                                                                                                // 10756
    MORSE : function(r, cutoff) {                                                                                      // 10757
        var r0 = (cutoff === 0) ? 100 : cutoff;                                                                        // 10758
        var rShifted = r + r0 * (1 - Math.log(2)); //shift by x-intercept                                              // 10759
        return Math.max(1 - Math.pow(1 - Math.exp(rShifted/r0 - 1), 2), 0);                                            // 10760
    },                                                                                                                 // 10761
                                                                                                                       // 10762
    /**                                                                                                                // 10763
     * An inverse distance decay function                                                                              // 10764
     * @attribute INVERSE                                                                                              // 10765
     * @type Function                                                                                                  // 10766
     * @param {Number} r distance from the source body                                                                 // 10767
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10768
     */                                                                                                                // 10769
    INVERSE : function(r, cutoff) {                                                                                    // 10770
        return 1 / (1 - cutoff + r);                                                                                   // 10771
    },                                                                                                                 // 10772
                                                                                                                       // 10773
    /**                                                                                                                // 10774
     * An inverse squared distance decay function                                                                      // 10775
     * @attribute GRAVITY                                                                                              // 10776
     * @type Function                                                                                                  // 10777
     * @param {Number} r distance from the source body                                                                 // 10778
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10779
     */                                                                                                                // 10780
    GRAVITY : function(r, cutoff) {                                                                                    // 10781
        return 1 / (1 - cutoff + r*r);                                                                                 // 10782
    }                                                                                                                  // 10783
};                                                                                                                     // 10784
                                                                                                                       // 10785
/**                                                                                                                    // 10786
 * @property Repulsion.DEFAULT_OPTIONS                                                                                 // 10787
 * @type Object                                                                                                        // 10788
 * @protected                                                                                                          // 10789
 * @static                                                                                                             // 10790
 */                                                                                                                    // 10791
Repulsion.DEFAULT_OPTIONS = {                                                                                          // 10792
                                                                                                                       // 10793
    /**                                                                                                                // 10794
     * The strength of the force                                                                                       // 10795
     *    Range : [0, 100]                                                                                             // 10796
     * @attribute strength                                                                                             // 10797
     * @type Number                                                                                                    // 10798
     * @default 1                                                                                                      // 10799
     */                                                                                                                // 10800
    strength : 1,                                                                                                      // 10801
                                                                                                                       // 10802
    /**                                                                                                                // 10803
     * The location of the force, if not another physics body                                                          // 10804
     *                                                                                                                 // 10805
     * @attribute anchor                                                                                               // 10806
     * @type Number                                                                                                    // 10807
     * @default 0.01                                                                                                   // 10808
     * @optional                                                                                                       // 10809
     */                                                                                                                // 10810
    anchor : undefined,                                                                                                // 10811
                                                                                                                       // 10812
    /**                                                                                                                // 10813
     * The range of the repulsive force                                                                                // 10814
     * @attribute radii                                                                                                // 10815
     * @type Array                                                                                                     // 10816
     * @default [0, Infinity]                                                                                          // 10817
     */                                                                                                                // 10818
    range : [0, Infinity],                                                                                             // 10819
                                                                                                                       // 10820
    /**                                                                                                                // 10821
     * A normalization for the force to avoid singularities at the origin                                              // 10822
     * @attribute cutoff                                                                                               // 10823
     * @type Number                                                                                                    // 10824
     * @default 0                                                                                                      // 10825
     */                                                                                                                // 10826
    cutoff : 0,                                                                                                        // 10827
                                                                                                                       // 10828
    /**                                                                                                                // 10829
     * The maximum magnitude of the force                                                                              // 10830
     *    Range : [0, Infinity]                                                                                        // 10831
     * @attribute cap                                                                                                  // 10832
     * @type Number                                                                                                    // 10833
     * @default Infinity                                                                                               // 10834
     */                                                                                                                // 10835
    cap : Infinity,                                                                                                    // 10836
                                                                                                                       // 10837
    /**                                                                                                                // 10838
     * The type of decay the repulsive force should have                                                               // 10839
     * @attribute decayFunction                                                                                        // 10840
     * @type Function                                                                                                  // 10841
     */                                                                                                                // 10842
    decayFunction : Repulsion.DECAY_FUNCTIONS.GRAVITY                                                                  // 10843
};                                                                                                                     // 10844
                                                                                                                       // 10845
/*                                                                                                                     // 10846
 * Setter for options.                                                                                                 // 10847
 *                                                                                                                     // 10848
 * @method setOptions                                                                                                  // 10849
 * @param {Objects} options                                                                                            // 10850
 */                                                                                                                    // 10851
Repulsion.prototype.setOptions = function setOptions(options) {                                                        // 10852
    if (options.anchor !== undefined) {                                                                                // 10853
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 10854
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 10855
        delete options.anchor;                                                                                         // 10856
    }                                                                                                                  // 10857
    for (var key in options) this.options[key] = options[key];                                                         // 10858
};                                                                                                                     // 10859
                                                                                                                       // 10860
/**                                                                                                                    // 10861
 * Adds a drag force to a physics body's force accumulator.                                                            // 10862
 *                                                                                                                     // 10863
 * @method applyForce                                                                                                  // 10864
 * @param targets {Array.Body}  Array of bodies to apply force to.                                                     // 10865
 * @param source {Body}         The source of the force                                                                // 10866
 */                                                                                                                    // 10867
Repulsion.prototype.applyForce = function applyForce(targets, source) {                                                // 10868
    var options     = this.options;                                                                                    // 10869
    var force       = this.force;                                                                                      // 10870
    var disp        = this.disp;                                                                                       // 10871
                                                                                                                       // 10872
    var strength    = options.strength;                                                                                // 10873
    var anchor      = options.anchor || source.position;                                                               // 10874
    var cap         = options.cap;                                                                                     // 10875
    var cutoff      = options.cutoff;                                                                                  // 10876
    var rMin        = options.range[0];                                                                                // 10877
    var rMax        = options.range[1];                                                                                // 10878
    var decayFn     = options.decayFunction;                                                                           // 10879
                                                                                                                       // 10880
    if (strength === 0) return;                                                                                        // 10881
                                                                                                                       // 10882
    var length = targets.length;                                                                                       // 10883
    var particle;                                                                                                      // 10884
    var m1;                                                                                                            // 10885
    var p1;                                                                                                            // 10886
    var r;                                                                                                             // 10887
                                                                                                                       // 10888
    while (length--) {                                                                                                 // 10889
        particle = targets[length];                                                                                    // 10890
                                                                                                                       // 10891
        if (particle === source) continue;                                                                             // 10892
                                                                                                                       // 10893
        m1 = particle.mass;                                                                                            // 10894
        p1 = particle.position;                                                                                        // 10895
                                                                                                                       // 10896
        disp.set(p1.sub(anchor));                                                                                      // 10897
        r = disp.norm();                                                                                               // 10898
                                                                                                                       // 10899
        if (r < rMax && r > rMin) {                                                                                    // 10900
            force.set(disp.normalize(strength * m1 * decayFn(r, cutoff)).cap(cap));                                    // 10901
            particle.applyForce(force);                                                                                // 10902
        }                                                                                                              // 10903
    }                                                                                                                  // 10904
                                                                                                                       // 10905
};                                                                                                                     // 10906
                                                                                                                       // 10907
module.exports = Repulsion;                                                                                            // 10908
},{"../../math/Vector":41,"./Force":64}],66:[function(_dereq_,module,exports){                                         // 10909
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10910
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10911
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10912
 *                                                                                                                     // 10913
 * Owner: david@famo.us                                                                                                // 10914
 * @license MPL 2.0                                                                                                    // 10915
 * @copyright Famous Industries, Inc. 2014                                                                             // 10916
 */                                                                                                                    // 10917
                                                                                                                       // 10918
var Drag = _dereq_('./Drag');                                                                                          // 10919
                                                                                                                       // 10920
/**                                                                                                                    // 10921
 * Rotational drag is a force that opposes angular velocity.                                                           // 10922
 *   Attach it to a physics body to slow down its rotation.                                                            // 10923
 *                                                                                                                     // 10924
 * @class RotationalDrag                                                                                               // 10925
 * @constructor                                                                                                        // 10926
 * @extends Force                                                                                                      // 10927
 * @param {Object} options options to set on drag                                                                      // 10928
 */                                                                                                                    // 10929
function RotationalDrag(options) {                                                                                     // 10930
    Drag.call(this, options);                                                                                          // 10931
}                                                                                                                      // 10932
                                                                                                                       // 10933
RotationalDrag.prototype = Object.create(Drag.prototype);                                                              // 10934
RotationalDrag.prototype.constructor = RotationalDrag;                                                                 // 10935
                                                                                                                       // 10936
RotationalDrag.DEFAULT_OPTIONS = Drag.DEFAULT_OPTIONS;                                                                 // 10937
RotationalDrag.FORCE_FUNCTIONS = Drag.FORCE_FUNCTIONS;                                                                 // 10938
                                                                                                                       // 10939
/**                                                                                                                    // 10940
 * @property Repulsion.FORCE_FUNCTIONS                                                                                 // 10941
 * @type Object                                                                                                        // 10942
 * @protected                                                                                                          // 10943
 * @static                                                                                                             // 10944
 */                                                                                                                    // 10945
RotationalDrag.FORCE_FUNCTIONS = {                                                                                     // 10946
                                                                                                                       // 10947
    /**                                                                                                                // 10948
     * A drag force proprtional to the angular velocity                                                                // 10949
     * @attribute LINEAR                                                                                               // 10950
     * @type Function                                                                                                  // 10951
     * @param {Vector} angularVelocity                                                                                 // 10952
     * @return {Vector} drag force                                                                                     // 10953
     */                                                                                                                // 10954
    LINEAR : function(angularVelocity) {                                                                               // 10955
        return angularVelocity;                                                                                        // 10956
    },                                                                                                                 // 10957
                                                                                                                       // 10958
    /**                                                                                                                // 10959
     * A drag force proprtional to the square of the angular velocity                                                  // 10960
     * @attribute QUADRATIC                                                                                            // 10961
     * @type Function                                                                                                  // 10962
     * @param {Vector} angularVelocity                                                                                 // 10963
     * @return {Vector} drag force                                                                                     // 10964
     */                                                                                                                // 10965
    QUADRATIC : function(angularVelocity) {                                                                            // 10966
        return angularVelocity.mult(angularVelocity.norm());                                                           // 10967
    }                                                                                                                  // 10968
};                                                                                                                     // 10969
                                                                                                                       // 10970
/**                                                                                                                    // 10971
 * Adds a rotational drag force to a physics body's torque accumulator.                                                // 10972
 *                                                                                                                     // 10973
 * @method applyForce                                                                                                  // 10974
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 10975
 */                                                                                                                    // 10976
RotationalDrag.prototype.applyForce = function applyForce(targets) {                                                   // 10977
    var strength       = this.options.strength;                                                                        // 10978
    var forceFunction  = this.options.forceFunction;                                                                   // 10979
    var force          = this.force;                                                                                   // 10980
                                                                                                                       // 10981
    //TODO: rotational drag as function of inertia                                                                     // 10982
                                                                                                                       // 10983
    var index;                                                                                                         // 10984
    var particle;                                                                                                      // 10985
                                                                                                                       // 10986
    for (index = 0; index < targets.length; index++) {                                                                 // 10987
        particle = targets[index];                                                                                     // 10988
        forceFunction(particle.angularVelocity).mult(-100*strength).put(force);                                        // 10989
        particle.applyTorque(force);                                                                                   // 10990
    }                                                                                                                  // 10991
};                                                                                                                     // 10992
                                                                                                                       // 10993
/*                                                                                                                     // 10994
 * Setter for options.                                                                                                 // 10995
 *                                                                                                                     // 10996
 * @method setOptions                                                                                                  // 10997
 * @param {Objects} options                                                                                            // 10998
 */                                                                                                                    // 10999
RotationalDrag.prototype.setOptions = function setOptions(options) {                                                   // 11000
    for (var key in options) this.options[key] = options[key];                                                         // 11001
};                                                                                                                     // 11002
                                                                                                                       // 11003
module.exports = RotationalDrag;                                                                                       // 11004
},{"./Drag":63}],67:[function(_dereq_,module,exports){                                                                 // 11005
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11006
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11007
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11008
 *                                                                                                                     // 11009
 * Owner: david@famo.us                                                                                                // 11010
 * @license MPL 2.0                                                                                                    // 11011
 * @copyright Famous Industries, Inc. 2014                                                                             // 11012
 */                                                                                                                    // 11013
                                                                                                                       // 11014
//TODO: test inheritance                                                                                               // 11015
var Force = _dereq_('./Force');                                                                                        // 11016
var Spring = _dereq_('./Spring');                                                                                      // 11017
var Quaternion = _dereq_('../../math/Quaternion');                                                                     // 11018
                                                                                                                       // 11019
/**                                                                                                                    // 11020
 *  A force that rotates a physics body back to target Euler angles.                                                   // 11021
 *  Just as a spring translates a body to a particular X, Y, Z, location,                                              // 11022
 *  a rotational spring rotates a body to a particular X, Y, Z Euler angle.                                            // 11023
 *      Note: there is no physical agent that does this in the "real world"                                            // 11024
 *                                                                                                                     // 11025
 *  @class RotationalSpring                                                                                            // 11026
 *  @constructor                                                                                                       // 11027
 *  @extends Spring                                                                                                    // 11028
 *  @param {Object} options options to set on drag                                                                     // 11029
 */                                                                                                                    // 11030
function RotationalSpring(options) {                                                                                   // 11031
    Spring.call(this, options);                                                                                        // 11032
}                                                                                                                      // 11033
                                                                                                                       // 11034
RotationalSpring.prototype = Object.create(Spring.prototype);                                                          // 11035
RotationalSpring.prototype.constructor = RotationalSpring;                                                             // 11036
                                                                                                                       // 11037
RotationalSpring.DEFAULT_OPTIONS = Spring.DEFAULT_OPTIONS;                                                             // 11038
RotationalSpring.FORCE_FUNCTIONS = Spring.FORCE_FUNCTIONS;                                                             // 11039
                                                                                                                       // 11040
/** @const */                                                                                                          // 11041
var pi = Math.PI;                                                                                                      // 11042
                                                                                                                       // 11043
function _calcStiffness() {                                                                                            // 11044
    var options = this.options;                                                                                        // 11045
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 11046
}                                                                                                                      // 11047
                                                                                                                       // 11048
function _calcDamping() {                                                                                              // 11049
    var options = this.options;                                                                                        // 11050
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 11051
}                                                                                                                      // 11052
                                                                                                                       // 11053
function _init() {                                                                                                     // 11054
    _calcStiffness.call(this);                                                                                         // 11055
    _calcDamping.call(this);                                                                                           // 11056
}                                                                                                                      // 11057
                                                                                                                       // 11058
RotationalSpring.prototype.setOptions = function setOptions(options) {                                                 // 11059
    // TODO fix no-console error                                                                                       // 11060
    /* eslint no-console: 0 */                                                                                         // 11061
                                                                                                                       // 11062
    if (options.anchor !== undefined) {                                                                                // 11063
        if (options.anchor instanceof Quaternion) this.options.anchor = options.anchor;                                // 11064
        if (options.anchor  instanceof Array) this.options.anchor = new Quaternion(options.anchor);                    // 11065
    }                                                                                                                  // 11066
                                                                                                                       // 11067
    if (options.period !== undefined){                                                                                 // 11068
        this.options.period = options.period;                                                                          // 11069
    }                                                                                                                  // 11070
                                                                                                                       // 11071
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11072
    if (options.length !== undefined) this.options.length = options.length;                                            // 11073
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11074
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11075
                                                                                                                       // 11076
    _init.call(this);                                                                                                  // 11077
    Force.prototype.setOptions.call(this, options);                                                                    // 11078
};                                                                                                                     // 11079
                                                                                                                       // 11080
/**                                                                                                                    // 11081
 * Adds a torque force to a physics body's torque accumulator.                                                         // 11082
 *                                                                                                                     // 11083
 * @method applyForce                                                                                                  // 11084
 * @param targets {Array.Body} Array of bodies to apply torque to.                                                     // 11085
 */                                                                                                                    // 11086
RotationalSpring.prototype.applyForce = function applyForce(targets) {                                                 // 11087
    var force = this.force;                                                                                            // 11088
    var options = this.options;                                                                                        // 11089
    var disp = this.disp;                                                                                              // 11090
                                                                                                                       // 11091
    var stiffness = options.stiffness;                                                                                 // 11092
    var damping = options.damping;                                                                                     // 11093
    var restLength = options.length;                                                                                   // 11094
    var anchor = options.anchor;                                                                                       // 11095
    var forceFunction = options.forceFunction;                                                                         // 11096
    var maxLength = options.maxLength;                                                                                 // 11097
                                                                                                                       // 11098
    var i;                                                                                                             // 11099
    var target;                                                                                                        // 11100
    var dist;                                                                                                          // 11101
    var m;                                                                                                             // 11102
                                                                                                                       // 11103
    for (i = 0; i < targets.length; i++) {                                                                             // 11104
        target = targets[i];                                                                                           // 11105
                                                                                                                       // 11106
        disp.set(anchor.sub(target.orientation));                                                                      // 11107
        dist = disp.norm() - restLength;                                                                               // 11108
                                                                                                                       // 11109
        if (dist === 0) return;                                                                                        // 11110
                                                                                                                       // 11111
        //if dampingRatio specified, then override strength and damping                                                // 11112
        m      = target.mass;                                                                                          // 11113
        stiffness *= m;                                                                                                // 11114
        damping   *= m;                                                                                                // 11115
                                                                                                                       // 11116
        force.set(disp.normalize(stiffness * forceFunction(dist, maxLength)));                                         // 11117
                                                                                                                       // 11118
        if (damping) force.add(target.angularVelocity.mult(-damping)).put(force);                                      // 11119
                                                                                                                       // 11120
        target.applyTorque(force);                                                                                     // 11121
    }                                                                                                                  // 11122
};                                                                                                                     // 11123
                                                                                                                       // 11124
/**                                                                                                                    // 11125
 * Calculates the potential energy of the rotational spring.                                                           // 11126
 *                                                                                                                     // 11127
 * @method getEnergy                                                                                                   // 11128
 * @param [targets] target The physics body attached to the spring                                                     // 11129
 */                                                                                                                    // 11130
RotationalSpring.prototype.getEnergy = function getEnergy(targets) {                                                   // 11131
    var options     = this.options;                                                                                    // 11132
    var restLength  = options.length;                                                                                  // 11133
    var anchor      = options.anchor;                                                                                  // 11134
    var strength    = options.stiffness;                                                                               // 11135
                                                                                                                       // 11136
    var energy = 0.0;                                                                                                  // 11137
    for (var i = 0; i < targets.length; i++) {                                                                         // 11138
        var target = targets[i];                                                                                       // 11139
        var dist = anchor.sub(target.orientation).norm() - restLength;                                                 // 11140
        energy += 0.5 * strength * dist * dist;                                                                        // 11141
    }                                                                                                                  // 11142
    return energy;                                                                                                     // 11143
};                                                                                                                     // 11144
                                                                                                                       // 11145
module.exports = RotationalSpring;                                                                                     // 11146
},{"../../math/Quaternion":38,"./Force":64,"./Spring":68}],68:[function(_dereq_,module,exports){                       // 11147
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11148
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11149
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11150
 *                                                                                                                     // 11151
 * Owner: david@famo.us                                                                                                // 11152
 * @license MPL 2.0                                                                                                    // 11153
 * @copyright Famous Industries, Inc. 2014                                                                             // 11154
 */                                                                                                                    // 11155
                                                                                                                       // 11156
/*global console */                                                                                                    // 11157
                                                                                                                       // 11158
var Force = _dereq_('./Force');                                                                                        // 11159
var Vector = _dereq_('../../math/Vector');                                                                             // 11160
                                                                                                                       // 11161
/**                                                                                                                    // 11162
 *  A force that moves a physics body to a location with a spring motion.                                              // 11163
 *    The body can be moved to another physics body, or an anchor point.                                               // 11164
 *                                                                                                                     // 11165
 *  @class Spring                                                                                                      // 11166
 *  @constructor                                                                                                       // 11167
 *  @extends Force                                                                                                     // 11168
 *  @param {Object} options options to set on drag                                                                     // 11169
 */                                                                                                                    // 11170
function Spring(options) {                                                                                             // 11171
    Force.call(this);                                                                                                  // 11172
                                                                                                                       // 11173
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 11174
    if (options) this.setOptions(options);                                                                             // 11175
                                                                                                                       // 11176
    //registers                                                                                                        // 11177
    this.disp = new Vector(0,0,0);                                                                                     // 11178
                                                                                                                       // 11179
    _init.call(this);                                                                                                  // 11180
}                                                                                                                      // 11181
                                                                                                                       // 11182
Spring.prototype = Object.create(Force.prototype);                                                                     // 11183
Spring.prototype.constructor = Spring;                                                                                 // 11184
                                                                                                                       // 11185
/** @const */                                                                                                          // 11186
var pi = Math.PI;                                                                                                      // 11187
var MIN_PERIOD = 150;                                                                                                  // 11188
                                                                                                                       // 11189
/**                                                                                                                    // 11190
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11191
 * @type Object                                                                                                        // 11192
 * @protected                                                                                                          // 11193
 * @static                                                                                                             // 11194
 */                                                                                                                    // 11195
Spring.FORCE_FUNCTIONS = {                                                                                             // 11196
                                                                                                                       // 11197
    /**                                                                                                                // 11198
     * A FENE (Finitely Extensible Nonlinear Elastic) spring force                                                     // 11199
     *      see: http://en.wikipedia.org/wiki/FENE                                                                     // 11200
     * @attribute FENE                                                                                                 // 11201
     * @type Function                                                                                                  // 11202
     * @param {Number} dist current distance target is from source body                                                // 11203
     * @param {Number} rMax maximum range of influence                                                                 // 11204
     * @return {Number} unscaled force                                                                                 // 11205
     */                                                                                                                // 11206
    FENE : function(dist, rMax) {                                                                                      // 11207
        var rMaxSmall = rMax * .99;                                                                                    // 11208
        var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);                                                       // 11209
        return r / (1 - r * r/(rMax * rMax));                                                                          // 11210
    },                                                                                                                 // 11211
                                                                                                                       // 11212
    /**                                                                                                                // 11213
     * A Hookean spring force, linear in the displacement                                                              // 11214
     *      see: http://en.wikipedia.org/wiki/Hooke's_law                                                              // 11215
     * @attribute FENE                                                                                                 // 11216
     * @type Function                                                                                                  // 11217
     * @param {Number} dist current distance target is from source body                                                // 11218
     * @return {Number} unscaled force                                                                                 // 11219
     */                                                                                                                // 11220
    HOOK : function(dist) {                                                                                            // 11221
        return dist;                                                                                                   // 11222
    }                                                                                                                  // 11223
};                                                                                                                     // 11224
                                                                                                                       // 11225
/**                                                                                                                    // 11226
 * @property Spring.DEFAULT_OPTIONS                                                                                    // 11227
 * @type Object                                                                                                        // 11228
 * @protected                                                                                                          // 11229
 * @static                                                                                                             // 11230
 */                                                                                                                    // 11231
Spring.DEFAULT_OPTIONS = {                                                                                             // 11232
                                                                                                                       // 11233
    /**                                                                                                                // 11234
     * The amount of time in milliseconds taken for one complete oscillation                                           // 11235
     * when there is no damping                                                                                        // 11236
     *    Range : [150, Infinity]                                                                                      // 11237
     * @attribute period                                                                                               // 11238
     * @type Number                                                                                                    // 11239
     * @default 300                                                                                                    // 11240
     */                                                                                                                // 11241
    period : 300,                                                                                                      // 11242
                                                                                                                       // 11243
    /**                                                                                                                // 11244
     * The damping of the spring.                                                                                      // 11245
     *    Range : [0, 1]                                                                                               // 11246
     *    0 = no damping, and the spring will oscillate forever                                                        // 11247
     *    1 = critically damped (the spring will never oscillate)                                                      // 11248
     * @attribute dampingRatio                                                                                         // 11249
     * @type Number                                                                                                    // 11250
     * @default 0.1                                                                                                    // 11251
     */                                                                                                                // 11252
    dampingRatio : 0.1,                                                                                                // 11253
                                                                                                                       // 11254
    /**                                                                                                                // 11255
     * The rest length of the spring                                                                                   // 11256
     *    Range : [0, Infinity]                                                                                        // 11257
     * @attribute length                                                                                               // 11258
     * @type Number                                                                                                    // 11259
     * @default 0                                                                                                      // 11260
     */                                                                                                                // 11261
    length : 0,                                                                                                        // 11262
                                                                                                                       // 11263
    /**                                                                                                                // 11264
     * The maximum length of the spring (for a FENE spring)                                                            // 11265
     *    Range : [0, Infinity]                                                                                        // 11266
     * @attribute length                                                                                               // 11267
     * @type Number                                                                                                    // 11268
     * @default Infinity                                                                                               // 11269
     */                                                                                                                // 11270
    maxLength : Infinity,                                                                                              // 11271
                                                                                                                       // 11272
    /**                                                                                                                // 11273
     * The location of the spring's anchor, if not another physics body                                                // 11274
     *                                                                                                                 // 11275
     * @attribute anchor                                                                                               // 11276
     * @type Array                                                                                                     // 11277
     * @optional                                                                                                       // 11278
     */                                                                                                                // 11279
    anchor : undefined,                                                                                                // 11280
                                                                                                                       // 11281
    /**                                                                                                                // 11282
     * The type of spring force                                                                                        // 11283
     * @attribute forceFunction                                                                                        // 11284
     * @type Function                                                                                                  // 11285
     */                                                                                                                // 11286
    forceFunction : Spring.FORCE_FUNCTIONS.HOOK                                                                        // 11287
};                                                                                                                     // 11288
                                                                                                                       // 11289
function _calcStiffness() {                                                                                            // 11290
    var options = this.options;                                                                                        // 11291
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 11292
}                                                                                                                      // 11293
                                                                                                                       // 11294
function _calcDamping() {                                                                                              // 11295
    var options = this.options;                                                                                        // 11296
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 11297
}                                                                                                                      // 11298
                                                                                                                       // 11299
function _init() {                                                                                                     // 11300
    _calcStiffness.call(this);                                                                                         // 11301
    _calcDamping.call(this);                                                                                           // 11302
}                                                                                                                      // 11303
                                                                                                                       // 11304
/**                                                                                                                    // 11305
 * Basic options setter                                                                                                // 11306
 *                                                                                                                     // 11307
 * @method setOptions                                                                                                  // 11308
 * @param options {Object}                                                                                             // 11309
 */                                                                                                                    // 11310
Spring.prototype.setOptions = function setOptions(options) {                                                           // 11311
    // TODO fix no-console error                                                                                       // 11312
    /* eslint no-console: 0 */                                                                                         // 11313
                                                                                                                       // 11314
    if (options.anchor !== undefined) {                                                                                // 11315
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 11316
        if (options.anchor instanceof Vector) this.options.anchor = options.anchor;                                    // 11317
        if (options.anchor instanceof Array)  this.options.anchor = new Vector(options.anchor);                        // 11318
    }                                                                                                                  // 11319
                                                                                                                       // 11320
    if (options.period !== undefined){                                                                                 // 11321
        if (options.period < MIN_PERIOD) {                                                                             // 11322
            options.period = MIN_PERIOD;                                                                               // 11323
            console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
        }                                                                                                              // 11325
        this.options.period = options.period;                                                                          // 11326
    }                                                                                                                  // 11327
                                                                                                                       // 11328
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11329
    if (options.length !== undefined) this.options.length = options.length;                                            // 11330
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11331
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11332
                                                                                                                       // 11333
    _init.call(this);                                                                                                  // 11334
    Force.prototype.setOptions.call(this, options);                                                                    // 11335
};                                                                                                                     // 11336
                                                                                                                       // 11337
/**                                                                                                                    // 11338
 * Adds a spring force to a physics body's force accumulator.                                                          // 11339
 *                                                                                                                     // 11340
 * @method applyForce                                                                                                  // 11341
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 11342
 */                                                                                                                    // 11343
Spring.prototype.applyForce = function applyForce(targets, source) {                                                   // 11344
    var force = this.force;                                                                                            // 11345
    var disp = this.disp;                                                                                              // 11346
    var options = this.options;                                                                                        // 11347
                                                                                                                       // 11348
    var stiffness = options.stiffness;                                                                                 // 11349
    var damping = options.damping;                                                                                     // 11350
    var restLength = options.length;                                                                                   // 11351
    var maxLength = options.maxLength;                                                                                 // 11352
    var anchor = options.anchor || source.position;                                                                    // 11353
    var forceFunction = options.forceFunction;                                                                         // 11354
                                                                                                                       // 11355
    var i;                                                                                                             // 11356
    var target;                                                                                                        // 11357
    var p2;                                                                                                            // 11358
    var v2;                                                                                                            // 11359
    var dist;                                                                                                          // 11360
    var m;                                                                                                             // 11361
                                                                                                                       // 11362
    for (i = 0; i < targets.length; i++) {                                                                             // 11363
        target = targets[i];                                                                                           // 11364
        p2 = target.position;                                                                                          // 11365
        v2 = target.velocity;                                                                                          // 11366
                                                                                                                       // 11367
        anchor.sub(p2).put(disp);                                                                                      // 11368
        dist = disp.norm() - restLength;                                                                               // 11369
                                                                                                                       // 11370
        if (dist === 0) return;                                                                                        // 11371
                                                                                                                       // 11372
        //if dampingRatio specified, then override strength and damping                                                // 11373
        m      = target.mass;                                                                                          // 11374
        stiffness *= m;                                                                                                // 11375
        damping   *= m;                                                                                                // 11376
                                                                                                                       // 11377
        disp.normalize(stiffness * forceFunction(dist, maxLength))                                                     // 11378
            .put(force);                                                                                               // 11379
                                                                                                                       // 11380
        if (damping)                                                                                                   // 11381
            if (source) force.add(v2.sub(source.velocity).mult(-damping)).put(force);                                  // 11382
            else force.add(v2.mult(-damping)).put(force);                                                              // 11383
                                                                                                                       // 11384
        target.applyForce(force);                                                                                      // 11385
        if (source) source.applyForce(force.mult(-1));                                                                 // 11386
    }                                                                                                                  // 11387
};                                                                                                                     // 11388
                                                                                                                       // 11389
/**                                                                                                                    // 11390
 * Calculates the potential energy of the spring.                                                                      // 11391
 *                                                                                                                     // 11392
 * @method getEnergy                                                                                                   // 11393
 * @param [targets] target  The physics body attached to the spring                                                    // 11394
 * @return {source}         The potential energy of the spring                                                         // 11395
 */                                                                                                                    // 11396
Spring.prototype.getEnergy = function getEnergy(targets, source) {                                                     // 11397
    var options     = this.options;                                                                                    // 11398
    var restLength  = options.length;                                                                                  // 11399
    var anchor      = (source) ? source.position : options.anchor;                                                     // 11400
    var strength    = options.stiffness;                                                                               // 11401
                                                                                                                       // 11402
    var energy = 0.0;                                                                                                  // 11403
    for (var i = 0; i < targets.length; i++){                                                                          // 11404
        var target = targets[i];                                                                                       // 11405
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 11406
        energy += 0.5 * strength * dist * dist;                                                                        // 11407
    }                                                                                                                  // 11408
    return energy;                                                                                                     // 11409
};                                                                                                                     // 11410
                                                                                                                       // 11411
module.exports = Spring;                                                                                               // 11412
},{"../../math/Vector":41,"./Force":64}],69:[function(_dereq_,module,exports){                                         // 11413
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11414
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11415
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11416
 *                                                                                                                     // 11417
 * Owner: david@famo.us                                                                                                // 11418
 * @license MPL 2.0                                                                                                    // 11419
 * @copyright Famous Industries, Inc. 2014                                                                             // 11420
 */                                                                                                                    // 11421
                                                                                                                       // 11422
var Force = _dereq_('./Force');                                                                                        // 11423
var Vector = _dereq_('../../math/Vector');                                                                             // 11424
                                                                                                                       // 11425
/**                                                                                                                    // 11426
 *  A force that moves a physics body to a location with a spring motion.                                              // 11427
 *    The body can be moved to another physics body, or an anchor point.                                               // 11428
 *                                                                                                                     // 11429
 *  @class VectorField                                                                                                 // 11430
 *  @constructor                                                                                                       // 11431
 *  @extends Force                                                                                                     // 11432
 *  @param {Object} options options to set on drag                                                                     // 11433
 */                                                                                                                    // 11434
function VectorField(options) {                                                                                        // 11435
    Force.call(this);                                                                                                  // 11436
                                                                                                                       // 11437
    this.options = Object.create(VectorField.DEFAULT_OPTIONS);                                                         // 11438
    if (options) this.setOptions(options);                                                                             // 11439
                                                                                                                       // 11440
    //registers                                                                                                        // 11441
    this.evaluation = new Vector();                                                                                    // 11442
}                                                                                                                      // 11443
                                                                                                                       // 11444
VectorField.prototype = Object.create(Force.prototype);                                                                // 11445
VectorField.prototype.constructor = VectorField;                                                                       // 11446
                                                                                                                       // 11447
/**                                                                                                                    // 11448
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11449
 * @type Object                                                                                                        // 11450
 * @protected                                                                                                          // 11451
 * @static                                                                                                             // 11452
 */                                                                                                                    // 11453
VectorField.FIELDS = {                                                                                                 // 11454
    /**                                                                                                                // 11455
     * Constant force, e.g., gravity                                                                                   // 11456
     * @attribute CONSTANT                                                                                             // 11457
     * @type Function                                                                                                  // 11458
     * @param v {Vector}        Current position of physics body                                                       // 11459
     * @param options {Object}  The direction of the force                                                             // 11460
     *      Pass a {direction : Vector} into the VectorField options                                                   // 11461
     * @return {Number} unscaled force                                                                                 // 11462
     */                                                                                                                // 11463
    CONSTANT : function(v, options) {                                                                                  // 11464
        options.direction.put(this.evaluation);                                                                        // 11465
    },                                                                                                                 // 11466
                                                                                                                       // 11467
    /**                                                                                                                // 11468
     * Linear force                                                                                                    // 11469
     * @attribute LINEAR                                                                                               // 11470
     * @type Function                                                                                                  // 11471
     * @param v {Vector} Current position of physics body                                                              // 11472
     * @return {Vector} unscaled force                                                                                 // 11473
     */                                                                                                                // 11474
    LINEAR : function(v) {                                                                                             // 11475
        v.put(this.evaluation);                                                                                        // 11476
    },                                                                                                                 // 11477
                                                                                                                       // 11478
    /**                                                                                                                // 11479
     * Radial force, e.g., Hookean spring                                                                              // 11480
     * @attribute RADIAL                                                                                               // 11481
     * @type Function                                                                                                  // 11482
     * @param v {Vector} Current position of physics body                                                              // 11483
     * @return {Vector} unscaled force                                                                                 // 11484
     */                                                                                                                // 11485
    RADIAL : function(v) {                                                                                             // 11486
        v.mult(-1).put(this.evaluation);                                                                               // 11487
    },                                                                                                                 // 11488
                                                                                                                       // 11489
    /**                                                                                                                // 11490
     * Point attractor force, e.g., Hookean spring with an anchor                                                      // 11491
     * @attribute POINT_ATTRACTOR                                                                                      // 11492
     * @type Function                                                                                                  // 11493
     * @param v {Vector}        Current position of physics body                                                       // 11494
     * @param options {Object}  And object with the position of the attractor                                          // 11495
     *      Pass a {position : Vector} into the VectorField options                                                    // 11496
     * @return {Vector} unscaled force                                                                                 // 11497
     */                                                                                                                // 11498
    POINT_ATTRACTOR : function(v, options) {                                                                           // 11499
        options.position.sub(v).put(this.evaluation);                                                                  // 11500
    }                                                                                                                  // 11501
};                                                                                                                     // 11502
                                                                                                                       // 11503
/**                                                                                                                    // 11504
 * @property VectorField.DEFAULT_OPTIONS                                                                               // 11505
 * @type Object                                                                                                        // 11506
 * @protected                                                                                                          // 11507
 * @static                                                                                                             // 11508
 */                                                                                                                    // 11509
VectorField.DEFAULT_OPTIONS = {                                                                                        // 11510
                                                                                                                       // 11511
    /**                                                                                                                // 11512
     * The strength of the force                                                                                       // 11513
     *    Range : [0, 10]                                                                                              // 11514
     * @attribute strength                                                                                             // 11515
     * @type Number                                                                                                    // 11516
     * @default .01                                                                                                    // 11517
     */                                                                                                                // 11518
    strength : .01,                                                                                                    // 11519
                                                                                                                       // 11520
    /**                                                                                                                // 11521
     * Type of vectorfield                                                                                             // 11522
     *    Range : [0, 100]                                                                                             // 11523
     * @attribute field                                                                                                // 11524
     * @type Function                                                                                                  // 11525
     */                                                                                                                // 11526
    field : VectorField.FIELDS.CONSTANT                                                                                // 11527
};                                                                                                                     // 11528
                                                                                                                       // 11529
/**                                                                                                                    // 11530
 * Basic options setter                                                                                                // 11531
 *                                                                                                                     // 11532
 * @method setOptions                                                                                                  // 11533
 * @param {Objects} options                                                                                            // 11534
 */                                                                                                                    // 11535
VectorField.prototype.setOptions = function setOptions(options) {                                                      // 11536
    if (options.strength !== undefined) this.options.strength = options.strength;                                      // 11537
    if (options.direction !== undefined) this.options.direction = options.direction;                                   // 11538
    if (options.field !== undefined) {                                                                                 // 11539
        this.options.field = options.field;                                                                            // 11540
        _setFieldOptions.call(this, this.options.field);                                                               // 11541
    }                                                                                                                  // 11542
};                                                                                                                     // 11543
                                                                                                                       // 11544
function _setFieldOptions(field) {                                                                                     // 11545
    var FIELDS = VectorField.FIELDS;                                                                                   // 11546
                                                                                                                       // 11547
    switch (field) {                                                                                                   // 11548
        case FIELDS.CONSTANT:                                                                                          // 11549
            if (!this.options.direction) this.options.direction = new Vector(0,1,0);                                   // 11550
            else if (this.options.direction instanceof Array) this.options.direction = new Vector(this.options.direction);
            break;                                                                                                     // 11552
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11553
            if (!this.options.position) this.options.position = new Vector(0,0,0);                                     // 11554
            else if (this.options.position instanceof Array) this.options.position = new Vector(this.options.position);
            break;                                                                                                     // 11556
    }                                                                                                                  // 11557
}                                                                                                                      // 11558
                                                                                                                       // 11559
/**                                                                                                                    // 11560
 * Adds the VectorField's force to a physics body's force accumulator.                                                 // 11561
 *                                                                                                                     // 11562
 * @method applyForce                                                                                                  // 11563
 * @param targets {Array.body} Array of bodies to apply force to.                                                      // 11564
 */                                                                                                                    // 11565
VectorField.prototype.applyForce = function applyForce(targets) {                                                      // 11566
    var force = this.force;                                                                                            // 11567
    var strength = this.options.strength;                                                                              // 11568
    var field = this.options.field;                                                                                    // 11569
                                                                                                                       // 11570
    var i;                                                                                                             // 11571
    var target;                                                                                                        // 11572
                                                                                                                       // 11573
    for (i = 0; i < targets.length; i++) {                                                                             // 11574
        target = targets[i];                                                                                           // 11575
        field.call(this, target.position, this.options);                                                               // 11576
        this.evaluation.mult(target.mass * strength).put(force);                                                       // 11577
        target.applyForce(force);                                                                                      // 11578
    }                                                                                                                  // 11579
};                                                                                                                     // 11580
                                                                                                                       // 11581
VectorField.prototype.getEnergy = function getEnergy(targets) {                                                        // 11582
    var field = this.options.field;                                                                                    // 11583
    var FIELDS = VectorField.FIELDS;                                                                                   // 11584
                                                                                                                       // 11585
    var energy = 0;                                                                                                    // 11586
                                                                                                                       // 11587
    var i;                                                                                                             // 11588
    var target;                                                                                                        // 11589
    switch (field) {                                                                                                   // 11590
        case FIELDS.CONSTANT:                                                                                          // 11591
            energy = targets.length * this.options.direction.norm();                                                   // 11592
            break;                                                                                                     // 11593
        case FIELDS.RADIAL:                                                                                            // 11594
            for (i = 0; i < targets.length; i++){                                                                      // 11595
                target = targets[i];                                                                                   // 11596
                energy += target.position.norm();                                                                      // 11597
            }                                                                                                          // 11598
            break;                                                                                                     // 11599
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11600
            for (i = 0; i < targets.length; i++){                                                                      // 11601
                target = targets[i];                                                                                   // 11602
                energy += target.position.sub(this.options.position).norm();                                           // 11603
            }                                                                                                          // 11604
            break;                                                                                                     // 11605
    }                                                                                                                  // 11606
    energy *= this.options.strength;                                                                                   // 11607
    return energy;                                                                                                     // 11608
};                                                                                                                     // 11609
                                                                                                                       // 11610
module.exports = VectorField;                                                                                          // 11611
},{"../../math/Vector":41,"./Force":64}],70:[function(_dereq_,module,exports){                                         // 11612
module.exports = {                                                                                                     // 11613
  Drag: _dereq_('./Drag'),                                                                                             // 11614
  Force: _dereq_('./Force'),                                                                                           // 11615
  Repulsion: _dereq_('./Repulsion'),                                                                                   // 11616
  RotationalDrag: _dereq_('./RotationalDrag'),                                                                         // 11617
  Spring: _dereq_('./Spring'),                                                                                         // 11618
  RotationalSpring: _dereq_('./RotationalSpring'),                                                                     // 11619
  VectorField: _dereq_('./VectorField')                                                                                // 11620
};                                                                                                                     // 11621
                                                                                                                       // 11622
},{"./Drag":63,"./Force":64,"./Repulsion":65,"./RotationalDrag":66,"./RotationalSpring":67,"./Spring":68,"./VectorField":69}],71:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 11624
  PhysicsEngine: _dereq_('./PhysicsEngine'),                                                                           // 11625
  bodies: _dereq_('./bodies'),                                                                                         // 11626
  constraints: _dereq_('./constraints'),                                                                               // 11627
  integrators: _dereq_('./integrators'),                                                                               // 11628
  forces: _dereq_('./forces')                                                                                          // 11629
};                                                                                                                     // 11630
                                                                                                                       // 11631
},{"./PhysicsEngine":48,"./bodies":53,"./constraints":62,"./forces":70,"./integrators":73}],72:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11633
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11634
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11635
 *                                                                                                                     // 11636
 * Owner: david@famo.us                                                                                                // 11637
 * @license MPL 2.0                                                                                                    // 11638
 * @copyright Famous Industries, Inc. 2014                                                                             // 11639
 */                                                                                                                    // 11640
                                                                                                                       // 11641
                                                                                                                       // 11642
                                                                                                                       // 11643
                                                                                                                       // 11644
/**                                                                                                                    // 11645
 * Ordinary Differential Equation (ODE) Integrator.                                                                    // 11646
 * Manages updating a physics body's state over time.                                                                  // 11647
 *                                                                                                                     // 11648
 *  p = position, v = velocity, m = mass, f = force, dt = change in time                                               // 11649
 *                                                                                                                     // 11650
 *      v <- v + dt * f / m                                                                                            // 11651
 *      p <- p + dt * v                                                                                                // 11652
 *                                                                                                                     // 11653
 *  q = orientation, w = angular velocity, L = angular momentum                                                        // 11654
 *                                                                                                                     // 11655
 *      L <- L + dt * t                                                                                                // 11656
 *      q <- q + dt/2 * q * w                                                                                          // 11657
 *                                                                                                                     // 11658
 * @class SymplecticEuler                                                                                              // 11659
 * @constructor                                                                                                        // 11660
 * @param {Object} options Options to set                                                                              // 11661
 */                                                                                                                    // 11662
var SymplecticEuler = {};                                                                                              // 11663
                                                                                                                       // 11664
/*                                                                                                                     // 11665
 * Updates the velocity of a physics body from its accumulated force.                                                  // 11666
 *      v <- v + dt * f / m                                                                                            // 11667
 *                                                                                                                     // 11668
 * @method integrateVelocity                                                                                           // 11669
 * @param {Body} physics body                                                                                          // 11670
 * @param {Number} dt delta time                                                                                       // 11671
 */                                                                                                                    // 11672
SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {                                             // 11673
    var v = body.velocity;                                                                                             // 11674
    var w = body.inverseMass;                                                                                          // 11675
    var f = body.force;                                                                                                // 11676
                                                                                                                       // 11677
    if (f.isZero()) return;                                                                                            // 11678
                                                                                                                       // 11679
    v.add(f.mult(dt * w)).put(v);                                                                                      // 11680
    f.clear();                                                                                                         // 11681
};                                                                                                                     // 11682
                                                                                                                       // 11683
/*                                                                                                                     // 11684
 * Updates the position of a physics body from its velocity.                                                           // 11685
 *      p <- p + dt * v                                                                                                // 11686
 *                                                                                                                     // 11687
 * @method integratePosition                                                                                           // 11688
 * @param {Body} physics body                                                                                          // 11689
 * @param {Number} dt delta time                                                                                       // 11690
 */                                                                                                                    // 11691
SymplecticEuler.integratePosition = function integratePosition(body, dt) {                                             // 11692
    var p = body.position;                                                                                             // 11693
    var v = body.velocity;                                                                                             // 11694
                                                                                                                       // 11695
    p.add(v.mult(dt)).put(p);                                                                                          // 11696
};                                                                                                                     // 11697
                                                                                                                       // 11698
/*                                                                                                                     // 11699
 * Updates the angular momentum of a physics body from its accumuled torque.                                           // 11700
 *      L <- L + dt * t                                                                                                // 11701
 *                                                                                                                     // 11702
 * @method integrateAngularMomentum                                                                                    // 11703
 * @param {Body} physics body (except a particle)                                                                      // 11704
 * @param {Number} dt delta time                                                                                       // 11705
 */                                                                                                                    // 11706
SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {                               // 11707
    var L = body.angularMomentum;                                                                                      // 11708
    var t = body.torque;                                                                                               // 11709
                                                                                                                       // 11710
    if (t.isZero()) return;                                                                                            // 11711
                                                                                                                       // 11712
    L.add(t.mult(dt)).put(L);                                                                                          // 11713
    t.clear();                                                                                                         // 11714
};                                                                                                                     // 11715
                                                                                                                       // 11716
/*                                                                                                                     // 11717
 * Updates the orientation of a physics body from its angular velocity.                                                // 11718
 *      q <- q + dt/2 * q * w                                                                                          // 11719
 *                                                                                                                     // 11720
 * @method integrateOrientation                                                                                        // 11721
 * @param {Body} physics body (except a particle)                                                                      // 11722
 * @param {Number} dt delta time                                                                                       // 11723
 */                                                                                                                    // 11724
SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {                                       // 11725
    var q = body.orientation;                                                                                          // 11726
    var w = body.angularVelocity;                                                                                      // 11727
                                                                                                                       // 11728
    if (w.isZero()) return;                                                                                            // 11729
    q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);                                                              // 11730
//        q.normalize.put(q);                                                                                          // 11731
};                                                                                                                     // 11732
                                                                                                                       // 11733
module.exports = SymplecticEuler;                                                                                      // 11734
},{}],73:[function(_dereq_,module,exports){                                                                            // 11735
module.exports = {                                                                                                     // 11736
  SymplecticEuler: _dereq_('./SymplecticEuler')                                                                        // 11737
};                                                                                                                     // 11738
                                                                                                                       // 11739
},{"./SymplecticEuler":72}],74:[function(_dereq_,module,exports){                                                      // 11740
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11741
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11742
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11743
 *                                                                                                                     // 11744
 * Owner: mark@famo.us                                                                                                 // 11745
 * @license MPL 2.0                                                                                                    // 11746
 * @copyright Famous Industries, Inc. 2014                                                                             // 11747
 */                                                                                                                    // 11748
                                                                                                                       // 11749
var Surface = _dereq_('../core/Surface');                                                                              // 11750
                                                                                                                       // 11751
/**                                                                                                                    // 11752
 * A surface containing an HTML5 Canvas element.                                                                       // 11753
 *   This extends the Surface class.                                                                                   // 11754
 *                                                                                                                     // 11755
 * @class CanvasSurface                                                                                                // 11756
 * @extends Surface                                                                                                    // 11757
 * @constructor                                                                                                        // 11758
 * @param {Object} [options] overrides of default options                                                              // 11759
 * @param {Array.Number} [options.canvasSize] [width, height] for document element                                     // 11760
 */                                                                                                                    // 11761
function CanvasSurface(options) {                                                                                      // 11762
    if (options && options.canvasSize) this._canvasSize = options.canvasSize;                                          // 11763
    Surface.apply(this, arguments);                                                                                    // 11764
    if (!this._canvasSize) this._canvasSize = this.getSize();                                                          // 11765
    this._backBuffer = document.createElement('canvas');                                                               // 11766
    if (this._canvasSize) {                                                                                            // 11767
        this._backBuffer.width = this._canvasSize[0];                                                                  // 11768
        this._backBuffer.height = this._canvasSize[1];                                                                 // 11769
    }                                                                                                                  // 11770
    this._contextId = undefined;                                                                                       // 11771
}                                                                                                                      // 11772
                                                                                                                       // 11773
CanvasSurface.prototype = Object.create(Surface.prototype);                                                            // 11774
CanvasSurface.prototype.constructor = CanvasSurface;                                                                   // 11775
CanvasSurface.prototype.elementType = 'canvas';                                                                        // 11776
CanvasSurface.prototype.elementClass = 'famous-surface';                                                               // 11777
                                                                                                                       // 11778
/**                                                                                                                    // 11779
 * Set inner document content.  Note that this is a noop for CanvasSurface.                                            // 11780
 *                                                                                                                     // 11781
 * @method setContent                                                                                                  // 11782
 *                                                                                                                     // 11783
 */                                                                                                                    // 11784
CanvasSurface.prototype.setContent = function setContent() {};                                                         // 11785
                                                                                                                       // 11786
/**                                                                                                                    // 11787
 * Place the document element this component manages into the document.                                                // 11788
 *    This will draw the content to the document.                                                                      // 11789
 *                                                                                                                     // 11790
 * @private                                                                                                            // 11791
 * @method deploy                                                                                                      // 11792
 * @param {Node} target document parent of this container                                                              // 11793
 */                                                                                                                    // 11794
CanvasSurface.prototype.deploy = function deploy(target) {                                                             // 11795
    if (this._canvasSize) {                                                                                            // 11796
        target.width = this._canvasSize[0];                                                                            // 11797
        target.height = this._canvasSize[1];                                                                           // 11798
    }                                                                                                                  // 11799
    if (this._contextId === '2d') {                                                                                    // 11800
        target.getContext(this._contextId).drawImage(this._backBuffer, 0, 0);                                          // 11801
        this._backBuffer.width = 0;                                                                                    // 11802
        this._backBuffer.height = 0;                                                                                   // 11803
    }                                                                                                                  // 11804
};                                                                                                                     // 11805
                                                                                                                       // 11806
/**                                                                                                                    // 11807
 * Remove this component and contained content from the document                                                       // 11808
 *                                                                                                                     // 11809
 * @private                                                                                                            // 11810
 * @method recall                                                                                                      // 11811
 *                                                                                                                     // 11812
 * @param {Node} target node to which the component was deployed                                                       // 11813
 */                                                                                                                    // 11814
CanvasSurface.prototype.recall = function recall(target) {                                                             // 11815
    var size = this.getSize();                                                                                         // 11816
                                                                                                                       // 11817
    this._backBuffer.width = target.width;                                                                             // 11818
    this._backBuffer.height = target.height;                                                                           // 11819
                                                                                                                       // 11820
    if (this._contextId === '2d') {                                                                                    // 11821
        this._backBuffer.getContext(this._contextId).drawImage(target, 0, 0);                                          // 11822
        target.width = 0;                                                                                              // 11823
        target.height = 0;                                                                                             // 11824
    }                                                                                                                  // 11825
};                                                                                                                     // 11826
                                                                                                                       // 11827
/**                                                                                                                    // 11828
 * Returns the canvas element's context                                                                                // 11829
 *                                                                                                                     // 11830
 * @method getContext                                                                                                  // 11831
 * @param {string} contextId context identifier                                                                        // 11832
 */                                                                                                                    // 11833
CanvasSurface.prototype.getContext = function getContext(contextId) {                                                  // 11834
    this._contextId = contextId;                                                                                       // 11835
    return this._currentTarget ? this._currentTarget.getContext(contextId) : this._backBuffer.getContext(contextId);   // 11836
};                                                                                                                     // 11837
                                                                                                                       // 11838
/**                                                                                                                    // 11839
 *  Set the size of the surface and canvas element.                                                                    // 11840
 *                                                                                                                     // 11841
 *  @method setSize                                                                                                    // 11842
 *  @param {Array.number} size [width, height] of surface                                                              // 11843
 *  @param {Array.number} canvasSize [width, height] of canvas surface                                                 // 11844
 */                                                                                                                    // 11845
CanvasSurface.prototype.setSize = function setSize(size, canvasSize) {                                                 // 11846
    Surface.prototype.setSize.apply(this, arguments);                                                                  // 11847
    if (canvasSize) this._canvasSize = [canvasSize[0], canvasSize[1]];                                                 // 11848
    if (this._currentTarget) {                                                                                         // 11849
        this._currentTarget.width = this._canvasSize[0];                                                               // 11850
        this._currentTarget.height = this._canvasSize[1];                                                              // 11851
    }                                                                                                                  // 11852
};                                                                                                                     // 11853
                                                                                                                       // 11854
module.exports = CanvasSurface;                                                                                        // 11855
},{"../core/Surface":14}],75:[function(_dereq_,module,exports){                                                        // 11856
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11857
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11858
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11859
 *                                                                                                                     // 11860
 * Owner: mark@famo.us                                                                                                 // 11861
 * @license MPL 2.0                                                                                                    // 11862
 * @copyright Famous Industries, Inc. 2014                                                                             // 11863
 */                                                                                                                    // 11864
                                                                                                                       // 11865
var Surface = _dereq_('../core/Surface');                                                                              // 11866
var Context = _dereq_('../core/Context');                                                                              // 11867
                                                                                                                       // 11868
/**                                                                                                                    // 11869
 * ContainerSurface is an object designed to contain surfaces and                                                      // 11870
 *   set properties to be applied to all of them at once.                                                              // 11871
 *   This extends the Surface class.                                                                                   // 11872
 *   A container surface will enforce these properties on the                                                          // 11873
 *   surfaces it contains:                                                                                             // 11874
 *                                                                                                                     // 11875
 *   size (clips contained surfaces to its own width and height);                                                      // 11876
 *                                                                                                                     // 11877
 *   origin;                                                                                                           // 11878
 *                                                                                                                     // 11879
 *   its own opacity and transform, which will be automatically                                                        // 11880
 *   applied to  all Surfaces contained directly and indirectly.                                                       // 11881
 *                                                                                                                     // 11882
 * @class ContainerSurface                                                                                             // 11883
 * @extends Surface                                                                                                    // 11884
 * @constructor                                                                                                        // 11885
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 11886
 * @param {Array.string} [options.classes] CSS classes to set on all inner content                                     // 11887
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 11888
 * @param {string} [options.content] inner (HTML) content of surface (should not be used)                              // 11889
 */                                                                                                                    // 11890
function ContainerSurface(options) {                                                                                   // 11891
    Surface.call(this, options);                                                                                       // 11892
    this._container = document.createElement('div');                                                                   // 11893
    this._container.classList.add('famous-group');                                                                     // 11894
    this._container.classList.add('famous-container-group');                                                           // 11895
    this._shouldRecalculateSize = false;                                                                               // 11896
    this.context = new Context(this._container);                                                                       // 11897
    this.setContent(this._container);                                                                                  // 11898
}                                                                                                                      // 11899
                                                                                                                       // 11900
ContainerSurface.prototype = Object.create(Surface.prototype);                                                         // 11901
ContainerSurface.prototype.constructor = ContainerSurface;                                                             // 11902
ContainerSurface.prototype.elementType = 'div';                                                                        // 11903
ContainerSurface.prototype.elementClass = 'famous-surface';                                                            // 11904
                                                                                                                       // 11905
/**                                                                                                                    // 11906
 * Add renderables to this object's render tree                                                                        // 11907
 *                                                                                                                     // 11908
 * @method add                                                                                                         // 11909
 *                                                                                                                     // 11910
 * @param {Object} obj renderable object                                                                               // 11911
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 11912
 */                                                                                                                    // 11913
ContainerSurface.prototype.add = function add() {                                                                      // 11914
    return this.context.add.apply(this.context, arguments);                                                            // 11915
};                                                                                                                     // 11916
                                                                                                                       // 11917
/**                                                                                                                    // 11918
 * Return spec for this surface.  Note: Can result in a size recalculation.                                            // 11919
 *                                                                                                                     // 11920
 * @private                                                                                                            // 11921
 * @method render                                                                                                      // 11922
 *                                                                                                                     // 11923
 * @return {Object} render spec for this surface (spec id)                                                             // 11924
 */                                                                                                                    // 11925
ContainerSurface.prototype.render = function render() {                                                                // 11926
    if (this._sizeDirty) this._shouldRecalculateSize = true;                                                           // 11927
    return Surface.prototype.render.apply(this, arguments);                                                            // 11928
};                                                                                                                     // 11929
                                                                                                                       // 11930
/**                                                                                                                    // 11931
 * Place the document element this component manages into the document.                                                // 11932
 *                                                                                                                     // 11933
 * @private                                                                                                            // 11934
 * @method deploy                                                                                                      // 11935
 * @param {Node} target document parent of this container                                                              // 11936
 */                                                                                                                    // 11937
ContainerSurface.prototype.deploy = function deploy() {                                                                // 11938
    this._shouldRecalculateSize = true;                                                                                // 11939
    return Surface.prototype.deploy.apply(this, arguments);                                                            // 11940
};                                                                                                                     // 11941
                                                                                                                       // 11942
/**                                                                                                                    // 11943
 * Apply changes from this component to the corresponding document element.                                            // 11944
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 11945
 * and matrix transforms.                                                                                              // 11946
 *                                                                                                                     // 11947
 * @private                                                                                                            // 11948
 * @method commit                                                                                                      // 11949
 * @param {Context} context commit context                                                                             // 11950
 * @param {Transform} transform unused TODO                                                                            // 11951
 * @param {Number} opacity  unused TODO                                                                                // 11952
 * @param {Array.Number} origin unused TODO                                                                            // 11953
 * @param {Array.Number} size unused TODO                                                                              // 11954
 * @return {undefined} TODO returns an undefined value                                                                 // 11955
 */                                                                                                                    // 11956
ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {                       // 11957
    var previousSize = this._size ? [this._size[0], this._size[1]] : null;                                             // 11958
    var result = Surface.prototype.commit.apply(this, arguments);                                                      // 11959
    if (this._shouldRecalculateSize || (previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1]))) {
        this.context.setSize();                                                                                        // 11961
        this._shouldRecalculateSize = false;                                                                           // 11962
    }                                                                                                                  // 11963
    this.context.update();                                                                                             // 11964
    return result;                                                                                                     // 11965
};                                                                                                                     // 11966
                                                                                                                       // 11967
module.exports = ContainerSurface;                                                                                     // 11968
},{"../core/Context":1,"../core/Surface":14}],76:[function(_dereq_,module,exports){                                    // 11969
var ContainerSurface = _dereq_('./ContainerSurface');                                                                  // 11970
                                                                                                                       // 11971
function FormContainerSurface(options) {                                                                               // 11972
    if (options) this._method = options.method || '';                                                                  // 11973
    ContainerSurface.apply(this, arguments);                                                                           // 11974
}                                                                                                                      // 11975
                                                                                                                       // 11976
FormContainerSurface.prototype = Object.create(ContainerSurface.prototype);                                            // 11977
FormContainerSurface.prototype.constructor = FormContainerSurface;                                                     // 11978
                                                                                                                       // 11979
FormContainerSurface.prototype.elementType = 'form';                                                                   // 11980
                                                                                                                       // 11981
FormContainerSurface.prototype.deploy = function deploy(target) {                                                      // 11982
    if (this._method) target.method = this._method;                                                                    // 11983
    return ContainerSurface.prototype.deploy.apply(this, arguments);                                                   // 11984
};                                                                                                                     // 11985
                                                                                                                       // 11986
module.exports = FormContainerSurface;                                                                                 // 11987
},{"./ContainerSurface":75}],77:[function(_dereq_,module,exports){                                                     // 11988
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11989
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11990
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11991
 *                                                                                                                     // 11992
 * Owner: mark@famo.us                                                                                                 // 11993
 * @license MPL 2.0                                                                                                    // 11994
 * @copyright Famous Industries, Inc. 2014                                                                             // 11995
 */                                                                                                                    // 11996
                                                                                                                       // 11997
var Surface = _dereq_('../core/Surface');                                                                              // 11998
                                                                                                                       // 11999
/**                                                                                                                    // 12000
 * A surface containing image content.                                                                                 // 12001
 *   This extends the Surface class.                                                                                   // 12002
 *                                                                                                                     // 12003
 * @class ImageSurface                                                                                                 // 12004
 *                                                                                                                     // 12005
 * @extends Surface                                                                                                    // 12006
 * @constructor                                                                                                        // 12007
 * @param {Object} [options] overrides of default options                                                              // 12008
 */                                                                                                                    // 12009
function ImageSurface(options) {                                                                                       // 12010
    this._imageUrl = undefined;                                                                                        // 12011
    Surface.apply(this, arguments);                                                                                    // 12012
}                                                                                                                      // 12013
                                                                                                                       // 12014
var urlCache = [];                                                                                                     // 12015
var countCache = [];                                                                                                   // 12016
var nodeCache = [];                                                                                                    // 12017
var cacheEnabled = true;                                                                                               // 12018
                                                                                                                       // 12019
ImageSurface.enableCache = function enableCache() {                                                                    // 12020
    cacheEnabled = true;                                                                                               // 12021
};                                                                                                                     // 12022
                                                                                                                       // 12023
ImageSurface.disableCache = function disableCache() {                                                                  // 12024
    cacheEnabled = false;                                                                                              // 12025
};                                                                                                                     // 12026
                                                                                                                       // 12027
ImageSurface.clearCache = function clearCache() {                                                                      // 12028
    urlCache = [];                                                                                                     // 12029
    countCache = [];                                                                                                   // 12030
    nodeCache = [];                                                                                                    // 12031
};                                                                                                                     // 12032
                                                                                                                       // 12033
ImageSurface.getCache = function getCache() {                                                                          // 12034
    return {                                                                                                           // 12035
        urlCache: urlCache,                                                                                            // 12036
        countCache: countCache,                                                                                        // 12037
        nodeCache: countCache                                                                                          // 12038
    };                                                                                                                 // 12039
};                                                                                                                     // 12040
                                                                                                                       // 12041
ImageSurface.prototype = Object.create(Surface.prototype);                                                             // 12042
ImageSurface.prototype.constructor = ImageSurface;                                                                     // 12043
ImageSurface.prototype.elementType = 'img';                                                                            // 12044
ImageSurface.prototype.elementClass = 'famous-surface';                                                                // 12045
                                                                                                                       // 12046
/**                                                                                                                    // 12047
 * Set content URL.  This will cause a re-rendering.                                                                   // 12048
 * @method setContent                                                                                                  // 12049
 * @param {string} imageUrl                                                                                            // 12050
 */                                                                                                                    // 12051
ImageSurface.prototype.setContent = function setContent(imageUrl) {                                                    // 12052
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 12053
    if (urlIndex !== -1) {                                                                                             // 12054
        if (countCache[urlIndex] === 1) {                                                                              // 12055
            urlCache.splice(urlIndex, 1);                                                                              // 12056
            countCache.splice(urlIndex, 1);                                                                            // 12057
            nodeCache.splice(urlIndex, 1);                                                                             // 12058
        } else {                                                                                                       // 12059
            countCache[urlIndex]--;                                                                                    // 12060
        }                                                                                                              // 12061
    }                                                                                                                  // 12062
                                                                                                                       // 12063
    urlIndex = urlCache.indexOf(imageUrl);                                                                             // 12064
    if (urlIndex === -1) {                                                                                             // 12065
        urlCache.push(imageUrl);                                                                                       // 12066
        countCache.push(1);                                                                                            // 12067
    }                                                                                                                  // 12068
    else {                                                                                                             // 12069
        countCache[urlIndex]++;                                                                                        // 12070
    }                                                                                                                  // 12071
                                                                                                                       // 12072
    this._imageUrl = imageUrl;                                                                                         // 12073
    this._contentDirty = true;                                                                                         // 12074
};                                                                                                                     // 12075
                                                                                                                       // 12076
/**                                                                                                                    // 12077
 * Place the document element that this component manages into the document.                                           // 12078
 *                                                                                                                     // 12079
 * @private                                                                                                            // 12080
 * @method deploy                                                                                                      // 12081
 * @param {Node} target document parent of this container                                                              // 12082
 */                                                                                                                    // 12083
ImageSurface.prototype.deploy = function deploy(target) {                                                              // 12084
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 12085
    if (nodeCache[urlIndex] === undefined && cacheEnabled) {                                                           // 12086
        var img = new Image();                                                                                         // 12087
        img.src = this._imageUrl || '';                                                                                // 12088
        nodeCache[urlIndex] = img;                                                                                     // 12089
    }                                                                                                                  // 12090
                                                                                                                       // 12091
    target.src = this._imageUrl || '';                                                                                 // 12092
};                                                                                                                     // 12093
                                                                                                                       // 12094
/**                                                                                                                    // 12095
 * Remove this component and contained content from the document                                                       // 12096
 *                                                                                                                     // 12097
 * @private                                                                                                            // 12098
 * @method recall                                                                                                      // 12099
 *                                                                                                                     // 12100
 * @param {Node} target node to which the component was deployed                                                       // 12101
 */                                                                                                                    // 12102
ImageSurface.prototype.recall = function recall(target) {                                                              // 12103
    target.src = '';                                                                                                   // 12104
};                                                                                                                     // 12105
                                                                                                                       // 12106
module.exports = ImageSurface;                                                                                         // 12107
},{"../core/Surface":14}],78:[function(_dereq_,module,exports){                                                        // 12108
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12109
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12110
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12111
 *                                                                                                                     // 12112
 * Owner: mark@famo.us                                                                                                 // 12113
 * @license MPL 2.0                                                                                                    // 12114
 * @copyright Famous Industries, Inc. 2014                                                                             // 12115
 */                                                                                                                    // 12116
                                                                                                                       // 12117
var Surface = _dereq_('../core/Surface');                                                                              // 12118
                                                                                                                       // 12119
/**                                                                                                                    // 12120
 * A Famo.us surface in the form of an HTML input element.                                                             // 12121
 *   This extends the Surface class.                                                                                   // 12122
 *                                                                                                                     // 12123
 * @class InputSurface                                                                                                 // 12124
 * @extends Surface                                                                                                    // 12125
 * @constructor                                                                                                        // 12126
 * @param {Object} [options] overrides of default options                                                              // 12127
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an <input> element // 12128
 * @param {string} [options.type] specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)   // 12129
 * @param {string} [options.value] value of text                                                                       // 12130
 */                                                                                                                    // 12131
function InputSurface(options) {                                                                                       // 12132
    this._placeholder = options.placeholder || '';                                                                     // 12133
    this._value       = options.value || '';                                                                           // 12134
    this._type        = options.type || 'text';                                                                        // 12135
    this._name        = options.name || '';                                                                            // 12136
                                                                                                                       // 12137
    Surface.apply(this, arguments);                                                                                    // 12138
                                                                                                                       // 12139
    this.on('click', this.focus.bind(this));                                                                           // 12140
    window.addEventListener('click', function(event) {                                                                 // 12141
        if (event.target !== this._currentTarget) this.blur();                                                         // 12142
    }.bind(this));                                                                                                     // 12143
}                                                                                                                      // 12144
InputSurface.prototype = Object.create(Surface.prototype);                                                             // 12145
InputSurface.prototype.constructor = InputSurface;                                                                     // 12146
                                                                                                                       // 12147
InputSurface.prototype.elementType = 'input';                                                                          // 12148
InputSurface.prototype.elementClass = 'famous-surface';                                                                // 12149
                                                                                                                       // 12150
/**                                                                                                                    // 12151
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12152
 *                                                                                                                     // 12153
 * @method setPlaceholder                                                                                              // 12154
 * @param {string} str Value to set the placeholder to.                                                                // 12155
 * @return {InputSurface} this, allowing method chaining.                                                              // 12156
 */                                                                                                                    // 12157
InputSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                                 // 12158
    this._placeholder = str;                                                                                           // 12159
    this._contentDirty = true;                                                                                         // 12160
    return this;                                                                                                       // 12161
};                                                                                                                     // 12162
                                                                                                                       // 12163
/**                                                                                                                    // 12164
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12165
 *                                                                                                                     // 12166
 * @method focus                                                                                                       // 12167
 * @return {InputSurface} this, allowing method chaining.                                                              // 12168
 */                                                                                                                    // 12169
InputSurface.prototype.focus = function focus() {                                                                      // 12170
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12171
    return this;                                                                                                       // 12172
};                                                                                                                     // 12173
                                                                                                                       // 12174
/**                                                                                                                    // 12175
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12176
 *                                                                                                                     // 12177
 * @method blur                                                                                                        // 12178
 * @return {InputSurface} this, allowing method chaining.                                                              // 12179
 */                                                                                                                    // 12180
InputSurface.prototype.blur = function blur() {                                                                        // 12181
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12182
    return this;                                                                                                       // 12183
};                                                                                                                     // 12184
                                                                                                                       // 12185
/**                                                                                                                    // 12186
 * Set the placeholder conent.                                                                                         // 12187
 *   Note: Triggers a repaint next tick.                                                                               // 12188
 *                                                                                                                     // 12189
 * @method setValue                                                                                                    // 12190
 * @param {string} str Value to set the main input value to.                                                           // 12191
 * @return {InputSurface} this, allowing method chaining.                                                              // 12192
 */                                                                                                                    // 12193
InputSurface.prototype.setValue = function setValue(str) {                                                             // 12194
    this._value = str;                                                                                                 // 12195
    this._contentDirty = true;                                                                                         // 12196
    return this;                                                                                                       // 12197
};                                                                                                                     // 12198
                                                                                                                       // 12199
/**                                                                                                                    // 12200
 * Set the type of element to display conent.                                                                          // 12201
 *   Note: Triggers a repaint next tick.                                                                               // 12202
 *                                                                                                                     // 12203
 * @method setType                                                                                                     // 12204
 * @param {string} str type of the input surface (e.g. 'button', 'text')                                               // 12205
 * @return {InputSurface} this, allowing method chaining.                                                              // 12206
 */                                                                                                                    // 12207
InputSurface.prototype.setType = function setType(str) {                                                               // 12208
    this._type = str;                                                                                                  // 12209
    this._contentDirty = true;                                                                                         // 12210
    return this;                                                                                                       // 12211
};                                                                                                                     // 12212
                                                                                                                       // 12213
/**                                                                                                                    // 12214
 * Get the value of the inner content of the element (e.g. the entered text)                                           // 12215
 *                                                                                                                     // 12216
 * @method getValue                                                                                                    // 12217
 * @return {string} value of element                                                                                   // 12218
 */                                                                                                                    // 12219
InputSurface.prototype.getValue = function getValue() {                                                                // 12220
    if (this._currentTarget) {                                                                                         // 12221
        return this._currentTarget.value;                                                                              // 12222
    }                                                                                                                  // 12223
    else {                                                                                                             // 12224
        return this._value;                                                                                            // 12225
    }                                                                                                                  // 12226
};                                                                                                                     // 12227
                                                                                                                       // 12228
/**                                                                                                                    // 12229
 * Set the name attribute of the element.                                                                              // 12230
 *   Note: Triggers a repaint next tick.                                                                               // 12231
 *                                                                                                                     // 12232
 * @method setName                                                                                                     // 12233
 * @param {string} str element name                                                                                    // 12234
 * @return {InputSurface} this, allowing method chaining.                                                              // 12235
 */                                                                                                                    // 12236
InputSurface.prototype.setName = function setName(str) {                                                               // 12237
    this._name = str;                                                                                                  // 12238
    this._contentDirty = true;                                                                                         // 12239
    return this;                                                                                                       // 12240
};                                                                                                                     // 12241
                                                                                                                       // 12242
/**                                                                                                                    // 12243
 * Get the name attribute of the element.                                                                              // 12244
 *                                                                                                                     // 12245
 * @method getName                                                                                                     // 12246
 * @return {string} name of element                                                                                    // 12247
 */                                                                                                                    // 12248
InputSurface.prototype.getName = function getName() {                                                                  // 12249
    return this._name;                                                                                                 // 12250
};                                                                                                                     // 12251
                                                                                                                       // 12252
/**                                                                                                                    // 12253
 * Place the document element this component manages into the document.                                                // 12254
 *                                                                                                                     // 12255
 * @private                                                                                                            // 12256
 * @method deploy                                                                                                      // 12257
 * @param {Node} target document parent of this container                                                              // 12258
 */                                                                                                                    // 12259
InputSurface.prototype.deploy = function deploy(target) {                                                              // 12260
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12261
    target.value = this._value;                                                                                        // 12262
    target.type = this._type;                                                                                          // 12263
    target.name = this._name;                                                                                          // 12264
};                                                                                                                     // 12265
                                                                                                                       // 12266
module.exports = InputSurface;                                                                                         // 12267
},{"../core/Surface":14}],79:[function(_dereq_,module,exports){                                                        // 12268
var InputSurface = _dereq_('./InputSurface');                                                                          // 12269
                                                                                                                       // 12270
function SubmitInputSurface(options) {                                                                                 // 12271
    InputSurface.apply(this, arguments);                                                                               // 12272
    this._type = 'submit';                                                                                             // 12273
    if (options && options.onClick) this.setOnClick(options.onClick);                                                  // 12274
}                                                                                                                      // 12275
                                                                                                                       // 12276
SubmitInputSurface.prototype = Object.create(InputSurface.prototype);                                                  // 12277
SubmitInputSurface.prototype.constructor = SubmitInputSurface;                                                         // 12278
                                                                                                                       // 12279
SubmitInputSurface.prototype.setOnClick = function(onClick) {                                                          // 12280
    this.onClick = onClick;                                                                                            // 12281
};                                                                                                                     // 12282
                                                                                                                       // 12283
SubmitInputSurface.prototype.deploy = function deploy(target) {                                                        // 12284
    if (this.onclick) target.onClick = this.onClick;                                                                   // 12285
    InputSurface.prototype.deploy.apply(this, arguments);                                                              // 12286
};                                                                                                                     // 12287
                                                                                                                       // 12288
module.exports = SubmitInputSurface;                                                                                   // 12289
},{"./InputSurface":78}],80:[function(_dereq_,module,exports){                                                         // 12290
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12291
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12292
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12293
 *                                                                                                                     // 12294
 * Owner: mark@famo.us                                                                                                 // 12295
 * @license MPL 2.0                                                                                                    // 12296
 * @copyright Famous Industries, Inc. 2014                                                                             // 12297
 */                                                                                                                    // 12298
                                                                                                                       // 12299
var Surface = _dereq_('../core/Surface');                                                                              // 12300
                                                                                                                       // 12301
/**                                                                                                                    // 12302
 * A Famo.us surface in the form of an HTML textarea element.                                                          // 12303
 *   This extends the Surface class.                                                                                   // 12304
 *                                                                                                                     // 12305
 * @class TextareaSurface                                                                                              // 12306
 * @extends Surface                                                                                                    // 12307
 * @constructor                                                                                                        // 12308
 * @param {Object} [options] overrides of default options                                                              // 12309
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an textarea element
 * @param {string} [options.value] value of text                                                                       // 12311
 * @param {string} [options.name] specifies the name of textarea                                                       // 12312
 * @param {string} [options.wrap] specify 'hard' or 'soft' wrap for textarea                                           // 12313
 * @param {number} [options.cols] number of columns in textarea                                                        // 12314
 * @param {number} [options.rows] number of rows in textarea                                                           // 12315
 */                                                                                                                    // 12316
function TextareaSurface(options) {                                                                                    // 12317
    this._placeholder = options.placeholder || '';                                                                     // 12318
    this._value       = options.value || '';                                                                           // 12319
    this._name        = options.name || '';                                                                            // 12320
    this._wrap        = options.wrap || '';                                                                            // 12321
    this._cols        = options.cols || '';                                                                            // 12322
    this._rows        = options.rows || '';                                                                            // 12323
                                                                                                                       // 12324
    Surface.apply(this, arguments);                                                                                    // 12325
    this.on('click', this.focus.bind(this));                                                                           // 12326
}                                                                                                                      // 12327
TextareaSurface.prototype = Object.create(Surface.prototype);                                                          // 12328
TextareaSurface.prototype.constructor = TextareaSurface;                                                               // 12329
                                                                                                                       // 12330
TextareaSurface.prototype.elementType = 'textarea';                                                                    // 12331
TextareaSurface.prototype.elementClass = 'famous-surface';                                                             // 12332
                                                                                                                       // 12333
/**                                                                                                                    // 12334
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12335
 *                                                                                                                     // 12336
 * @method setPlaceholder                                                                                              // 12337
 * @param {string} str Value to set the placeholder to.                                                                // 12338
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12339
 */                                                                                                                    // 12340
TextareaSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                              // 12341
    this._placeholder = str;                                                                                           // 12342
    this._contentDirty = true;                                                                                         // 12343
    return this;                                                                                                       // 12344
};                                                                                                                     // 12345
                                                                                                                       // 12346
/**                                                                                                                    // 12347
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12348
 *                                                                                                                     // 12349
 * @method focus                                                                                                       // 12350
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12351
 */                                                                                                                    // 12352
TextareaSurface.prototype.focus = function focus() {                                                                   // 12353
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12354
    return this;                                                                                                       // 12355
};                                                                                                                     // 12356
                                                                                                                       // 12357
/**                                                                                                                    // 12358
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12359
 *                                                                                                                     // 12360
 * @method focus                                                                                                       // 12361
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12362
 */                                                                                                                    // 12363
TextareaSurface.prototype.blur = function blur() {                                                                     // 12364
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12365
    return this;                                                                                                       // 12366
};                                                                                                                     // 12367
                                                                                                                       // 12368
/**                                                                                                                    // 12369
 * Set the value of textarea.                                                                                          // 12370
 *   Note: Triggers a repaint next tick.                                                                               // 12371
 *                                                                                                                     // 12372
 * @method setValue                                                                                                    // 12373
 * @param {string} str Value to set the main textarea value to.                                                        // 12374
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12375
 */                                                                                                                    // 12376
TextareaSurface.prototype.setValue = function setValue(str) {                                                          // 12377
    this._value = str;                                                                                                 // 12378
    this._contentDirty = true;                                                                                         // 12379
    return this;                                                                                                       // 12380
};                                                                                                                     // 12381
                                                                                                                       // 12382
/**                                                                                                                    // 12383
 * Get the value of the inner content of the textarea (e.g. the entered text)                                          // 12384
 *                                                                                                                     // 12385
 * @method getValue                                                                                                    // 12386
 * @return {string} value of element                                                                                   // 12387
 */                                                                                                                    // 12388
TextareaSurface.prototype.getValue = function getValue() {                                                             // 12389
    if (this._currentTarget) {                                                                                         // 12390
        return this._currentTarget.value;                                                                              // 12391
    }                                                                                                                  // 12392
    else {                                                                                                             // 12393
        return this._value;                                                                                            // 12394
    }                                                                                                                  // 12395
};                                                                                                                     // 12396
                                                                                                                       // 12397
/**                                                                                                                    // 12398
 * Set the name attribute of the element.                                                                              // 12399
 *   Note: Triggers a repaint next tick.                                                                               // 12400
 *                                                                                                                     // 12401
 * @method setName                                                                                                     // 12402
 * @param {string} str element name                                                                                    // 12403
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12404
 */                                                                                                                    // 12405
TextareaSurface.prototype.setName = function setName(str) {                                                            // 12406
    this._name = str;                                                                                                  // 12407
    this._contentDirty = true;                                                                                         // 12408
    return this;                                                                                                       // 12409
};                                                                                                                     // 12410
                                                                                                                       // 12411
/**                                                                                                                    // 12412
 * Get the name attribute of the element.                                                                              // 12413
 *                                                                                                                     // 12414
 * @method getName                                                                                                     // 12415
 * @return {string} name of element                                                                                    // 12416
 */                                                                                                                    // 12417
TextareaSurface.prototype.getName = function getName() {                                                               // 12418
    return this._name;                                                                                                 // 12419
};                                                                                                                     // 12420
                                                                                                                       // 12421
/**                                                                                                                    // 12422
 * Set the wrap of textarea.                                                                                           // 12423
 *   Note: Triggers a repaint next tick.                                                                               // 12424
 *                                                                                                                     // 12425
 * @method setWrap                                                                                                     // 12426
 * @param {string} str wrap of the textarea surface (e.g. 'soft', 'hard')                                              // 12427
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12428
 */                                                                                                                    // 12429
TextareaSurface.prototype.setWrap = function setWrap(str) {                                                            // 12430
    this._wrap = str;                                                                                                  // 12431
    this._contentDirty = true;                                                                                         // 12432
    return this;                                                                                                       // 12433
};                                                                                                                     // 12434
                                                                                                                       // 12435
/**                                                                                                                    // 12436
 * Set the number of columns visible in the textarea.                                                                  // 12437
 *   Note: Overridden by surface size; set width to true. (eg. size: [true, *])                                        // 12438
 *         Triggers a repaint next tick.                                                                               // 12439
 *                                                                                                                     // 12440
 * @method setColumns                                                                                                  // 12441
 * @param {number} num columns in textarea surface                                                                     // 12442
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12443
 */                                                                                                                    // 12444
TextareaSurface.prototype.setColumns = function setColumns(num) {                                                      // 12445
    this._cols = num;                                                                                                  // 12446
    this._contentDirty = true;                                                                                         // 12447
    return this;                                                                                                       // 12448
};                                                                                                                     // 12449
                                                                                                                       // 12450
/**                                                                                                                    // 12451
 * Set the number of rows visible in the textarea.                                                                     // 12452
 *   Note: Overridden by surface size; set height to true. (eg. size: [*, true])                                       // 12453
 *         Triggers a repaint next tick.                                                                               // 12454
 *                                                                                                                     // 12455
 * @method setRows                                                                                                     // 12456
 * @param {number} num rows in textarea surface                                                                        // 12457
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12458
 */                                                                                                                    // 12459
TextareaSurface.prototype.setRows = function setRows(num) {                                                            // 12460
    this._rows = num;                                                                                                  // 12461
    this._contentDirty = true;                                                                                         // 12462
    return this;                                                                                                       // 12463
};                                                                                                                     // 12464
                                                                                                                       // 12465
/**                                                                                                                    // 12466
 * Place the document element this component manages into the document.                                                // 12467
 *                                                                                                                     // 12468
 * @private                                                                                                            // 12469
 * @method deploy                                                                                                      // 12470
 * @param {Node} target document parent of this container                                                              // 12471
 */                                                                                                                    // 12472
TextareaSurface.prototype.deploy = function deploy(target) {                                                           // 12473
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12474
    if (this._value !== '') target.value = this._value;                                                                // 12475
    if (this._name !== '') target.name = this._name;                                                                   // 12476
    if (this._wrap !== '') target.wrap = this._wrap;                                                                   // 12477
    if (this._cols !== '') target.cols = this._cols;                                                                   // 12478
    if (this._rows !== '') target.rows = this._rows;                                                                   // 12479
};                                                                                                                     // 12480
                                                                                                                       // 12481
module.exports = TextareaSurface;                                                                                      // 12482
},{"../core/Surface":14}],81:[function(_dereq_,module,exports){                                                        // 12483
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12484
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12485
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12486
 *                                                                                                                     // 12487
 * Owner: mark@famo.us                                                                                                 // 12488
 * @license MPL 2.0                                                                                                    // 12489
 * @copyright Famous Industries, Inc. 2014                                                                             // 12490
 */                                                                                                                    // 12491
                                                                                                                       // 12492
var Surface = _dereq_('../core/Surface');                                                                              // 12493
                                                                                                                       // 12494
/**                                                                                                                    // 12495
 * Creates a famous surface containing video content. Currently adding                                                 // 12496
 *   controls and manipulating the video are not supported through the                                                 // 12497
 *   surface interface, but can be accomplished via standard JavaScript                                                // 12498
 *   manipulation of the video DOM element.                                                                            // 12499
 *   This extends the Surface class.                                                                                   // 12500
 *                                                                                                                     // 12501
 * @class VideoSurface                                                                                                 // 12502
 * @extends Surface                                                                                                    // 12503
 * @constructor                                                                                                        // 12504
 * @param {Object} [options] default option overrides                                                                  // 12505
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 12506
 * @param {Array.string} [options.classes] CSS classes to set on inner content                                         // 12507
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 12508
 * @param {String} [options.src] videoUrl URL                                                                          // 12509
 * @param {boolean} [options.autoplay] autoplay                                                                        // 12510
 */                                                                                                                    // 12511
function VideoSurface(options) {                                                                                       // 12512
    Surface.apply(this, arguments);                                                                                    // 12513
    this._videoUrl = undefined;                                                                                        // 12514
    this.options = Object.create(VideoSurface.DEFAULT_OPTIONS);                                                        // 12515
    if (options) this.setOptions(options);                                                                             // 12516
}                                                                                                                      // 12517
                                                                                                                       // 12518
VideoSurface.prototype = Object.create(Surface.prototype);                                                             // 12519
VideoSurface.prototype.constructor = VideoSurface;                                                                     // 12520
                                                                                                                       // 12521
VideoSurface.DEFAULT_OPTIONS = {                                                                                       // 12522
    autoplay: false                                                                                                    // 12523
};                                                                                                                     // 12524
                                                                                                                       // 12525
VideoSurface.prototype.elementType = 'video';                                                                          // 12526
VideoSurface.prototype.elementClass = 'famous-surface';                                                                // 12527
                                                                                                                       // 12528
/**                                                                                                                    // 12529
 * Set internal options, overriding any default options                                                                // 12530
 *                                                                                                                     // 12531
 * @method setOptions                                                                                                  // 12532
 *                                                                                                                     // 12533
 * @param {Object} [options] overrides of default options                                                              // 12534
 * @param {Boolean} [options.autoplay] HTML autoplay                                                                   // 12535
 */                                                                                                                    // 12536
VideoSurface.prototype.setOptions = function setOptions(options) {                                                     // 12537
    if (options.size) this.setSize(options.size);                                                                      // 12538
    if (options.classes) this.setClasses(options.classes);                                                             // 12539
    if (options.properties) this.setProperties(options.properties);                                                    // 12540
    if (options.autoplay) this.options.autoplay = options.autoplay;                                                    // 12541
    if (options.src) {                                                                                                 // 12542
        this._videoUrl = options.src;                                                                                  // 12543
        this._contentDirty = true;                                                                                     // 12544
    }                                                                                                                  // 12545
};                                                                                                                     // 12546
                                                                                                                       // 12547
/**                                                                                                                    // 12548
 * Set url of the video.                                                                                               // 12549
 *                                                                                                                     // 12550
 * @method setContent                                                                                                  // 12551
 * @param {string} videoUrl URL                                                                                        // 12552
 */                                                                                                                    // 12553
VideoSurface.prototype.setContent = function setContent(videoUrl) {                                                    // 12554
    this._videoUrl = videoUrl;                                                                                         // 12555
    this._contentDirty = true;                                                                                         // 12556
};                                                                                                                     // 12557
                                                                                                                       // 12558
/**                                                                                                                    // 12559
 * Place the document element this component manages into the document.                                                // 12560
 *   Note: In the case of VideoSurface, simply changes the options on the target.                                      // 12561
 *                                                                                                                     // 12562
 * @private                                                                                                            // 12563
 * @method deploy                                                                                                      // 12564
 * @param {Node} target document parent of this container                                                              // 12565
 */                                                                                                                    // 12566
VideoSurface.prototype.deploy = function deploy(target) {                                                              // 12567
    target.src = this._videoUrl;                                                                                       // 12568
    target.autoplay = this.options.autoplay;                                                                           // 12569
};                                                                                                                     // 12570
                                                                                                                       // 12571
/**                                                                                                                    // 12572
 * Remove this component and contained content from the document.                                                      // 12573
 *   Note: This doesn't actually remove the <video> element from the                                                   // 12574
 *   document.                                                                                                         // 12575
 * @private                                                                                                            // 12576
 * @method recall                                                                                                      // 12577
 *                                                                                                                     // 12578
 * @param {Node} target node to which the component was deployed                                                       // 12579
 */                                                                                                                    // 12580
VideoSurface.prototype.recall = function recall(target) {                                                              // 12581
    target.src = '';                                                                                                   // 12582
};                                                                                                                     // 12583
                                                                                                                       // 12584
module.exports = VideoSurface;                                                                                         // 12585
},{"../core/Surface":14}],82:[function(_dereq_,module,exports){                                                        // 12586
module.exports = {                                                                                                     // 12587
  CanvasSurface: _dereq_('./CanvasSurface'),                                                                           // 12588
  ContainerSurface: _dereq_('./ContainerSurface'),                                                                     // 12589
  FormContainerSurface: _dereq_('./FormContainerSurface'),                                                             // 12590
  ImageSurface: _dereq_('./ImageSurface'),                                                                             // 12591
  InputSurface: _dereq_('./InputSurface'),                                                                             // 12592
  SubmitInputSurface: _dereq_('./SubmitInputSurface'),                                                                 // 12593
  TextareaSurface: _dereq_('./TextareaSurface'),                                                                       // 12594
  VideoSurface: _dereq_('./VideoSurface')                                                                              // 12595
};                                                                                                                     // 12596
                                                                                                                       // 12597
},{"./CanvasSurface":74,"./ContainerSurface":75,"./FormContainerSurface":76,"./ImageSurface":77,"./InputSurface":78,"./SubmitInputSurface":79,"./TextareaSurface":80,"./VideoSurface":81}],83:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12599
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12600
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12601
 *                                                                                                                     // 12602
 * Owner: david@famo.us                                                                                                // 12603
 * @license MPL 2.0                                                                                                    // 12604
 * @copyright Famous Industries, Inc. 2014                                                                             // 12605
 */                                                                                                                    // 12606
                                                                                                                       // 12607
                                                                                                                       // 12608
                                                                                                                       // 12609
/**                                                                                                                    // 12610
 * A simple in-memory object cache.  Used as a helper for Views with                                                   // 12611
 * provider functions.                                                                                                 // 12612
 * @class CachedMap                                                                                                    // 12613
 * @constructor                                                                                                        // 12614
 */                                                                                                                    // 12615
function CachedMap(mappingFunction) {                                                                                  // 12616
    this._map = mappingFunction || null;                                                                               // 12617
    this._cachedOutput = null;                                                                                         // 12618
    this._cachedInput = Number.NaN; //never valid as input                                                             // 12619
}                                                                                                                      // 12620
                                                                                                                       // 12621
/**                                                                                                                    // 12622
 * Creates a mapping function with a cache.                                                                            // 12623
 * This is the main entry point for this object.                                                                       // 12624
 * @static                                                                                                             // 12625
 * @method create                                                                                                      // 12626
 * @param {function} mappingFunction mapping                                                                           // 12627
 * @return {function} memorized mapping function                                                                       // 12628
 */                                                                                                                    // 12629
CachedMap.create = function create(mappingFunction) {                                                                  // 12630
    var instance = new CachedMap(mappingFunction);                                                                     // 12631
    return instance.get.bind(instance);                                                                                // 12632
};                                                                                                                     // 12633
                                                                                                                       // 12634
/**                                                                                                                    // 12635
 * Retrieve items from cache or from mapping function.                                                                 // 12636
 *                                                                                                                     // 12637
 * @method get                                                                                                         // 12638
 * @param {Object} input input key                                                                                     // 12639
 */                                                                                                                    // 12640
CachedMap.prototype.get = function get(input) {                                                                        // 12641
    if (input !== this._cachedInput) {                                                                                 // 12642
        this._cachedInput = input;                                                                                     // 12643
        this._cachedOutput = this._map(input);                                                                         // 12644
    }                                                                                                                  // 12645
    return this._cachedOutput;                                                                                         // 12646
};                                                                                                                     // 12647
                                                                                                                       // 12648
module.exports = CachedMap;                                                                                            // 12649
},{}],84:[function(_dereq_,module,exports){                                                                            // 12650
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12651
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12652
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12653
 *                                                                                                                     // 12654
 * Owner: david@famo.us                                                                                                // 12655
 * @license MPL 2.0                                                                                                    // 12656
 * @copyright Famous Industries, Inc. 2014                                                                             // 12657
 */                                                                                                                    // 12658
                                                                                                                       // 12659
                                                                                                                       // 12660
                                                                                                                       // 12661
                                                                                                                       // 12662
/**                                                                                                                    // 12663
 * A library of curves which map an animation explicitly as a function of time.                                        // 12664
 *                                                                                                                     // 12665
 * @class Easing                                                                                                       // 12666
 */                                                                                                                    // 12667
var Easing = {                                                                                                         // 12668
                                                                                                                       // 12669
    /**                                                                                                                // 12670
     * @property inQuad                                                                                                // 12671
     * @static                                                                                                         // 12672
     */                                                                                                                // 12673
    inQuad: function(t) {                                                                                              // 12674
        return t*t;                                                                                                    // 12675
    },                                                                                                                 // 12676
                                                                                                                       // 12677
    /**                                                                                                                // 12678
     * @property outQuad                                                                                               // 12679
     * @static                                                                                                         // 12680
     */                                                                                                                // 12681
    outQuad: function(t) {                                                                                             // 12682
        return -(t-=1)*t+1;                                                                                            // 12683
    },                                                                                                                 // 12684
                                                                                                                       // 12685
    /**                                                                                                                // 12686
     * @property inOutQuad                                                                                             // 12687
     * @static                                                                                                         // 12688
     */                                                                                                                // 12689
    inOutQuad: function(t) {                                                                                           // 12690
        if ((t/=.5) < 1) return .5*t*t;                                                                                // 12691
        return -.5*((--t)*(t-2) - 1);                                                                                  // 12692
    },                                                                                                                 // 12693
                                                                                                                       // 12694
    /**                                                                                                                // 12695
     * @property inCubic                                                                                               // 12696
     * @static                                                                                                         // 12697
     */                                                                                                                // 12698
    inCubic: function(t) {                                                                                             // 12699
        return t*t*t;                                                                                                  // 12700
    },                                                                                                                 // 12701
                                                                                                                       // 12702
    /**                                                                                                                // 12703
     * @property outCubic                                                                                              // 12704
     * @static                                                                                                         // 12705
     */                                                                                                                // 12706
    outCubic: function(t) {                                                                                            // 12707
        return ((--t)*t*t + 1);                                                                                        // 12708
    },                                                                                                                 // 12709
                                                                                                                       // 12710
    /**                                                                                                                // 12711
     * @property inOutCubic                                                                                            // 12712
     * @static                                                                                                         // 12713
     */                                                                                                                // 12714
    inOutCubic: function(t) {                                                                                          // 12715
        if ((t/=.5) < 1) return .5*t*t*t;                                                                              // 12716
        return .5*((t-=2)*t*t + 2);                                                                                    // 12717
    },                                                                                                                 // 12718
                                                                                                                       // 12719
    /**                                                                                                                // 12720
     * @property inQuart                                                                                               // 12721
     * @static                                                                                                         // 12722
     */                                                                                                                // 12723
    inQuart: function(t) {                                                                                             // 12724
        return t*t*t*t;                                                                                                // 12725
    },                                                                                                                 // 12726
                                                                                                                       // 12727
    /**                                                                                                                // 12728
     * @property outQuart                                                                                              // 12729
     * @static                                                                                                         // 12730
     */                                                                                                                // 12731
    outQuart: function(t) {                                                                                            // 12732
        return -((--t)*t*t*t - 1);                                                                                     // 12733
    },                                                                                                                 // 12734
                                                                                                                       // 12735
    /**                                                                                                                // 12736
     * @property inOutQuart                                                                                            // 12737
     * @static                                                                                                         // 12738
     */                                                                                                                // 12739
    inOutQuart: function(t) {                                                                                          // 12740
        if ((t/=.5) < 1) return .5*t*t*t*t;                                                                            // 12741
        return -.5 * ((t-=2)*t*t*t - 2);                                                                               // 12742
    },                                                                                                                 // 12743
                                                                                                                       // 12744
    /**                                                                                                                // 12745
     * @property inQuint                                                                                               // 12746
     * @static                                                                                                         // 12747
     */                                                                                                                // 12748
    inQuint: function(t) {                                                                                             // 12749
        return t*t*t*t*t;                                                                                              // 12750
    },                                                                                                                 // 12751
                                                                                                                       // 12752
    /**                                                                                                                // 12753
     * @property outQuint                                                                                              // 12754
     * @static                                                                                                         // 12755
     */                                                                                                                // 12756
    outQuint: function(t) {                                                                                            // 12757
        return ((--t)*t*t*t*t + 1);                                                                                    // 12758
    },                                                                                                                 // 12759
                                                                                                                       // 12760
    /**                                                                                                                // 12761
     * @property inOutQuint                                                                                            // 12762
     * @static                                                                                                         // 12763
     */                                                                                                                // 12764
    inOutQuint: function(t) {                                                                                          // 12765
        if ((t/=.5) < 1) return .5*t*t*t*t*t;                                                                          // 12766
        return .5*((t-=2)*t*t*t*t + 2);                                                                                // 12767
    },                                                                                                                 // 12768
                                                                                                                       // 12769
    /**                                                                                                                // 12770
     * @property inSine                                                                                                // 12771
     * @static                                                                                                         // 12772
     */                                                                                                                // 12773
    inSine: function(t) {                                                                                              // 12774
        return -1.0*Math.cos(t * (Math.PI/2)) + 1.0;                                                                   // 12775
    },                                                                                                                 // 12776
                                                                                                                       // 12777
    /**                                                                                                                // 12778
     * @property outSine                                                                                               // 12779
     * @static                                                                                                         // 12780
     */                                                                                                                // 12781
    outSine: function(t) {                                                                                             // 12782
        return Math.sin(t * (Math.PI/2));                                                                              // 12783
    },                                                                                                                 // 12784
                                                                                                                       // 12785
    /**                                                                                                                // 12786
     * @property inOutSine                                                                                             // 12787
     * @static                                                                                                         // 12788
     */                                                                                                                // 12789
    inOutSine: function(t) {                                                                                           // 12790
        return -.5*(Math.cos(Math.PI*t) - 1);                                                                          // 12791
    },                                                                                                                 // 12792
                                                                                                                       // 12793
    /**                                                                                                                // 12794
     * @property inExpo                                                                                                // 12795
     * @static                                                                                                         // 12796
     */                                                                                                                // 12797
    inExpo: function(t) {                                                                                              // 12798
        return (t===0) ? 0.0 : Math.pow(2, 10 * (t - 1));                                                              // 12799
    },                                                                                                                 // 12800
                                                                                                                       // 12801
    /**                                                                                                                // 12802
     * @property outExpo                                                                                               // 12803
     * @static                                                                                                         // 12804
     */                                                                                                                // 12805
    outExpo: function(t) {                                                                                             // 12806
        return (t===1.0) ? 1.0 : (-Math.pow(2, -10 * t) + 1);                                                          // 12807
    },                                                                                                                 // 12808
                                                                                                                       // 12809
    /**                                                                                                                // 12810
     * @property inOutExpo                                                                                             // 12811
     * @static                                                                                                         // 12812
     */                                                                                                                // 12813
    inOutExpo: function(t) {                                                                                           // 12814
        if (t===0) return 0.0;                                                                                         // 12815
        if (t===1.0) return 1.0;                                                                                       // 12816
        if ((t/=.5) < 1) return .5 * Math.pow(2, 10 * (t - 1));                                                        // 12817
        return .5 * (-Math.pow(2, -10 * --t) + 2);                                                                     // 12818
    },                                                                                                                 // 12819
                                                                                                                       // 12820
    /**                                                                                                                // 12821
     * @property inCirc                                                                                                // 12822
     * @static                                                                                                         // 12823
     */                                                                                                                // 12824
    inCirc: function(t) {                                                                                              // 12825
        return -(Math.sqrt(1 - t*t) - 1);                                                                              // 12826
    },                                                                                                                 // 12827
                                                                                                                       // 12828
    /**                                                                                                                // 12829
     * @property outCirc                                                                                               // 12830
     * @static                                                                                                         // 12831
     */                                                                                                                // 12832
    outCirc: function(t) {                                                                                             // 12833
        return Math.sqrt(1 - (--t)*t);                                                                                 // 12834
    },                                                                                                                 // 12835
                                                                                                                       // 12836
    /**                                                                                                                // 12837
     * @property inOutCirc                                                                                             // 12838
     * @static                                                                                                         // 12839
     */                                                                                                                // 12840
    inOutCirc: function(t) {                                                                                           // 12841
        if ((t/=.5) < 1) return -.5 * (Math.sqrt(1 - t*t) - 1);                                                        // 12842
        return .5 * (Math.sqrt(1 - (t-=2)*t) + 1);                                                                     // 12843
    },                                                                                                                 // 12844
                                                                                                                       // 12845
    /**                                                                                                                // 12846
     * @property inElastic                                                                                             // 12847
     * @static                                                                                                         // 12848
     */                                                                                                                // 12849
    inElastic: function(t) {                                                                                           // 12850
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12851
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12852
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12853
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/ p));                                            // 12854
    },                                                                                                                 // 12855
                                                                                                                       // 12856
    /**                                                                                                                // 12857
     * @property outElastic                                                                                            // 12858
     * @static                                                                                                         // 12859
     */                                                                                                                // 12860
    outElastic: function(t) {                                                                                          // 12861
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12862
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12863
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12864
        return a*Math.pow(2,-10*t) * Math.sin((t-s)*(2*Math.PI)/p) + 1.0;                                              // 12865
    },                                                                                                                 // 12866
                                                                                                                       // 12867
    /**                                                                                                                // 12868
     * @property inOutElastic                                                                                          // 12869
     * @static                                                                                                         // 12870
     */                                                                                                                // 12871
    inOutElastic: function(t) {                                                                                        // 12872
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12873
        if (t===0) return 0.0;  if ((t/=.5)===2) return 1.0;  if (!p) p=(.3*1.5);                                      // 12874
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12875
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p));                               // 12876
        return a*Math.pow(2,-10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p)*.5 + 1.0;                                      // 12877
    },                                                                                                                 // 12878
                                                                                                                       // 12879
    /**                                                                                                                // 12880
     * @property inBack                                                                                                // 12881
     * @static                                                                                                         // 12882
     */                                                                                                                // 12883
    inBack: function(t, s) {                                                                                           // 12884
        if (s === undefined) s = 1.70158;                                                                              // 12885
        return t*t*((s+1)*t - s);                                                                                      // 12886
    },                                                                                                                 // 12887
                                                                                                                       // 12888
    /**                                                                                                                // 12889
     * @property outBack                                                                                               // 12890
     * @static                                                                                                         // 12891
     */                                                                                                                // 12892
    outBack: function(t, s) {                                                                                          // 12893
        if (s === undefined) s = 1.70158;                                                                              // 12894
        return ((--t)*t*((s+1)*t + s) + 1);                                                                            // 12895
    },                                                                                                                 // 12896
                                                                                                                       // 12897
    /**                                                                                                                // 12898
     * @property inOutBack                                                                                             // 12899
     * @static                                                                                                         // 12900
     */                                                                                                                // 12901
    inOutBack: function(t, s) {                                                                                        // 12902
        if (s === undefined) s = 1.70158;                                                                              // 12903
        if ((t/=.5) < 1) return .5*(t*t*(((s*=(1.525))+1)*t - s));                                                     // 12904
        return .5*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);                                                             // 12905
    },                                                                                                                 // 12906
                                                                                                                       // 12907
    /**                                                                                                                // 12908
     * @property inBounce                                                                                              // 12909
     * @static                                                                                                         // 12910
     */                                                                                                                // 12911
    inBounce: function(t) {                                                                                            // 12912
        return 1.0 - Easing.outBounce(1.0-t);                                                                          // 12913
    },                                                                                                                 // 12914
                                                                                                                       // 12915
    /**                                                                                                                // 12916
     * @property outBounce                                                                                             // 12917
     * @static                                                                                                         // 12918
     */                                                                                                                // 12919
    outBounce: function(t) {                                                                                           // 12920
        if (t < (1/2.75)) {                                                                                            // 12921
            return (7.5625*t*t);                                                                                       // 12922
        } else if (t < (2/2.75)) {                                                                                     // 12923
            return (7.5625*(t-=(1.5/2.75))*t + .75);                                                                   // 12924
        } else if (t < (2.5/2.75)) {                                                                                   // 12925
            return (7.5625*(t-=(2.25/2.75))*t + .9375);                                                                // 12926
        } else {                                                                                                       // 12927
            return (7.5625*(t-=(2.625/2.75))*t + .984375);                                                             // 12928
        }                                                                                                              // 12929
    },                                                                                                                 // 12930
                                                                                                                       // 12931
    /**                                                                                                                // 12932
     * @property inOutBounce                                                                                           // 12933
     * @static                                                                                                         // 12934
     */                                                                                                                // 12935
    inOutBounce: function(t) {                                                                                         // 12936
        if (t < .5) return Easing.inBounce(t*2) * .5;                                                                  // 12937
        return Easing.outBounce(t*2-1.0) * .5 + .5;                                                                    // 12938
    }                                                                                                                  // 12939
};                                                                                                                     // 12940
                                                                                                                       // 12941
module.exports = Easing;                                                                                               // 12942
},{}],85:[function(_dereq_,module,exports){                                                                            // 12943
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12944
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12945
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12946
 *                                                                                                                     // 12947
 * Owner: david@famo.us                                                                                                // 12948
 * @license MPL 2.0                                                                                                    // 12949
 * @copyright Famous Industries, Inc. 2014                                                                             // 12950
 */                                                                                                                    // 12951
                                                                                                                       // 12952
var Utility = _dereq_('../utilities/Utility');                                                                         // 12953
                                                                                                                       // 12954
/**                                                                                                                    // 12955
 * Transition meta-method to support transitioning multiple                                                            // 12956
 *   values with scalar-only methods.                                                                                  // 12957
 *                                                                                                                     // 12958
 *                                                                                                                     // 12959
 * @class MultipleTransition                                                                                           // 12960
 * @constructor                                                                                                        // 12961
 *                                                                                                                     // 12962
 * @param {Object} method Transionable class to multiplex                                                              // 12963
 */                                                                                                                    // 12964
function MultipleTransition(method) {                                                                                  // 12965
    this.method = method;                                                                                              // 12966
    this._instances = [];                                                                                              // 12967
    this.state = [];                                                                                                   // 12968
}                                                                                                                      // 12969
                                                                                                                       // 12970
MultipleTransition.SUPPORTS_MULTIPLE = true;                                                                           // 12971
                                                                                                                       // 12972
/**                                                                                                                    // 12973
 * Get the state of each transition.                                                                                   // 12974
 *                                                                                                                     // 12975
 * @method get                                                                                                         // 12976
 *                                                                                                                     // 12977
 * @return state {Number|Array} state array                                                                            // 12978
 */                                                                                                                    // 12979
MultipleTransition.prototype.get = function get() {                                                                    // 12980
    for (var i = 0; i < this._instances.length; i++) {                                                                 // 12981
        this.state[i] = this._instances[i].get();                                                                      // 12982
    }                                                                                                                  // 12983
    return this.state;                                                                                                 // 12984
};                                                                                                                     // 12985
                                                                                                                       // 12986
/**                                                                                                                    // 12987
 * Set the end states with a shared transition, with optional callback.                                                // 12988
 *                                                                                                                     // 12989
 * @method set                                                                                                         // 12990
 *                                                                                                                     // 12991
 * @param {Number|Array} endState Final State.  Use a multi-element argument for multiple transitions.                 // 12992
 * @param {Object} transition Transition definition, shared among all instances                                        // 12993
 * @param {Function} callback called when all endStates have been reached.                                             // 12994
 */                                                                                                                    // 12995
MultipleTransition.prototype.set = function set(endState, transition, callback) {                                      // 12996
    var _allCallback = Utility.after(endState.length, callback);                                                       // 12997
    for (var i = 0; i < endState.length; i++) {                                                                        // 12998
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 12999
        this._instances[i].set(endState[i], transition, _allCallback);                                                 // 13000
    }                                                                                                                  // 13001
};                                                                                                                     // 13002
                                                                                                                       // 13003
/**                                                                                                                    // 13004
 * Reset all transitions to start state.                                                                               // 13005
 *                                                                                                                     // 13006
 * @method reset                                                                                                       // 13007
 *                                                                                                                     // 13008
 * @param  {Number|Array} startState Start state                                                                       // 13009
 */                                                                                                                    // 13010
MultipleTransition.prototype.reset = function reset(startState) {                                                      // 13011
    for (var i = 0; i < startState.length; i++) {                                                                      // 13012
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 13013
        this._instances[i].reset(startState[i]);                                                                       // 13014
    }                                                                                                                  // 13015
};                                                                                                                     // 13016
                                                                                                                       // 13017
module.exports = MultipleTransition;                                                                                   // 13018
},{"../utilities/Utility":95}],86:[function(_dereq_,module,exports){                                                   // 13019
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13020
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13021
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13022
 *                                                                                                                     // 13023
 * Owner: david@famo.us                                                                                                // 13024
 * @license MPL 2.0                                                                                                    // 13025
 * @copyright Famous Industries, Inc. 2014                                                                             // 13026
 */                                                                                                                    // 13027
                                                                                                                       // 13028
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 13029
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 13030
var Spring = _dereq_('../physics/constraints/Snap');                                                                   // 13031
var Vector = _dereq_('../math/Vector');                                                                                // 13032
                                                                                                                       // 13033
/**                                                                                                                    // 13034
 * SnapTransition is a method of transitioning between two values (numbers,                                            // 13035
 * or arrays of numbers). It is similar to SpringTransition except                                                     // 13036
 * the transition can be much faster and always has a damping effect.                                                  // 13037
 *                                                                                                                     // 13038
 * @class SnapTransition                                                                                               // 13039
 * @constructor                                                                                                        // 13040
 *                                                                                                                     // 13041
 * @param [state=0] {Number|Array} Initial state                                                                       // 13042
 */                                                                                                                    // 13043
function SnapTransition(state) {                                                                                       // 13044
    state = state || 0;                                                                                                // 13045
                                                                                                                       // 13046
    this.endState  = new Vector(state);                                                                                // 13047
    this.initState = new Vector();                                                                                     // 13048
                                                                                                                       // 13049
    this._dimensions       = 1;                                                                                        // 13050
    this._restTolerance    = 1e-10;                                                                                    // 13051
    this._absRestTolerance = this._restTolerance;                                                                      // 13052
    this._callback         = undefined;                                                                                // 13053
                                                                                                                       // 13054
    this.PE       = new PE();                                                                                          // 13055
    this.particle = new Particle();                                                                                    // 13056
    this.spring   = new Spring({anchor : this.endState});                                                              // 13057
                                                                                                                       // 13058
    this.PE.addBody(this.particle);                                                                                    // 13059
    this.PE.attach(this.spring, this.particle);                                                                        // 13060
}                                                                                                                      // 13061
                                                                                                                       // 13062
SnapTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 13063
                                                                                                                       // 13064
/**                                                                                                                    // 13065
 * @property SnapTransition.DEFAULT_OPTIONS                                                                            // 13066
 * @type Object                                                                                                        // 13067
 * @protected                                                                                                          // 13068
 * @static                                                                                                             // 13069
 */                                                                                                                    // 13070
SnapTransition.DEFAULT_OPTIONS = {                                                                                     // 13071
                                                                                                                       // 13072
    /**                                                                                                                // 13073
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13074
     * when there is no damping                                                                                        // 13075
     *    Range : [0, Infinity]                                                                                        // 13076
     *                                                                                                                 // 13077
     * @attribute period                                                                                               // 13078
     * @type Number                                                                                                    // 13079
     * @default 100                                                                                                    // 13080
     */                                                                                                                // 13081
    period : 100,                                                                                                      // 13082
                                                                                                                       // 13083
    /**                                                                                                                // 13084
     * The damping of the snap.                                                                                        // 13085
     *    Range : [0, 1]                                                                                               // 13086
     *                                                                                                                 // 13087
     * @attribute dampingRatio                                                                                         // 13088
     * @type Number                                                                                                    // 13089
     * @default 0.2                                                                                                    // 13090
     */                                                                                                                // 13091
    dampingRatio : 0.2,                                                                                                // 13092
                                                                                                                       // 13093
    /**                                                                                                                // 13094
     * The initial velocity of the transition.                                                                         // 13095
     *                                                                                                                 // 13096
     * @attribute velocity                                                                                             // 13097
     * @type Number|Array                                                                                              // 13098
     * @default 0                                                                                                      // 13099
     */                                                                                                                // 13100
    velocity : 0                                                                                                       // 13101
};                                                                                                                     // 13102
                                                                                                                       // 13103
function _getEnergy() {                                                                                                // 13104
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13105
}                                                                                                                      // 13106
                                                                                                                       // 13107
function _setAbsoluteRestTolerance() {                                                                                 // 13108
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13109
    this._absRestTolerance = (distance === 0)                                                                          // 13110
        ? this._restTolerance                                                                                          // 13111
        : this._restTolerance * distance;                                                                              // 13112
}                                                                                                                      // 13113
                                                                                                                       // 13114
function _setTarget(target) {                                                                                          // 13115
    this.endState.set(target);                                                                                         // 13116
    _setAbsoluteRestTolerance.call(this);                                                                              // 13117
}                                                                                                                      // 13118
                                                                                                                       // 13119
function _wake() {                                                                                                     // 13120
    this.PE.wake();                                                                                                    // 13121
}                                                                                                                      // 13122
                                                                                                                       // 13123
function _sleep() {                                                                                                    // 13124
    this.PE.sleep();                                                                                                   // 13125
}                                                                                                                      // 13126
                                                                                                                       // 13127
function _setParticlePosition(p) {                                                                                     // 13128
    this.particle.position.set(p);                                                                                     // 13129
}                                                                                                                      // 13130
                                                                                                                       // 13131
function _setParticleVelocity(v) {                                                                                     // 13132
    this.particle.velocity.set(v);                                                                                     // 13133
}                                                                                                                      // 13134
                                                                                                                       // 13135
function _getParticlePosition() {                                                                                      // 13136
    return (this._dimensions === 0)                                                                                    // 13137
        ? this.particle.getPosition1D()                                                                                // 13138
        : this.particle.getPosition();                                                                                 // 13139
}                                                                                                                      // 13140
                                                                                                                       // 13141
function _getParticleVelocity() {                                                                                      // 13142
    return (this._dimensions === 0)                                                                                    // 13143
        ? this.particle.getVelocity1D()                                                                                // 13144
        : this.particle.getVelocity();                                                                                 // 13145
}                                                                                                                      // 13146
                                                                                                                       // 13147
function _setCallback(callback) {                                                                                      // 13148
    this._callback = callback;                                                                                         // 13149
}                                                                                                                      // 13150
                                                                                                                       // 13151
function _setupDefinition(definition) {                                                                                // 13152
    var defaults = SnapTransition.DEFAULT_OPTIONS;                                                                     // 13153
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13154
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13155
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13156
                                                                                                                       // 13157
    //setup spring                                                                                                     // 13158
    this.spring.setOptions({                                                                                           // 13159
        period       : definition.period,                                                                              // 13160
        dampingRatio : definition.dampingRatio                                                                         // 13161
    });                                                                                                                // 13162
                                                                                                                       // 13163
    //setup particle                                                                                                   // 13164
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13165
}                                                                                                                      // 13166
                                                                                                                       // 13167
function _update() {                                                                                                   // 13168
    if (this.PE.isSleeping()) {                                                                                        // 13169
        if (this._callback) {                                                                                          // 13170
            var cb = this._callback;                                                                                   // 13171
            this._callback = undefined;                                                                                // 13172
            cb();                                                                                                      // 13173
        }                                                                                                              // 13174
        return;                                                                                                        // 13175
    }                                                                                                                  // 13176
                                                                                                                       // 13177
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13178
        _setParticlePosition.call(this, this.endState);                                                                // 13179
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13180
        _sleep.call(this);                                                                                             // 13181
    }                                                                                                                  // 13182
}                                                                                                                      // 13183
                                                                                                                       // 13184
/**                                                                                                                    // 13185
 * Resets the state and velocity                                                                                       // 13186
 *                                                                                                                     // 13187
 * @method reset                                                                                                       // 13188
 *                                                                                                                     // 13189
 * @param state {Number|Array}      State                                                                              // 13190
 * @param [velocity] {Number|Array} Velocity                                                                           // 13191
 */                                                                                                                    // 13192
SnapTransition.prototype.reset = function reset(state, velocity) {                                                     // 13193
    this._dimensions = (state instanceof Array)                                                                        // 13194
        ? state.length                                                                                                 // 13195
        : 0;                                                                                                           // 13196
                                                                                                                       // 13197
    this.initState.set(state);                                                                                         // 13198
    _setParticlePosition.call(this, state);                                                                            // 13199
    _setTarget.call(this, state);                                                                                      // 13200
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 13201
    _setCallback.call(this, undefined);                                                                                // 13202
};                                                                                                                     // 13203
                                                                                                                       // 13204
/**                                                                                                                    // 13205
 * Getter for velocity                                                                                                 // 13206
 *                                                                                                                     // 13207
 * @method getVelocity                                                                                                 // 13208
 *                                                                                                                     // 13209
 * @return velocity {Number|Array}                                                                                     // 13210
 */                                                                                                                    // 13211
SnapTransition.prototype.getVelocity = function getVelocity() {                                                        // 13212
    return _getParticleVelocity.call(this);                                                                            // 13213
};                                                                                                                     // 13214
                                                                                                                       // 13215
/**                                                                                                                    // 13216
 * Setter for velocity                                                                                                 // 13217
 *                                                                                                                     // 13218
 * @method setVelocity                                                                                                 // 13219
 *                                                                                                                     // 13220
 * @return velocity {Number|Array}                                                                                     // 13221
 */                                                                                                                    // 13222
SnapTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 13223
    this.call(this, _setParticleVelocity(velocity));                                                                   // 13224
};                                                                                                                     // 13225
                                                                                                                       // 13226
/**                                                                                                                    // 13227
 * Detects whether a transition is in progress                                                                         // 13228
 *                                                                                                                     // 13229
 * @method isActive                                                                                                    // 13230
 *                                                                                                                     // 13231
 * @return {Boolean}                                                                                                   // 13232
 */                                                                                                                    // 13233
SnapTransition.prototype.isActive = function isActive() {                                                              // 13234
    return !this.PE.isSleeping();                                                                                      // 13235
};                                                                                                                     // 13236
                                                                                                                       // 13237
/**                                                                                                                    // 13238
 * Halt the transition                                                                                                 // 13239
 *                                                                                                                     // 13240
 * @method halt                                                                                                        // 13241
 */                                                                                                                    // 13242
SnapTransition.prototype.halt = function halt() {                                                                      // 13243
    this.set(this.get());                                                                                              // 13244
};                                                                                                                     // 13245
                                                                                                                       // 13246
/**                                                                                                                    // 13247
 * Get the current position of the transition                                                                          // 13248
s     *                                                                                                                // 13249
 * @method get                                                                                                         // 13250
 *                                                                                                                     // 13251
 * @return state {Number|Array}                                                                                        // 13252
 */                                                                                                                    // 13253
SnapTransition.prototype.get = function get() {                                                                        // 13254
    _update.call(this);                                                                                                // 13255
    return _getParticlePosition.call(this);                                                                            // 13256
};                                                                                                                     // 13257
                                                                                                                       // 13258
/**                                                                                                                    // 13259
 * Set the end position and transition, with optional callback on completion.                                          // 13260
 *                                                                                                                     // 13261
 * @method set                                                                                                         // 13262
 *                                                                                                                     // 13263
 * @param state {Number|Array}      Final state                                                                        // 13264
 * @param [definition] {Object}     Transition definition                                                              // 13265
 * @param [callback] {Function}     Callback                                                                           // 13266
 */                                                                                                                    // 13267
SnapTransition.prototype.set = function set(state, definition, callback) {                                             // 13268
    if (!definition) {                                                                                                 // 13269
        this.reset(state);                                                                                             // 13270
        if (callback) callback();                                                                                      // 13271
        return;                                                                                                        // 13272
    }                                                                                                                  // 13273
                                                                                                                       // 13274
    this._dimensions = (state instanceof Array)                                                                        // 13275
        ? state.length                                                                                                 // 13276
        : 0;                                                                                                           // 13277
                                                                                                                       // 13278
    _wake.call(this);                                                                                                  // 13279
    _setupDefinition.call(this, definition);                                                                           // 13280
    _setTarget.call(this, state);                                                                                      // 13281
    _setCallback.call(this, callback);                                                                                 // 13282
};                                                                                                                     // 13283
                                                                                                                       // 13284
module.exports = SnapTransition;                                                                                       // 13285
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/constraints/Snap":58}],87:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13287
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13288
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13289
 *                                                                                                                     // 13290
 * Owner: david@famo.us                                                                                                // 13291
 * @license MPL 2.0                                                                                                    // 13292
 * @copyright Famous Industries, Inc. 2014                                                                             // 13293
 */                                                                                                                    // 13294
                                                                                                                       // 13295
/*global console*/                                                                                                     // 13296
                                                                                                                       // 13297
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 13298
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 13299
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 13300
var Vector = _dereq_('../math/Vector');                                                                                // 13301
                                                                                                                       // 13302
/**                                                                                                                    // 13303
 * SpringTransition is a method of transitioning between two values (numbers,                                          // 13304
 * or arrays of numbers) with a bounce. The transition will overshoot the target                                       // 13305
 * state depending on the parameters of the transition.                                                                // 13306
 *                                                                                                                     // 13307
 * @class SpringTransition                                                                                             // 13308
 * @constructor                                                                                                        // 13309
 *                                                                                                                     // 13310
 * @param {Number|Array} [state=0] Initial state                                                                       // 13311
 */                                                                                                                    // 13312
function SpringTransition(state) {                                                                                     // 13313
    state = state || 0;                                                                                                // 13314
    this.endState  = new Vector(state);                                                                                // 13315
    this.initState = new Vector();                                                                                     // 13316
                                                                                                                       // 13317
    this._dimensions       = undefined;                                                                                // 13318
    this._restTolerance    = 1e-10;                                                                                    // 13319
    this._absRestTolerance = this._restTolerance;                                                                      // 13320
    this._callback         = undefined;                                                                                // 13321
                                                                                                                       // 13322
    this.PE       = new PE();                                                                                          // 13323
    this.spring   = new Spring({anchor : this.endState});                                                              // 13324
    this.particle = new Particle();                                                                                    // 13325
                                                                                                                       // 13326
    this.PE.addBody(this.particle);                                                                                    // 13327
    this.PE.attach(this.spring, this.particle);                                                                        // 13328
}                                                                                                                      // 13329
                                                                                                                       // 13330
SpringTransition.SUPPORTS_MULTIPLE = 3;                                                                                // 13331
                                                                                                                       // 13332
/**                                                                                                                    // 13333
 * @property SpringTransition.DEFAULT_OPTIONS                                                                          // 13334
 * @type Object                                                                                                        // 13335
 * @protected                                                                                                          // 13336
 * @static                                                                                                             // 13337
 */                                                                                                                    // 13338
SpringTransition.DEFAULT_OPTIONS = {                                                                                   // 13339
                                                                                                                       // 13340
    /**                                                                                                                // 13341
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13342
     * when there is no damping                                                                                        // 13343
     *    Range : [0, Infinity]                                                                                        // 13344
     *                                                                                                                 // 13345
     * @attribute period                                                                                               // 13346
     * @type Number                                                                                                    // 13347
     * @default 300                                                                                                    // 13348
     */                                                                                                                // 13349
    period : 300,                                                                                                      // 13350
                                                                                                                       // 13351
    /**                                                                                                                // 13352
     * The damping of the snap.                                                                                        // 13353
     *    Range : [0, 1]                                                                                               // 13354
     *    0 = no damping, and the spring will oscillate forever                                                        // 13355
     *    1 = critically damped (the spring will never oscillate)                                                      // 13356
     *                                                                                                                 // 13357
     * @attribute dampingRatio                                                                                         // 13358
     * @type Number                                                                                                    // 13359
     * @default 0.5                                                                                                    // 13360
     */                                                                                                                // 13361
    dampingRatio : 0.5,                                                                                                // 13362
                                                                                                                       // 13363
    /**                                                                                                                // 13364
     * The initial velocity of the transition.                                                                         // 13365
     *                                                                                                                 // 13366
     * @attribute velocity                                                                                             // 13367
     * @type Number|Array                                                                                              // 13368
     * @default 0                                                                                                      // 13369
     */                                                                                                                // 13370
    velocity : 0                                                                                                       // 13371
};                                                                                                                     // 13372
                                                                                                                       // 13373
function _getEnergy() {                                                                                                // 13374
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13375
}                                                                                                                      // 13376
                                                                                                                       // 13377
function _setParticlePosition(p) {                                                                                     // 13378
    this.particle.setPosition(p);                                                                                      // 13379
}                                                                                                                      // 13380
                                                                                                                       // 13381
function _setParticleVelocity(v) {                                                                                     // 13382
    this.particle.setVelocity(v);                                                                                      // 13383
}                                                                                                                      // 13384
                                                                                                                       // 13385
function _getParticlePosition() {                                                                                      // 13386
    return (this._dimensions === 0)                                                                                    // 13387
        ? this.particle.getPosition1D()                                                                                // 13388
        : this.particle.getPosition();                                                                                 // 13389
}                                                                                                                      // 13390
                                                                                                                       // 13391
function _getParticleVelocity() {                                                                                      // 13392
    return (this._dimensions === 0)                                                                                    // 13393
        ? this.particle.getVelocity1D()                                                                                // 13394
        : this.particle.getVelocity();                                                                                 // 13395
}                                                                                                                      // 13396
                                                                                                                       // 13397
function _setCallback(callback) {                                                                                      // 13398
    this._callback = callback;                                                                                         // 13399
}                                                                                                                      // 13400
                                                                                                                       // 13401
function _wake() {                                                                                                     // 13402
    this.PE.wake();                                                                                                    // 13403
}                                                                                                                      // 13404
                                                                                                                       // 13405
function _sleep() {                                                                                                    // 13406
    this.PE.sleep();                                                                                                   // 13407
}                                                                                                                      // 13408
                                                                                                                       // 13409
function _update() {                                                                                                   // 13410
    if (this.PE.isSleeping()) {                                                                                        // 13411
        if (this._callback) {                                                                                          // 13412
            var cb = this._callback;                                                                                   // 13413
            this._callback = undefined;                                                                                // 13414
            cb();                                                                                                      // 13415
        }                                                                                                              // 13416
        return;                                                                                                        // 13417
    }                                                                                                                  // 13418
                                                                                                                       // 13419
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13420
        _setParticlePosition.call(this, this.endState);                                                                // 13421
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13422
        _sleep.call(this);                                                                                             // 13423
    }                                                                                                                  // 13424
}                                                                                                                      // 13425
                                                                                                                       // 13426
function _setupDefinition(definition) {                                                                                // 13427
    // TODO fix no-console error                                                                                       // 13428
    /* eslint no-console: 0 */                                                                                         // 13429
    var defaults = SpringTransition.DEFAULT_OPTIONS;                                                                   // 13430
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13431
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13432
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13433
                                                                                                                       // 13434
    if (definition.period < 150) {                                                                                     // 13435
        definition.period = 150;                                                                                       // 13436
        console.warn('The period of a SpringTransition is capped at 150 ms. Use a SnapTransition for faster transitions');
    }                                                                                                                  // 13438
                                                                                                                       // 13439
    //setup spring                                                                                                     // 13440
    this.spring.setOptions({                                                                                           // 13441
        period       : definition.period,                                                                              // 13442
        dampingRatio : definition.dampingRatio                                                                         // 13443
    });                                                                                                                // 13444
                                                                                                                       // 13445
    //setup particle                                                                                                   // 13446
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13447
}                                                                                                                      // 13448
                                                                                                                       // 13449
function _setAbsoluteRestTolerance() {                                                                                 // 13450
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13451
    this._absRestTolerance = (distance === 0)                                                                          // 13452
        ? this._restTolerance                                                                                          // 13453
        : this._restTolerance * distance;                                                                              // 13454
}                                                                                                                      // 13455
                                                                                                                       // 13456
function _setTarget(target) {                                                                                          // 13457
    this.endState.set(target);                                                                                         // 13458
    _setAbsoluteRestTolerance.call(this);                                                                              // 13459
}                                                                                                                      // 13460
                                                                                                                       // 13461
/**                                                                                                                    // 13462
 * Resets the position and velocity                                                                                    // 13463
 *                                                                                                                     // 13464
 * @method reset                                                                                                       // 13465
 *                                                                                                                     // 13466
 * @param {Number|Array.Number} pos positional state                                                                   // 13467
 * @param {Number|Array} vel velocity                                                                                  // 13468
 */                                                                                                                    // 13469
SpringTransition.prototype.reset = function reset(pos, vel) {                                                          // 13470
    this._dimensions = (pos instanceof Array)                                                                          // 13471
        ? pos.length                                                                                                   // 13472
        : 0;                                                                                                           // 13473
                                                                                                                       // 13474
    this.initState.set(pos);                                                                                           // 13475
    _setParticlePosition.call(this, pos);                                                                              // 13476
    _setTarget.call(this, pos);                                                                                        // 13477
    if (vel) _setParticleVelocity.call(this, vel);                                                                     // 13478
    _setCallback.call(this, undefined);                                                                                // 13479
};                                                                                                                     // 13480
                                                                                                                       // 13481
/**                                                                                                                    // 13482
 * Getter for velocity                                                                                                 // 13483
 *                                                                                                                     // 13484
 * @method getVelocity                                                                                                 // 13485
 *                                                                                                                     // 13486
 * @return {Number|Array} velocity                                                                                     // 13487
 */                                                                                                                    // 13488
SpringTransition.prototype.getVelocity = function getVelocity() {                                                      // 13489
    return _getParticleVelocity.call(this);                                                                            // 13490
};                                                                                                                     // 13491
                                                                                                                       // 13492
/**                                                                                                                    // 13493
 * Setter for velocity                                                                                                 // 13494
 *                                                                                                                     // 13495
 * @method setVelocity                                                                                                 // 13496
 *                                                                                                                     // 13497
 * @return {Number|Array} velocity                                                                                     // 13498
 */                                                                                                                    // 13499
SpringTransition.prototype.setVelocity = function setVelocity(v) {                                                     // 13500
    this.call(this, _setParticleVelocity(v));                                                                          // 13501
};                                                                                                                     // 13502
                                                                                                                       // 13503
/**                                                                                                                    // 13504
 * Detects whether a transition is in progress                                                                         // 13505
 *                                                                                                                     // 13506
 * @method isActive                                                                                                    // 13507
 *                                                                                                                     // 13508
 * @return {Boolean}                                                                                                   // 13509
 */                                                                                                                    // 13510
SpringTransition.prototype.isActive = function isActive() {                                                            // 13511
    return !this.PE.isSleeping();                                                                                      // 13512
};                                                                                                                     // 13513
                                                                                                                       // 13514
/**                                                                                                                    // 13515
 * Halt the transition                                                                                                 // 13516
 *                                                                                                                     // 13517
 * @method halt                                                                                                        // 13518
 */                                                                                                                    // 13519
SpringTransition.prototype.halt = function halt() {                                                                    // 13520
    this.set(this.get());                                                                                              // 13521
};                                                                                                                     // 13522
                                                                                                                       // 13523
/**                                                                                                                    // 13524
 * Get the current position of the transition                                                                          // 13525
 *                                                                                                                     // 13526
 * @method get                                                                                                         // 13527
 *                                                                                                                     // 13528
 * @return {Number|Array} state                                                                                        // 13529
 */                                                                                                                    // 13530
SpringTransition.prototype.get = function get() {                                                                      // 13531
    _update.call(this);                                                                                                // 13532
    return _getParticlePosition.call(this);                                                                            // 13533
};                                                                                                                     // 13534
                                                                                                                       // 13535
/**                                                                                                                    // 13536
 * Set the end position and transition, with optional callback on completion.                                          // 13537
 *                                                                                                                     // 13538
 * @method set                                                                                                         // 13539
 *                                                                                                                     // 13540
 * @param  {Number|Array} endState Final state                                                                         // 13541
 * @param {Object}  definition  Transition definition                                                                  // 13542
 * @param  {Function} callback Callback                                                                                // 13543
 */                                                                                                                    // 13544
SpringTransition.prototype.set = function set(endState, definition, callback) {                                        // 13545
    if (!definition) {                                                                                                 // 13546
        this.reset(endState);                                                                                          // 13547
        if (callback) callback();                                                                                      // 13548
        return;                                                                                                        // 13549
    }                                                                                                                  // 13550
                                                                                                                       // 13551
    this._dimensions = (endState instanceof Array)                                                                     // 13552
        ? endState.length                                                                                              // 13553
        : 0;                                                                                                           // 13554
                                                                                                                       // 13555
    _wake.call(this);                                                                                                  // 13556
    _setupDefinition.call(this, definition);                                                                           // 13557
    _setTarget.call(this, endState);                                                                                   // 13558
    _setCallback.call(this, callback);                                                                                 // 13559
};                                                                                                                     // 13560
                                                                                                                       // 13561
module.exports = SpringTransition;                                                                                     // 13562
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/forces/Spring":68}],88:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13564
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13565
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13566
 *                                                                                                                     // 13567
 * Owner: david@famo.us                                                                                                // 13568
 * @license MPL 2.0                                                                                                    // 13569
 * @copyright Famous Industries, Inc. 2014                                                                             // 13570
 */                                                                                                                    // 13571
                                                                                                                       // 13572
var MultipleTransition = _dereq_('./MultipleTransition');                                                              // 13573
var TweenTransition = _dereq_('./TweenTransition');                                                                    // 13574
                                                                                                                       // 13575
/**                                                                                                                    // 13576
 * A state maintainer for a smooth transition between                                                                  // 13577
 *    numerically-specified states. Example numeric states include floats or                                           // 13578
 *    Transform objects.                                                                                               // 13579
 *                                                                                                                     // 13580
 * An initial state is set with the constructor or set(startState). A                                                  // 13581
 *    corresponding end state and transition are set with set(endState,                                                // 13582
 *    transition). Subsequent calls to set(endState, transition) begin at                                              // 13583
 *    the last state. Calls to get(timestamp) provide the interpolated state                                           // 13584
 *    along the way.                                                                                                   // 13585
 *                                                                                                                     // 13586
 * Note that there is no event loop here - calls to get() are the only way                                             // 13587
 *    to find state projected to the current (or provided) time and are                                                // 13588
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 13589
 *    be part of the render() path of a visible component.                                                             // 13590
 *                                                                                                                     // 13591
 * @class Transitionable                                                                                               // 13592
 * @constructor                                                                                                        // 13593
 * @param {number|Array.Number|Object.<number|string, number>} start                                                   // 13594
 *    beginning state                                                                                                  // 13595
 */                                                                                                                    // 13596
function Transitionable(start) {                                                                                       // 13597
    this.currentAction = null;                                                                                         // 13598
    this.actionQueue = [];                                                                                             // 13599
    this.callbackQueue = [];                                                                                           // 13600
                                                                                                                       // 13601
    this.state = 0;                                                                                                    // 13602
    this.velocity = undefined;                                                                                         // 13603
    this._callback = undefined;                                                                                        // 13604
    this._engineInstance = null;                                                                                       // 13605
    this._currentMethod = null;                                                                                        // 13606
                                                                                                                       // 13607
    this.set(start);                                                                                                   // 13608
}                                                                                                                      // 13609
                                                                                                                       // 13610
var transitionMethods = {};                                                                                            // 13611
                                                                                                                       // 13612
Transitionable.register = function register(methods) {                                                                 // 13613
    var success = true;                                                                                                // 13614
    for (var method in methods) {                                                                                      // 13615
        if (!Transitionable.registerMethod(method, methods[method]))                                                   // 13616
            success = false;                                                                                           // 13617
    }                                                                                                                  // 13618
    return success;                                                                                                    // 13619
};                                                                                                                     // 13620
                                                                                                                       // 13621
Transitionable.registerMethod = function registerMethod(name, engineClass) {                                           // 13622
    if (!(name in transitionMethods)) {                                                                                // 13623
        transitionMethods[name] = engineClass;                                                                         // 13624
        return true;                                                                                                   // 13625
    }                                                                                                                  // 13626
    else return false;                                                                                                 // 13627
};                                                                                                                     // 13628
                                                                                                                       // 13629
Transitionable.unregisterMethod = function unregisterMethod(name) {                                                    // 13630
    if (name in transitionMethods) {                                                                                   // 13631
        delete transitionMethods[name];                                                                                // 13632
        return true;                                                                                                   // 13633
    }                                                                                                                  // 13634
    else return false;                                                                                                 // 13635
};                                                                                                                     // 13636
                                                                                                                       // 13637
function _loadNext() {                                                                                                 // 13638
    if (this._callback) {                                                                                              // 13639
        var callback = this._callback;                                                                                 // 13640
        this._callback = undefined;                                                                                    // 13641
        callback();                                                                                                    // 13642
    }                                                                                                                  // 13643
    if (this.actionQueue.length <= 0) {                                                                                // 13644
        this.set(this.get()); // no update required                                                                    // 13645
        return;                                                                                                        // 13646
    }                                                                                                                  // 13647
    this.currentAction = this.actionQueue.shift();                                                                     // 13648
    this._callback = this.callbackQueue.shift();                                                                       // 13649
                                                                                                                       // 13650
    var method = null;                                                                                                 // 13651
    var endValue = this.currentAction[0];                                                                              // 13652
    var transition = this.currentAction[1];                                                                            // 13653
    if (transition instanceof Object && transition.method) {                                                           // 13654
        method = transition.method;                                                                                    // 13655
        if (typeof method === 'string') method = transitionMethods[method];                                            // 13656
    }                                                                                                                  // 13657
    else {                                                                                                             // 13658
        method = TweenTransition;                                                                                      // 13659
    }                                                                                                                  // 13660
                                                                                                                       // 13661
    if (this._currentMethod !== method) {                                                                              // 13662
        if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
            this._engineInstance = new method();                                                                       // 13664
        }                                                                                                              // 13665
        else {                                                                                                         // 13666
            this._engineInstance = new MultipleTransition(method);                                                     // 13667
        }                                                                                                              // 13668
        this._currentMethod = method;                                                                                  // 13669
    }                                                                                                                  // 13670
                                                                                                                       // 13671
    this._engineInstance.reset(this.state, this.velocity);                                                             // 13672
    if (this.velocity !== undefined) transition.velocity = this.velocity;                                              // 13673
    this._engineInstance.set(endValue, transition, _loadNext.bind(this));                                              // 13674
}                                                                                                                      // 13675
                                                                                                                       // 13676
/**                                                                                                                    // 13677
 * Add transition to end state to the queue of pending transitions. Special                                            // 13678
 *    Use: calling without a transition resets the object to that state with                                           // 13679
 *    no pending actions                                                                                               // 13680
 *                                                                                                                     // 13681
 * @method set                                                                                                         // 13682
 *                                                                                                                     // 13683
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endState                                          // 13684
 *    end state to which we interpolate                                                                                // 13685
 * @param {transition=} transition object of type {duration: number, curve:                                            // 13686
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 13687
 *    instantaneous.                                                                                                   // 13688
 * @param {function()=} callback Zero-argument function to call on observed                                            // 13689
 *    completion (t=1)                                                                                                 // 13690
 */                                                                                                                    // 13691
Transitionable.prototype.set = function set(endState, transition, callback) {                                          // 13692
    if (!transition) {                                                                                                 // 13693
        this.reset(endState);                                                                                          // 13694
        if (callback) callback();                                                                                      // 13695
        return this;                                                                                                   // 13696
    }                                                                                                                  // 13697
                                                                                                                       // 13698
    var action = [endState, transition];                                                                               // 13699
    this.actionQueue.push(action);                                                                                     // 13700
    this.callbackQueue.push(callback);                                                                                 // 13701
    if (!this.currentAction) _loadNext.call(this);                                                                     // 13702
    return this;                                                                                                       // 13703
};                                                                                                                     // 13704
                                                                                                                       // 13705
/**                                                                                                                    // 13706
 * Cancel all transitions and reset to a stable state                                                                  // 13707
 *                                                                                                                     // 13708
 * @method reset                                                                                                       // 13709
 *                                                                                                                     // 13710
 * @param {number|Array.Number|Object.<number, number>} startState                                                     // 13711
 *    stable state to set to                                                                                           // 13712
 */                                                                                                                    // 13713
Transitionable.prototype.reset = function reset(startState, startVelocity) {                                           // 13714
    this._currentMethod = null;                                                                                        // 13715
    this._engineInstance = null;                                                                                       // 13716
    this._callback = undefined;                                                                                        // 13717
    this.state = startState;                                                                                           // 13718
    this.velocity = startVelocity;                                                                                     // 13719
    this.currentAction = null;                                                                                         // 13720
    this.actionQueue = [];                                                                                             // 13721
    this.callbackQueue = [];                                                                                           // 13722
};                                                                                                                     // 13723
                                                                                                                       // 13724
/**                                                                                                                    // 13725
 * Add delay action to the pending action queue queue.                                                                 // 13726
 *                                                                                                                     // 13727
 * @method delay                                                                                                       // 13728
 *                                                                                                                     // 13729
 * @param {number} duration delay time (ms)                                                                            // 13730
 * @param {function} callback Zero-argument function to call on observed                                               // 13731
 *    completion (t=1)                                                                                                 // 13732
 */                                                                                                                    // 13733
Transitionable.prototype.delay = function delay(duration, callback) {                                                  // 13734
    this.set(this.get(), {duration: duration,                                                                          // 13735
        curve: function() {                                                                                            // 13736
            return 0;                                                                                                  // 13737
        }},                                                                                                            // 13738
        callback                                                                                                       // 13739
    );                                                                                                                 // 13740
};                                                                                                                     // 13741
                                                                                                                       // 13742
/**                                                                                                                    // 13743
 * Get interpolated state of current action at provided time. If the last                                              // 13744
 *    action has completed, invoke its callback.                                                                       // 13745
 *                                                                                                                     // 13746
 * @method get                                                                                                         // 13747
 *                                                                                                                     // 13748
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 13749
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 13750
 * @return {number|Object.<number|string, number>} beginning state                                                     // 13751
 *    interpolated to this point in time.                                                                              // 13752
 */                                                                                                                    // 13753
Transitionable.prototype.get = function get(timestamp) {                                                               // 13754
    if (this._engineInstance) {                                                                                        // 13755
        if (this._engineInstance.getVelocity)                                                                          // 13756
            this.velocity = this._engineInstance.getVelocity();                                                        // 13757
        this.state = this._engineInstance.get(timestamp);                                                              // 13758
    }                                                                                                                  // 13759
    return this.state;                                                                                                 // 13760
};                                                                                                                     // 13761
                                                                                                                       // 13762
/**                                                                                                                    // 13763
 * Is there at least one action pending completion?                                                                    // 13764
 *                                                                                                                     // 13765
 * @method isActive                                                                                                    // 13766
 *                                                                                                                     // 13767
 * @return {boolean}                                                                                                   // 13768
 */                                                                                                                    // 13769
Transitionable.prototype.isActive = function isActive() {                                                              // 13770
    return !!this.currentAction;                                                                                       // 13771
};                                                                                                                     // 13772
                                                                                                                       // 13773
/**                                                                                                                    // 13774
 * Halt transition at current state and erase all pending actions.                                                     // 13775
 *                                                                                                                     // 13776
 * @method halt                                                                                                        // 13777
 */                                                                                                                    // 13778
Transitionable.prototype.halt = function halt() {                                                                      // 13779
    return this.set(this.get());                                                                                       // 13780
};                                                                                                                     // 13781
                                                                                                                       // 13782
module.exports = Transitionable;                                                                                       // 13783
},{"./MultipleTransition":85,"./TweenTransition":90}],89:[function(_dereq_,module,exports){                            // 13784
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13785
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13786
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13787
 *                                                                                                                     // 13788
 * Owner: david@famo.us                                                                                                // 13789
 * @license MPL 2.0                                                                                                    // 13790
 * @copyright Famous Industries, Inc. 2014                                                                             // 13791
 */                                                                                                                    // 13792
                                                                                                                       // 13793
var Transitionable = _dereq_('./Transitionable');                                                                      // 13794
var Transform = _dereq_('../core/Transform');                                                                          // 13795
var Utility = _dereq_('../utilities/Utility');                                                                         // 13796
                                                                                                                       // 13797
/**                                                                                                                    // 13798
 * A class for transitioning the state of a Transform by transitioning                                                 // 13799
 * its translate, scale, skew and rotate components independently.                                                     // 13800
 *                                                                                                                     // 13801
 * @class TransitionableTransform                                                                                      // 13802
 * @constructor                                                                                                        // 13803
 *                                                                                                                     // 13804
 * @param [transform=Transform.identity] {Transform} The initial transform state                                       // 13805
 */                                                                                                                    // 13806
function TransitionableTransform(transform) {                                                                          // 13807
    this._final = Transform.identity.slice();                                                                          // 13808
                                                                                                                       // 13809
    this._finalTranslate = [0, 0, 0];                                                                                  // 13810
    this._finalRotate = [0, 0, 0];                                                                                     // 13811
    this._finalSkew = [0, 0, 0];                                                                                       // 13812
    this._finalScale = [1, 1, 1];                                                                                      // 13813
                                                                                                                       // 13814
    this.translate = new Transitionable(this._finalTranslate);                                                         // 13815
    this.rotate = new Transitionable(this._finalRotate);                                                               // 13816
    this.skew = new Transitionable(this._finalSkew);                                                                   // 13817
    this.scale = new Transitionable(this._finalScale);                                                                 // 13818
                                                                                                                       // 13819
    if (transform) this.set(transform);                                                                                // 13820
}                                                                                                                      // 13821
                                                                                                                       // 13822
function _build() {                                                                                                    // 13823
    return Transform.build({                                                                                           // 13824
        translate: this.translate.get(),                                                                               // 13825
        rotate: this.rotate.get(),                                                                                     // 13826
        skew: this.skew.get(),                                                                                         // 13827
        scale: this.scale.get()                                                                                        // 13828
    });                                                                                                                // 13829
}                                                                                                                      // 13830
                                                                                                                       // 13831
function _buildFinal() {                                                                                               // 13832
    return Transform.build({                                                                                           // 13833
        translate: this._finalTranslate,                                                                               // 13834
        rotate: this._finalRotate,                                                                                     // 13835
        skew: this._finalSkew,                                                                                         // 13836
        scale: this._finalScale                                                                                        // 13837
    });                                                                                                                // 13838
}                                                                                                                      // 13839
                                                                                                                       // 13840
/**                                                                                                                    // 13841
 * An optimized way of setting only the translation component of a Transform                                           // 13842
 *                                                                                                                     // 13843
 * @method setTranslate                                                                                                // 13844
 * @chainable                                                                                                          // 13845
 *                                                                                                                     // 13846
 * @param translate {Array}     New translation state                                                                  // 13847
 * @param [transition] {Object} Transition definition                                                                  // 13848
 * @param [callback] {Function} Callback                                                                               // 13849
 * @return {TransitionableTransform}                                                                                   // 13850
 */                                                                                                                    // 13851
TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {              // 13852
    this._finalTranslate = translate;                                                                                  // 13853
    this._final = _buildFinal.call(this);                                                                              // 13854
    this.translate.set(translate, transition, callback);                                                               // 13855
    return this;                                                                                                       // 13856
};                                                                                                                     // 13857
                                                                                                                       // 13858
/**                                                                                                                    // 13859
 * An optimized way of setting only the scale component of a Transform                                                 // 13860
 *                                                                                                                     // 13861
 * @method setScale                                                                                                    // 13862
 * @chainable                                                                                                          // 13863
 *                                                                                                                     // 13864
 * @param scale {Array}         New scale state                                                                        // 13865
 * @param [transition] {Object} Transition definition                                                                  // 13866
 * @param [callback] {Function} Callback                                                                               // 13867
 * @return {TransitionableTransform}                                                                                   // 13868
 */                                                                                                                    // 13869
TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {                          // 13870
    this._finalScale = scale;                                                                                          // 13871
    this._final = _buildFinal.call(this);                                                                              // 13872
    this.scale.set(scale, transition, callback);                                                                       // 13873
    return this;                                                                                                       // 13874
};                                                                                                                     // 13875
                                                                                                                       // 13876
/**                                                                                                                    // 13877
 * An optimized way of setting only the rotational component of a Transform                                            // 13878
 *                                                                                                                     // 13879
 * @method setRotate                                                                                                   // 13880
 * @chainable                                                                                                          // 13881
 *                                                                                                                     // 13882
 * @param eulerAngles {Array}   Euler angles for new rotation state                                                    // 13883
 * @param [transition] {Object} Transition definition                                                                  // 13884
 * @param [callback] {Function} Callback                                                                               // 13885
 * @return {TransitionableTransform}                                                                                   // 13886
 */                                                                                                                    // 13887
TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {                  // 13888
    this._finalRotate = eulerAngles;                                                                                   // 13889
    this._final = _buildFinal.call(this);                                                                              // 13890
    this.rotate.set(eulerAngles, transition, callback);                                                                // 13891
    return this;                                                                                                       // 13892
};                                                                                                                     // 13893
                                                                                                                       // 13894
/**                                                                                                                    // 13895
 * An optimized way of setting only the skew component of a Transform                                                  // 13896
 *                                                                                                                     // 13897
 * @method setSkew                                                                                                     // 13898
 * @chainable                                                                                                          // 13899
 *                                                                                                                     // 13900
 * @param skewAngles {Array}    New skew state                                                                         // 13901
 * @param [transition] {Object} Transition definition                                                                  // 13902
 * @param [callback] {Function} Callback                                                                               // 13903
 * @return {TransitionableTransform}                                                                                   // 13904
 */                                                                                                                    // 13905
TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {                       // 13906
    this._finalSkew = skewAngles;                                                                                      // 13907
    this._final = _buildFinal.call(this);                                                                              // 13908
    this.skew.set(skewAngles, transition, callback);                                                                   // 13909
    return this;                                                                                                       // 13910
};                                                                                                                     // 13911
                                                                                                                       // 13912
/**                                                                                                                    // 13913
 * Setter for a TransitionableTransform with optional parameters to transition                                         // 13914
 * between Transforms                                                                                                  // 13915
 *                                                                                                                     // 13916
 * @method set                                                                                                         // 13917
 * @chainable                                                                                                          // 13918
 *                                                                                                                     // 13919
 * @param transform {Array}     New transform state                                                                    // 13920
 * @param [transition] {Object} Transition definition                                                                  // 13921
 * @param [callback] {Function} Callback                                                                               // 13922
 * @return {TransitionableTransform}                                                                                   // 13923
 */                                                                                                                    // 13924
TransitionableTransform.prototype.set = function set(transform, transition, callback) {                                // 13925
    var components = Transform.interpret(transform);                                                                   // 13926
                                                                                                                       // 13927
    this._finalTranslate = components.translate;                                                                       // 13928
    this._finalRotate = components.rotate;                                                                             // 13929
    this._finalSkew = components.skew;                                                                                 // 13930
    this._finalScale = components.scale;                                                                               // 13931
    this._final = transform;                                                                                           // 13932
                                                                                                                       // 13933
    var _callback = callback ? Utility.after(4, callback) : null;                                                      // 13934
    this.translate.set(components.translate, transition, _callback);                                                   // 13935
    this.rotate.set(components.rotate, transition, _callback);                                                         // 13936
    this.skew.set(components.skew, transition, _callback);                                                             // 13937
    this.scale.set(components.scale, transition, _callback);                                                           // 13938
    return this;                                                                                                       // 13939
};                                                                                                                     // 13940
                                                                                                                       // 13941
/**                                                                                                                    // 13942
 * Sets the default transition to use for transitioning betwen Transform states                                        // 13943
 *                                                                                                                     // 13944
 * @method setDefaultTransition                                                                                        // 13945
 *                                                                                                                     // 13946
 * @param transition {Object} Transition definition                                                                    // 13947
 */                                                                                                                    // 13948
TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {                   // 13949
    this.translate.setDefault(transition);                                                                             // 13950
    this.rotate.setDefault(transition);                                                                                // 13951
    this.skew.setDefault(transition);                                                                                  // 13952
    this.scale.setDefault(transition);                                                                                 // 13953
};                                                                                                                     // 13954
                                                                                                                       // 13955
/**                                                                                                                    // 13956
 * Getter. Returns the current state of the Transform                                                                  // 13957
 *                                                                                                                     // 13958
 * @method get                                                                                                         // 13959
 *                                                                                                                     // 13960
 * @return {Transform}                                                                                                 // 13961
 */                                                                                                                    // 13962
TransitionableTransform.prototype.get = function get() {                                                               // 13963
    if (this.isActive()) {                                                                                             // 13964
        return _build.call(this);                                                                                      // 13965
    }                                                                                                                  // 13966
    else return this._final;                                                                                           // 13967
};                                                                                                                     // 13968
                                                                                                                       // 13969
/**                                                                                                                    // 13970
 * Get the destination state of the Transform                                                                          // 13971
 *                                                                                                                     // 13972
 * @method getFinal                                                                                                    // 13973
 *                                                                                                                     // 13974
 * @return Transform {Transform}                                                                                       // 13975
 */                                                                                                                    // 13976
TransitionableTransform.prototype.getFinal = function getFinal() {                                                     // 13977
    return this._final;                                                                                                // 13978
};                                                                                                                     // 13979
                                                                                                                       // 13980
/**                                                                                                                    // 13981
 * Determine if the TransitionalTransform is currently transitioning                                                   // 13982
 *                                                                                                                     // 13983
 * @method isActive                                                                                                    // 13984
 *                                                                                                                     // 13985
 * @return {Boolean}                                                                                                   // 13986
 */                                                                                                                    // 13987
TransitionableTransform.prototype.isActive = function isActive() {                                                     // 13988
    return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();       // 13989
};                                                                                                                     // 13990
                                                                                                                       // 13991
/**                                                                                                                    // 13992
 * Halts the transition                                                                                                // 13993
 *                                                                                                                     // 13994
 * @method halt                                                                                                        // 13995
 */                                                                                                                    // 13996
TransitionableTransform.prototype.halt = function halt() {                                                             // 13997
    this.translate.halt();                                                                                             // 13998
    this.rotate.halt();                                                                                                // 13999
    this.skew.halt();                                                                                                  // 14000
    this.scale.halt();                                                                                                 // 14001
                                                                                                                       // 14002
    this._final = this.get();                                                                                          // 14003
    this._finalTranslate = this.translate.get();                                                                       // 14004
    this._finalRotate = this.rotate.get();                                                                             // 14005
    this._finalSkew = this.skew.get();                                                                                 // 14006
    this._finalScale = this.scale.get();                                                                               // 14007
                                                                                                                       // 14008
    return this;                                                                                                       // 14009
};                                                                                                                     // 14010
                                                                                                                       // 14011
module.exports = TransitionableTransform;                                                                              // 14012
},{"../core/Transform":15,"../utilities/Utility":95,"./Transitionable":88}],90:[function(_dereq_,module,exports){      // 14013
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14014
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14015
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14016
 *                                                                                                                     // 14017
 * Owner: david@famo.us                                                                                                // 14018
 * @license MPL 2.0                                                                                                    // 14019
 * @copyright Famous Industries, Inc. 2014                                                                             // 14020
 */                                                                                                                    // 14021
                                                                                                                       // 14022
                                                                                                                       // 14023
                                                                                                                       // 14024
                                                                                                                       // 14025
/**                                                                                                                    // 14026
 *                                                                                                                     // 14027
 * A state maintainer for a smooth transition between                                                                  // 14028
 *    numerically-specified states.  Example numeric states include floats or                                          // 14029
 *    Transfornm objects.                                                                                              // 14030
 *                                                                                                                     // 14031
 *    An initial state is set with the constructor or set(startValue). A                                               // 14032
 *    corresponding end state and transition are set with set(endValue,                                                // 14033
 *    transition). Subsequent calls to set(endValue, transition) begin at                                              // 14034
 *    the last state. Calls to get(timestamp) provide the _interpolated state                                          // 14035
 *    along the way.                                                                                                   // 14036
 *                                                                                                                     // 14037
 *   Note that there is no event loop here - calls to get() are the only way                                           // 14038
 *    to find out state projected to the current (or provided) time and are                                            // 14039
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 14040
 *    be part of the render() path of a visible component.                                                             // 14041
 *                                                                                                                     // 14042
 * @class TweenTransition                                                                                              // 14043
 * @constructor                                                                                                        // 14044
 *                                                                                                                     // 14045
 * @param {Object} options TODO                                                                                        // 14046
 *    beginning state                                                                                                  // 14047
 */                                                                                                                    // 14048
function TweenTransition(options) {                                                                                    // 14049
    this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);                                                     // 14050
    if (options) this.setOptions(options);                                                                             // 14051
                                                                                                                       // 14052
    this._startTime = 0;                                                                                               // 14053
    this._startValue = 0;                                                                                              // 14054
    this._updateTime = 0;                                                                                              // 14055
    this._endValue = 0;                                                                                                // 14056
    this._curve = undefined;                                                                                           // 14057
    this._duration = 0;                                                                                                // 14058
    this._active = false;                                                                                              // 14059
    this._callback = undefined;                                                                                        // 14060
    this.state = 0;                                                                                                    // 14061
    this.velocity = undefined;                                                                                         // 14062
}                                                                                                                      // 14063
                                                                                                                       // 14064
/**                                                                                                                    // 14065
 * Transition curves mapping independent variable t from domain [0,1] to a                                             // 14066
 *    range within [0,1]. Includes functions 'linear', 'easeIn', 'easeOut',                                            // 14067
 *    'easeInOut', 'easeOutBounce', 'spring'.                                                                          // 14068
 *                                                                                                                     // 14069
 * @property {object} Curve                                                                                            // 14070
 * @final                                                                                                              // 14071
 */                                                                                                                    // 14072
TweenTransition.Curves = {                                                                                             // 14073
    linear: function(t) {                                                                                              // 14074
        return t;                                                                                                      // 14075
    },                                                                                                                 // 14076
    easeIn: function(t) {                                                                                              // 14077
        return t*t;                                                                                                    // 14078
    },                                                                                                                 // 14079
    easeOut: function(t) {                                                                                             // 14080
        return t*(2-t);                                                                                                // 14081
    },                                                                                                                 // 14082
    easeInOut: function(t) {                                                                                           // 14083
        if (t <= 0.5) return 2*t*t;                                                                                    // 14084
        else return -2*t*t + 4*t - 1;                                                                                  // 14085
    },                                                                                                                 // 14086
    easeOutBounce: function(t) {                                                                                       // 14087
        return t*(3 - 2*t);                                                                                            // 14088
    },                                                                                                                 // 14089
    spring: function(t) {                                                                                              // 14090
        return (1 - t) * Math.sin(6 * Math.PI * t) + t;                                                                // 14091
    }                                                                                                                  // 14092
};                                                                                                                     // 14093
                                                                                                                       // 14094
TweenTransition.SUPPORTS_MULTIPLE = true;                                                                              // 14095
TweenTransition.DEFAULT_OPTIONS = {                                                                                    // 14096
    curve: TweenTransition.Curves.linear,                                                                              // 14097
    duration: 500,                                                                                                     // 14098
    speed: 0 /* considered only if positive */                                                                         // 14099
};                                                                                                                     // 14100
                                                                                                                       // 14101
var registeredCurves = {};                                                                                             // 14102
                                                                                                                       // 14103
/**                                                                                                                    // 14104
 * Add "unit" curve to internal dictionary of registered curves.                                                       // 14105
 *                                                                                                                     // 14106
 * @method registerCurve                                                                                               // 14107
 *                                                                                                                     // 14108
 * @static                                                                                                             // 14109
 *                                                                                                                     // 14110
 * @param {string} curveName dictionary key                                                                            // 14111
 * @param {unitCurve} curve function of one numeric variable mapping [0,1]                                             // 14112
 *    to range inside [0,1]                                                                                            // 14113
 * @return {boolean} false if key is taken, else true                                                                  // 14114
 */                                                                                                                    // 14115
TweenTransition.registerCurve = function registerCurve(curveName, curve) {                                             // 14116
    if (!registeredCurves[curveName]) {                                                                                // 14117
        registeredCurves[curveName] = curve;                                                                           // 14118
        return true;                                                                                                   // 14119
    }                                                                                                                  // 14120
    else {                                                                                                             // 14121
        return false;                                                                                                  // 14122
    }                                                                                                                  // 14123
};                                                                                                                     // 14124
                                                                                                                       // 14125
/**                                                                                                                    // 14126
 * Remove object with key "curveName" from internal dictionary of registered                                           // 14127
 *    curves.                                                                                                          // 14128
 *                                                                                                                     // 14129
 * @method unregisterCurve                                                                                             // 14130
 *                                                                                                                     // 14131
 * @static                                                                                                             // 14132
 *                                                                                                                     // 14133
 * @param {string} curveName dictionary key                                                                            // 14134
 * @return {boolean} false if key has no dictionary value                                                              // 14135
 */                                                                                                                    // 14136
TweenTransition.unregisterCurve = function unregisterCurve(curveName) {                                                // 14137
    if (registeredCurves[curveName]) {                                                                                 // 14138
        delete registeredCurves[curveName];                                                                            // 14139
        return true;                                                                                                   // 14140
    }                                                                                                                  // 14141
    else {                                                                                                             // 14142
        return false;                                                                                                  // 14143
    }                                                                                                                  // 14144
};                                                                                                                     // 14145
                                                                                                                       // 14146
/**                                                                                                                    // 14147
 * Retrieve function with key "curveName" from internal dictionary of                                                  // 14148
 *    registered curves. Default curves are defined in the                                                             // 14149
 *    TweenTransition.Curves array, where the values represent                                                         // 14150
 *    unitCurve functions.                                                                                             // 14151
 *                                                                                                                     // 14152
 * @method getCurve                                                                                                    // 14153
 *                                                                                                                     // 14154
 * @static                                                                                                             // 14155
 *                                                                                                                     // 14156
 * @param {string} curveName dictionary key                                                                            // 14157
 * @return {unitCurve} curve function of one numeric variable mapping [0,1]                                            // 14158
 *    to range inside [0,1]                                                                                            // 14159
 */                                                                                                                    // 14160
TweenTransition.getCurve = function getCurve(curveName) {                                                              // 14161
    var curve = registeredCurves[curveName];                                                                           // 14162
    if (curve !== undefined) return curve;                                                                             // 14163
    else throw new Error('curve not registered');                                                                      // 14164
};                                                                                                                     // 14165
                                                                                                                       // 14166
/**                                                                                                                    // 14167
 * Retrieve all available curves.                                                                                      // 14168
 *                                                                                                                     // 14169
 * @method getCurves                                                                                                   // 14170
 *                                                                                                                     // 14171
 * @static                                                                                                             // 14172
 *                                                                                                                     // 14173
 * @return {object} curve functions of one numeric variable mapping [0,1]                                              // 14174
 *    to range inside [0,1]                                                                                            // 14175
 */                                                                                                                    // 14176
TweenTransition.getCurves = function getCurves() {                                                                     // 14177
    return registeredCurves;                                                                                           // 14178
};                                                                                                                     // 14179
                                                                                                                       // 14180
 // Interpolate: If a linear function f(0) = a, f(1) = b, then return f(t)                                             // 14181
function _interpolate(a, b, t) {                                                                                       // 14182
    return ((1 - t) * a) + (t * b);                                                                                    // 14183
}                                                                                                                      // 14184
                                                                                                                       // 14185
function _clone(obj) {                                                                                                 // 14186
    if (obj instanceof Object) {                                                                                       // 14187
        if (obj instanceof Array) return obj.slice(0);                                                                 // 14188
        else return Object.create(obj);                                                                                // 14189
    }                                                                                                                  // 14190
    else return obj;                                                                                                   // 14191
}                                                                                                                      // 14192
                                                                                                                       // 14193
// Fill in missing properties in "transition" with those in defaultTransition, and                                     // 14194
//   convert internal named curve to function object, returning as new                                                 // 14195
//   object.                                                                                                           // 14196
function _normalize(transition, defaultTransition) {                                                                   // 14197
    var result = {curve: defaultTransition.curve};                                                                     // 14198
    if (defaultTransition.duration) result.duration = defaultTransition.duration;                                      // 14199
    if (defaultTransition.speed) result.speed = defaultTransition.speed;                                               // 14200
    if (transition instanceof Object) {                                                                                // 14201
        if (transition.duration !== undefined) result.duration = transition.duration;                                  // 14202
        if (transition.curve) result.curve = transition.curve;                                                         // 14203
        if (transition.speed) result.speed = transition.speed;                                                         // 14204
    }                                                                                                                  // 14205
    if (typeof result.curve === 'string') result.curve = TweenTransition.getCurve(result.curve);                       // 14206
    return result;                                                                                                     // 14207
}                                                                                                                      // 14208
                                                                                                                       // 14209
/**                                                                                                                    // 14210
 * Set internal options, overriding any default options.                                                               // 14211
 *                                                                                                                     // 14212
 * @method setOptions                                                                                                  // 14213
 *                                                                                                                     // 14214
 *                                                                                                                     // 14215
 * @param {Object} options options object                                                                              // 14216
 * @param {Object} [options.curve] function mapping [0,1] to [0,1] or identifier                                       // 14217
 * @param {Number} [options.duration] duration in ms                                                                   // 14218
 * @param {Number} [options.speed] speed in pixels per ms                                                              // 14219
 */                                                                                                                    // 14220
TweenTransition.prototype.setOptions = function setOptions(options) {                                                  // 14221
    if (options.curve !== undefined) this.options.curve = options.curve;                                               // 14222
    if (options.duration !== undefined) this.options.duration = options.duration;                                      // 14223
    if (options.speed !== undefined) this.options.speed = options.speed;                                               // 14224
};                                                                                                                     // 14225
                                                                                                                       // 14226
/**                                                                                                                    // 14227
 * Add transition to end state to the queue of pending transitions. Special                                            // 14228
 *    Use: calling without a transition resets the object to that state with                                           // 14229
 *    no pending actions                                                                                               // 14230
 *                                                                                                                     // 14231
 * @method set                                                                                                         // 14232
 *                                                                                                                     // 14233
 *                                                                                                                     // 14234
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endValue                                          // 14235
 *    end state to which we _interpolate                                                                               // 14236
 * @param {transition=} transition object of type {duration: number, curve:                                            // 14237
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 14238
 *    instantaneous.                                                                                                   // 14239
 * @param {function()=} callback Zero-argument function to call on observed                                            // 14240
 *    completion (t=1)                                                                                                 // 14241
 */                                                                                                                    // 14242
TweenTransition.prototype.set = function set(endValue, transition, callback) {                                         // 14243
    if (!transition) {                                                                                                 // 14244
        this.reset(endValue);                                                                                          // 14245
        if (callback) callback();                                                                                      // 14246
        return;                                                                                                        // 14247
    }                                                                                                                  // 14248
                                                                                                                       // 14249
    this._startValue = _clone(this.get());                                                                             // 14250
    transition = _normalize(transition, this.options);                                                                 // 14251
    if (transition.speed) {                                                                                            // 14252
        var startValue = this._startValue;                                                                             // 14253
        if (startValue instanceof Object) {                                                                            // 14254
            var variance = 0;                                                                                          // 14255
            for (var i in startValue) variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);       // 14256
            transition.duration = Math.sqrt(variance) / transition.speed;                                              // 14257
        }                                                                                                              // 14258
        else {                                                                                                         // 14259
            transition.duration = Math.abs(endValue - startValue) / transition.speed;                                  // 14260
        }                                                                                                              // 14261
    }                                                                                                                  // 14262
                                                                                                                       // 14263
    this._startTime = Date.now();                                                                                      // 14264
    this._endValue = _clone(endValue);                                                                                 // 14265
    this._startVelocity = _clone(transition.velocity);                                                                 // 14266
    this._duration = transition.duration;                                                                              // 14267
    this._curve = transition.curve;                                                                                    // 14268
    this._active = true;                                                                                               // 14269
    this._callback = callback;                                                                                         // 14270
};                                                                                                                     // 14271
                                                                                                                       // 14272
/**                                                                                                                    // 14273
 * Cancel all transitions and reset to a stable state                                                                  // 14274
 *                                                                                                                     // 14275
 * @method reset                                                                                                       // 14276
 *                                                                                                                     // 14277
 * @param {number|Array.Number|Object.<number, number>} startValue                                                     // 14278
 *    starting state                                                                                                   // 14279
 * @param {number} startVelocity                                                                                       // 14280
 *    starting velocity                                                                                                // 14281
 */                                                                                                                    // 14282
TweenTransition.prototype.reset = function reset(startValue, startVelocity) {                                          // 14283
    if (this._callback) {                                                                                              // 14284
        var callback = this._callback;                                                                                 // 14285
        this._callback = undefined;                                                                                    // 14286
        callback();                                                                                                    // 14287
    }                                                                                                                  // 14288
    this.state = _clone(startValue);                                                                                   // 14289
    this.velocity = _clone(startVelocity);                                                                             // 14290
    this._startTime = 0;                                                                                               // 14291
    this._duration = 0;                                                                                                // 14292
    this._updateTime = 0;                                                                                              // 14293
    this._startValue = this.state;                                                                                     // 14294
    this._startVelocity = this.velocity;                                                                               // 14295
    this._endValue = this.state;                                                                                       // 14296
    this._active = false;                                                                                              // 14297
};                                                                                                                     // 14298
                                                                                                                       // 14299
/**                                                                                                                    // 14300
 * Get current velocity                                                                                                // 14301
 *                                                                                                                     // 14302
 * @method getVelocity                                                                                                 // 14303
 *                                                                                                                     // 14304
 * @returns {Number} velocity                                                                                          // 14305
 */                                                                                                                    // 14306
TweenTransition.prototype.getVelocity = function getVelocity() {                                                       // 14307
    return this.velocity;                                                                                              // 14308
};                                                                                                                     // 14309
                                                                                                                       // 14310
/**                                                                                                                    // 14311
 * Get interpolated state of current action at provided time. If the last                                              // 14312
 *    action has completed, invoke its callback.                                                                       // 14313
 *                                                                                                                     // 14314
 * @method get                                                                                                         // 14315
 *                                                                                                                     // 14316
 *                                                                                                                     // 14317
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14318
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14319
 * @return {number|Object.<number|string, number>} beginning state                                                     // 14320
 *    _interpolated to this point in time.                                                                             // 14321
 */                                                                                                                    // 14322
TweenTransition.prototype.get = function get(timestamp) {                                                              // 14323
    this.update(timestamp);                                                                                            // 14324
    return this.state;                                                                                                 // 14325
};                                                                                                                     // 14326
                                                                                                                       // 14327
function _calculateVelocity(current, start, curve, duration, t) {                                                      // 14328
    var velocity;                                                                                                      // 14329
    var eps = 1e-7;                                                                                                    // 14330
    var speed = (curve(t) - curve(t - eps)) / eps;                                                                     // 14331
    if (current instanceof Array) {                                                                                    // 14332
        velocity = [];                                                                                                 // 14333
        for (var i = 0; i < current.length; i++){                                                                      // 14334
            if (typeof current[i] === 'number')                                                                        // 14335
                velocity[i] = speed * (current[i] - start[i]) / duration;                                              // 14336
            else                                                                                                       // 14337
                velocity[i] = 0;                                                                                       // 14338
        }                                                                                                              // 14339
                                                                                                                       // 14340
    }                                                                                                                  // 14341
    else velocity = speed * (current - start) / duration;                                                              // 14342
    return velocity;                                                                                                   // 14343
}                                                                                                                      // 14344
                                                                                                                       // 14345
function _calculateState(start, end, t) {                                                                              // 14346
    var state;                                                                                                         // 14347
    if (start instanceof Array) {                                                                                      // 14348
        state = [];                                                                                                    // 14349
        for (var i = 0; i < start.length; i++) {                                                                       // 14350
            if (typeof start[i] === 'number')                                                                          // 14351
                state[i] = _interpolate(start[i], end[i], t);                                                          // 14352
            else                                                                                                       // 14353
                state[i] = start[i];                                                                                   // 14354
        }                                                                                                              // 14355
    }                                                                                                                  // 14356
    else state = _interpolate(start, end, t);                                                                          // 14357
    return state;                                                                                                      // 14358
}                                                                                                                      // 14359
                                                                                                                       // 14360
/**                                                                                                                    // 14361
 * Update internal state to the provided timestamp. This may invoke the last                                           // 14362
 *    callback and begin a new action.                                                                                 // 14363
 *                                                                                                                     // 14364
 * @method update                                                                                                      // 14365
 *                                                                                                                     // 14366
 *                                                                                                                     // 14367
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14368
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14369
 */                                                                                                                    // 14370
TweenTransition.prototype.update = function update(timestamp) {                                                        // 14371
    if (!this._active) {                                                                                               // 14372
        if (this._callback) {                                                                                          // 14373
            var callback = this._callback;                                                                             // 14374
            this._callback = undefined;                                                                                // 14375
            callback();                                                                                                // 14376
        }                                                                                                              // 14377
        return;                                                                                                        // 14378
    }                                                                                                                  // 14379
                                                                                                                       // 14380
    if (!timestamp) timestamp = Date.now();                                                                            // 14381
    if (this._updateTime >= timestamp) return;                                                                         // 14382
    this._updateTime = timestamp;                                                                                      // 14383
                                                                                                                       // 14384
    var timeSinceStart = timestamp - this._startTime;                                                                  // 14385
    if (timeSinceStart >= this._duration) {                                                                            // 14386
        this.state = this._endValue;                                                                                   // 14387
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);              // 14388
        this._active = false;                                                                                          // 14389
    }                                                                                                                  // 14390
    else if (timeSinceStart < 0) {                                                                                     // 14391
        this.state = this._startValue;                                                                                 // 14392
        this.velocity = this._startVelocity;                                                                           // 14393
    }                                                                                                                  // 14394
    else {                                                                                                             // 14395
        var t = timeSinceStart / this._duration;                                                                       // 14396
        this.state = _calculateState(this._startValue, this._endValue, this._curve(t));                                // 14397
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);              // 14398
    }                                                                                                                  // 14399
};                                                                                                                     // 14400
                                                                                                                       // 14401
/**                                                                                                                    // 14402
 * Is there at least one action pending completion?                                                                    // 14403
 *                                                                                                                     // 14404
 * @method isActive                                                                                                    // 14405
 *                                                                                                                     // 14406
 *                                                                                                                     // 14407
 * @return {boolean}                                                                                                   // 14408
 */                                                                                                                    // 14409
TweenTransition.prototype.isActive = function isActive() {                                                             // 14410
    return this._active;                                                                                               // 14411
};                                                                                                                     // 14412
                                                                                                                       // 14413
/**                                                                                                                    // 14414
 * Halt transition at current state and erase all pending actions.                                                     // 14415
 *                                                                                                                     // 14416
 * @method halt                                                                                                        // 14417
 *                                                                                                                     // 14418
 */                                                                                                                    // 14419
TweenTransition.prototype.halt = function halt() {                                                                     // 14420
    this.reset(this.get());                                                                                            // 14421
};                                                                                                                     // 14422
                                                                                                                       // 14423
// Register all the default curves                                                                                     // 14424
TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);                                                // 14425
TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);                                                // 14426
TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);                                              // 14427
TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);                                          // 14428
TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);                                  // 14429
TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);                                                // 14430
                                                                                                                       // 14431
TweenTransition.customCurve = function customCurve(v1, v2) {                                                           // 14432
    v1 = v1 || 0; v2 = v2 || 0;                                                                                        // 14433
    return function(t) {                                                                                               // 14434
        return v1*t + (-2*v1 - v2 + 3)*t*t + (v1 + v2 - 2)*t*t*t;                                                      // 14435
    };                                                                                                                 // 14436
};                                                                                                                     // 14437
                                                                                                                       // 14438
module.exports = TweenTransition;                                                                                      // 14439
},{}],91:[function(_dereq_,module,exports){                                                                            // 14440
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14441
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14442
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14443
 *                                                                                                                     // 14444
 * Owner: david@famo.us                                                                                                // 14445
 * @license MPL 2.0                                                                                                    // 14446
 * @copyright Famous Industries, Inc. 2014                                                                             // 14447
 */                                                                                                                    // 14448
                                                                                                                       // 14449
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 14450
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 14451
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 14452
var Wall = _dereq_('../physics/constraints/Wall');                                                                     // 14453
var Vector = _dereq_('../math/Vector');                                                                                // 14454
                                                                                                                       // 14455
/**                                                                                                                    // 14456
 * WallTransition is a method of transitioning between two values (numbers,                                            // 14457
 *   or arrays of numbers) with a bounce. Unlike a SpringTransition                                                    // 14458
 *   The transition will not overshoot the target, but bounce back against it.                                         // 14459
 *   The behavior of the bounce is specified by the transition options.                                                // 14460
 *                                                                                                                     // 14461
 * @class WallTransition                                                                                               // 14462
 * @constructor                                                                                                        // 14463
 *                                                                                                                     // 14464
 * @param {Number|Array} [state=0] Initial state                                                                       // 14465
 */                                                                                                                    // 14466
function WallTransition(state) {                                                                                       // 14467
    state = state || 0;                                                                                                // 14468
                                                                                                                       // 14469
    this.endState  = new Vector(state);                                                                                // 14470
    this.initState = new Vector();                                                                                     // 14471
                                                                                                                       // 14472
    this.spring = new Spring({anchor : this.endState});                                                                // 14473
    this.wall   = new Wall();                                                                                          // 14474
                                                                                                                       // 14475
    this._restTolerance = 1e-10;                                                                                       // 14476
    this._dimensions = 1;                                                                                              // 14477
    this._absRestTolerance = this._restTolerance;                                                                      // 14478
    this._callback = undefined;                                                                                        // 14479
                                                                                                                       // 14480
    this.PE = new PE();                                                                                                // 14481
    this.particle = new Particle();                                                                                    // 14482
                                                                                                                       // 14483
    this.PE.addBody(this.particle);                                                                                    // 14484
    this.PE.attach([this.wall, this.spring], this.particle);                                                           // 14485
}                                                                                                                      // 14486
                                                                                                                       // 14487
WallTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 14488
                                                                                                                       // 14489
/**                                                                                                                    // 14490
 * @property WallTransition.DEFAULT_OPTIONS                                                                            // 14491
 * @type Object                                                                                                        // 14492
 * @protected                                                                                                          // 14493
 * @static                                                                                                             // 14494
 */                                                                                                                    // 14495
WallTransition.DEFAULT_OPTIONS = {                                                                                     // 14496
                                                                                                                       // 14497
    /**                                                                                                                // 14498
     * The amount of time in milliseconds taken for one complete oscillation                                           // 14499
     * when there is no damping                                                                                        // 14500
     *    Range : [0, Infinity]                                                                                        // 14501
     *                                                                                                                 // 14502
     * @attribute period                                                                                               // 14503
     * @type Number                                                                                                    // 14504
     * @default 300                                                                                                    // 14505
     */                                                                                                                // 14506
    period : 300,                                                                                                      // 14507
                                                                                                                       // 14508
    /**                                                                                                                // 14509
     * The damping of the snap.                                                                                        // 14510
     *    Range : [0, 1]                                                                                               // 14511
     *    0 = no damping, and the spring will oscillate forever                                                        // 14512
     *    1 = critically damped (the spring will never oscillate)                                                      // 14513
     *                                                                                                                 // 14514
     * @attribute dampingRatio                                                                                         // 14515
     * @type Number                                                                                                    // 14516
     * @default 0.5                                                                                                    // 14517
     */                                                                                                                // 14518
    dampingRatio : 0.5,                                                                                                // 14519
                                                                                                                       // 14520
    /**                                                                                                                // 14521
     * The initial velocity of the transition.                                                                         // 14522
     *                                                                                                                 // 14523
     * @attribute velocity                                                                                             // 14524
     * @type Number|Array                                                                                              // 14525
     * @default 0                                                                                                      // 14526
     */                                                                                                                // 14527
    velocity : 0,                                                                                                      // 14528
                                                                                                                       // 14529
    /**                                                                                                                // 14530
     * The percentage of momentum transferred to the wall                                                              // 14531
     *                                                                                                                 // 14532
     * @attribute restitution                                                                                          // 14533
     * @type Number                                                                                                    // 14534
     * @default 0.5                                                                                                    // 14535
     */                                                                                                                // 14536
    restitution : 0.5                                                                                                  // 14537
};                                                                                                                     // 14538
                                                                                                                       // 14539
function _getEnergy() {                                                                                                // 14540
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 14541
}                                                                                                                      // 14542
                                                                                                                       // 14543
function _setAbsoluteRestTolerance() {                                                                                 // 14544
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 14545
    this._absRestTolerance = (distance === 0)                                                                          // 14546
        ? this._restTolerance                                                                                          // 14547
        : this._restTolerance * distance;                                                                              // 14548
}                                                                                                                      // 14549
                                                                                                                       // 14550
function _wake() {                                                                                                     // 14551
    this.PE.wake();                                                                                                    // 14552
}                                                                                                                      // 14553
                                                                                                                       // 14554
function _sleep() {                                                                                                    // 14555
    this.PE.sleep();                                                                                                   // 14556
}                                                                                                                      // 14557
                                                                                                                       // 14558
function _setTarget(target) {                                                                                          // 14559
    this.endState.set(target);                                                                                         // 14560
                                                                                                                       // 14561
    var dist = this.endState.sub(this.initState).norm();                                                               // 14562
                                                                                                                       // 14563
    this.wall.setOptions({                                                                                             // 14564
        distance : this.endState.norm(),                                                                               // 14565
        normal : (dist === 0)                                                                                          // 14566
            ? this.particle.velocity.normalize(-1)                                                                     // 14567
            : this.endState.sub(this.initState).normalize(-1)                                                          // 14568
    });                                                                                                                // 14569
                                                                                                                       // 14570
    _setAbsoluteRestTolerance.call(this);                                                                              // 14571
}                                                                                                                      // 14572
                                                                                                                       // 14573
function _setParticlePosition(p) {                                                                                     // 14574
    this.particle.position.set(p);                                                                                     // 14575
}                                                                                                                      // 14576
                                                                                                                       // 14577
function _setParticleVelocity(v) {                                                                                     // 14578
    this.particle.velocity.set(v);                                                                                     // 14579
}                                                                                                                      // 14580
                                                                                                                       // 14581
function _getParticlePosition() {                                                                                      // 14582
    return (this._dimensions === 0)                                                                                    // 14583
        ? this.particle.getPosition1D()                                                                                // 14584
        : this.particle.getPosition();                                                                                 // 14585
}                                                                                                                      // 14586
                                                                                                                       // 14587
function _getParticleVelocity() {                                                                                      // 14588
    return (this._dimensions === 0)                                                                                    // 14589
        ? this.particle.getVelocity1D()                                                                                // 14590
        : this.particle.getVelocity();                                                                                 // 14591
}                                                                                                                      // 14592
                                                                                                                       // 14593
function _setCallback(callback) {                                                                                      // 14594
    this._callback = callback;                                                                                         // 14595
}                                                                                                                      // 14596
                                                                                                                       // 14597
function _update() {                                                                                                   // 14598
    if (this.PE.isSleeping()) {                                                                                        // 14599
        if (this._callback) {                                                                                          // 14600
            var cb = this._callback;                                                                                   // 14601
            this._callback = undefined;                                                                                // 14602
            cb();                                                                                                      // 14603
        }                                                                                                              // 14604
        return;                                                                                                        // 14605
    }                                                                                                                  // 14606
    var energy = _getEnergy.call(this);                                                                                // 14607
    if (energy < this._absRestTolerance) {                                                                             // 14608
        _sleep.call(this);                                                                                             // 14609
        _setParticlePosition.call(this, this.endState);                                                                // 14610
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 14611
    }                                                                                                                  // 14612
}                                                                                                                      // 14613
                                                                                                                       // 14614
function _setupDefinition(def) {                                                                                       // 14615
    var defaults = WallTransition.DEFAULT_OPTIONS;                                                                     // 14616
    if (def.period === undefined) def.period = defaults.period;                                                        // 14617
    if (def.dampingRatio === undefined) def.dampingRatio = defaults.dampingRatio;                                      // 14618
    if (def.velocity === undefined) def.velocity = defaults.velocity;                                                  // 14619
    if (def.restitution === undefined) def.restitution = defaults.restitution;                                         // 14620
    if (def.drift === undefined) def.drift = Wall.DEFAULT_OPTIONS.drift;                                               // 14621
    if (def.slop === undefined) def.slop = Wall.DEFAULT_OPTIONS.slop;                                                  // 14622
                                                                                                                       // 14623
    //setup spring                                                                                                     // 14624
    this.spring.setOptions({                                                                                           // 14625
        period : def.period,                                                                                           // 14626
        dampingRatio : def.dampingRatio                                                                                // 14627
    });                                                                                                                // 14628
                                                                                                                       // 14629
    //setup wall                                                                                                       // 14630
    this.wall.setOptions({                                                                                             // 14631
        restitution : def.restitution,                                                                                 // 14632
        drift: def.drift,                                                                                              // 14633
        slop: def.slop                                                                                                 // 14634
    });                                                                                                                // 14635
                                                                                                                       // 14636
    //setup particle                                                                                                   // 14637
    _setParticleVelocity.call(this, def.velocity);                                                                     // 14638
}                                                                                                                      // 14639
                                                                                                                       // 14640
/**                                                                                                                    // 14641
 * Resets the state and velocity                                                                                       // 14642
 *                                                                                                                     // 14643
 * @method reset                                                                                                       // 14644
 *                                                                                                                     // 14645
 * @param {Number|Array}  state     State                                                                              // 14646
 * @param  {Number|Array} [velocity] Velocity                                                                          // 14647
 */                                                                                                                    // 14648
WallTransition.prototype.reset = function reset(state, velocity) {                                                     // 14649
    this._dimensions = (state instanceof Array)                                                                        // 14650
        ? state.length                                                                                                 // 14651
        : 0;                                                                                                           // 14652
                                                                                                                       // 14653
    this.initState.set(state);                                                                                         // 14654
    _setParticlePosition.call(this, state);                                                                            // 14655
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 14656
    _setTarget.call(this, state);                                                                                      // 14657
    _setCallback.call(this, undefined);                                                                                // 14658
};                                                                                                                     // 14659
                                                                                                                       // 14660
/**                                                                                                                    // 14661
 * Getter for velocity                                                                                                 // 14662
 *                                                                                                                     // 14663
 * @method getVelocity                                                                                                 // 14664
 *                                                                                                                     // 14665
 * @return velocity {Number|Array}                                                                                     // 14666
 */                                                                                                                    // 14667
WallTransition.prototype.getVelocity = function getVelocity() {                                                        // 14668
    return _getParticleVelocity.call(this);                                                                            // 14669
};                                                                                                                     // 14670
                                                                                                                       // 14671
/**                                                                                                                    // 14672
 * Setter for velocity                                                                                                 // 14673
 *                                                                                                                     // 14674
 * @method setVelocity                                                                                                 // 14675
 *                                                                                                                     // 14676
 * @return velocity {Number|Array}                                                                                     // 14677
 */                                                                                                                    // 14678
WallTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 14679
    this.call(this, _setParticleVelocity(velocity));                                                                   // 14680
};                                                                                                                     // 14681
                                                                                                                       // 14682
/**                                                                                                                    // 14683
 * Detects whether a transition is in progress                                                                         // 14684
 *                                                                                                                     // 14685
 * @method isActive                                                                                                    // 14686
 *                                                                                                                     // 14687
 * @return {Boolean}                                                                                                   // 14688
 */                                                                                                                    // 14689
WallTransition.prototype.isActive = function isActive() {                                                              // 14690
    return !this.PE.isSleeping();                                                                                      // 14691
};                                                                                                                     // 14692
                                                                                                                       // 14693
/**                                                                                                                    // 14694
 * Halt the transition                                                                                                 // 14695
 *                                                                                                                     // 14696
 * @method halt                                                                                                        // 14697
 */                                                                                                                    // 14698
WallTransition.prototype.halt = function halt() {                                                                      // 14699
    this.set(this.get());                                                                                              // 14700
};                                                                                                                     // 14701
                                                                                                                       // 14702
/**                                                                                                                    // 14703
 * Getter                                                                                                              // 14704
 *                                                                                                                     // 14705
 * @method get                                                                                                         // 14706
 *                                                                                                                     // 14707
 * @return state {Number|Array}                                                                                        // 14708
 */                                                                                                                    // 14709
WallTransition.prototype.get = function get() {                                                                        // 14710
    _update.call(this);                                                                                                // 14711
    return _getParticlePosition.call(this);                                                                            // 14712
};                                                                                                                     // 14713
                                                                                                                       // 14714
/**                                                                                                                    // 14715
 * Set the end position and transition, with optional callback on completion.                                          // 14716
 *                                                                                                                     // 14717
 * @method set                                                                                                         // 14718
 *                                                                                                                     // 14719
 * @param state {Number|Array}      Final state                                                                        // 14720
 * @param [definition] {Object}     Transition definition                                                              // 14721
 * @param [callback] {Function}     Callback                                                                           // 14722
 */                                                                                                                    // 14723
WallTransition.prototype.set = function set(state, definition, callback) {                                             // 14724
    if (!definition) {                                                                                                 // 14725
        this.reset(state);                                                                                             // 14726
        if (callback) callback();                                                                                      // 14727
        return;                                                                                                        // 14728
    }                                                                                                                  // 14729
                                                                                                                       // 14730
    this._dimensions = (state instanceof Array)                                                                        // 14731
        ? state.length                                                                                                 // 14732
        : 0;                                                                                                           // 14733
                                                                                                                       // 14734
    _wake.call(this);                                                                                                  // 14735
    _setupDefinition.call(this, definition);                                                                           // 14736
    _setTarget.call(this, state);                                                                                      // 14737
    _setCallback.call(this, callback);                                                                                 // 14738
};                                                                                                                     // 14739
                                                                                                                       // 14740
module.exports = WallTransition;                                                                                       // 14741
},{"../math/Vector":41,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/constraints/Wall":60,"../physics/forces/Spring":68}],92:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 14743
  CachedMap: _dereq_('./CachedMap'),                                                                                   // 14744
  Easing: _dereq_('./Easing'),                                                                                         // 14745
  MultipleTransition: _dereq_('./MultipleTransition'),                                                                 // 14746
  SnapTransition: _dereq_('./SnapTransition'),                                                                         // 14747
  SpringTransition: _dereq_('./SpringTransition'),                                                                     // 14748
  Transitionable: _dereq_('./Transitionable'),                                                                         // 14749
  TransitionableTransform: _dereq_('./TransitionableTransform'),                                                       // 14750
  TweenTransition: _dereq_('./TweenTransition'),                                                                       // 14751
  WallTransition: _dereq_('./WallTransition')                                                                          // 14752
};                                                                                                                     // 14753
                                                                                                                       // 14754
},{"./CachedMap":83,"./Easing":84,"./MultipleTransition":85,"./SnapTransition":86,"./SpringTransition":87,"./Transitionable":88,"./TransitionableTransform":89,"./TweenTransition":90,"./WallTransition":91}],93:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14756
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14757
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14758
 *                                                                                                                     // 14759
 * Owner: mark@famo.us                                                                                                 // 14760
 * @license MPL 2.0                                                                                                    // 14761
 * @copyright Famous Industries, Inc. 2014                                                                             // 14762
 */                                                                                                                    // 14763
                                                                                                                       // 14764
                                                                                                                       // 14765
                                                                                                                       // 14766
                                                                                                                       // 14767
/**                                                                                                                    // 14768
 * Collection to map keyboard codes in plain english                                                                   // 14769
 *                                                                                                                     // 14770
 * @class KeyCodes                                                                                                     // 14771
 * @static                                                                                                             // 14772
 */                                                                                                                    // 14773
var KeyCodes = {                                                                                                       // 14774
    0 : 48,                                                                                                            // 14775
    1 : 49,                                                                                                            // 14776
    2 : 50,                                                                                                            // 14777
    3 : 51,                                                                                                            // 14778
    4 : 52,                                                                                                            // 14779
    5 : 53,                                                                                                            // 14780
    6 : 54,                                                                                                            // 14781
    7 : 55,                                                                                                            // 14782
    8 : 56,                                                                                                            // 14783
    9 : 57,                                                                                                            // 14784
    a : 97,                                                                                                            // 14785
    b : 98,                                                                                                            // 14786
    c : 99,                                                                                                            // 14787
    d : 100,                                                                                                           // 14788
    e : 101,                                                                                                           // 14789
    f : 102,                                                                                                           // 14790
    g : 103,                                                                                                           // 14791
    h : 104,                                                                                                           // 14792
    i : 105,                                                                                                           // 14793
    j : 106,                                                                                                           // 14794
    k : 107,                                                                                                           // 14795
    l : 108,                                                                                                           // 14796
    m : 109,                                                                                                           // 14797
    n : 110,                                                                                                           // 14798
    o : 111,                                                                                                           // 14799
    p : 112,                                                                                                           // 14800
    q : 113,                                                                                                           // 14801
    r : 114,                                                                                                           // 14802
    s : 115,                                                                                                           // 14803
    t : 116,                                                                                                           // 14804
    u : 117,                                                                                                           // 14805
    v : 118,                                                                                                           // 14806
    w : 119,                                                                                                           // 14807
    x : 120,                                                                                                           // 14808
    y : 121,                                                                                                           // 14809
    z : 122,                                                                                                           // 14810
    A : 65,                                                                                                            // 14811
    B : 66,                                                                                                            // 14812
    C : 67,                                                                                                            // 14813
    D : 68,                                                                                                            // 14814
    E : 69,                                                                                                            // 14815
    F : 70,                                                                                                            // 14816
    G : 71,                                                                                                            // 14817
    H : 72,                                                                                                            // 14818
    I : 73,                                                                                                            // 14819
    J : 74,                                                                                                            // 14820
    K : 75,                                                                                                            // 14821
    L : 76,                                                                                                            // 14822
    M : 77,                                                                                                            // 14823
    N : 78,                                                                                                            // 14824
    O : 79,                                                                                                            // 14825
    P : 80,                                                                                                            // 14826
    Q : 81,                                                                                                            // 14827
    R : 82,                                                                                                            // 14828
    S : 83,                                                                                                            // 14829
    T : 84,                                                                                                            // 14830
    U : 85,                                                                                                            // 14831
    V : 86,                                                                                                            // 14832
    W : 87,                                                                                                            // 14833
    X : 88,                                                                                                            // 14834
    Y : 89,                                                                                                            // 14835
    Z : 90,                                                                                                            // 14836
    ENTER : 13,                                                                                                        // 14837
    LEFT_ARROW: 37,                                                                                                    // 14838
    RIGHT_ARROW: 39,                                                                                                   // 14839
    UP_ARROW: 38,                                                                                                      // 14840
    DOWN_ARROW: 40,                                                                                                    // 14841
    SPACE: 32,                                                                                                         // 14842
    SHIFT: 16,                                                                                                         // 14843
    TAB: 9                                                                                                             // 14844
};                                                                                                                     // 14845
                                                                                                                       // 14846
module.exports = KeyCodes;                                                                                             // 14847
},{}],94:[function(_dereq_,module,exports){                                                                            // 14848
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14849
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14850
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14851
 *                                                                                                                     // 14852
 * Owner: mark@famo.us                                                                                                 // 14853
 * @license MPL 2.0                                                                                                    // 14854
 * @copyright Famous Industries, Inc. 2014                                                                             // 14855
 */                                                                                                                    // 14856
// TODO fix func-style                                                                                                 // 14857
/*eslint func-style: [0, "declaration"] */                                                                             // 14858
                                                                                                                       // 14859
/**                                                                                                                    // 14860
 * An internal library to reproduce javascript time-based scheduling.                                                  // 14861
 *   Using standard javascript setTimeout methods can have a negative performance impact                               // 14862
 *   when combined with the Famous rendering process, so instead require Timer and call                                // 14863
 *   Timer.setTimeout, Timer.setInterval, etc.                                                                         // 14864
 *                                                                                                                     // 14865
 * @class Timer                                                                                                        // 14866
 * @constructor                                                                                                        // 14867
 */                                                                                                                    // 14868
var FamousEngine = _dereq_('../core/Engine');                                                                          // 14869
                                                                                                                       // 14870
var _event  = 'prerender';                                                                                             // 14871
                                                                                                                       // 14872
var getTime = (window.performance && window.performance.now) ?                                                         // 14873
    function() {                                                                                                       // 14874
        return window.performance.now();                                                                               // 14875
    }                                                                                                                  // 14876
    : function() {                                                                                                     // 14877
        return Date.now();                                                                                             // 14878
    };                                                                                                                 // 14879
                                                                                                                       // 14880
/**                                                                                                                    // 14881
 * Add a function to be run on every prerender                                                                         // 14882
 *                                                                                                                     // 14883
 * @method addTimerFunction                                                                                            // 14884
 *                                                                                                                     // 14885
 * @param {function} fn function to be run every prerender                                                             // 14886
 *                                                                                                                     // 14887
 * @return {function} function passed in as parameter                                                                  // 14888
 */                                                                                                                    // 14889
function addTimerFunction(fn) {                                                                                        // 14890
    FamousEngine.on(_event, fn);                                                                                       // 14891
    return fn;                                                                                                         // 14892
}                                                                                                                      // 14893
                                                                                                                       // 14894
/**                                                                                                                    // 14895
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14896
 *  After a set duration has passed, it executes the function and                                                      // 14897
 *  removes it as a listener to 'prerender'.                                                                           // 14898
 *                                                                                                                     // 14899
 * @method setTimeout                                                                                                  // 14900
 *                                                                                                                     // 14901
 * @param {function} fn function to be run after a specified duration                                                  // 14902
 * @param {number} duration milliseconds from now to execute the function                                              // 14903
 *                                                                                                                     // 14904
 * @return {function} function passed in as parameter                                                                  // 14905
 */                                                                                                                    // 14906
function setTimeout(fn, duration) {                                                                                    // 14907
    var t = getTime();                                                                                                 // 14908
    var callback = function() {                                                                                        // 14909
        var t2 = getTime();                                                                                            // 14910
        if (t2 - t >= duration) {                                                                                      // 14911
            fn.apply(this, arguments);                                                                                 // 14912
            FamousEngine.removeListener(_event, callback);                                                             // 14913
        }                                                                                                              // 14914
    };                                                                                                                 // 14915
    return addTimerFunction(callback);                                                                                 // 14916
}                                                                                                                      // 14917
                                                                                                                       // 14918
/**                                                                                                                    // 14919
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14920
 *  After a set duration has passed, it executes the function and                                                      // 14921
 *  resets the execution time.                                                                                         // 14922
 *                                                                                                                     // 14923
 * @method setInterval                                                                                                 // 14924
 *                                                                                                                     // 14925
 * @param {function} fn function to be run after a specified duration                                                  // 14926
 * @param {number} duration interval to execute function in milliseconds                                               // 14927
 *                                                                                                                     // 14928
 * @return {function} function passed in as parameter                                                                  // 14929
 */                                                                                                                    // 14930
function setInterval(fn, duration) {                                                                                   // 14931
    var t = getTime();                                                                                                 // 14932
    var callback = function() {                                                                                        // 14933
        var t2 = getTime();                                                                                            // 14934
        if (t2 - t >= duration) {                                                                                      // 14935
            fn.apply(this, arguments);                                                                                 // 14936
            t = getTime();                                                                                             // 14937
        }                                                                                                              // 14938
    };                                                                                                                 // 14939
    return addTimerFunction(callback);                                                                                 // 14940
}                                                                                                                      // 14941
                                                                                                                       // 14942
/**                                                                                                                    // 14943
 * Wraps a function to be invoked after a certain amount of prerender ticks.                                           // 14944
 *  Similar use to setTimeout but tied to the engine's run speed.                                                      // 14945
 *                                                                                                                     // 14946
 * @method after                                                                                                       // 14947
 *                                                                                                                     // 14948
 * @param {function} fn function to be run after a specified amount of ticks                                           // 14949
 * @param {number} numTicks number of prerender frames to wait                                                         // 14950
 *                                                                                                                     // 14951
 * @return {function} function passed in as parameter                                                                  // 14952
 */                                                                                                                    // 14953
function after(fn, numTicks) {                                                                                         // 14954
    if (numTicks === undefined) return undefined;                                                                      // 14955
    var callback = function() {                                                                                        // 14956
        numTicks--;                                                                                                    // 14957
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 14958
            fn.apply(this, arguments);                                                                                 // 14959
            clear(callback);                                                                                           // 14960
        }                                                                                                              // 14961
    };                                                                                                                 // 14962
    return addTimerFunction(callback);                                                                                 // 14963
}                                                                                                                      // 14964
                                                                                                                       // 14965
/**                                                                                                                    // 14966
 * Wraps a function to be continually invoked after a certain amount of prerender ticks.                               // 14967
 *  Similar use to setInterval but tied to the engine's run speed.                                                     // 14968
 *                                                                                                                     // 14969
 * @method every                                                                                                       // 14970
 *                                                                                                                     // 14971
 * @param {function} fn function to be run after a specified amount of ticks                                           // 14972
 * @param {number} numTicks number of prerender frames to wait                                                         // 14973
 *                                                                                                                     // 14974
 * @return {function} function passed in as parameter                                                                  // 14975
 */                                                                                                                    // 14976
function every(fn, numTicks) {                                                                                         // 14977
    numTicks = numTicks || 1;                                                                                          // 14978
    var initial = numTicks;                                                                                            // 14979
    var callback = function() {                                                                                        // 14980
        numTicks--;                                                                                                    // 14981
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 14982
            fn.apply(this, arguments);                                                                                 // 14983
            numTicks = initial;                                                                                        // 14984
        }                                                                                                              // 14985
    };                                                                                                                 // 14986
    return addTimerFunction(callback);                                                                                 // 14987
}                                                                                                                      // 14988
                                                                                                                       // 14989
/**                                                                                                                    // 14990
 * Remove a function that gets called every prerender                                                                  // 14991
 *                                                                                                                     // 14992
 * @method clear                                                                                                       // 14993
 *                                                                                                                     // 14994
 * @param {function} fn event linstener                                                                                // 14995
 */                                                                                                                    // 14996
function clear(fn) {                                                                                                   // 14997
    FamousEngine.removeListener(_event, fn);                                                                           // 14998
}                                                                                                                      // 14999
                                                                                                                       // 15000
/**                                                                                                                    // 15001
 * Executes a function after a certain amount of time. Makes sure                                                      // 15002
 *  the function is not run multiple times.                                                                            // 15003
 *                                                                                                                     // 15004
 * @method debounce                                                                                                    // 15005
 *                                                                                                                     // 15006
 * @param {function} func function to run after certain amount of time                                                 // 15007
 * @param {number} wait amount of time                                                                                 // 15008
 *                                                                                                                     // 15009
 * @return {function} function that is not able to debounce                                                            // 15010
 */                                                                                                                    // 15011
function debounce(func, wait) {                                                                                        // 15012
    var timeout;                                                                                                       // 15013
    var ctx;                                                                                                           // 15014
    var timestamp;                                                                                                     // 15015
    var result;                                                                                                        // 15016
    var args;                                                                                                          // 15017
    return function() {                                                                                                // 15018
        ctx = this;                                                                                                    // 15019
        args = arguments;                                                                                              // 15020
        timestamp = getTime();                                                                                         // 15021
                                                                                                                       // 15022
        var fn = function() {                                                                                          // 15023
            var last = getTime - timestamp;                                                                            // 15024
                                                                                                                       // 15025
            if (last < wait) {                                                                                         // 15026
                timeout = setTimeout(fn, wait - last);                                                                 // 15027
            } else {                                                                                                   // 15028
                timeout = null;                                                                                        // 15029
                result = func.apply(ctx, args);                                                                        // 15030
            }                                                                                                          // 15031
        };                                                                                                             // 15032
                                                                                                                       // 15033
        clear(timeout);                                                                                                // 15034
        timeout = setTimeout(fn, wait);                                                                                // 15035
                                                                                                                       // 15036
        return result;                                                                                                 // 15037
    };                                                                                                                 // 15038
}                                                                                                                      // 15039
                                                                                                                       // 15040
module.exports = {                                                                                                     // 15041
    setTimeout : setTimeout,                                                                                           // 15042
    setInterval : setInterval,                                                                                         // 15043
    debounce : debounce,                                                                                               // 15044
    after : after,                                                                                                     // 15045
    every : every,                                                                                                     // 15046
    clear : clear                                                                                                      // 15047
};                                                                                                                     // 15048
},{"../core/Engine":4}],95:[function(_dereq_,module,exports){                                                          // 15049
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15050
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15051
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15052
 *                                                                                                                     // 15053
 * Owner: mark@famo.us                                                                                                 // 15054
 * @license MPL 2.0                                                                                                    // 15055
 * @copyright Famous Industries, Inc. 2014                                                                             // 15056
 */                                                                                                                    // 15057
                                                                                                                       // 15058
                                                                                                                       // 15059
                                                                                                                       // 15060
/**                                                                                                                    // 15061
 * This namespace holds standalone functionality.                                                                      // 15062
 *  Currently includes name mapping for transition curves,                                                             // 15063
 *  name mapping for origin pairs, and the after() function.                                                           // 15064
 *                                                                                                                     // 15065
 * @class Utility                                                                                                      // 15066
 * @static                                                                                                             // 15067
 */                                                                                                                    // 15068
var Utility = {};                                                                                                      // 15069
                                                                                                                       // 15070
/**                                                                                                                    // 15071
 * Table of direction array positions                                                                                  // 15072
 *                                                                                                                     // 15073
 * @property {object} Direction                                                                                        // 15074
 * @final                                                                                                              // 15075
 */                                                                                                                    // 15076
Utility.Direction = {                                                                                                  // 15077
    X: 0,                                                                                                              // 15078
    Y: 1,                                                                                                              // 15079
    Z: 2                                                                                                               // 15080
};                                                                                                                     // 15081
                                                                                                                       // 15082
/**                                                                                                                    // 15083
 * Return wrapper around callback function. Once the wrapper is called N                                               // 15084
 *   times, invoke the callback function. Arguments and scope preserved.                                               // 15085
 *                                                                                                                     // 15086
 * @method after                                                                                                       // 15087
 *                                                                                                                     // 15088
 * @param {number} count number of calls before callback function invoked                                              // 15089
 * @param {Function} callback wrapped callback function                                                                // 15090
 *                                                                                                                     // 15091
 * @return {function} wrapped callback with coundown feature                                                           // 15092
 */                                                                                                                    // 15093
Utility.after = function after(count, callback) {                                                                      // 15094
    var counter = count;                                                                                               // 15095
    return function() {                                                                                                // 15096
        counter--;                                                                                                     // 15097
        if (counter === 0) callback.apply(this, arguments);                                                            // 15098
    };                                                                                                                 // 15099
};                                                                                                                     // 15100
                                                                                                                       // 15101
/**                                                                                                                    // 15102
 * Load a URL and return its contents in a callback                                                                    // 15103
 *                                                                                                                     // 15104
 * @method loadURL                                                                                                     // 15105
 *                                                                                                                     // 15106
 * @param {string} url URL of object                                                                                   // 15107
 * @param {function} callback callback to dispatch with content                                                        // 15108
 */                                                                                                                    // 15109
Utility.loadURL = function loadURL(url, callback) {                                                                    // 15110
    var xhr = new XMLHttpRequest();                                                                                    // 15111
    xhr.onreadystatechange = function onreadystatechange() {                                                           // 15112
        if (this.readyState === 4) {                                                                                   // 15113
            if (callback) callback(this.responseText);                                                                 // 15114
        }                                                                                                              // 15115
    };                                                                                                                 // 15116
    xhr.open('GET', url);                                                                                              // 15117
    xhr.send();                                                                                                        // 15118
};                                                                                                                     // 15119
                                                                                                                       // 15120
/**                                                                                                                    // 15121
 * Create a document fragment from a string of HTML                                                                    // 15122
 *                                                                                                                     // 15123
 * @method createDocumentFragmentFromHTML                                                                              // 15124
 *                                                                                                                     // 15125
 * @param {string} html HTML to convert to DocumentFragment                                                            // 15126
 *                                                                                                                     // 15127
 * @return {DocumentFragment} DocumentFragment representing input HTML                                                 // 15128
 */                                                                                                                    // 15129
Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {                               // 15130
    var element = document.createElement('div');                                                                       // 15131
    element.innerHTML = html;                                                                                          // 15132
    var result = document.createDocumentFragment();                                                                    // 15133
    while (element.hasChildNodes()) result.appendChild(element.firstChild);                                            // 15134
    return result;                                                                                                     // 15135
};                                                                                                                     // 15136
                                                                                                                       // 15137
/*                                                                                                                     // 15138
 *  Deep clone an object.                                                                                              // 15139
 *  @param b {Object} Object to clone                                                                                  // 15140
 *  @return a {Object} Cloned object.                                                                                  // 15141
 */                                                                                                                    // 15142
Utility.clone = function clone(b) {                                                                                    // 15143
    var a;                                                                                                             // 15144
    if (typeof b === 'object') {                                                                                       // 15145
        a = (b instanceof Array) ? [] : {};                                                                            // 15146
        for (var key in b) {                                                                                           // 15147
            if (typeof b[key] === 'object' && b[key] !== null) {                                                       // 15148
                if (b[key] instanceof Array) {                                                                         // 15149
                    a[key] = new Array(b[key].length);                                                                 // 15150
                    for (var i = 0; i < b[key].length; i++) {                                                          // 15151
                        a[key][i] = Utility.clone(b[key][i]);                                                          // 15152
                    }                                                                                                  // 15153
                }                                                                                                      // 15154
                else {                                                                                                 // 15155
                  a[key] = Utility.clone(b[key]);                                                                      // 15156
                }                                                                                                      // 15157
            }                                                                                                          // 15158
            else {                                                                                                     // 15159
                a[key] = b[key];                                                                                       // 15160
            }                                                                                                          // 15161
        }                                                                                                              // 15162
    }                                                                                                                  // 15163
    else {                                                                                                             // 15164
        a = b;                                                                                                         // 15165
    }                                                                                                                  // 15166
    return a;                                                                                                          // 15167
};                                                                                                                     // 15168
                                                                                                                       // 15169
module.exports = Utility;                                                                                              // 15170
},{}],96:[function(_dereq_,module,exports){                                                                            // 15171
module.exports = {                                                                                                     // 15172
  KeyCodes: _dereq_('./KeyCodes'),                                                                                     // 15173
  Utility: _dereq_('./Utility'),                                                                                       // 15174
  Timer: _dereq_('./Timer')                                                                                            // 15175
};                                                                                                                     // 15176
                                                                                                                       // 15177
},{"./KeyCodes":93,"./Timer":94,"./Utility":95}],97:[function(_dereq_,module,exports){                                 // 15178
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15179
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15180
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15181
 *                                                                                                                     // 15182
 * Owner: mike@famo.us                                                                                                 // 15183
 * @license MPL 2.0                                                                                                    // 15184
 * @copyright Famous Industries, Inc. 2014                                                                             // 15185
 */                                                                                                                    // 15186
                                                                                                                       // 15187
var Entity = _dereq_('../core/Entity');                                                                                // 15188
var Transform = _dereq_('../core/Transform');                                                                          // 15189
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15190
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15191
                                                                                                                       // 15192
/**                                                                                                                    // 15193
 * ContextualView is an interface for creating views that need to                                                      // 15194
 *   be aware of their parent's transform, size, and/or origin.                                                        // 15195
 *   Consists of a OptionsManager paired with an input EventHandler                                                    // 15196
 *   and an output EventHandler. Meant to be extended by the developer.                                                // 15197
 * @class ContextualView                                                                                               // 15198
 * @constructor                                                                                                        // 15199
 * @param {Options} [options] An object of configurable options.                                                       // 15200
 */                                                                                                                    // 15201
function ContextualView(options) {                                                                                     // 15202
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS || ContextualView.DEFAULT_OPTIONS);                  // 15203
    this._optionsManager = new OptionsManager(this.options);                                                           // 15204
    if (options) this.setOptions(options);                                                                             // 15205
                                                                                                                       // 15206
    this._eventInput = new EventHandler();                                                                             // 15207
    this._eventOutput = new EventHandler();                                                                            // 15208
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15209
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15210
                                                                                                                       // 15211
    this._id = Entity.register(this);                                                                                  // 15212
}                                                                                                                      // 15213
                                                                                                                       // 15214
ContextualView.DEFAULT_OPTIONS = {};                                                                                   // 15215
                                                                                                                       // 15216
/**                                                                                                                    // 15217
 * Patches the ContextualLayout instance's options with the passed-in ones.                                            // 15218
 *                                                                                                                     // 15219
 * @method setOptions                                                                                                  // 15220
 * @param {Options} options An object of configurable options for the ContextualLayout instance.                       // 15221
 */                                                                                                                    // 15222
ContextualView.prototype.setOptions = function setOptions(options) {                                                   // 15223
    return this._optionsManager.setOptions(options);                                                                   // 15224
};                                                                                                                     // 15225
                                                                                                                       // 15226
/**                                                                                                                    // 15227
 * Returns ContextualLayout instance's options.                                                                        // 15228
 *                                                                                                                     // 15229
 * @method setOptions                                                                                                  // 15230
 * @param {string} key                                                                                                 // 15231
 * @return {Options} options The instance's object of configurable options.                                            // 15232
 */                                                                                                                    // 15233
ContextualView.prototype.getOptions = function getOptions(key) {                                                       // 15234
    return this._optionsManager.getOptions(key);                                                                       // 15235
};                                                                                                                     // 15236
                                                                                                                       // 15237
/**                                                                                                                    // 15238
 * Return the registers Entity id for the ContextualView.                                                              // 15239
 *                                                                                                                     // 15240
 * @private                                                                                                            // 15241
 * @method render                                                                                                      // 15242
 * @return {Number} Registered Entity id                                                                               // 15243
 */                                                                                                                    // 15244
ContextualView.prototype.render = function render() {                                                                  // 15245
    return this._id;                                                                                                   // 15246
};                                                                                                                     // 15247
                                                                                                                       // 15248
/**                                                                                                                    // 15249
 * Apply changes from this component to the corresponding document element.                                            // 15250
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15251
 * and matrix transforms.                                                                                              // 15252
 *                                                                                                                     // 15253
 * @private                                                                                                            // 15254
 * @method commit                                                                                                      // 15255
 * @param {Context} context commit context                                                                             // 15256
 */                                                                                                                    // 15257
ContextualView.prototype.commit = function commit(context) {};                                                         // 15258
                                                                                                                       // 15259
module.exports = ContextualView;                                                                                       // 15260
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15}],98:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15262
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15263
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15264
 *                                                                                                                     // 15265
 * Owner: felix@famo.us                                                                                                // 15266
 * @license MPL 2.0                                                                                                    // 15267
 * @copyright Famous Industries, Inc. 2014                                                                             // 15268
 */                                                                                                                    // 15269
                                                                                                                       // 15270
var Transform = _dereq_('../core/Transform');                                                                          // 15271
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15272
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15273
var Utility = _dereq_('../utilities/Utility');                                                                         // 15274
var SequentialLayout = _dereq_('./SequentialLayout');                                                                  // 15275
                                                                                                                       // 15276
/**                                                                                                                    // 15277
 * A Sequential Layout that can be opened and closed with animations.                                                  // 15278
 *                                                                                                                     // 15279
 *   Takes the same options as SequentialLayout                                                                        // 15280
 *   as well as options for the open/close transition                                                                  // 15281
 *   and the rotation you want your Deck instance to layout in.                                                        // 15282
 *                                                                                                                     // 15283
 * @class Deck                                                                                                         // 15284
 * @constructor                                                                                                        // 15285
 * @extends SequentialLayout                                                                                           // 15286
 *                                                                                                                     // 15287
 * @param {Options} [options] An object of configurable options                                                        // 15288
 * @param {Transition} [options.transition={duration: 500, curve: 'easeOutBounce'}                                     // 15289
 *   The transition that executes upon opening or closing your deck instance.                                          // 15290
 * @param {Number} [stackRotation=0] The amount of rotation applied to the propogation                                 // 15291
 *   of the Deck instance's stack of renderables.                                                                      // 15292
 * @param {Object} [options.transition] A transition object for changing between states.                               // 15293
 * @param {Number} [options.direction] axis of expansion (Utility.Direction.X or .Y)                                   // 15294
 */                                                                                                                    // 15295
function Deck(options) {                                                                                               // 15296
    SequentialLayout.apply(this, arguments);                                                                           // 15297
    this.state = new Transitionable(0);                                                                                // 15298
    this._isOpen = false;                                                                                              // 15299
                                                                                                                       // 15300
    this.setOutputFunction(function(input, offset, index) {                                                            // 15301
        var state = _getState.call(this);                                                                              // 15302
        var positionMatrix = (this.options.direction === Utility.Direction.X) ?                                        // 15303
            Transform.translate(state * offset, 0, 0.001 * (state - 1) * offset) :                                     // 15304
            Transform.translate(0, state * offset, 0.001 * (state - 1) * offset);                                      // 15305
        var output = input.render();                                                                                   // 15306
        if (this.options.stackRotation) {                                                                              // 15307
            var amount = this.options.stackRotation * index * (1 - state);                                             // 15308
            output = {                                                                                                 // 15309
                transform: Transform.rotateZ(amount),                                                                  // 15310
                origin: [0.5, 0.5],                                                                                    // 15311
                target: output                                                                                         // 15312
            };                                                                                                         // 15313
        }                                                                                                              // 15314
        return {                                                                                                       // 15315
            transform: positionMatrix,                                                                                 // 15316
            size: input.getSize(),                                                                                     // 15317
            target: output                                                                                             // 15318
        };                                                                                                             // 15319
    });                                                                                                                // 15320
}                                                                                                                      // 15321
Deck.prototype = Object.create(SequentialLayout.prototype);                                                            // 15322
Deck.prototype.constructor = Deck;                                                                                     // 15323
                                                                                                                       // 15324
Deck.DEFAULT_OPTIONS = OptionsManager.patch(SequentialLayout.DEFAULT_OPTIONS, {                                        // 15325
    transition: {                                                                                                      // 15326
        curve: 'easeOutBounce',                                                                                        // 15327
        duration: 500                                                                                                  // 15328
    },                                                                                                                 // 15329
    stackRotation: 0                                                                                                   // 15330
});                                                                                                                    // 15331
                                                                                                                       // 15332
/**                                                                                                                    // 15333
 * Returns the width and the height of the Deck instance.                                                              // 15334
 *                                                                                                                     // 15335
 * @method getSize                                                                                                     // 15336
 * @return {Array} A two value array of Deck's current width and height (in that order).                               // 15337
 *   Scales as Deck opens and closes.                                                                                  // 15338
 */                                                                                                                    // 15339
Deck.prototype.getSize = function getSize() {                                                                          // 15340
    var originalSize = SequentialLayout.prototype.getSize.apply(this, arguments);                                      // 15341
    var firstSize = this._items ? this._items.get().getSize() : [0, 0];                                                // 15342
    if (!firstSize) firstSize = [0, 0];                                                                                // 15343
    var state = _getState.call(this);                                                                                  // 15344
    var invState = 1 - state;                                                                                          // 15345
    return [firstSize[0] * invState + originalSize[0] * state, firstSize[1] * invState + originalSize[1] * state];     // 15346
};                                                                                                                     // 15347
                                                                                                                       // 15348
function _getState(returnFinal) {                                                                                      // 15349
    if (returnFinal) return this._isOpen ? 1 : 0;                                                                      // 15350
    else return this.state.get();                                                                                      // 15351
}                                                                                                                      // 15352
                                                                                                                       // 15353
function _setState(pos, transition, callback) {                                                                        // 15354
    this.state.halt();                                                                                                 // 15355
    this.state.set(pos, transition, callback);                                                                         // 15356
}                                                                                                                      // 15357
                                                                                                                       // 15358
/**                                                                                                                    // 15359
 * An accesor method to find out if the messaged Deck instance is open or closed.                                      // 15360
 *                                                                                                                     // 15361
 * @method isOpen                                                                                                      // 15362
 * @return {Boolean} Returns true if the instance is open or false if it's closed.                                     // 15363
 */                                                                                                                    // 15364
Deck.prototype.isOpen = function isOpen() {                                                                            // 15365
    return this._isOpen;                                                                                               // 15366
};                                                                                                                     // 15367
                                                                                                                       // 15368
/**                                                                                                                    // 15369
 * Sets the Deck instance to an open state.                                                                            // 15370
 *                                                                                                                     // 15371
 * @method open                                                                                                        // 15372
 * @param {function} [callback] Executes after transitioning to a fully open state.                                    // 15373
 */                                                                                                                    // 15374
Deck.prototype.open = function open(callback) {                                                                        // 15375
    this._isOpen = true;                                                                                               // 15376
   _setState.call(this, 1, this.options.transition, callback);                                                         // 15377
};                                                                                                                     // 15378
                                                                                                                       // 15379
/**                                                                                                                    // 15380
 * Sets the Deck instance to an open state.                                                                            // 15381
 *                                                                                                                     // 15382
 * @method close                                                                                                       // 15383
 * @param {function} [callback] Executes after transitioning to a fully closed state.                                  // 15384
 */                                                                                                                    // 15385
Deck.prototype.close = function close(callback) {                                                                      // 15386
    this._isOpen = false;                                                                                              // 15387
    _setState.call(this, 0, this.options.transition, callback);                                                        // 15388
};                                                                                                                     // 15389
                                                                                                                       // 15390
/**                                                                                                                    // 15391
 * Sets the Deck instance from its current state to the opposite state.                                                // 15392
 *                                                                                                                     // 15393
 * @method close                                                                                                       // 15394
 * @param {function} [callback] Executes after transitioning to the toggled state.                                     // 15395
 */                                                                                                                    // 15396
Deck.prototype.toggle = function toggle(callback) {                                                                    // 15397
    if (this._isOpen) this.close(callback);                                                                            // 15398
    else this.open(callback);                                                                                          // 15399
};                                                                                                                     // 15400
                                                                                                                       // 15401
module.exports = Deck;                                                                                                 // 15402
},{"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":88,"../utilities/Utility":95,"./SequentialLayout":110}],99:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15404
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15405
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15406
 *                                                                                                                     // 15407
 * Owner: david@famo.us                                                                                                // 15408
 * @license MPL 2.0                                                                                                    // 15409
 * @copyright Famous Industries, Inc. 2014                                                                             // 15410
 */                                                                                                                    // 15411
                                                                                                                       // 15412
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 15413
var Transform = _dereq_('../core/Transform');                                                                          // 15414
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15415
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15416
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15417
                                                                                                                       // 15418
/**                                                                                                                    // 15419
 * A layout which will arrange two renderables: a featured content, and a                                              // 15420
 *   concealed drawer. The drawer can be revealed from any side of the                                                 // 15421
 *   content (left, top, right, bottom) by dragging the content.                                                       // 15422
 *                                                                                                                     // 15423
 *   A @link{Sync} must be piped in to recieve user input.                                                             // 15424
 *                                                                                                                     // 15425
 *   Events:                                                                                                           // 15426
 *     broadcasts: 'open', 'close'                                                                                     // 15427
 *     listens to: 'update', 'end'                                                                                     // 15428
 *                                                                                                                     // 15429
 * @class DrawerLayout                                                                                                 // 15430
 *                                                                                                                     // 15431
 * @constructor                                                                                                        // 15432
 *                                                                                                                     // 15433
 * @param [options] {Object}                                An object of configurable options                          // 15434
 * @param [options.side=DrawerLayout.SIDES.LEFT] {Number}   The side of the content the drawer is placed.              // 15435
 *                                                          Choice of DrawerLayout.SIDES.LEFT/RIGHT/TOP/BOTTOM         // 15436
 * @param [options.drawerLength=0] {Number}                 The default length of the drawer                           // 15437
 * @param [options.velocityThreshold=0] {Number}            The velocity threshold to trigger a toggle                 // 15438
 * @param [options.positionThreshold=0] {Number}            The position threshold to trigger a toggle                 // 15439
 * @param [options.transition=true] {Boolean|Object}        The toggle transition                                      // 15440
 */                                                                                                                    // 15441
function DrawerLayout(options) {                                                                                       // 15442
    this.options = Object.create(DrawerLayout.DEFAULT_OPTIONS);                                                        // 15443
    this._optionsManager = new OptionsManager(this.options);                                                           // 15444
    if (options) this.setOptions(options);                                                                             // 15445
                                                                                                                       // 15446
    this._position = new Transitionable(0);                                                                            // 15447
    this._direction = _getDirectionFromSide(this.options.side);                                                        // 15448
    this._orientation = _getOrientationFromSide(this.options.side);                                                    // 15449
    this._isOpen = false;                                                                                              // 15450
    this._cachedLength = 0;                                                                                            // 15451
                                                                                                                       // 15452
    this.drawer = new RenderNode();                                                                                    // 15453
    this.content = new RenderNode();                                                                                   // 15454
                                                                                                                       // 15455
    this._eventInput = new EventHandler();                                                                             // 15456
    this._eventOutput = new EventHandler();                                                                            // 15457
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15458
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15459
                                                                                                                       // 15460
    this._eventInput.on('update', _handleUpdate.bind(this));                                                           // 15461
    this._eventInput.on('end', _handleEnd.bind(this));                                                                 // 15462
}                                                                                                                      // 15463
                                                                                                                       // 15464
var DIRECTION_X = 0;                                                                                                   // 15465
var DIRECTION_Y = 1;                                                                                                   // 15466
                                                                                                                       // 15467
DrawerLayout.SIDES = {                                                                                                 // 15468
    LEFT   : 0,                                                                                                        // 15469
    TOP    : 1,                                                                                                        // 15470
    RIGHT  : 2,                                                                                                        // 15471
    BOTTOM : 3                                                                                                         // 15472
};                                                                                                                     // 15473
                                                                                                                       // 15474
DrawerLayout.DEFAULT_OPTIONS = {                                                                                       // 15475
    side: DrawerLayout.SIDES.LEFT,                                                                                     // 15476
    drawerLength : 0,                                                                                                  // 15477
    velocityThreshold : 0,                                                                                             // 15478
    positionThreshold : 0,                                                                                             // 15479
    transition : true                                                                                                  // 15480
};                                                                                                                     // 15481
                                                                                                                       // 15482
function _getDirectionFromSide(side) {                                                                                 // 15483
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15484
    return (side === SIDES.LEFT || side === SIDES.RIGHT) ? DIRECTION_X : DIRECTION_Y;                                  // 15485
}                                                                                                                      // 15486
                                                                                                                       // 15487
function _getOrientationFromSide(side) {                                                                               // 15488
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15489
    return (side === SIDES.LEFT || side === SIDES.TOP) ? 1 : -1;                                                       // 15490
}                                                                                                                      // 15491
                                                                                                                       // 15492
function _resolveNodeSize(node) {                                                                                      // 15493
    var options = this.options;                                                                                        // 15494
    var size;                                                                                                          // 15495
    if (options.drawerLength) size = options.drawerLength;                                                             // 15496
    else {                                                                                                             // 15497
        var nodeSize = node.getSize();                                                                                 // 15498
        size = nodeSize ? nodeSize[this._direction] : options.drawerLength;                                            // 15499
    }                                                                                                                  // 15500
    return this._orientation * size;                                                                                   // 15501
}                                                                                                                      // 15502
                                                                                                                       // 15503
function _handleUpdate(data) {                                                                                         // 15504
    var newPosition = this.getPosition() + data.delta;                                                                 // 15505
                                                                                                                       // 15506
    var MIN_LENGTH;                                                                                                    // 15507
    var MAX_LENGTH;                                                                                                    // 15508
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15509
                                                                                                                       // 15510
    if (this._orientation === 1){                                                                                      // 15511
        MIN_LENGTH = 0;                                                                                                // 15512
        MAX_LENGTH = this._cachedLength;                                                                               // 15513
    }                                                                                                                  // 15514
    else {                                                                                                             // 15515
        MIN_LENGTH = this._cachedLength;                                                                               // 15516
        MAX_LENGTH = 0;                                                                                                // 15517
    }                                                                                                                  // 15518
                                                                                                                       // 15519
    if (newPosition > MAX_LENGTH) newPosition = MAX_LENGTH;                                                            // 15520
    else if (newPosition < MIN_LENGTH) newPosition = MIN_LENGTH;                                                       // 15521
                                                                                                                       // 15522
    this.setPosition(newPosition);                                                                                     // 15523
}                                                                                                                      // 15524
                                                                                                                       // 15525
function _handleEnd(data) {                                                                                            // 15526
    var velocity = data.velocity;                                                                                      // 15527
    var position = this._orientation * this.getPosition();                                                             // 15528
    var options = this.options;                                                                                        // 15529
                                                                                                                       // 15530
    var MAX_LENGTH = this._orientation * this._cachedLength;                                                           // 15531
    var positionThreshold = options.positionThreshold || MAX_LENGTH / 2;                                               // 15532
    var velocityThreshold = options.velocityThreshold;                                                                 // 15533
                                                                                                                       // 15534
    if (options.transition instanceof Object)                                                                          // 15535
        options.transition.velocity = data.velocity;                                                                   // 15536
                                                                                                                       // 15537
    if (position === 0) {                                                                                              // 15538
        this._isOpen = false;                                                                                          // 15539
        return;                                                                                                        // 15540
    }                                                                                                                  // 15541
                                                                                                                       // 15542
    if (position === MAX_LENGTH) {                                                                                     // 15543
        this._isOpen = true;                                                                                           // 15544
        return;                                                                                                        // 15545
    }                                                                                                                  // 15546
                                                                                                                       // 15547
    var shouldToggle = Math.abs(velocity) > velocityThreshold || (!this._isOpen && position > positionThreshold) || (this._isOpen && position < positionThreshold);
    if (shouldToggle) this.toggle();                                                                                   // 15549
    else this.reset();                                                                                                 // 15550
}                                                                                                                      // 15551
                                                                                                                       // 15552
/**                                                                                                                    // 15553
 * Patches the DrawerLayout instance's options with the passed-in ones.                                                // 15554
 *                                                                                                                     // 15555
 * @method setOptions                                                                                                  // 15556
 * @param options {Object} options                                                                                     // 15557
 */                                                                                                                    // 15558
DrawerLayout.prototype.setOptions = function setOptions(options) {                                                     // 15559
    this._optionsManager.setOptions(options);                                                                          // 15560
    if (options.side !== undefined) {                                                                                  // 15561
        this._direction = _getDirectionFromSide(options.side);                                                         // 15562
        this._orientation = _getOrientationFromSide(options.side);                                                     // 15563
    }                                                                                                                  // 15564
};                                                                                                                     // 15565
                                                                                                                       // 15566
/**                                                                                                                    // 15567
 * Reveals the drawer with a transition                                                                                // 15568
 *   Emits an 'open' event when an opening transition has been committed to.                                           // 15569
 *                                                                                                                     // 15570
 * @method open                                                                                                        // 15571
 * @param [transition] {Boolean|Object} transition definition                                                          // 15572
 * @param [callback] {Function}         callback                                                                       // 15573
 */                                                                                                                    // 15574
DrawerLayout.prototype.open = function open(transition, callback) {                                                    // 15575
    if (transition instanceof Function) callback = transition;                                                         // 15576
    if (transition === undefined) transition = this.options.transition;                                                // 15577
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15578
    this.setPosition(this._cachedLength, transition, callback);                                                        // 15579
    if (!this._isOpen) {                                                                                               // 15580
        this._isOpen = true;                                                                                           // 15581
        this._eventOutput.emit('open');                                                                                // 15582
    }                                                                                                                  // 15583
};                                                                                                                     // 15584
                                                                                                                       // 15585
/**                                                                                                                    // 15586
 * Conceals the drawer with a transition                                                                               // 15587
 *   Emits a 'close' event when an closing transition has been committed to.                                           // 15588
 *                                                                                                                     // 15589
 * @method close                                                                                                       // 15590
 * @param [transition] {Boolean|Object} transition definition                                                          // 15591
 * @param [callback] {Function}         callback                                                                       // 15592
 */                                                                                                                    // 15593
DrawerLayout.prototype.close = function close(transition, callback) {                                                  // 15594
    if (transition instanceof Function) callback = transition;                                                         // 15595
    if (transition === undefined) transition = this.options.transition;                                                // 15596
    this.setPosition(0, transition, callback);                                                                         // 15597
    if (this._isOpen){                                                                                                 // 15598
        this._isOpen = false;                                                                                          // 15599
        this._eventOutput.emit('close');                                                                               // 15600
    }                                                                                                                  // 15601
};                                                                                                                     // 15602
                                                                                                                       // 15603
/**                                                                                                                    // 15604
 * Sets the position in pixels for the content's displacement                                                          // 15605
 *                                                                                                                     // 15606
 * @method setPosition                                                                                                 // 15607
 * @param position {Number}             position                                                                       // 15608
 * @param [transition] {Boolean|Object} transition definition                                                          // 15609
 * @param [callback] {Function}         callback                                                                       // 15610
 */                                                                                                                    // 15611
DrawerLayout.prototype.setPosition = function setPosition(position, transition, callback) {                            // 15612
    if (this._position.isActive()) this._position.halt();                                                              // 15613
    this._position.set(position, transition, callback);                                                                // 15614
};                                                                                                                     // 15615
                                                                                                                       // 15616
/**                                                                                                                    // 15617
 * Gets the position in pixels for the content's displacement                                                          // 15618
 *                                                                                                                     // 15619
 * @method getPosition                                                                                                 // 15620
 * @return position {Number} position                                                                                  // 15621
 */                                                                                                                    // 15622
DrawerLayout.prototype.getPosition = function getPosition() {                                                          // 15623
    return this._position.get();                                                                                       // 15624
};                                                                                                                     // 15625
                                                                                                                       // 15626
/**                                                                                                                    // 15627
 * Sets the progress (between 0 and 1) for the content's displacement                                                  // 15628
 *                                                                                                                     // 15629
 * @method setProgress                                                                                                 // 15630
 * @param progress {Number}             position                                                                       // 15631
 * @param [transition] {Boolean|Object} transition definition                                                          // 15632
 * @param [callback] {Function}         callback                                                                       // 15633
 */                                                                                                                    // 15634
DrawerLayout.prototype.setProgress = function setProgress(progress, transition, callback) {                            // 15635
    return this._position.set(progress * this._cachedLength, transition, callback);                                    // 15636
};                                                                                                                     // 15637
                                                                                                                       // 15638
/**                                                                                                                    // 15639
 * Gets the progress (between 0 and 1) for the content's displacement                                                  // 15640
 *                                                                                                                     // 15641
 * @method getProgress                                                                                                 // 15642
 * @return position {Number} position                                                                                  // 15643
 */                                                                                                                    // 15644
DrawerLayout.prototype.getProgress = function getProgress() {                                                          // 15645
    return this._position.get() / this._cachedLength;                                                                  // 15646
};                                                                                                                     // 15647
                                                                                                                       // 15648
/**                                                                                                                    // 15649
 * Toggles between open and closed states                                                                              // 15650
 *                                                                                                                     // 15651
 * @method toggle                                                                                                      // 15652
 * @param [transition] {Boolean|Object} transition definition                                                          // 15653
 */                                                                                                                    // 15654
DrawerLayout.prototype.toggle = function toggle(transition) {                                                          // 15655
    if (this._isOpen) this.close(transition);                                                                          // 15656
    else this.open(transition);                                                                                        // 15657
};                                                                                                                     // 15658
                                                                                                                       // 15659
/**                                                                                                                    // 15660
 * Resets to last state of being open or closed                                                                        // 15661
 *                                                                                                                     // 15662
 * @method reset                                                                                                       // 15663
 * @param [transition] {Boolean|Object} transition definition                                                          // 15664
 */                                                                                                                    // 15665
DrawerLayout.prototype.reset = function reset(transition) {                                                            // 15666
    if (this._isOpen) this.open(transition);                                                                           // 15667
    else this.close(transition);                                                                                       // 15668
};                                                                                                                     // 15669
                                                                                                                       // 15670
/**                                                                                                                    // 15671
 * Returns if drawer is committed to being open or closed                                                              // 15672
 *                                                                                                                     // 15673
 * @method isOpen                                                                                                      // 15674
 * @return {Boolean}                                                                                                   // 15675
 */                                                                                                                    // 15676
DrawerLayout.prototype.isOpen = function isOpen(transition) {                                                          // 15677
    return this._isOpen;                                                                                               // 15678
};                                                                                                                     // 15679
                                                                                                                       // 15680
/**                                                                                                                    // 15681
 * Generates a Render Spec from the contents of this component                                                         // 15682
 *                                                                                                                     // 15683
 * @private                                                                                                            // 15684
 * @method render                                                                                                      // 15685
 * @return {Spec}                                                                                                      // 15686
 */                                                                                                                    // 15687
DrawerLayout.prototype.render = function render() {                                                                    // 15688
    var position = this.getPosition();                                                                                 // 15689
                                                                                                                       // 15690
    // clamp transition on close                                                                                       // 15691
    if (!this._isOpen && (position < 0 && this._orientation === 1) || (position > 0 && this._orientation === -1)) {    // 15692
        position = 0;                                                                                                  // 15693
        this.setPosition(position);                                                                                    // 15694
    }                                                                                                                  // 15695
                                                                                                                       // 15696
    var contentTransform = (this._direction === DIRECTION_X)                                                           // 15697
        ? Transform.translate(position, 0, 0)                                                                          // 15698
        : Transform.translate(0, position, 0);                                                                         // 15699
                                                                                                                       // 15700
    return [                                                                                                           // 15701
        {                                                                                                              // 15702
            transform : Transform.behind,                                                                              // 15703
            target: this.drawer.render()                                                                               // 15704
        },                                                                                                             // 15705
        {                                                                                                              // 15706
            transform: contentTransform,                                                                               // 15707
            target: this.content.render()                                                                              // 15708
        }                                                                                                              // 15709
    ];                                                                                                                 // 15710
};                                                                                                                     // 15711
                                                                                                                       // 15712
module.exports = DrawerLayout;                                                                                         // 15713
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88}],100:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15715
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15716
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15717
 *                                                                                                                     // 15718
 * Owner: felix@famo.us                                                                                                // 15719
 * @license MPL 2.0                                                                                                    // 15720
 * @copyright Famous Industries, Inc. 2014                                                                             // 15721
 */                                                                                                                    // 15722
                                                                                                                       // 15723
var CachedMap = _dereq_('../transitions/CachedMap');                                                                   // 15724
var Entity = _dereq_('../core/Entity');                                                                                // 15725
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15726
var Transform = _dereq_('../core/Transform');                                                                          // 15727
var RenderController = _dereq_('./RenderController');                                                                  // 15728
                                                                                                                       // 15729
/**                                                                                                                    // 15730
 * Container which handles swapping renderables from the edge of its parent context.                                   // 15731
 * @class EdgeSwapper                                                                                                  // 15732
 * @constructor                                                                                                        // 15733
 * @param {Options} [options] An object of configurable options.                                                       // 15734
 *   Takes the same options as RenderController.                                                                       // 15735
 * @uses RenderController                                                                                              // 15736
 */                                                                                                                    // 15737
function EdgeSwapper(options) {                                                                                        // 15738
    this._currentTarget = null;                                                                                        // 15739
    this._size = [undefined, undefined];                                                                               // 15740
                                                                                                                       // 15741
    this._controller = new RenderController(options);                                                                  // 15742
    this._controller.inTransformFrom(CachedMap.create(_transformMap.bind(this, 0.0001)));                              // 15743
    this._controller.outTransformFrom(CachedMap.create(_transformMap.bind(this, -0.0001)));                            // 15744
                                                                                                                       // 15745
    this._eventInput = new EventHandler();                                                                             // 15746
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15747
                                                                                                                       // 15748
    this._entityId = Entity.register(this);                                                                            // 15749
    if (options) this.setOptions(options);                                                                             // 15750
}                                                                                                                      // 15751
                                                                                                                       // 15752
function _transformMap(zMax, progress) {                                                                               // 15753
    return Transform.translate(this._size[0] * (1 - progress), 0, zMax * (1 - progress));                              // 15754
}                                                                                                                      // 15755
                                                                                                                       // 15756
/**                                                                                                                    // 15757
 * Displays the passed-in content with the EdgeSwapper instance's default transition.                                  // 15758
 *                                                                                                                     // 15759
 * @method show                                                                                                        // 15760
 * @param {Object} content The renderable you want to display.                                                         // 15761
 */                                                                                                                    // 15762
EdgeSwapper.prototype.show = function show(content) {                                                                  // 15763
    // stop sending input to old target                                                                                // 15764
    if (this._currentTarget) this._eventInput.unpipe(this._currentTarget);                                             // 15765
                                                                                                                       // 15766
    this._currentTarget = content;                                                                                     // 15767
                                                                                                                       // 15768
    // start sending input to new target                                                                               // 15769
    if (this._currentTarget && this._currentTarget.trigger) this._eventInput.pipe(this._currentTarget);                // 15770
                                                                                                                       // 15771
    this._controller.show.apply(this._controller, arguments);                                                          // 15772
};                                                                                                                     // 15773
                                                                                                                       // 15774
/**                                                                                                                    // 15775
 * Patches the EdgeSwapper instance's options with the passed-in ones.                                                 // 15776
 *                                                                                                                     // 15777
 * @method setOptions                                                                                                  // 15778
 * @param {Options} options An object of configurable options for the Edgeswapper instance.                            // 15779
 */                                                                                                                    // 15780
EdgeSwapper.prototype.setOptions = function setOptions(options) {                                                      // 15781
    this._controller.setOptions(options);                                                                              // 15782
};                                                                                                                     // 15783
                                                                                                                       // 15784
/**                                                                                                                    // 15785
 * Generate a render spec from the contents of this component.                                                         // 15786
 *                                                                                                                     // 15787
 * @private                                                                                                            // 15788
 * @method render                                                                                                      // 15789
 * @return {number} Render spec for this component                                                                     // 15790
 */                                                                                                                    // 15791
EdgeSwapper.prototype.render = function render() {                                                                     // 15792
    return this._entityId;                                                                                             // 15793
};                                                                                                                     // 15794
                                                                                                                       // 15795
/**                                                                                                                    // 15796
 * Apply changes from this component to the corresponding document element.                                            // 15797
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15798
 * and matrix transforms.                                                                                              // 15799
 *                                                                                                                     // 15800
 * @private                                                                                                            // 15801
 * @method commit                                                                                                      // 15802
 * @param {Context} context commit context                                                                             // 15803
 */                                                                                                                    // 15804
EdgeSwapper.prototype.commit = function commit(context) {                                                              // 15805
    this._size[0] = context.size[0];                                                                                   // 15806
    this._size[1] = context.size[1];                                                                                   // 15807
                                                                                                                       // 15808
    return {                                                                                                           // 15809
        transform: context.transform,                                                                                  // 15810
        opacity: context.opacity,                                                                                      // 15811
        origin: context.origin,                                                                                        // 15812
        size: context.size,                                                                                            // 15813
        target: this._controller.render()                                                                              // 15814
    };                                                                                                                 // 15815
};                                                                                                                     // 15816
                                                                                                                       // 15817
module.exports = EdgeSwapper;                                                                                          // 15818
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Transform":15,"../transitions/CachedMap":83,"./RenderController":106}],101:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15820
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15821
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15822
 *                                                                                                                     // 15823
 * Owner: mike@famo.us                                                                                                 // 15824
 * @license MPL 2.0                                                                                                    // 15825
 * @copyright Famous Industries, Inc. 2014                                                                             // 15826
 */                                                                                                                    // 15827
                                                                                                                       // 15828
var Entity = _dereq_('../core/Entity');                                                                                // 15829
var Transform = _dereq_('../core/Transform');                                                                          // 15830
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15831
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15832
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15833
                                                                                                                       // 15834
/**                                                                                                                    // 15835
 * A layout which divides a context into sections based on a proportion                                                // 15836
 *   of the total sum of ratios.  FlexibleLayout can either lay renderables                                            // 15837
 *   out vertically or horizontally.                                                                                   // 15838
 * @class FlexibleLayout                                                                                               // 15839
 * @constructor                                                                                                        // 15840
 * @param {Options} [options] An object of configurable options.                                                       // 15841
 * @param {Number} [options.direction=0] Direction the FlexibleLayout instance should lay out renderables.             // 15842
 * @param {Transition} [options.transition=false] The transiton that controls the FlexibleLayout instance's reflow.    // 15843
 * @param {Ratios} [options.ratios=[]] The proportions for the renderables to maintain                                 // 15844
 */                                                                                                                    // 15845
function FlexibleLayout(options) {                                                                                     // 15846
    this.options = Object.create(FlexibleLayout.DEFAULT_OPTIONS);                                                      // 15847
    this.optionsManager = new OptionsManager(this.options);                                                            // 15848
    if (options) this.setOptions(options);                                                                             // 15849
                                                                                                                       // 15850
    this.id = Entity.register(this);                                                                                   // 15851
                                                                                                                       // 15852
    this._ratios = new Transitionable(this.options.ratios);                                                            // 15853
    this._nodes = [];                                                                                                  // 15854
    this._size = [0, 0];                                                                                               // 15855
                                                                                                                       // 15856
    this._cachedDirection = null;                                                                                      // 15857
    this._cachedLengths = [];                                                                                          // 15858
    this._cachedTransforms = null;                                                                                     // 15859
    this._ratiosDirty = false;                                                                                         // 15860
                                                                                                                       // 15861
    this._eventOutput = new EventHandler();                                                                            // 15862
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15863
}                                                                                                                      // 15864
                                                                                                                       // 15865
FlexibleLayout.DIRECTION_X = 0;                                                                                        // 15866
FlexibleLayout.DIRECTION_Y = 1;                                                                                        // 15867
                                                                                                                       // 15868
FlexibleLayout.DEFAULT_OPTIONS = {                                                                                     // 15869
    direction: FlexibleLayout.DIRECTION_X,                                                                             // 15870
    transition: false,                                                                                                 // 15871
    ratios : []                                                                                                        // 15872
};                                                                                                                     // 15873
                                                                                                                       // 15874
function _reflow(ratios, length, direction) {                                                                          // 15875
    var currTransform;                                                                                                 // 15876
    var translation = 0;                                                                                               // 15877
    var flexLength = length;                                                                                           // 15878
    var ratioSum = 0;                                                                                                  // 15879
    var ratio;                                                                                                         // 15880
    var node;                                                                                                          // 15881
    var i;                                                                                                             // 15882
                                                                                                                       // 15883
    this._cachedLengths = [];                                                                                          // 15884
    this._cachedTransforms = [];                                                                                       // 15885
                                                                                                                       // 15886
    for (i = 0; i < ratios.length; i++){                                                                               // 15887
        ratio = ratios[i];                                                                                             // 15888
        node = this._nodes[i];                                                                                         // 15889
                                                                                                                       // 15890
        if (typeof ratio !== 'number')                                                                                 // 15891
            flexLength -= node.getSize()[direction] || 0;                                                              // 15892
        else                                                                                                           // 15893
            ratioSum += ratio;                                                                                         // 15894
    }                                                                                                                  // 15895
                                                                                                                       // 15896
    for (i = 0; i < ratios.length; i++) {                                                                              // 15897
        node = this._nodes[i];                                                                                         // 15898
        ratio = ratios[i];                                                                                             // 15899
                                                                                                                       // 15900
        length = (typeof ratio === 'number')                                                                           // 15901
            ? flexLength * ratio / ratioSum                                                                            // 15902
            : node.getSize()[direction];                                                                               // 15903
                                                                                                                       // 15904
        currTransform = (direction === FlexibleLayout.DIRECTION_X)                                                     // 15905
            ? Transform.translate(translation, 0, 0)                                                                   // 15906
            : Transform.translate(0, translation, 0);                                                                  // 15907
                                                                                                                       // 15908
        this._cachedTransforms.push(currTransform);                                                                    // 15909
        this._cachedLengths.push(length);                                                                              // 15910
                                                                                                                       // 15911
        translation += length;                                                                                         // 15912
    }                                                                                                                  // 15913
}                                                                                                                      // 15914
                                                                                                                       // 15915
function _trueSizedDirty(ratios, direction) {                                                                          // 15916
    for (var i = 0; i < ratios.length; i++) {                                                                          // 15917
        if (typeof ratios[i] !== 'number') {                                                                           // 15918
            if (this._nodes[i].getSize()[direction] !== this._cachedLengths[i])                                        // 15919
                return true;                                                                                           // 15920
        }                                                                                                              // 15921
    }                                                                                                                  // 15922
                                                                                                                       // 15923
    return false;                                                                                                      // 15924
}                                                                                                                      // 15925
                                                                                                                       // 15926
/**                                                                                                                    // 15927
 * Generate a render spec from the contents of this component.                                                         // 15928
 *                                                                                                                     // 15929
 * @private                                                                                                            // 15930
 * @method render                                                                                                      // 15931
 * @return {Object} Render spec for this component                                                                     // 15932
 */                                                                                                                    // 15933
FlexibleLayout.prototype.render = function render() {                                                                  // 15934
    return this.id;                                                                                                    // 15935
};                                                                                                                     // 15936
                                                                                                                       // 15937
/**                                                                                                                    // 15938
 * Patches the FlexibleLayouts instance's options with the passed-in ones.                                             // 15939
 *                                                                                                                     // 15940
 * @method setOptions                                                                                                  // 15941
 * @param {Options} options An object of configurable options for the FlexibleLayout instance.                         // 15942
 */                                                                                                                    // 15943
FlexibleLayout.prototype.setOptions = function setOptions(options) {                                                   // 15944
    this.optionsManager.setOptions(options);                                                                           // 15945
};                                                                                                                     // 15946
                                                                                                                       // 15947
/**                                                                                                                    // 15948
 * Sets the collection of renderables under the FlexibleLayout instance's control.  Also sets                          // 15949
 * the associated ratio values for sizing the renderables if given.                                                    // 15950
 *                                                                                                                     // 15951
 * @method sequenceFrom                                                                                                // 15952
 * @param {Array} sequence An array of renderables.                                                                    // 15953
 */                                                                                                                    // 15954
FlexibleLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                              // 15955
    this._nodes = sequence;                                                                                            // 15956
                                                                                                                       // 15957
    if (this._ratios.get().length === 0) {                                                                             // 15958
        var ratios = [];                                                                                               // 15959
        for (var i = 0; i < this._nodes.length; i++) ratios.push(1);                                                   // 15960
        this.setRatios(ratios);                                                                                        // 15961
    }                                                                                                                  // 15962
};                                                                                                                     // 15963
                                                                                                                       // 15964
/**                                                                                                                    // 15965
 * Sets the associated ratio values for sizing the renderables.                                                        // 15966
 *                                                                                                                     // 15967
 * @method setRatios                                                                                                   // 15968
 * @param {Array} ratios Array of ratios corresponding to the percentage sizes each renderable should be               // 15969
 */                                                                                                                    // 15970
FlexibleLayout.prototype.setRatios = function setRatios(ratios, transition, callback) {                                // 15971
    if (transition === undefined) transition = this.options.transition;                                                // 15972
    var currRatios = this._ratios;                                                                                     // 15973
    if (currRatios.get().length === 0) transition = undefined;                                                         // 15974
    if (currRatios.isActive()) currRatios.halt();                                                                      // 15975
    currRatios.set(ratios, transition, callback);                                                                      // 15976
    this._ratiosDirty = true;                                                                                          // 15977
};                                                                                                                     // 15978
                                                                                                                       // 15979
/**                                                                                                                    // 15980
 * Gets the size of the context the FlexibleLayout exists within.                                                      // 15981
 *                                                                                                                     // 15982
 * @method getSize                                                                                                     // 15983
 *                                                                                                                     // 15984
 * @return {Array} Size of the FlexibleLayout in pixels [width, height]                                                // 15985
 */                                                                                                                    // 15986
FlexibleLayout.prototype.getSize = function getSize() {                                                                // 15987
    return this._size;                                                                                                 // 15988
};                                                                                                                     // 15989
                                                                                                                       // 15990
/**                                                                                                                    // 15991
 * Apply changes from this component to the corresponding document element.                                            // 15992
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15993
 * and matrix transforms.                                                                                              // 15994
 *                                                                                                                     // 15995
 * @private                                                                                                            // 15996
 * @method commit                                                                                                      // 15997
 * @param {Context} context commit context                                                                             // 15998
 */                                                                                                                    // 15999
FlexibleLayout.prototype.commit = function commit(context) {                                                           // 16000
    var parentSize = context.size;                                                                                     // 16001
    var parentTransform = context.transform;                                                                           // 16002
    var parentOrigin = context.origin;                                                                                 // 16003
    var parentOpacity = context.opacity;                                                                               // 16004
                                                                                                                       // 16005
    var ratios = this._ratios.get();                                                                                   // 16006
    var direction = this.options.direction;                                                                            // 16007
    var length = parentSize[direction];                                                                                // 16008
    var size;                                                                                                          // 16009
                                                                                                                       // 16010
    if (length !== this._size[direction] || this._ratiosDirty || this._ratios.isActive() || direction !== this._cachedDirection || _trueSizedDirty.call(this, ratios, direction)) {
        _reflow.call(this, ratios, length, direction);                                                                 // 16012
                                                                                                                       // 16013
        if (length !== this._size[direction]) {                                                                        // 16014
            this._size[0] = parentSize[0];                                                                             // 16015
            this._size[1] = parentSize[1];                                                                             // 16016
        }                                                                                                              // 16017
                                                                                                                       // 16018
        if (direction !== this._cachedDirection) this._cachedDirection = direction;                                    // 16019
        if (this._ratiosDirty) this._ratiosDirty = false;                                                              // 16020
    }                                                                                                                  // 16021
                                                                                                                       // 16022
    var result = [];                                                                                                   // 16023
    for (var i = 0; i < ratios.length; i++) {                                                                          // 16024
        size = [undefined, undefined];                                                                                 // 16025
        length = this._cachedLengths[i];                                                                               // 16026
        size[direction] = length;                                                                                      // 16027
        result.push({                                                                                                  // 16028
            transform : this._cachedTransforms[i],                                                                     // 16029
            size: size,                                                                                                // 16030
            target : this._nodes[i].render()                                                                           // 16031
        });                                                                                                            // 16032
    }                                                                                                                  // 16033
                                                                                                                       // 16034
    if (parentSize && (parentOrigin[0] !== 0 && parentOrigin[1] !== 0))                                                // 16035
        parentTransform = Transform.moveThen([-parentSize[0]*parentOrigin[0], -parentSize[1]*parentOrigin[1], 0], parentTransform);
                                                                                                                       // 16037
    return {                                                                                                           // 16038
        transform: parentTransform,                                                                                    // 16039
        size: parentSize,                                                                                              // 16040
        opacity: parentOpacity,                                                                                        // 16041
        target: result                                                                                                 // 16042
    };                                                                                                                 // 16043
};                                                                                                                     // 16044
                                                                                                                       // 16045
module.exports = FlexibleLayout;                                                                                       // 16046
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":88}],102:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16048
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16049
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16050
 *                                                                                                                     // 16051
 * Owner: felix@famo.us                                                                                                // 16052
 * @license MPL 2.0                                                                                                    // 16053
 * @copyright Famous Industries, Inc. 2014                                                                             // 16054
 */                                                                                                                    // 16055
                                                                                                                       // 16056
var Transform = _dereq_('../core/Transform');                                                                          // 16057
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16058
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16059
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16060
                                                                                                                       // 16061
/**                                                                                                                    // 16062
 * Allows you to link two renderables as front and back sides that can be                                              // 16063
 *  'flipped' back and forth along a chosen axis. Rendering optimizations are                                          // 16064
 *  automatically handled.                                                                                             // 16065
 *                                                                                                                     // 16066
 * @class Flipper                                                                                                      // 16067
 * @constructor                                                                                                        // 16068
 * @param {Options} [options] An object of options.                                                                    // 16069
 * @param {Transition} [options.transition=true] The transition executed when flipping your Flipper instance.          // 16070
 * @param {Direction} [options.direction=Flipper.DIRECTION_X] Direction specifies the axis of rotation.                // 16071
 */                                                                                                                    // 16072
function Flipper(options) {                                                                                            // 16073
    this.options = Object.create(Flipper.DEFAULT_OPTIONS);                                                             // 16074
    this._optionsManager = new OptionsManager(this.options);                                                           // 16075
    if (options) this.setOptions(options);                                                                             // 16076
                                                                                                                       // 16077
    this.angle = new Transitionable(0);                                                                                // 16078
                                                                                                                       // 16079
    this.frontNode = undefined;                                                                                        // 16080
    this.backNode = undefined;                                                                                         // 16081
                                                                                                                       // 16082
    this.flipped = false;                                                                                              // 16083
}                                                                                                                      // 16084
                                                                                                                       // 16085
Flipper.DIRECTION_X = 0;                                                                                               // 16086
Flipper.DIRECTION_Y = 1;                                                                                               // 16087
                                                                                                                       // 16088
var SEPERATION_LENGTH = 1;                                                                                             // 16089
                                                                                                                       // 16090
Flipper.DEFAULT_OPTIONS = {                                                                                            // 16091
    transition: true,                                                                                                  // 16092
    direction: Flipper.DIRECTION_X                                                                                     // 16093
};                                                                                                                     // 16094
                                                                                                                       // 16095
/**                                                                                                                    // 16096
 * Toggles the rotation between the front and back renderables                                                         // 16097
 *                                                                                                                     // 16098
 * @method flip                                                                                                        // 16099
 * @param {Object} [transition] Transition definition                                                                  // 16100
 * @param {Function} [callback] Callback                                                                               // 16101
 */                                                                                                                    // 16102
Flipper.prototype.flip = function flip(transition, callback) {                                                         // 16103
    var angle = this.flipped ? 0 : Math.PI;                                                                            // 16104
    this.setAngle(angle, transition, callback);                                                                        // 16105
    this.flipped = !this.flipped;                                                                                      // 16106
};                                                                                                                     // 16107
                                                                                                                       // 16108
/**                                                                                                                    // 16109
 * Basic setter to the angle                                                                                           // 16110
 *                                                                                                                     // 16111
 * @method setAngle                                                                                                    // 16112
 * @param {Number} angle                                                                                               // 16113
 * @param {Object} [transition] Transition definition                                                                  // 16114
 * @param {Function} [callback] Callback                                                                               // 16115
 */                                                                                                                    // 16116
Flipper.prototype.setAngle = function setAngle(angle, transition, callback) {                                          // 16117
    if (transition === undefined) transition = this.options.transition;                                                // 16118
    if (this.angle.isActive()) this.angle.halt();                                                                      // 16119
    this.angle.set(angle, transition, callback);                                                                       // 16120
};                                                                                                                     // 16121
                                                                                                                       // 16122
/**                                                                                                                    // 16123
 * Patches the Flipper instance's options with the passed-in ones.                                                     // 16124
 *                                                                                                                     // 16125
 * @method setOptions                                                                                                  // 16126
 * @param {Options} options An object of configurable options for the Flipper instance.                                // 16127
 */                                                                                                                    // 16128
Flipper.prototype.setOptions = function setOptions(options) {                                                          // 16129
    return this._optionsManager.setOptions(options);                                                                   // 16130
};                                                                                                                     // 16131
                                                                                                                       // 16132
/**                                                                                                                    // 16133
 * Adds the passed-in renderable to the view associated with the 'front' of the Flipper instance.                      // 16134
 *                                                                                                                     // 16135
 * @method setFront                                                                                                    // 16136
 * @chainable                                                                                                          // 16137
 * @param {Object} node The renderable you want to add to the front.                                                   // 16138
 */                                                                                                                    // 16139
Flipper.prototype.setFront = function setFront(node) {                                                                 // 16140
    this.frontNode = node;                                                                                             // 16141
};                                                                                                                     // 16142
                                                                                                                       // 16143
/**                                                                                                                    // 16144
 * Adds the passed-in renderable to the view associated with the 'back' of the Flipper instance.                       // 16145
 *                                                                                                                     // 16146
 * @method setBack                                                                                                     // 16147
 * @chainable                                                                                                          // 16148
 * @param {Object} node The renderable you want to add to the back.                                                    // 16149
 */                                                                                                                    // 16150
Flipper.prototype.setBack = function setBack(node) {                                                                   // 16151
    this.backNode = node;                                                                                              // 16152
};                                                                                                                     // 16153
                                                                                                                       // 16154
/**                                                                                                                    // 16155
 * Generate a render spec from the contents of this component.                                                         // 16156
 *                                                                                                                     // 16157
 * @private                                                                                                            // 16158
 * @method render                                                                                                      // 16159
 * @return {Number} Render spec for this component                                                                     // 16160
 */                                                                                                                    // 16161
Flipper.prototype.render = function render() {                                                                         // 16162
    var angle = this.angle.get();                                                                                      // 16163
                                                                                                                       // 16164
    var frontTransform;                                                                                                // 16165
    var backTransform;                                                                                                 // 16166
                                                                                                                       // 16167
    if (this.options.direction === Flipper.DIRECTION_X) {                                                              // 16168
        frontTransform = Transform.rotateY(angle);                                                                     // 16169
        backTransform = Transform.rotateY(angle + Math.PI);                                                            // 16170
    }                                                                                                                  // 16171
    else {                                                                                                             // 16172
        frontTransform = Transform.rotateX(angle);                                                                     // 16173
        backTransform = Transform.rotateX(angle + Math.PI);                                                            // 16174
    }                                                                                                                  // 16175
                                                                                                                       // 16176
    var result = [];                                                                                                   // 16177
    if (this.frontNode){                                                                                               // 16178
        result.push({                                                                                                  // 16179
            transform: frontTransform,                                                                                 // 16180
            target: this.frontNode.render()                                                                            // 16181
        });                                                                                                            // 16182
    }                                                                                                                  // 16183
                                                                                                                       // 16184
    if (this.backNode){                                                                                                // 16185
        result.push({                                                                                                  // 16186
            transform: Transform.moveThen([0, 0, SEPERATION_LENGTH], backTransform),                                   // 16187
            target: this.backNode.render()                                                                             // 16188
        });                                                                                                            // 16189
    }                                                                                                                  // 16190
                                                                                                                       // 16191
    return result;                                                                                                     // 16192
};                                                                                                                     // 16193
                                                                                                                       // 16194
module.exports = Flipper;                                                                                              // 16195
},{"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88}],103:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16197
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16198
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16199
 *                                                                                                                     // 16200
 * Owner: felix@famo.us                                                                                                // 16201
 * @license MPL 2.0                                                                                                    // 16202
 * @copyright Famous Industries, Inc. 2014                                                                             // 16203
 */                                                                                                                    // 16204
                                                                                                                       // 16205
var Entity = _dereq_('../core/Entity');                                                                                // 16206
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16207
var Transform = _dereq_('../core/Transform');                                                                          // 16208
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 16209
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 16210
var Modifier = _dereq_('../core/Modifier');                                                                            // 16211
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16212
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16213
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 16214
                                                                                                                       // 16215
/**                                                                                                                    // 16216
 * A layout which divides a context into several evenly-sized grid cells.                                              // 16217
 *   If dimensions are provided, the grid is evenly subdivided with children                                           // 16218
 *   cells representing their own context, otherwise the cellSize property is used to compute                          // 16219
 *   dimensions so that items of cellSize will fit.                                                                    // 16220
 * @class GridLayout                                                                                                   // 16221
 * @constructor                                                                                                        // 16222
 * @param {Options} [options] An object of configurable options.                                                       // 16223
 * @param {Array.Number} [options.dimensions=[1, 1]] A two value array which specifies the amount of columns           // 16224
 * and rows in your Gridlayout instance.                                                                               // 16225
 * @param {Array.Number} [options.gutterSize=[0, 0]] A two-value array which specifies size of the                     // 16226
 * horizontal and vertical gutters between items in the grid layout.                                                   // 16227
 * @param {Transition} [options.transition=false] The transiton that controls the Gridlayout instance's reflow.        // 16228
 */                                                                                                                    // 16229
function GridLayout(options) {                                                                                         // 16230
    this.options = Object.create(GridLayout.DEFAULT_OPTIONS);                                                          // 16231
    this.optionsManager = new OptionsManager(this.options);                                                            // 16232
    if (options) this.setOptions(options);                                                                             // 16233
                                                                                                                       // 16234
    this.id = Entity.register(this);                                                                                   // 16235
                                                                                                                       // 16236
    this._modifiers = [];                                                                                              // 16237
    this._states = [];                                                                                                 // 16238
    this._contextSizeCache = [0, 0];                                                                                   // 16239
    this._dimensionsCache = [0, 0];                                                                                    // 16240
    this._activeCount = 0;                                                                                             // 16241
                                                                                                                       // 16242
    this._eventOutput = new EventHandler();                                                                            // 16243
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 16244
}                                                                                                                      // 16245
                                                                                                                       // 16246
function _reflow(size, cols, rows) {                                                                                   // 16247
    var usableSize = [size[0], size[1]];                                                                               // 16248
    usableSize[0] -= this.options.gutterSize[0] * (cols - 1);                                                          // 16249
    usableSize[1] -= this.options.gutterSize[1] * (rows - 1);                                                          // 16250
                                                                                                                       // 16251
    var rowSize = Math.round(usableSize[1] / rows);                                                                    // 16252
    var colSize = Math.round(usableSize[0] / cols);                                                                    // 16253
                                                                                                                       // 16254
    var currY = 0;                                                                                                     // 16255
    var currX;                                                                                                         // 16256
    var currIndex = 0;                                                                                                 // 16257
    for (var i = 0; i < rows; i++) {                                                                                   // 16258
        currX = 0;                                                                                                     // 16259
        for (var j = 0; j < cols; j++) {                                                                               // 16260
            if (this._modifiers[currIndex] === undefined) {                                                            // 16261
                _createModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                       // 16262
            }                                                                                                          // 16263
            else {                                                                                                     // 16264
                _animateModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                      // 16265
            }                                                                                                          // 16266
                                                                                                                       // 16267
            currIndex++;                                                                                               // 16268
            currX += colSize + this.options.gutterSize[0];                                                             // 16269
        }                                                                                                              // 16270
                                                                                                                       // 16271
        currY += rowSize + this.options.gutterSize[1];                                                                 // 16272
    }                                                                                                                  // 16273
                                                                                                                       // 16274
    this._dimensionsCache = [this.options.dimensions[0], this.options.dimensions[1]];                                  // 16275
    this._contextSizeCache = [size[0], size[1]];                                                                       // 16276
                                                                                                                       // 16277
    this._activeCount = rows * cols;                                                                                   // 16278
                                                                                                                       // 16279
    for (i = this._activeCount ; i < this._modifiers.length; i++) _animateModifier.call(this, i, [Math.round(colSize), Math.round(rowSize)], [0, 0], 0);
                                                                                                                       // 16281
    this._eventOutput.emit('reflow');                                                                                  // 16282
}                                                                                                                      // 16283
                                                                                                                       // 16284
function _createModifier(index, size, position, opacity) {                                                             // 16285
    var transitionItem = {                                                                                             // 16286
        transform: new TransitionableTransform(Transform.translate.apply(null, position)),                             // 16287
        opacity: new Transitionable(opacity),                                                                          // 16288
        size: new Transitionable(size)                                                                                 // 16289
    };                                                                                                                 // 16290
                                                                                                                       // 16291
    var modifier = new Modifier({                                                                                      // 16292
        transform: transitionItem.transform,                                                                           // 16293
        opacity: transitionItem.opacity,                                                                               // 16294
        size: transitionItem.size                                                                                      // 16295
    });                                                                                                                // 16296
                                                                                                                       // 16297
    this._states[index] = transitionItem;                                                                              // 16298
    this._modifiers[index] = modifier;                                                                                 // 16299
                                                                                                                       // 16300
}                                                                                                                      // 16301
                                                                                                                       // 16302
function _animateModifier(index, size, position, opacity) {                                                            // 16303
    var currState = this._states[index];                                                                               // 16304
                                                                                                                       // 16305
    var currSize = currState.size;                                                                                     // 16306
    var currOpacity = currState.opacity;                                                                               // 16307
    var currTransform = currState.transform;                                                                           // 16308
                                                                                                                       // 16309
    var transition = this.options.transition;                                                                          // 16310
                                                                                                                       // 16311
    currTransform.halt();                                                                                              // 16312
    currOpacity.halt();                                                                                                // 16313
    currSize.halt();                                                                                                   // 16314
                                                                                                                       // 16315
    currTransform.setTranslate(position, transition);                                                                  // 16316
    currSize.set(size, transition);                                                                                    // 16317
    currOpacity.set(opacity, transition);                                                                              // 16318
}                                                                                                                      // 16319
                                                                                                                       // 16320
GridLayout.DEFAULT_OPTIONS = {                                                                                         // 16321
    dimensions: [1, 1],                                                                                                // 16322
    transition: false,                                                                                                 // 16323
    gutterSize: [0, 0]                                                                                                 // 16324
};                                                                                                                     // 16325
                                                                                                                       // 16326
/**                                                                                                                    // 16327
 * Generate a render spec from the contents of this component.                                                         // 16328
 *                                                                                                                     // 16329
 * @private                                                                                                            // 16330
 * @method render                                                                                                      // 16331
 * @return {Object} Render spec for this component                                                                     // 16332
 */                                                                                                                    // 16333
GridLayout.prototype.render = function render() {                                                                      // 16334
    return this.id;                                                                                                    // 16335
};                                                                                                                     // 16336
                                                                                                                       // 16337
/**                                                                                                                    // 16338
 * Patches the GridLayout instance's options with the passed-in ones.                                                  // 16339
 *                                                                                                                     // 16340
 * @method setOptions                                                                                                  // 16341
 * @param {Options} options An object of configurable options for the GridLayout instance.                             // 16342
 */                                                                                                                    // 16343
GridLayout.prototype.setOptions = function setOptions(options) {                                                       // 16344
    return this.optionsManager.setOptions(options);                                                                    // 16345
};                                                                                                                     // 16346
                                                                                                                       // 16347
/**                                                                                                                    // 16348
 * Sets the collection of renderables under the Gridlayout instance's control.                                         // 16349
 *                                                                                                                     // 16350
 * @method sequenceFrom                                                                                                // 16351
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous viewSequence.                       // 16352
 */                                                                                                                    // 16353
GridLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                                  // 16354
    if (sequence instanceof Array) sequence = new ViewSequence(sequence);                                              // 16355
    this.sequence = sequence;                                                                                          // 16356
};                                                                                                                     // 16357
                                                                                                                       // 16358
/**                                                                                                                    // 16359
 * Returns the size of the grid layout.                                                                                // 16360
 *                                                                                                                     // 16361
 * @method getSize                                                                                                     // 16362
 * @return {Array} Total size of the grid layout.                                                                      // 16363
 */                                                                                                                    // 16364
GridLayout.prototype.getSize = function getSize() {                                                                    // 16365
  return this._contextSizeCache;                                                                                       // 16366
};                                                                                                                     // 16367
                                                                                                                       // 16368
/**                                                                                                                    // 16369
 * Apply changes from this component to the corresponding document element.                                            // 16370
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16371
 * and matrix transforms.                                                                                              // 16372
 *                                                                                                                     // 16373
 * @private                                                                                                            // 16374
 * @method commit                                                                                                      // 16375
 * @param {Context} context commit context                                                                             // 16376
 */                                                                                                                    // 16377
GridLayout.prototype.commit = function commit(context) {                                                               // 16378
    var transform = context.transform;                                                                                 // 16379
    var opacity = context.opacity;                                                                                     // 16380
    var origin = context.origin;                                                                                       // 16381
    var size = context.size;                                                                                           // 16382
                                                                                                                       // 16383
    var cols = this.options.dimensions[0];                                                                             // 16384
    var rows = this.options.dimensions[1];                                                                             // 16385
                                                                                                                       // 16386
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || cols !== this._dimensionsCache[0] || rows !== this._dimensionsCache[1]) {
        _reflow.call(this, size, cols, rows);                                                                          // 16388
    }                                                                                                                  // 16389
                                                                                                                       // 16390
    var sequence = this.sequence;                                                                                      // 16391
    var result = [];                                                                                                   // 16392
    var currIndex = 0;                                                                                                 // 16393
    while (sequence && (currIndex < this._modifiers.length)) {                                                         // 16394
        var item = sequence.get();                                                                                     // 16395
        var modifier = this._modifiers[currIndex];                                                                     // 16396
        if (currIndex >= this._activeCount && this._states[currIndex].opacity.isActive()) {                            // 16397
            this._modifiers.splice(currIndex, 1);                                                                      // 16398
            this._states.splice(currIndex, 1);                                                                         // 16399
        }                                                                                                              // 16400
        if (item) {                                                                                                    // 16401
            result.push(                                                                                               // 16402
                modifier.modify({                                                                                      // 16403
                    origin: origin,                                                                                    // 16404
                    target: item.render()                                                                              // 16405
                })                                                                                                     // 16406
            );                                                                                                         // 16407
        }                                                                                                              // 16408
        sequence = sequence.getNext();                                                                                 // 16409
        currIndex++;                                                                                                   // 16410
    }                                                                                                                  // 16411
                                                                                                                       // 16412
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16413
    return {                                                                                                           // 16414
        transform: transform,                                                                                          // 16415
        opacity: opacity,                                                                                              // 16416
        size: size,                                                                                                    // 16417
        target: result                                                                                                 // 16418
    };                                                                                                                 // 16419
};                                                                                                                     // 16420
                                                                                                                       // 16421
module.exports = GridLayout;                                                                                           // 16422
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../core/ViewSequence":17,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89}],104:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16424
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16425
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16426
 *                                                                                                                     // 16427
 * Owner: felix@famo.us                                                                                                // 16428
 * @license MPL 2.0                                                                                                    // 16429
 * @copyright Famous Industries, Inc. 2014                                                                             // 16430
 */                                                                                                                    // 16431
                                                                                                                       // 16432
var Entity = _dereq_('../core/Entity');                                                                                // 16433
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16434
var Transform = _dereq_('../core/Transform');                                                                          // 16435
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16436
                                                                                                                       // 16437
/**                                                                                                                    // 16438
 * A layout which will arrange three renderables into a header and footer area of defined size,                        // 16439
  and a content area of flexible size.                                                                                 // 16440
 * @class HeaderFooterLayout                                                                                           // 16441
 * @constructor                                                                                                        // 16442
 * @param {Options} [options] An object of configurable options.                                                       // 16443
 * @param {Number} [options.direction=HeaderFooterLayout.DIRECTION_Y] A direction of HeaderFooterLayout.DIRECTION_X    // 16444
 * lays your HeaderFooterLayout instance horizontally, and a direction of HeaderFooterLayout.DIRECTION_Y               // 16445
 * lays it out vertically.                                                                                             // 16446
 * @param {Number} [options.headerSize=undefined]  The amount of pixels allocated to the header node                   // 16447
 * in the HeaderFooterLayout instance's direction.                                                                     // 16448
 * @param {Number} [options.footerSize=undefined] The amount of pixels allocated to the footer node                    // 16449
 * in the HeaderFooterLayout instance's direction.                                                                     // 16450
 */                                                                                                                    // 16451
function HeaderFooterLayout(options) {                                                                                 // 16452
    this.options = Object.create(HeaderFooterLayout.DEFAULT_OPTIONS);                                                  // 16453
    this._optionsManager = new OptionsManager(this.options);                                                           // 16454
    if (options) this.setOptions(options);                                                                             // 16455
                                                                                                                       // 16456
    this._entityId = Entity.register(this);                                                                            // 16457
                                                                                                                       // 16458
    this.header = new RenderNode();                                                                                    // 16459
    this.footer = new RenderNode();                                                                                    // 16460
    this.content = new RenderNode();                                                                                   // 16461
}                                                                                                                      // 16462
                                                                                                                       // 16463
/**                                                                                                                    // 16464
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out horizontally.            // 16465
 *                                                                                                                     // 16466
 *  @attribute DIRECTION_X                                                                                             // 16467
 *  @type Number                                                                                                       // 16468
 *  @static                                                                                                            // 16469
 *  @default 0                                                                                                         // 16470
 *  @protected                                                                                                         // 16471
 */                                                                                                                    // 16472
HeaderFooterLayout.DIRECTION_X = 0;                                                                                    // 16473
                                                                                                                       // 16474
/**                                                                                                                    // 16475
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out vertically.              // 16476
 *                                                                                                                     // 16477
 *  @attribute DIRECTION_Y                                                                                             // 16478
 *  @type Number                                                                                                       // 16479
 *  @static                                                                                                            // 16480
 *  @default 1                                                                                                         // 16481
 *  @protected                                                                                                         // 16482
 */                                                                                                                    // 16483
HeaderFooterLayout.DIRECTION_Y = 1;                                                                                    // 16484
                                                                                                                       // 16485
HeaderFooterLayout.DEFAULT_OPTIONS = {                                                                                 // 16486
    direction: HeaderFooterLayout.DIRECTION_Y,                                                                         // 16487
    headerSize: undefined,                                                                                             // 16488
    footerSize: undefined,                                                                                             // 16489
    defaultHeaderSize: 0,                                                                                              // 16490
    defaultFooterSize: 0                                                                                               // 16491
};                                                                                                                     // 16492
                                                                                                                       // 16493
/**                                                                                                                    // 16494
 * Generate a render spec from the contents of this component.                                                         // 16495
 *                                                                                                                     // 16496
 * @private                                                                                                            // 16497
 * @method render                                                                                                      // 16498
 * @return {Object} Render spec for this component                                                                     // 16499
 */                                                                                                                    // 16500
HeaderFooterLayout.prototype.render = function render() {                                                              // 16501
    return this._entityId;                                                                                             // 16502
};                                                                                                                     // 16503
                                                                                                                       // 16504
/**                                                                                                                    // 16505
 * Patches the HeaderFooterLayout instance's options with the passed-in ones.                                          // 16506
 *                                                                                                                     // 16507
 * @method setOptions                                                                                                  // 16508
 * @param {Options} options An object of configurable options for the HeaderFooterLayout instance.                     // 16509
 */                                                                                                                    // 16510
HeaderFooterLayout.prototype.setOptions = function setOptions(options) {                                               // 16511
    return this._optionsManager.setOptions(options);                                                                   // 16512
};                                                                                                                     // 16513
                                                                                                                       // 16514
function _resolveNodeSize(node, defaultSize) {                                                                         // 16515
    var nodeSize = node.getSize();                                                                                     // 16516
    return nodeSize ? nodeSize[this.options.direction] : defaultSize;                                                  // 16517
}                                                                                                                      // 16518
                                                                                                                       // 16519
function _outputTransform(offset) {                                                                                    // 16520
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return Transform.translate(offset, 0, 0);           // 16521
    else return Transform.translate(0, offset, 0);                                                                     // 16522
}                                                                                                                      // 16523
                                                                                                                       // 16524
function _finalSize(directionSize, size) {                                                                             // 16525
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return [directionSize, size[1]];                    // 16526
    else return [size[0], directionSize];                                                                              // 16527
}                                                                                                                      // 16528
                                                                                                                       // 16529
/**                                                                                                                    // 16530
 * Apply changes from this component to the corresponding document element.                                            // 16531
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16532
 * and matrix transforms.                                                                                              // 16533
 *                                                                                                                     // 16534
 * @private                                                                                                            // 16535
 * @method commit                                                                                                      // 16536
 * @param {Context} context commit context                                                                             // 16537
 */                                                                                                                    // 16538
HeaderFooterLayout.prototype.commit = function commit(context) {                                                       // 16539
    var transform = context.transform;                                                                                 // 16540
    var origin = context.origin;                                                                                       // 16541
    var size = context.size;                                                                                           // 16542
    var opacity = context.opacity;                                                                                     // 16543
                                                                                                                       // 16544
    var headerSize = (this.options.headerSize !== undefined) ? this.options.headerSize : _resolveNodeSize.call(this, this.header, this.options.defaultHeaderSize);
    var footerSize = (this.options.footerSize !== undefined) ? this.options.footerSize : _resolveNodeSize.call(this, this.footer, this.options.defaultFooterSize);
    var contentSize = size[this.options.direction] - headerSize - footerSize;                                          // 16547
                                                                                                                       // 16548
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16549
                                                                                                                       // 16550
    var result = [                                                                                                     // 16551
        {                                                                                                              // 16552
            size: _finalSize.call(this, headerSize, size),                                                             // 16553
            target: this.header.render()                                                                               // 16554
        },                                                                                                             // 16555
        {                                                                                                              // 16556
            transform: _outputTransform.call(this, headerSize),                                                        // 16557
            size: _finalSize.call(this, contentSize, size),                                                            // 16558
            target: this.content.render()                                                                              // 16559
        },                                                                                                             // 16560
        {                                                                                                              // 16561
            transform: _outputTransform.call(this, headerSize + contentSize),                                          // 16562
            size: _finalSize.call(this, footerSize, size),                                                             // 16563
            target: this.footer.render()                                                                               // 16564
        }                                                                                                              // 16565
    ];                                                                                                                 // 16566
                                                                                                                       // 16567
    return {                                                                                                           // 16568
        transform: transform,                                                                                          // 16569
        opacity: opacity,                                                                                              // 16570
        size: size,                                                                                                    // 16571
        target: result                                                                                                 // 16572
    };                                                                                                                 // 16573
};                                                                                                                     // 16574
                                                                                                                       // 16575
module.exports = HeaderFooterLayout;                                                                                   // 16576
},{"../core/Entity":5,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15}],105:[function(_dereq_,module,exports){
var Transform = _dereq_('../core/Transform');                                                                          // 16578
var Modifier = _dereq_('../core/Modifier');                                                                            // 16579
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16580
var Utility = _dereq_('../utilities/Utility');                                                                         // 16581
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16582
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16583
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 16584
                                                                                                                       // 16585
/**                                                                                                                    // 16586
 * Lightbox, using transitions, shows and hides different renderables. Lightbox can essentially be                     // 16587
 * thought of as RenderController with a stateful implementation and interface.                                        // 16588
 *                                                                                                                     // 16589
 * @class Lightbox                                                                                                     // 16590
 * @constructor                                                                                                        // 16591
 * @param {Options} [options] An object of configurable options.                                                       // 16592
 * @param {Transform} [options.inTransform] The transform at the start of transitioning in a shown renderable.         // 16593
 * @param {Transform} [options.outTransform] The transform at the end of transitioning out a renderable.               // 16594
 * @param {Transform} [options.showTransform] The transform applied to your shown renderable in its state of equilibrium.
 * @param {Number} [options.inOpacity] A number between one and zero that defines the state of a shown renderables opacity upon initially
 * being transitioned in.                                                                                              // 16597
 * @param {Number} [options.outOpacity] A number between one and zero that defines the state of a shown renderables opacity upon being
 * fully transitioned out.                                                                                             // 16599
 * @param {Number} [options.showOpacity] A number between one and zero that defines the state of a shown renderables opacity
 * once succesfully transitioned in.                                                                                   // 16601
 * @param {Array<Number>} [options.inOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon intially being transitioned in.                                                                         // 16603
 * @param {Array<Number>} [options.outOrigin] A two value array of numbers between one and zero that defines the state of a shown renderable
 * origin once fully hidden.                                                                                           // 16605
 * @param {Array<Number>} [options.showOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon succesfully being shown.                                                                                // 16607
 * @param {Array<Number>} [options.inAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon intially being transitioned in.                                                                          // 16609
 * @param {Array<Number>} [options.outAlign] A two value array of numbers between one and zero that defines the state of a shown renderable
 * align once fully hidden.                                                                                            // 16611
 * @param {Array<Number>} [options.showAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon succesfully being shown.                                                                                 // 16613
 * @param {Transition} [options.inTransition=true] The transition in charge of showing a renderable.                   // 16614
 * @param {Transition} [options.outTransition=true]  The transition in charge of removing your previous renderable when
 * you show a new one, or hiding your current renderable.                                                              // 16616
 * @param {Boolean} [options.overlap=false] When showing a new renderable, overlap determines if the                   // 16617
 *   out transition of the old one executes concurrently with the in transition of the new one,                        // 16618
  *  or synchronously beforehand.                                                                                      // 16619
 */                                                                                                                    // 16620
function Lightbox(options) {                                                                                           // 16621
    this.options = Object.create(Lightbox.DEFAULT_OPTIONS);                                                            // 16622
    this._optionsManager = new OptionsManager(this.options);                                                           // 16623
                                                                                                                       // 16624
    if (options) this.setOptions(options);                                                                             // 16625
                                                                                                                       // 16626
    this._showing = false;                                                                                             // 16627
    this.nodes = [];                                                                                                   // 16628
    this.transforms = [];                                                                                              // 16629
    this.states = [];                                                                                                  // 16630
}                                                                                                                      // 16631
                                                                                                                       // 16632
Lightbox.DEFAULT_OPTIONS = {                                                                                           // 16633
    inTransform: Transform.scale(0.001, 0.001, 0.001),                                                                 // 16634
    inOpacity: 0,                                                                                                      // 16635
    inOrigin: [0.5, 0.5],                                                                                              // 16636
    inAlign: [0.5, 0.5],                                                                                               // 16637
    outTransform: Transform.scale(0.001, 0.001, 0.001),                                                                // 16638
    outOpacity: 0,                                                                                                     // 16639
    outOrigin: [0.5, 0.5],                                                                                             // 16640
    outAlign: [0.5, 0.5],                                                                                              // 16641
    showTransform: Transform.identity,                                                                                 // 16642
    showOpacity: 1,                                                                                                    // 16643
    showOrigin: [0.5, 0.5],                                                                                            // 16644
    showAlign: [0.5, 0.5],                                                                                             // 16645
    inTransition: true,                                                                                                // 16646
    outTransition: true,                                                                                               // 16647
    overlap: false                                                                                                     // 16648
};                                                                                                                     // 16649
                                                                                                                       // 16650
/**                                                                                                                    // 16651
 * Patches the Lightbox instance's options with the passed-in ones.                                                    // 16652
 *                                                                                                                     // 16653
 * @method setOptions                                                                                                  // 16654
 * @param {Options} options An object of configurable options for the Lightbox instance.                               // 16655
 */                                                                                                                    // 16656
Lightbox.prototype.setOptions = function setOptions(options) {                                                         // 16657
    return this._optionsManager.setOptions(options);                                                                   // 16658
};                                                                                                                     // 16659
                                                                                                                       // 16660
   /**                                                                                                                 // 16661
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 16662
 *  execute afterwards.                                                                                                // 16663
 * @method show                                                                                                        // 16664
 * @param {Object} renderable The renderable you want to show.                                                         // 16665
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 16666
 * passed-in renderable.                                                                                               // 16667
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 16668
 */                                                                                                                    // 16669
Lightbox.prototype.show = function show(renderable, transition, callback) {                                            // 16670
    if (!renderable) {                                                                                                 // 16671
        return this.hide(callback);                                                                                    // 16672
    }                                                                                                                  // 16673
                                                                                                                       // 16674
    if (transition instanceof Function) {                                                                              // 16675
        callback = transition;                                                                                         // 16676
        transition = undefined;                                                                                        // 16677
    }                                                                                                                  // 16678
                                                                                                                       // 16679
    if (this._showing) {                                                                                               // 16680
        if (this.options.overlap) this.hide();                                                                         // 16681
        else {                                                                                                         // 16682
            return this.hide(this.show.bind(this, renderable, transition, callback));                                  // 16683
        }                                                                                                              // 16684
    }                                                                                                                  // 16685
    this._showing = true;                                                                                              // 16686
                                                                                                                       // 16687
    var stateItem = {                                                                                                  // 16688
        transform: new TransitionableTransform(this.options.inTransform),                                              // 16689
        origin: new Transitionable(this.options.inOrigin),                                                             // 16690
        align: new Transitionable(this.options.inAlign),                                                               // 16691
        opacity: new Transitionable(this.options.inOpacity)                                                            // 16692
    };                                                                                                                 // 16693
                                                                                                                       // 16694
    var transform = new Modifier({                                                                                     // 16695
        transform: stateItem.transform,                                                                                // 16696
        opacity: stateItem.opacity,                                                                                    // 16697
        origin: stateItem.origin,                                                                                      // 16698
        align: stateItem.align                                                                                         // 16699
    });                                                                                                                // 16700
    var node = new RenderNode();                                                                                       // 16701
    node.add(transform).add(renderable);                                                                               // 16702
    this.nodes.push(node);                                                                                             // 16703
    this.states.push(stateItem);                                                                                       // 16704
    this.transforms.push(transform);                                                                                   // 16705
                                                                                                                       // 16706
    var _cb = callback ? Utility.after(3, callback) : undefined;                                                       // 16707
                                                                                                                       // 16708
    if (!transition) transition = this.options.inTransition;                                                           // 16709
    stateItem.transform.set(this.options.showTransform, transition, _cb);                                              // 16710
    stateItem.opacity.set(this.options.showOpacity, transition, _cb);                                                  // 16711
    stateItem.origin.set(this.options.showOrigin, transition, _cb);                                                    // 16712
    stateItem.align.set(this.options.showAlign, transition, _cb);                                                      // 16713
};                                                                                                                     // 16714
                                                                                                                       // 16715
/**                                                                                                                    // 16716
 * Hide hides the currently displayed renderable with an out transition.                                               // 16717
 * @method hide                                                                                                        // 16718
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 16719
 * currently controlled renderable.                                                                                    // 16720
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 16721
 */                                                                                                                    // 16722
Lightbox.prototype.hide = function hide(transition, callback) {                                                        // 16723
    if (!this._showing) return;                                                                                        // 16724
    this._showing = false;                                                                                             // 16725
                                                                                                                       // 16726
    if (transition instanceof Function) {                                                                              // 16727
        callback = transition;                                                                                         // 16728
        transition = undefined;                                                                                        // 16729
    }                                                                                                                  // 16730
                                                                                                                       // 16731
    var node = this.nodes[this.nodes.length - 1];                                                                      // 16732
    var transform = this.transforms[this.transforms.length - 1];                                                       // 16733
    var stateItem = this.states[this.states.length - 1];                                                               // 16734
    var _cb = Utility.after(3, function() {                                                                            // 16735
        this.nodes.splice(this.nodes.indexOf(node), 1);                                                                // 16736
        this.states.splice(this.states.indexOf(stateItem), 1);                                                         // 16737
        this.transforms.splice(this.transforms.indexOf(transform), 1);                                                 // 16738
        if (callback) callback.call(this);                                                                             // 16739
    }.bind(this));                                                                                                     // 16740
                                                                                                                       // 16741
    if (!transition) transition = this.options.outTransition;                                                          // 16742
    stateItem.transform.set(this.options.outTransform, transition, _cb);                                               // 16743
    stateItem.opacity.set(this.options.outOpacity, transition, _cb);                                                   // 16744
    stateItem.origin.set(this.options.outOrigin, transition, _cb);                                                     // 16745
    stateItem.align.set(this.options.outAlign, transition, _cb);                                                       // 16746
};                                                                                                                     // 16747
                                                                                                                       // 16748
/**                                                                                                                    // 16749
 * Generate a render spec from the contents of this component.                                                         // 16750
 *                                                                                                                     // 16751
 * @private                                                                                                            // 16752
 * @method render                                                                                                      // 16753
 * @return {number} Render spec for this component                                                                     // 16754
 */                                                                                                                    // 16755
Lightbox.prototype.render = function render() {                                                                        // 16756
    var result = [];                                                                                                   // 16757
    for (var i = 0; i < this.nodes.length; i++) {                                                                      // 16758
        result.push(this.nodes[i].render());                                                                           // 16759
    }                                                                                                                  // 16760
    return result;                                                                                                     // 16761
};                                                                                                                     // 16762
                                                                                                                       // 16763
module.exports = Lightbox;                                                                                             // 16764
},{"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":88,"../transitions/TransitionableTransform":89,"../utilities/Utility":95}],106:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16766
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16767
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16768
 *                                                                                                                     // 16769
 * Owner: felix@famo.us                                                                                                // 16770
 * @license MPL 2.0                                                                                                    // 16771
 * @copyright Famous Industries, Inc. 2014                                                                             // 16772
 */                                                                                                                    // 16773
                                                                                                                       // 16774
var Modifier = _dereq_('../core/Modifier');                                                                            // 16775
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16776
var Transform = _dereq_('../core/Transform');                                                                          // 16777
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16778
var View = _dereq_('../core/View');                                                                                    // 16779
                                                                                                                       // 16780
/**                                                                                                                    // 16781
 * A dynamic view that can show or hide different renderables with transitions.                                        // 16782
 * @class RenderController                                                                                             // 16783
 * @constructor                                                                                                        // 16784
 * @param {Options} [options] An object of configurable options.                                                       // 16785
 * @param {Transition} [inTransition=true] The transition in charge of showing a renderable.                           // 16786
 * @param {Transition} [outTransition=true]  The transition in charge of removing your previous renderable when        // 16787
 * you show a new one, or hiding your current renderable.                                                              // 16788
 * @param {Boolean} [overlap=true] When showing a new renderable, overlap determines if the                            // 16789
  out transition of the old one executes concurrently with the in transition of the new one,                           // 16790
   or synchronously beforehand.                                                                                        // 16791
 */                                                                                                                    // 16792
function RenderController(options) {                                                                                   // 16793
    View.apply(this, arguments);                                                                                       // 16794
                                                                                                                       // 16795
    this._showing = -1;                                                                                                // 16796
    this._outgoingRenderables = [];                                                                                    // 16797
    this._nextRenderable = null;                                                                                       // 16798
                                                                                                                       // 16799
    this._renderables = [];                                                                                            // 16800
    this._nodes = [];                                                                                                  // 16801
    this._modifiers = [];                                                                                              // 16802
    this._states = [];                                                                                                 // 16803
                                                                                                                       // 16804
    this.inTransformMap = RenderController.DefaultMap.transform;                                                       // 16805
    this.inOpacityMap = RenderController.DefaultMap.opacity;                                                           // 16806
    this.inOriginMap = RenderController.DefaultMap.origin;                                                             // 16807
    this.inAlignMap = RenderController.DefaultMap.align;                                                               // 16808
    this.outTransformMap = RenderController.DefaultMap.transform;                                                      // 16809
    this.outOpacityMap = RenderController.DefaultMap.opacity;                                                          // 16810
    this.outOriginMap = RenderController.DefaultMap.origin;                                                            // 16811
    this.outAlignMap = RenderController.DefaultMap.align;                                                              // 16812
                                                                                                                       // 16813
    this._output = [];                                                                                                 // 16814
}                                                                                                                      // 16815
RenderController.prototype = Object.create(View.prototype);                                                            // 16816
RenderController.prototype.constructor = RenderController;                                                             // 16817
                                                                                                                       // 16818
RenderController.DEFAULT_OPTIONS = {                                                                                   // 16819
    inTransition: true,                                                                                                // 16820
    outTransition: true,                                                                                               // 16821
    overlap: true                                                                                                      // 16822
};                                                                                                                     // 16823
                                                                                                                       // 16824
RenderController.DefaultMap = {                                                                                        // 16825
    transform: function() {                                                                                            // 16826
        return Transform.identity;                                                                                     // 16827
    },                                                                                                                 // 16828
    opacity: function(progress) {                                                                                      // 16829
        return progress;                                                                                               // 16830
    },                                                                                                                 // 16831
    origin: null,                                                                                                      // 16832
    align: null                                                                                                        // 16833
};                                                                                                                     // 16834
                                                                                                                       // 16835
function _mappedState(map, state) {                                                                                    // 16836
    return map(state.get());                                                                                           // 16837
}                                                                                                                      // 16838
                                                                                                                       // 16839
/**                                                                                                                    // 16840
 * As your RenderController shows a new renderable, it executes a transition in. This transition in                    // 16841
 *  will affect a default interior state and modify it as you bring renderables in and out. However, if you want to control
 *  the transform, opacity, and origin state yourself, you may call certain methods (such as inTransformFrom) to obtain state from an outside source,
 *  that may either be a function or a Famous transitionable. inTransformFrom sets the accessor for the state of       // 16844
 *  the transform used in transitioning in renderables.                                                                // 16845
 *                                                                                                                     // 16846
 * @method inTransformFrom                                                                                             // 16847
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16848
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16849
 * @chainable                                                                                                          // 16850
 */                                                                                                                    // 16851
RenderController.prototype.inTransformFrom = function inTransformFrom(transform) {                                     // 16852
    if (transform instanceof Function) this.inTransformMap = transform;                                                // 16853
    else if (transform && transform.get) this.inTransformMap = transform.get.bind(transform);                          // 16854
    else throw new Error('inTransformFrom takes only function or getter object');                                      // 16855
    //TODO: tween transition                                                                                           // 16856
    return this;                                                                                                       // 16857
};                                                                                                                     // 16858
                                                                                                                       // 16859
/**                                                                                                                    // 16860
 * inOpacityFrom sets the accessor for the state of the opacity used in transitioning in renderables.                  // 16861
 * @method inOpacityFrom                                                                                               // 16862
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16863
 * a transitionable that manages opacity (a number between zero and one).                                              // 16864
 * @chainable                                                                                                          // 16865
 */                                                                                                                    // 16866
RenderController.prototype.inOpacityFrom = function inOpacityFrom(opacity) {                                           // 16867
    if (opacity instanceof Function) this.inOpacityMap = opacity;                                                      // 16868
    else if (opacity && opacity.get) this.inOpacityMap = opacity.get.bind(opacity);                                    // 16869
    else throw new Error('inOpacityFrom takes only function or getter object');                                        // 16870
    //TODO: tween opacity                                                                                              // 16871
    return this;                                                                                                       // 16872
};                                                                                                                     // 16873
                                                                                                                       // 16874
/**                                                                                                                    // 16875
 * inOriginFrom sets the accessor for the state of the origin used in transitioning in renderables.                    // 16876
 * @method inOriginFrom                                                                                                // 16877
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 16878
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 16879
 * @chainable                                                                                                          // 16880
 */                                                                                                                    // 16881
RenderController.prototype.inOriginFrom = function inOriginFrom(origin) {                                              // 16882
    if (origin instanceof Function) this.inOriginMap = origin;                                                         // 16883
    else if (origin && origin.get) this.inOriginMap = origin.get.bind(origin);                                         // 16884
    else throw new Error('inOriginFrom takes only function or getter object');                                         // 16885
    //TODO: tween origin                                                                                               // 16886
    return this;                                                                                                       // 16887
};                                                                                                                     // 16888
                                                                                                                       // 16889
/**                                                                                                                    // 16890
 * inAlignFrom sets the accessor for the state of the align used in transitioning in renderables.                      // 16891
 * @method inAlignFrom                                                                                                 // 16892
 * @param {Function|Transitionable} align A function that returns an align from outside closure, or a                  // 16893
 * a transitionable that manages align (a two value array of numbers between zero and one).                            // 16894
 * @chainable                                                                                                          // 16895
 */                                                                                                                    // 16896
RenderController.prototype.inAlignFrom = function inAlignFrom(align) {                                                 // 16897
    if (align instanceof Function) this.inAlignMap = align;                                                            // 16898
    else if (align && align.get) this.inAlignMap = align.get.bind(align);                                              // 16899
    else throw new Error('inAlignFrom takes only function or getter object');                                          // 16900
    //TODO: tween align                                                                                                // 16901
    return this;                                                                                                       // 16902
};                                                                                                                     // 16903
                                                                                                                       // 16904
/**                                                                                                                    // 16905
 * outTransformFrom sets the accessor for the state of the transform used in transitioning out renderables.            // 16906
 * @method outTransformFrom                                                                                            // 16907
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16908
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16909
 * @chainable                                                                                                          // 16910
 */                                                                                                                    // 16911
RenderController.prototype.outTransformFrom = function outTransformFrom(transform) {                                   // 16912
    if (transform instanceof Function) this.outTransformMap = transform;                                               // 16913
    else if (transform && transform.get) this.outTransformMap = transform.get.bind(transform);                         // 16914
    else throw new Error('outTransformFrom takes only function or getter object');                                     // 16915
    //TODO: tween transition                                                                                           // 16916
    return this;                                                                                                       // 16917
};                                                                                                                     // 16918
                                                                                                                       // 16919
/**                                                                                                                    // 16920
 * outOpacityFrom sets the accessor for the state of the opacity used in transitioning out renderables.                // 16921
 * @method outOpacityFrom                                                                                              // 16922
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16923
 * a transitionable that manages opacity (a number between zero and one).                                              // 16924
 * @chainable                                                                                                          // 16925
 */                                                                                                                    // 16926
RenderController.prototype.outOpacityFrom = function outOpacityFrom(opacity) {                                         // 16927
    if (opacity instanceof Function) this.outOpacityMap = opacity;                                                     // 16928
    else if (opacity && opacity.get) this.outOpacityMap = opacity.get.bind(opacity);                                   // 16929
    else throw new Error('outOpacityFrom takes only function or getter object');                                       // 16930
    //TODO: tween opacity                                                                                              // 16931
    return this;                                                                                                       // 16932
};                                                                                                                     // 16933
                                                                                                                       // 16934
/**                                                                                                                    // 16935
 * outOriginFrom sets the accessor for the state of the origin used in transitioning out renderables.                  // 16936
 * @method outOriginFrom                                                                                               // 16937
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 16938
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 16939
 * @chainable                                                                                                          // 16940
 */                                                                                                                    // 16941
RenderController.prototype.outOriginFrom = function outOriginFrom(origin) {                                            // 16942
    if (origin instanceof Function) this.outOriginMap = origin;                                                        // 16943
    else if (origin && origin.get) this.outOriginMap = origin.get.bind(origin);                                        // 16944
    else throw new Error('outOriginFrom takes only function or getter object');                                        // 16945
    //TODO: tween origin                                                                                               // 16946
    return this;                                                                                                       // 16947
};                                                                                                                     // 16948
                                                                                                                       // 16949
/**                                                                                                                    // 16950
 * outAlignFrom sets the accessor for the state of the align used in transitioning out renderables.                    // 16951
 * @method outAlignFrom                                                                                                // 16952
 * @param {Function|Transitionable} align A function that returns an align from outside closure, or a                  // 16953
 * a transitionable that manages align (a two value array of numbers between zero and one).                            // 16954
 * @chainable                                                                                                          // 16955
 */                                                                                                                    // 16956
RenderController.prototype.outAlignFrom = function outAlignFrom(align) {                                               // 16957
    if (align instanceof Function) this.outAlignMap = align;                                                           // 16958
    else if (align && align.get) this.outAlignMap = align.get.bind(align);                                             // 16959
    else throw new Error('outAlignFrom takes only function or getter object');                                         // 16960
    //TODO: tween align                                                                                                // 16961
    return this;                                                                                                       // 16962
};                                                                                                                     // 16963
                                                                                                                       // 16964
/**                                                                                                                    // 16965
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 16966
 * execute afterwards.                                                                                                 // 16967
 * @method show                                                                                                        // 16968
 * @param {Object} renderable The renderable you want to show.                                                         // 16969
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 16970
 * passed-in renderable.                                                                                               // 16971
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 16972
 * @chainable                                                                                                          // 16973
 */                                                                                                                    // 16974
RenderController.prototype.show = function show(renderable, transition, callback) {                                    // 16975
    if (!renderable) {                                                                                                 // 16976
        return this.hide(callback);                                                                                    // 16977
    }                                                                                                                  // 16978
                                                                                                                       // 16979
    if (transition instanceof Function) {                                                                              // 16980
        callback = transition;                                                                                         // 16981
        transition = null;                                                                                             // 16982
    }                                                                                                                  // 16983
                                                                                                                       // 16984
    if (this._showing >= 0) {                                                                                          // 16985
        if (this.options.overlap) this.hide();                                                                         // 16986
        else {                                                                                                         // 16987
            if (this._nextRenderable) {                                                                                // 16988
                this._nextRenderable = renderable;                                                                     // 16989
            }                                                                                                          // 16990
            else {                                                                                                     // 16991
                this._nextRenderable = renderable;                                                                     // 16992
                this.hide(function() {                                                                                 // 16993
                    if (this._nextRenderable === renderable) this.show(this._nextRenderable, callback);                // 16994
                    this._nextRenderable = null;                                                                       // 16995
                });                                                                                                    // 16996
            }                                                                                                          // 16997
            return undefined;                                                                                          // 16998
        }                                                                                                              // 16999
    }                                                                                                                  // 17000
                                                                                                                       // 17001
    var state = null;                                                                                                  // 17002
                                                                                                                       // 17003
    // check to see if we should restore                                                                               // 17004
    var renderableIndex = this._renderables.indexOf(renderable);                                                       // 17005
    if (renderableIndex >= 0) {                                                                                        // 17006
        this._showing = renderableIndex;                                                                               // 17007
        state = this._states[renderableIndex];                                                                         // 17008
        state.halt();                                                                                                  // 17009
                                                                                                                       // 17010
        var outgoingIndex = this._outgoingRenderables.indexOf(renderable);                                             // 17011
        if (outgoingIndex >= 0) this._outgoingRenderables.splice(outgoingIndex, 1);                                    // 17012
    }                                                                                                                  // 17013
    else {                                                                                                             // 17014
        state = new Transitionable(0);                                                                                 // 17015
                                                                                                                       // 17016
        var modifier = new Modifier({                                                                                  // 17017
            transform: this.inTransformMap ? _mappedState.bind(this, this.inTransformMap, state) : null,               // 17018
            opacity: this.inOpacityMap ? _mappedState.bind(this, this.inOpacityMap, state) : null,                     // 17019
            origin: this.inOriginMap ? _mappedState.bind(this, this.inOriginMap, state) : null,                        // 17020
            align: this.inAlignMap ? _mappedState.bind(this, this.inAlignMap, state) : null                            // 17021
        });                                                                                                            // 17022
                                                                                                                       // 17023
        var node = new RenderNode();                                                                                   // 17024
        node.add(modifier).add(renderable);                                                                            // 17025
                                                                                                                       // 17026
        this._showing = this._nodes.length;                                                                            // 17027
        this._nodes.push(node);                                                                                        // 17028
        this._modifiers.push(modifier);                                                                                // 17029
        this._states.push(state);                                                                                      // 17030
        this._renderables.push(renderable);                                                                            // 17031
    }                                                                                                                  // 17032
                                                                                                                       // 17033
    if (!transition) transition = this.options.inTransition;                                                           // 17034
    state.set(1, transition, callback);                                                                                // 17035
};                                                                                                                     // 17036
                                                                                                                       // 17037
/**                                                                                                                    // 17038
 * Hide hides the currently displayed renderable with an out transition.                                               // 17039
 * @method hide                                                                                                        // 17040
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 17041
 * currently controlled renderable.                                                                                    // 17042
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 17043
 * @chainable                                                                                                          // 17044
 */                                                                                                                    // 17045
RenderController.prototype.hide = function hide(transition, callback) {                                                // 17046
    if (this._showing < 0) return;                                                                                     // 17047
    var index = this._showing;                                                                                         // 17048
    this._showing = -1;                                                                                                // 17049
                                                                                                                       // 17050
    if (transition instanceof Function) {                                                                              // 17051
        callback = transition;                                                                                         // 17052
        transition = undefined;                                                                                        // 17053
    }                                                                                                                  // 17054
                                                                                                                       // 17055
    var node = this._nodes[index];                                                                                     // 17056
    var modifier = this._modifiers[index];                                                                             // 17057
    var state = this._states[index];                                                                                   // 17058
    var renderable = this._renderables[index];                                                                         // 17059
                                                                                                                       // 17060
    modifier.transformFrom(this.outTransformMap ? _mappedState.bind(this, this.outTransformMap, state) : null);        // 17061
    modifier.opacityFrom(this.outOpacityMap ? _mappedState.bind(this, this.outOpacityMap, state) : null);              // 17062
    modifier.originFrom(this.outOriginMap ? _mappedState.bind(this, this.outOriginMap, state) : null);                 // 17063
    modifier.alignFrom(this.outAlignMap ? _mappedState.bind(this, this.outAlignMap, state) : null);                    // 17064
                                                                                                                       // 17065
    if (this._outgoingRenderables.indexOf(renderable) < 0) this._outgoingRenderables.push(renderable);                 // 17066
                                                                                                                       // 17067
    if (!transition) transition = this.options.outTransition;                                                          // 17068
    state.halt();                                                                                                      // 17069
    state.set(0, transition, function(node, modifier, state, renderable) {                                             // 17070
        if (this._outgoingRenderables.indexOf(renderable) >= 0) {                                                      // 17071
            var index = this._nodes.indexOf(node);                                                                     // 17072
            this._nodes.splice(index, 1);                                                                              // 17073
            this._modifiers.splice(index, 1);                                                                          // 17074
            this._states.splice(index, 1);                                                                             // 17075
            this._renderables.splice(index, 1);                                                                        // 17076
            this._outgoingRenderables.splice(this._outgoingRenderables.indexOf(renderable), 1);                        // 17077
                                                                                                                       // 17078
            if (this._showing >= index) this._showing--;                                                               // 17079
        }                                                                                                              // 17080
        if (callback) callback.call(this);                                                                             // 17081
    }.bind(this, node, modifier, state, renderable));                                                                  // 17082
};                                                                                                                     // 17083
                                                                                                                       // 17084
/**                                                                                                                    // 17085
 * Generate a render spec from the contents of this component.                                                         // 17086
 *                                                                                                                     // 17087
 * @private                                                                                                            // 17088
 * @method render                                                                                                      // 17089
 * @return {number} Render spec for this component                                                                     // 17090
 */                                                                                                                    // 17091
RenderController.prototype.render = function render() {                                                                // 17092
    var result = this._output;                                                                                         // 17093
    if (result.length > this._nodes.length) result.splice(this._nodes.length);                                         // 17094
    for (var i = 0; i < this._nodes.length; i++) {                                                                     // 17095
        result[i] = this._nodes[i].render();                                                                           // 17096
    }                                                                                                                  // 17097
    return result;                                                                                                     // 17098
};                                                                                                                     // 17099
                                                                                                                       // 17100
module.exports = RenderController;                                                                                     // 17101
},{"../core/Modifier":9,"../core/RenderNode":11,"../core/Transform":15,"../core/View":16,"../transitions/Transitionable":88}],107:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 17103
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 17104
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 17105
 *                                                                                                                     // 17106
 * Owner: felix@famo.us                                                                                                // 17107
 * @license MPL 2.0                                                                                                    // 17108
 * @copyright Famous Industries, Inc. 2014                                                                             // 17109
 */                                                                                                                    // 17110
                                                                                                                       // 17111
var ContainerSurface = _dereq_('../surfaces/ContainerSurface');                                                        // 17112
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17113
var Scrollview = _dereq_('./Scrollview');                                                                              // 17114
var Utility = _dereq_('../utilities/Utility');                                                                         // 17115
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17116
                                                                                                                       // 17117
/**                                                                                                                    // 17118
 * A Container surface with a scrollview automatically added. The convenience of ScrollContainer lies in               // 17119
 * being able to clip out portions of the associated scrollview that lie outside the bounding surface,                 // 17120
 * and in being able to move the scrollview more easily by applying modifiers to the parent container                  // 17121
 * surface.                                                                                                            // 17122
 * @class ScrollContainer                                                                                              // 17123
 * @constructor                                                                                                        // 17124
 * @param {Options} [options] An object of configurable options.                                                       // 17125
 * @param {Options} [options.container=undefined] Options for the ScrollContainer instance's surface.                  // 17126
 * @param {Options} [options.scrollview={direction:Utility.Direction.X}]  Options for the ScrollContainer instance's scrollview.
 */                                                                                                                    // 17128
function ScrollContainer(options) {                                                                                    // 17129
    this.options = Object.create(ScrollContainer.DEFAULT_OPTIONS);                                                     // 17130
    this._optionsManager = new OptionsManager(this.options);                                                           // 17131
                                                                                                                       // 17132
    if (options) this.setOptions(options);                                                                             // 17133
                                                                                                                       // 17134
    this.container = new ContainerSurface(this.options.container);                                                     // 17135
    this.scrollview = new Scrollview(this.options.scrollview);                                                         // 17136
                                                                                                                       // 17137
    this.container.add(this.scrollview);                                                                               // 17138
                                                                                                                       // 17139
    this._eventInput = new EventHandler();                                                                             // 17140
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17141
                                                                                                                       // 17142
    this._eventInput.pipe(this.scrollview);                                                                            // 17143
                                                                                                                       // 17144
    this._eventOutput = new EventHandler();                                                                            // 17145
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17146
                                                                                                                       // 17147
    this.container.pipe(this._eventOutput);                                                                            // 17148
    this.scrollview.pipe(this._eventOutput);                                                                           // 17149
}                                                                                                                      // 17150
                                                                                                                       // 17151
ScrollContainer.DEFAULT_OPTIONS = {                                                                                    // 17152
    container: {                                                                                                       // 17153
        properties: {overflow : 'hidden'}                                                                              // 17154
    },                                                                                                                 // 17155
    scrollview: {}                                                                                                     // 17156
};                                                                                                                     // 17157
                                                                                                                       // 17158
/**                                                                                                                    // 17159
 * Patches the ScrollContainer instance's options with the passed-in ones.                                             // 17160
 *                                                                                                                     // 17161
 * @method setOptions                                                                                                  // 17162
 * @param {Options} options An object of configurable options for the ScrollContainer instance.                        // 17163
 */                                                                                                                    // 17164
ScrollContainer.prototype.setOptions = function setOptions(options) {                                                  // 17165
    return this._optionsManager.setOptions(options);                                                                   // 17166
};                                                                                                                     // 17167
                                                                                                                       // 17168
/**                                                                                                                    // 17169
 * Sets the collection of renderables under the ScrollContainer instance scrollview's control.                         // 17170
 *                                                                                                                     // 17171
 * @method sequenceFrom                                                                                                // 17172
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous ViewSequence.                       // 17173
 */                                                                                                                    // 17174
ScrollContainer.prototype.sequenceFrom = function sequenceFrom() {                                                     // 17175
    return this.scrollview.sequenceFrom.apply(this.scrollview, arguments);                                             // 17176
};                                                                                                                     // 17177
                                                                                                                       // 17178
/**                                                                                                                    // 17179
 * Returns the width and the height of the ScrollContainer instance.                                                   // 17180
 *                                                                                                                     // 17181
 * @method getSize                                                                                                     // 17182
 * @return {Array} A two value array of the ScrollContainer instance's current width and height (in that order).       // 17183
 */                                                                                                                    // 17184
ScrollContainer.prototype.getSize = function getSize() {                                                               // 17185
    return this.container.getSize.apply(this.container, arguments);                                                    // 17186
};                                                                                                                     // 17187
                                                                                                                       // 17188
/**                                                                                                                    // 17189
 * Generate a render spec from the contents of this component.                                                         // 17190
 *                                                                                                                     // 17191
 * @private                                                                                                            // 17192
 * @method render                                                                                                      // 17193
 * @return {number} Render spec for this component                                                                     // 17194
 */                                                                                                                    // 17195
ScrollContainer.prototype.render = function render() {                                                                 // 17196
    return this.container.render();                                                                                    // 17197
};                                                                                                                     // 17198
                                                                                                                       // 17199
module.exports = ScrollContainer;                                                                                      // 17200
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../surfaces/ContainerSurface":75,"../utilities/Utility":95,"./Scrollview":109}],108:[function(_dereq_,module,exports){
var Entity = _dereq_('../core/Entity');                                                                                // 17202
var Group = _dereq_('../core/Group');                                                                                  // 17203
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17204
var Transform = _dereq_('../core/Transform');                                                                          // 17205
var Utility = _dereq_('../utilities/Utility');                                                                         // 17206
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 17207
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17208
                                                                                                                       // 17209
/**                                                                                                                    // 17210
 * Scroller lays out a collection of renderables, and will browse through them based on                                // 17211
 * accessed position. Scroller also broadcasts an 'edgeHit' event, with a position property of the location of the edge,
 * when you've hit the 'edges' of it's renderable collection.                                                          // 17213
 * @class Scroller                                                                                                     // 17214
 * @constructor                                                                                                        // 17215
  * @event error                                                                                                       // 17216
 * @param {Options} [options] An object of configurable options.                                                       // 17217
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17218
 * module, this option will lay out the Scroller instance's renderables either horizontally                            // 17219
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17220
 * to just use integers as well.                                                                                       // 17221
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scroller will display content in.        // 17222
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scroller will process renderables' associated calculations in.
 */                                                                                                                    // 17224
function Scroller(options) {                                                                                           // 17225
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 17226
    this._optionsManager = new OptionsManager(this.options);                                                           // 17227
    if (options) this._optionsManager.setOptions(options);                                                             // 17228
                                                                                                                       // 17229
    this._node = null;                                                                                                 // 17230
    this._position = 0;                                                                                                // 17231
                                                                                                                       // 17232
    // used for shifting nodes                                                                                         // 17233
    this._positionOffset = 0;                                                                                          // 17234
                                                                                                                       // 17235
    this._positionGetter = null;                                                                                       // 17236
    this._outputFunction = null;                                                                                       // 17237
    this._masterOutputFunction = null;                                                                                 // 17238
    this.outputFrom();                                                                                                 // 17239
                                                                                                                       // 17240
    this._onEdge = 0; // -1 for top, 1 for bottom                                                                      // 17241
                                                                                                                       // 17242
    this.group = new Group();                                                                                          // 17243
    this.group.add({render: _innerRender.bind(this)});                                                                 // 17244
                                                                                                                       // 17245
    this._entityId = Entity.register(this);                                                                            // 17246
    this._size = [undefined, undefined];                                                                               // 17247
    this._contextSize = [undefined, undefined];                                                                        // 17248
                                                                                                                       // 17249
    this._eventInput = new EventHandler();                                                                             // 17250
    this._eventOutput = new EventHandler();                                                                            // 17251
                                                                                                                       // 17252
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17253
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17254
}                                                                                                                      // 17255
                                                                                                                       // 17256
Scroller.DEFAULT_OPTIONS = {                                                                                           // 17257
    direction: Utility.Direction.Y,                                                                                    // 17258
    margin: 0,                                                                                                         // 17259
    clipSize: undefined,                                                                                               // 17260
    groupScroll: false                                                                                                 // 17261
};                                                                                                                     // 17262
                                                                                                                       // 17263
var EDGE_TOLERANCE = 0; //slop for detecting passing the edge                                                          // 17264
                                                                                                                       // 17265
function _sizeForDir(size) {                                                                                           // 17266
    if (!size) size = this._contextSize;                                                                               // 17267
    var dimension = this.options.direction;                                                                            // 17268
    return (size[dimension] === undefined) ? this._contextSize[dimension] : size[dimension];                           // 17269
}                                                                                                                      // 17270
                                                                                                                       // 17271
function _output(node, offset, target) {                                                                               // 17272
    var size = node.getSize ? node.getSize() : this._contextSize;                                                      // 17273
    var transform = this._outputFunction(offset);                                                                      // 17274
    target.push({transform: transform, target: node.render()});                                                        // 17275
    return _sizeForDir.call(this, size);                                                                               // 17276
}                                                                                                                      // 17277
                                                                                                                       // 17278
function _getClipSize() {                                                                                              // 17279
    if (this.options.clipSize !== undefined) return this.options.clipSize;                                             // 17280
    if (this._contextSize[this.options.direction] > this.getCumulativeSize()[this.options.direction]) {                // 17281
        return _sizeForDir.call(this, this.getCumulativeSize());                                                       // 17282
    } else {                                                                                                           // 17283
        return _sizeForDir.call(this, this._contextSize);                                                              // 17284
    }                                                                                                                  // 17285
}                                                                                                                      // 17286
                                                                                                                       // 17287
/**                                                                                                                    // 17288
* Returns the cumulative size of the renderables in the view sequence                                                  // 17289
* @method getCumulativeSize                                                                                            // 17290
* @return {array} a two value array of the view sequence's cumulative size up to the index.                            // 17291
*/                                                                                                                     // 17292
Scroller.prototype.getCumulativeSize = function(index) {                                                               // 17293
    if (index === undefined) index = this._node._.cumulativeSizes.length - 1;                                          // 17294
    return this._node._.getSize(index);                                                                                // 17295
};                                                                                                                     // 17296
                                                                                                                       // 17297
/**                                                                                                                    // 17298
 * Patches the Scroller instance's options with the passed-in ones.                                                    // 17299
 * @method setOptions                                                                                                  // 17300
 * @param {Options} options An object of configurable options for the Scroller instance.                               // 17301
 */                                                                                                                    // 17302
Scroller.prototype.setOptions = function setOptions(options) {                                                         // 17303
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 17304
        if (options.groupScroll)                                                                                       // 17305
            this.group.pipe(this._eventOutput);                                                                        // 17306
        else                                                                                                           // 17307
            this.group.unpipe(this._eventOutput);                                                                      // 17308
    }                                                                                                                  // 17309
    this._optionsManager.setOptions(options);                                                                          // 17310
};                                                                                                                     // 17311
                                                                                                                       // 17312
/**                                                                                                                    // 17313
 * Tells you if the Scroller instance is on an edge.                                                                   // 17314
 * @method onEdge                                                                                                      // 17315
 * @return {Boolean} Whether the Scroller instance is on an edge or not.                                               // 17316
 */                                                                                                                    // 17317
Scroller.prototype.onEdge = function onEdge() {                                                                        // 17318
    return this._onEdge;                                                                                               // 17319
};                                                                                                                     // 17320
                                                                                                                       // 17321
/**                                                                                                                    // 17322
 * Allows you to overwrite the way Scroller lays out it's renderables. Scroller will                                   // 17323
 * pass an offset into the function. By default the Scroller instance just translates each node                        // 17324
 * in it's direction by the passed-in offset.                                                                          // 17325
 * Scroller will translate each renderable down                                                                        // 17326
 * @method outputFrom                                                                                                  // 17327
 * @param {Function} fn A function that takes an offset and returns a transform.                                       // 17328
 * @param {Function} [masterFn]                                                                                        // 17329
 */                                                                                                                    // 17330
Scroller.prototype.outputFrom = function outputFrom(fn, masterFn) {                                                    // 17331
    if (!fn) {                                                                                                         // 17332
        fn = function(offset) {                                                                                        // 17333
            return (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
        }.bind(this);                                                                                                  // 17335
        if (!masterFn) masterFn = fn;                                                                                  // 17336
    }                                                                                                                  // 17337
    this._outputFunction = fn;                                                                                         // 17338
    this._masterOutputFunction = masterFn ? masterFn : function(offset) {                                              // 17339
        return Transform.inverse(fn(-offset));                                                                         // 17340
    };                                                                                                                 // 17341
};                                                                                                                     // 17342
                                                                                                                       // 17343
/**                                                                                                                    // 17344
 * The Scroller instance's method for reading from an external position. Scroller uses                                 // 17345
 * the external position to actually scroll through it's renderables.                                                  // 17346
 * @method positionFrom                                                                                                // 17347
 * @param {Getter} position Can be either a function that returns a position,                                          // 17348
 * or an object with a get method that returns a position.                                                             // 17349
 */                                                                                                                    // 17350
Scroller.prototype.positionFrom = function positionFrom(position) {                                                    // 17351
    if (position instanceof Function) this._positionGetter = position;                                                 // 17352
    else if (position && position.get) this._positionGetter = position.get.bind(position);                             // 17353
    else {                                                                                                             // 17354
        this._positionGetter = null;                                                                                   // 17355
        this._position = position;                                                                                     // 17356
    }                                                                                                                  // 17357
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17358
};                                                                                                                     // 17359
                                                                                                                       // 17360
/**                                                                                                                    // 17361
 * Sets the collection of renderables under the Scroller instance's control.                                           // 17362
 *                                                                                                                     // 17363
 * @method sequenceFrom                                                                                                // 17364
 * @param node {Array|ViewSequence} Either an array of renderables or a Famous viewSequence.                           // 17365
 * @chainable                                                                                                          // 17366
 */                                                                                                                    // 17367
Scroller.prototype.sequenceFrom = function sequenceFrom(node) {                                                        // 17368
    if (node instanceof Array) node = new ViewSequence({array: node});                                                 // 17369
    this._node = node;                                                                                                 // 17370
    this._positionOffset = 0;                                                                                          // 17371
};                                                                                                                     // 17372
                                                                                                                       // 17373
/**                                                                                                                    // 17374
 * Returns the width and the height of the Scroller instance.                                                          // 17375
 *                                                                                                                     // 17376
 * @method getSize                                                                                                     // 17377
 * @return {Array} A two value array of the Scroller instance's current width and height (in that order).              // 17378
 */                                                                                                                    // 17379
Scroller.prototype.getSize = function getSize(actual) {                                                                // 17380
    return actual ? this._contextSize : this._size;                                                                    // 17381
};                                                                                                                     // 17382
                                                                                                                       // 17383
/**                                                                                                                    // 17384
 * Generate a render spec from the contents of this component.                                                         // 17385
 *                                                                                                                     // 17386
 * @private                                                                                                            // 17387
 * @method render                                                                                                      // 17388
 * @return {number} Render spec for this component                                                                     // 17389
 */                                                                                                                    // 17390
Scroller.prototype.render = function render() {                                                                        // 17391
    if (!this._node) return null;                                                                                      // 17392
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17393
    return this._entityId;                                                                                             // 17394
};                                                                                                                     // 17395
                                                                                                                       // 17396
/**                                                                                                                    // 17397
 * Apply changes from this component to the corresponding document element.                                            // 17398
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 17399
 * and matrix transforms.                                                                                              // 17400
 *                                                                                                                     // 17401
 * @private                                                                                                            // 17402
 * @method commit                                                                                                      // 17403
 * @param {Context} context commit context                                                                             // 17404
 */                                                                                                                    // 17405
Scroller.prototype.commit = function commit(context) {                                                                 // 17406
    var transform = context.transform;                                                                                 // 17407
    var opacity = context.opacity;                                                                                     // 17408
    var origin = context.origin;                                                                                       // 17409
    var size = context.size;                                                                                           // 17410
                                                                                                                       // 17411
    // reset edge detection on size change                                                                             // 17412
    if (!this.options.clipSize && (size[0] !== this._contextSize[0] || size[1] !== this._contextSize[1])) {            // 17413
        this._onEdge = 0;                                                                                              // 17414
        this._contextSize[0] = size[0];                                                                                // 17415
        this._contextSize[1] = size[1];                                                                                // 17416
                                                                                                                       // 17417
        if (this.options.direction === Utility.Direction.X) {                                                          // 17418
            this._size[0] = _getClipSize.call(this);                                                                   // 17419
            this._size[1] = undefined;                                                                                 // 17420
        }                                                                                                              // 17421
        else {                                                                                                         // 17422
            this._size[0] = undefined;                                                                                 // 17423
            this._size[1] = _getClipSize.call(this);                                                                   // 17424
        }                                                                                                              // 17425
    }                                                                                                                  // 17426
                                                                                                                       // 17427
    var scrollTransform = this._masterOutputFunction(-this._position);                                                 // 17428
                                                                                                                       // 17429
    return {                                                                                                           // 17430
        transform: Transform.multiply(transform, scrollTransform),                                                     // 17431
        size: size,                                                                                                    // 17432
        opacity: opacity,                                                                                              // 17433
        origin: origin,                                                                                                // 17434
        target: this.group.render()                                                                                    // 17435
    };                                                                                                                 // 17436
};                                                                                                                     // 17437
                                                                                                                       // 17438
function _innerRender() {                                                                                              // 17439
    var size = null;                                                                                                   // 17440
    var position = this._position;                                                                                     // 17441
    var result = [];                                                                                                   // 17442
                                                                                                                       // 17443
    var offset = -this._positionOffset;                                                                                // 17444
    var clipSize = _getClipSize.call(this);                                                                            // 17445
    var currNode = this._node;                                                                                         // 17446
    while (currNode && offset - position < clipSize + this.options.margin) {                                           // 17447
        offset += _output.call(this, currNode, offset, result);                                                        // 17448
        currNode = currNode.getNext ? currNode.getNext() : null;                                                       // 17449
    }                                                                                                                  // 17450
                                                                                                                       // 17451
    var sizeNode = this._node;                                                                                         // 17452
    var nodesSize = _sizeForDir.call(this, sizeNode.getSize());                                                        // 17453
    if (offset < clipSize) {                                                                                           // 17454
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17455
            sizeNode = sizeNode.getPrevious();                                                                         // 17456
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17457
        }                                                                                                              // 17458
        sizeNode = this._node;                                                                                         // 17459
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17460
            sizeNode = sizeNode.getNext();                                                                             // 17461
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17462
        }                                                                                                              // 17463
    }                                                                                                                  // 17464
                                                                                                                       // 17465
    if (!currNode && offset - position < clipSize - EDGE_TOLERANCE) {                                                  // 17466
        if (this._onEdge !== 1){                                                                                       // 17467
            this._onEdge = 1;                                                                                          // 17468
            this._eventOutput.emit('onEdge', {                                                                         // 17469
                position: offset - clipSize                                                                            // 17470
            });                                                                                                        // 17471
        }                                                                                                              // 17472
    }                                                                                                                  // 17473
    else if (!this._node.getPrevious() && position < -EDGE_TOLERANCE) {                                                // 17474
        if (this._onEdge !== -1) {                                                                                     // 17475
            this._onEdge = -1;                                                                                         // 17476
            this._eventOutput.emit('onEdge', {                                                                         // 17477
                position: 0                                                                                            // 17478
            });                                                                                                        // 17479
        }                                                                                                              // 17480
    }                                                                                                                  // 17481
    else {                                                                                                             // 17482
        if (this._onEdge !== 0){                                                                                       // 17483
            this._onEdge = 0;                                                                                          // 17484
            this._eventOutput.emit('offEdge');                                                                         // 17485
        }                                                                                                              // 17486
    }                                                                                                                  // 17487
                                                                                                                       // 17488
    // backwards                                                                                                       // 17489
    currNode = (this._node && this._node.getPrevious) ? this._node.getPrevious() : null;                               // 17490
    offset = -this._positionOffset;                                                                                    // 17491
    if (currNode) {                                                                                                    // 17492
        size = currNode.getSize ? currNode.getSize() : this._contextSize;                                              // 17493
        offset -= _sizeForDir.call(this, size);                                                                        // 17494
    }                                                                                                                  // 17495
                                                                                                                       // 17496
    while (currNode && ((offset - position) > -(clipSize + this.options.margin))) {                                    // 17497
        _output.call(this, currNode, offset, result);                                                                  // 17498
        currNode = currNode.getPrevious ? currNode.getPrevious() : null;                                               // 17499
        if (currNode) {                                                                                                // 17500
            size = currNode.getSize ? currNode.getSize() : this._contextSize;                                          // 17501
            offset -= _sizeForDir.call(this, size);                                                                    // 17502
        }                                                                                                              // 17503
    }                                                                                                                  // 17504
                                                                                                                       // 17505
    return result;                                                                                                     // 17506
}                                                                                                                      // 17507
                                                                                                                       // 17508
module.exports = Scroller;                                                                                             // 17509
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Group":8,"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":95}],109:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 17511
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 17512
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 17513
 *                                                                                                                     // 17514
 * Owner: felix@famo.us                                                                                                // 17515
 * @license MPL 2.0                                                                                                    // 17516
 * @copyright Famous Industries, Inc. 2014                                                                             // 17517
 */                                                                                                                    // 17518
                                                                                                                       // 17519
var PhysicsEngine = _dereq_('../physics/PhysicsEngine');                                                               // 17520
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 17521
var Drag = _dereq_('../physics/forces/Drag');                                                                          // 17522
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 17523
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17524
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17525
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 17526
var Scroller = _dereq_('../views/Scroller');                                                                           // 17527
var Utility = _dereq_('../utilities/Utility');                                                                         // 17528
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 17529
var ScrollSync = _dereq_('../inputs/ScrollSync');                                                                      // 17530
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 17531
GenericSync.register({scroll : ScrollSync, touch : TouchSync});                                                        // 17532
                                                                                                                       // 17533
/** @const */                                                                                                          // 17534
var TOLERANCE = 0.5;                                                                                                   // 17535
                                                                                                                       // 17536
/** @enum */                                                                                                           // 17537
var SpringStates = {                                                                                                   // 17538
    NONE: 0,                                                                                                           // 17539
    EDGE: 1,                                                                                                           // 17540
    PAGE: 2                                                                                                            // 17541
};                                                                                                                     // 17542
                                                                                                                       // 17543
/** @enum */                                                                                                           // 17544
var EdgeStates = {                                                                                                     // 17545
    TOP:   -1,                                                                                                         // 17546
    NONE:   0,                                                                                                         // 17547
    BOTTOM: 1                                                                                                          // 17548
};                                                                                                                     // 17549
                                                                                                                       // 17550
/**                                                                                                                    // 17551
 * Scrollview will lay out a collection of renderables sequentially in the specified direction, and will               // 17552
 * allow you to scroll through them with mousewheel or touch events.                                                   // 17553
 * @class Scrollview                                                                                                   // 17554
 * @constructor                                                                                                        // 17555
 * @param {Options} [options] An object of configurable options.                                                       // 17556
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17557
 * module, this option will lay out the Scrollview instance's renderables either horizontally                          // 17558
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17559
 * to just use integers as well.                                                                                       // 17560
 * @param {Boolean} [options.rails=true] When true, Scrollview's genericSync will only process input in it's primary access.
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scrollview will display content in.      // 17562
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scrollview will process renderables' associated calculations in.
 * @param {Number} [friction=0.001] Input resistance proportional to the velocity of the input.                        // 17564
 * Controls the feel of the Scrollview instance at low velocities.                                                     // 17565
 * @param {Number} [drag=0.0001] Input resistance proportional to the square of the velocity of the input.             // 17566
 * Affects Scrollview instance more prominently at high velocities.                                                    // 17567
 * @param {Number} [edgeGrip=0.5] A coefficient for resistance against after-touch momentum.                           // 17568
 * @param {Number} [egePeriod=300] Sets the period on the spring that handles the physics associated                   // 17569
 * with hitting the end of a scrollview.                                                                               // 17570
 * @param {Number} [edgeDamp=1] Sets the damping on the spring that handles the physics associated                     // 17571
 * with hitting the end of a scrollview.                                                                               // 17572
 * @param {Boolean} [paginated=false] A paginated scrollview will scroll through items discretely                      // 17573
 * rather than continously.                                                                                            // 17574
 * @param {Number} [pagePeriod=500] Sets the period on the spring that handles the physics associated                  // 17575
 * with pagination.                                                                                                    // 17576
 * @param {Number} [pageDamp=0.8] Sets the damping on the spring that handles the physics associated                   // 17577
 * with pagination.                                                                                                    // 17578
 * @param {Number} [pageStopSpeed=Infinity] The threshold for determining the amount of velocity                       // 17579
 * required to trigger pagination. The lower the threshold, the easier it is to scroll continuosly.                    // 17580
 * @param {Number} [pageSwitchSpeed=1] The threshold for momentum-based velocity pagination.                           // 17581
 * @param {Number} [speedLimit=10] The highest scrolling speed you can reach.                                          // 17582
 */                                                                                                                    // 17583
function Scrollview(options) {                                                                                         // 17584
    // patch options with defaults                                                                                     // 17585
    this.options = Object.create(Scrollview.DEFAULT_OPTIONS);                                                          // 17586
    this._optionsManager = new OptionsManager(this.options);                                                           // 17587
                                                                                                                       // 17588
    // create sub-components                                                                                           // 17589
    this._scroller = new Scroller(this.options);                                                                       // 17590
                                                                                                                       // 17591
    this.sync = new GenericSync(                                                                                       // 17592
        ['scroll', 'touch'],                                                                                           // 17593
        {                                                                                                              // 17594
            direction : this.options.direction,                                                                        // 17595
            scale : this.options.syncScale,                                                                            // 17596
            rails: this.options.rails,                                                                                 // 17597
            preventDefault: this.options.preventDefault !== undefined                                                  // 17598
                ? this.options.preventDefault                                                                          // 17599
                : this.options.direction !== Utility.Direction.Y                                                       // 17600
        }                                                                                                              // 17601
    );                                                                                                                 // 17602
                                                                                                                       // 17603
    this._physicsEngine = new PhysicsEngine();                                                                         // 17604
    this._particle = new Particle();                                                                                   // 17605
    this._physicsEngine.addBody(this._particle);                                                                       // 17606
                                                                                                                       // 17607
    this.spring = new Spring({                                                                                         // 17608
        anchor: [0, 0, 0],                                                                                             // 17609
        period: this.options.edgePeriod,                                                                               // 17610
        dampingRatio: this.options.edgeDamp                                                                            // 17611
    });                                                                                                                // 17612
    this.drag = new Drag({                                                                                             // 17613
        forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,                                                                 // 17614
        strength: this.options.drag                                                                                    // 17615
    });                                                                                                                // 17616
    this.friction = new Drag({                                                                                         // 17617
        forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,                                                                    // 17618
        strength: this.options.friction                                                                                // 17619
    });                                                                                                                // 17620
                                                                                                                       // 17621
    // state                                                                                                           // 17622
    this._node = null;                                                                                                 // 17623
    this._touchCount = 0;                                                                                              // 17624
    this._springState = SpringStates.NONE;                                                                             // 17625
    this._onEdge = EdgeStates.NONE;                                                                                    // 17626
    this._pageSpringPosition = 0;                                                                                      // 17627
    this._edgeSpringPosition = 0;                                                                                      // 17628
    this._touchVelocity = 0;                                                                                           // 17629
    this._earlyEnd = false;                                                                                            // 17630
    this._needsPaginationCheck = false;                                                                                // 17631
    this._displacement = 0;                                                                                            // 17632
    this._totalShift = 0;                                                                                              // 17633
    this._cachedIndex = 0;                                                                                             // 17634
                                                                                                                       // 17635
    // subcomponent logic                                                                                              // 17636
    this._scroller.positionFrom(this.getPosition.bind(this));                                                          // 17637
                                                                                                                       // 17638
    // eventing                                                                                                        // 17639
    this._eventInput = new EventHandler();                                                                             // 17640
    this._eventOutput = new EventHandler();                                                                            // 17641
                                                                                                                       // 17642
    this._eventInput.pipe(this.sync);                                                                                  // 17643
    this.sync.pipe(this._eventInput);                                                                                  // 17644
                                                                                                                       // 17645
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17646
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17647
                                                                                                                       // 17648
    _bindEvents.call(this);                                                                                            // 17649
                                                                                                                       // 17650
    // override default options with passed-in custom options                                                          // 17651
    if (options) this.setOptions(options);                                                                             // 17652
}                                                                                                                      // 17653
                                                                                                                       // 17654
Scrollview.DEFAULT_OPTIONS = {                                                                                         // 17655
    direction: Utility.Direction.Y,                                                                                    // 17656
    rails: true,                                                                                                       // 17657
    friction: 0.005,                                                                                                   // 17658
    drag: 0.0001,                                                                                                      // 17659
    edgeGrip: 0.2,                                                                                                     // 17660
    edgePeriod: 300,                                                                                                   // 17661
    edgeDamp: 1,                                                                                                       // 17662
    margin: 1000,       // mostly safe                                                                                 // 17663
    paginated: false,                                                                                                  // 17664
    pagePeriod: 500,                                                                                                   // 17665
    pageDamp: 0.8,                                                                                                     // 17666
    pageStopSpeed: 10,                                                                                                 // 17667
    pageSwitchSpeed: 0.5,                                                                                              // 17668
    speedLimit: 5,                                                                                                     // 17669
    groupScroll: false,                                                                                                // 17670
    syncScale: 1                                                                                                       // 17671
};                                                                                                                     // 17672
                                                                                                                       // 17673
function _handleStart(event) {                                                                                         // 17674
    this._touchCount = event.count;                                                                                    // 17675
    if (event.count === undefined) this._touchCount = 1;                                                               // 17676
                                                                                                                       // 17677
    _detachAgents.call(this);                                                                                          // 17678
                                                                                                                       // 17679
    this.setVelocity(0);                                                                                               // 17680
    this._touchVelocity = 0;                                                                                           // 17681
    this._earlyEnd = false;                                                                                            // 17682
}                                                                                                                      // 17683
                                                                                                                       // 17684
function _handleMove(event) {                                                                                          // 17685
    var velocity = -event.velocity;                                                                                    // 17686
    var delta = -event.delta;                                                                                          // 17687
                                                                                                                       // 17688
    if (this._onEdge !== EdgeStates.NONE && event.slip) {                                                              // 17689
        if ((velocity < 0 && this._onEdge === EdgeStates.TOP) || (velocity > 0 && this._onEdge === EdgeStates.BOTTOM)) {
            if (!this._earlyEnd) {                                                                                     // 17691
                _handleEnd.call(this, event);                                                                          // 17692
                this._earlyEnd = true;                                                                                 // 17693
            }                                                                                                          // 17694
        }                                                                                                              // 17695
        else if (this._earlyEnd && (Math.abs(velocity) > Math.abs(this.getVelocity()))) {                              // 17696
            _handleStart.call(this, event);                                                                            // 17697
        }                                                                                                              // 17698
    }                                                                                                                  // 17699
    if (this._earlyEnd) return;                                                                                        // 17700
    this._touchVelocity = velocity;                                                                                    // 17701
                                                                                                                       // 17702
    if (event.slip) {                                                                                                  // 17703
        var speedLimit = this.options.speedLimit;                                                                      // 17704
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17705
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17706
                                                                                                                       // 17707
        this.setVelocity(velocity);                                                                                    // 17708
                                                                                                                       // 17709
        var deltaLimit = speedLimit * 16;                                                                              // 17710
        if (delta > deltaLimit) delta = deltaLimit;                                                                    // 17711
        else if (delta < -deltaLimit) delta = -deltaLimit;                                                             // 17712
    }                                                                                                                  // 17713
                                                                                                                       // 17714
    this.setPosition(this.getPosition() + delta);                                                                      // 17715
    this._displacement += delta;                                                                                       // 17716
                                                                                                                       // 17717
    if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                           // 17718
}                                                                                                                      // 17719
                                                                                                                       // 17720
function _handleEnd(event) {                                                                                           // 17721
    this._touchCount = event.count || 0;                                                                               // 17722
    if (!this._touchCount) {                                                                                           // 17723
        _detachAgents.call(this);                                                                                      // 17724
        if (this._onEdge !== EdgeStates.NONE) _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);      // 17725
        _attachAgents.call(this);                                                                                      // 17726
        var velocity = -event.velocity;                                                                                // 17727
        var speedLimit = this.options.speedLimit;                                                                      // 17728
        if (event.slip) speedLimit *= this.options.edgeGrip;                                                           // 17729
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17730
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17731
        this.setVelocity(velocity);                                                                                    // 17732
        this._touchVelocity = 0;                                                                                       // 17733
        this._needsPaginationCheck = true;                                                                             // 17734
    }                                                                                                                  // 17735
}                                                                                                                      // 17736
                                                                                                                       // 17737
function _bindEvents() {                                                                                               // 17738
    this._eventInput.bindThis(this);                                                                                   // 17739
    this._eventInput.on('start', _handleStart);                                                                        // 17740
    this._eventInput.on('update', _handleMove);                                                                        // 17741
    this._eventInput.on('end', _handleEnd);                                                                            // 17742
                                                                                                                       // 17743
    this._eventInput.on('resize', function() {                                                                         // 17744
        this._node._.calculateSize();                                                                                  // 17745
    }.bind(this));                                                                                                     // 17746
                                                                                                                       // 17747
    this._scroller.on('onEdge', function(data) {                                                                       // 17748
        this._edgeSpringPosition = data.position;                                                                      // 17749
        _handleEdge.call(this, this._scroller.onEdge());                                                               // 17750
        this._eventOutput.emit('onEdge');                                                                              // 17751
    }.bind(this));                                                                                                     // 17752
                                                                                                                       // 17753
    this._scroller.on('offEdge', function() {                                                                          // 17754
        this.sync.setOptions({scale: this.options.syncScale});                                                         // 17755
        this._onEdge = this._scroller.onEdge();                                                                        // 17756
        this._eventOutput.emit('offEdge');                                                                             // 17757
    }.bind(this));                                                                                                     // 17758
                                                                                                                       // 17759
    this._particle.on('update', function(particle) {                                                                   // 17760
        if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                       // 17761
        this._displacement = particle.position.x - this._totalShift;                                                   // 17762
    }.bind(this));                                                                                                     // 17763
                                                                                                                       // 17764
    this._particle.on('end', function() {                                                                              // 17765
        if (!this.options.paginated || (this.options.paginated && this._springState !== SpringStates.NONE))            // 17766
            this._eventOutput.emit('settle');                                                                          // 17767
    }.bind(this));                                                                                                     // 17768
}                                                                                                                      // 17769
                                                                                                                       // 17770
function _attachAgents() {                                                                                             // 17771
    if (this._springState) this._physicsEngine.attach([this.spring], this._particle);                                  // 17772
    else this._physicsEngine.attach([this.drag, this.friction], this._particle);                                       // 17773
}                                                                                                                      // 17774
                                                                                                                       // 17775
function _detachAgents() {                                                                                             // 17776
    this._springState = SpringStates.NONE;                                                                             // 17777
    this._physicsEngine.detachAll();                                                                                   // 17778
}                                                                                                                      // 17779
                                                                                                                       // 17780
function _nodeSizeForDirection(node) {                                                                                 // 17781
    var direction = this.options.direction;                                                                            // 17782
    var nodeSize = node.getSize();                                                                                     // 17783
    return (!nodeSize) ? this._scroller.getSize()[direction] : nodeSize[direction];                                    // 17784
}                                                                                                                      // 17785
                                                                                                                       // 17786
function _handleEdge(edge) {                                                                                           // 17787
    this.sync.setOptions({scale: this.options.edgeGrip});                                                              // 17788
    this._onEdge = edge;                                                                                               // 17789
                                                                                                                       // 17790
    if (!this._touchCount && this._springState !== SpringStates.EDGE) {                                                // 17791
        _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);                                            // 17792
    }                                                                                                                  // 17793
                                                                                                                       // 17794
    if (this._springState && Math.abs(this.getVelocity()) < 0.001) {                                                   // 17795
        // reset agents, detaching the spring                                                                          // 17796
        _detachAgents.call(this);                                                                                      // 17797
        _attachAgents.call(this);                                                                                      // 17798
    }                                                                                                                  // 17799
}                                                                                                                      // 17800
                                                                                                                       // 17801
function _handlePagination() {                                                                                         // 17802
    if (this._touchCount) return;                                                                                      // 17803
    if (this._springState === SpringStates.EDGE) return;                                                               // 17804
                                                                                                                       // 17805
    var velocity = this.getVelocity();                                                                                 // 17806
    if (Math.abs(velocity) >= this.options.pageStopSpeed) return;                                                      // 17807
                                                                                                                       // 17808
    var position = this.getPosition();                                                                                 // 17809
    var velocitySwitch = Math.abs(velocity) > this.options.pageSwitchSpeed;                                            // 17810
                                                                                                                       // 17811
    // parameters to determine when to switch                                                                          // 17812
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17813
    var positionNext = position > 0.5 * nodeSize;                                                                      // 17814
    var positionPrev = position < 0.5 * nodeSize;                                                                      // 17815
                                                                                                                       // 17816
    var velocityNext = velocity > 0;                                                                                   // 17817
    var velocityPrev = velocity < 0;                                                                                   // 17818
                                                                                                                       // 17819
    this._needsPaginationCheck = false;                                                                                // 17820
                                                                                                                       // 17821
    if ((positionNext && !velocitySwitch) || (velocitySwitch && velocityNext)) {                                       // 17822
        this.goToNextPage();                                                                                           // 17823
    }                                                                                                                  // 17824
    else if (velocitySwitch && velocityPrev) {                                                                         // 17825
        this.goToPreviousPage();                                                                                       // 17826
    }                                                                                                                  // 17827
    else _setSpring.call(this, 0, SpringStates.PAGE);                                                                  // 17828
}                                                                                                                      // 17829
                                                                                                                       // 17830
function _setSpring(position, springState) {                                                                           // 17831
    var springOptions;                                                                                                 // 17832
    if (springState === SpringStates.EDGE) {                                                                           // 17833
        this._edgeSpringPosition = position;                                                                           // 17834
        springOptions = {                                                                                              // 17835
            anchor: [this._edgeSpringPosition, 0, 0],                                                                  // 17836
            period: this.options.edgePeriod,                                                                           // 17837
            dampingRatio: this.options.edgeDamp                                                                        // 17838
        };                                                                                                             // 17839
    }                                                                                                                  // 17840
    else if (springState === SpringStates.PAGE) {                                                                      // 17841
        this._pageSpringPosition = position;                                                                           // 17842
        springOptions = {                                                                                              // 17843
            anchor: [this._pageSpringPosition, 0, 0],                                                                  // 17844
            period: this.options.pagePeriod,                                                                           // 17845
            dampingRatio: this.options.pageDamp                                                                        // 17846
        };                                                                                                             // 17847
    }                                                                                                                  // 17848
                                                                                                                       // 17849
    this.spring.setOptions(springOptions);                                                                             // 17850
    if (springState && !this._springState) {                                                                           // 17851
        _detachAgents.call(this);                                                                                      // 17852
        this._springState = springState;                                                                               // 17853
        _attachAgents.call(this);                                                                                      // 17854
    }                                                                                                                  // 17855
    this._springState = springState;                                                                                   // 17856
}                                                                                                                      // 17857
                                                                                                                       // 17858
function _normalizeState() {                                                                                           // 17859
    var offset = 0;                                                                                                    // 17860
                                                                                                                       // 17861
    var position = this.getPosition();                                                                                 // 17862
    position += (position < 0 ? -0.5 : 0.5) >> 0;                                                                      // 17863
                                                                                                                       // 17864
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17865
    var nextNode = this._node.getNext();                                                                               // 17866
                                                                                                                       // 17867
    while (offset + position >= nodeSize && nextNode) {                                                                // 17868
        offset -= nodeSize;                                                                                            // 17869
        this._scroller.sequenceFrom(nextNode);                                                                         // 17870
        this._node = nextNode;                                                                                         // 17871
        nextNode = this._node.getNext();                                                                               // 17872
        nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17873
    }                                                                                                                  // 17874
                                                                                                                       // 17875
    var previousNode = this._node.getPrevious();                                                                       // 17876
    var previousNodeSize;                                                                                              // 17877
                                                                                                                       // 17878
    while (offset + position <= 0 && previousNode) {                                                                   // 17879
        previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                             // 17880
        this._scroller.sequenceFrom(previousNode);                                                                     // 17881
        this._node = previousNode;                                                                                     // 17882
        offset += previousNodeSize;                                                                                    // 17883
        previousNode = this._node.getPrevious();                                                                       // 17884
    }                                                                                                                  // 17885
                                                                                                                       // 17886
    if (offset) _shiftOrigin.call(this, offset);                                                                       // 17887
                                                                                                                       // 17888
    if (this._node) {                                                                                                  // 17889
        if (this._node.index !== this._cachedIndex) {                                                                  // 17890
            if (this.getPosition() < 0.5 * nodeSize) {                                                                 // 17891
                this._cachedIndex = this._node.index;                                                                  // 17892
                this._eventOutput.emit('pageChange', {direction: -1, index: this._cachedIndex});                       // 17893
            }                                                                                                          // 17894
        } else {                                                                                                       // 17895
            if (this.getPosition() > 0.5 * nodeSize) {                                                                 // 17896
                this._cachedIndex = this._node.index + 1;                                                              // 17897
                this._eventOutput.emit('pageChange', {direction: 1, index: this._cachedIndex});                        // 17898
            }                                                                                                          // 17899
        }                                                                                                              // 17900
    }                                                                                                                  // 17901
}                                                                                                                      // 17902
                                                                                                                       // 17903
function _shiftOrigin(amount) {                                                                                        // 17904
    this._edgeSpringPosition += amount;                                                                                // 17905
    this._pageSpringPosition += amount;                                                                                // 17906
    this.setPosition(this.getPosition() + amount);                                                                     // 17907
    this._totalShift += amount;                                                                                        // 17908
                                                                                                                       // 17909
    if (this._springState === SpringStates.EDGE) {                                                                     // 17910
        this.spring.setOptions({anchor: [this._edgeSpringPosition, 0, 0]});                                            // 17911
    }                                                                                                                  // 17912
    else if (this._springState === SpringStates.PAGE) {                                                                // 17913
        this.spring.setOptions({anchor: [this._pageSpringPosition, 0, 0]});                                            // 17914
    }                                                                                                                  // 17915
}                                                                                                                      // 17916
                                                                                                                       // 17917
/**                                                                                                                    // 17918
 * Returns the index of the first visible renderable                                                                   // 17919
 *                                                                                                                     // 17920
 * @method getCurrentIndex                                                                                             // 17921
 * @return {Number} The current index of the ViewSequence                                                              // 17922
 */                                                                                                                    // 17923
Scrollview.prototype.getCurrentIndex = function getCurrentIndex() {                                                    // 17924
    return this._node.index;                                                                                           // 17925
};                                                                                                                     // 17926
                                                                                                                       // 17927
/**                                                                                                                    // 17928
 * goToPreviousPage paginates your Scrollview instance backwards by one item.                                          // 17929
 *                                                                                                                     // 17930
 * @method goToPreviousPage                                                                                            // 17931
 * @return {ViewSequence} The previous node.                                                                           // 17932
 */                                                                                                                    // 17933
Scrollview.prototype.goToPreviousPage = function goToPreviousPage() {                                                  // 17934
    if (!this._node || this._onEdge === EdgeStates.TOP) return null;                                                   // 17935
                                                                                                                       // 17936
    // if moving back to the current node                                                                              // 17937
    if (this.getPosition() > 1 && this._springState === SpringStates.NONE) {                                           // 17938
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17939
        return this._node;                                                                                             // 17940
    }                                                                                                                  // 17941
                                                                                                                       // 17942
    // if moving to the previous node                                                                                  // 17943
    var previousNode = this._node.getPrevious();                                                                       // 17944
    if (previousNode) {                                                                                                // 17945
        var previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                         // 17946
        this._scroller.sequenceFrom(previousNode);                                                                     // 17947
        this._node = previousNode;                                                                                     // 17948
        _shiftOrigin.call(this, previousNodeSize);                                                                     // 17949
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17950
    }                                                                                                                  // 17951
    return previousNode;                                                                                               // 17952
};                                                                                                                     // 17953
                                                                                                                       // 17954
/**                                                                                                                    // 17955
 * goToNextPage paginates your Scrollview instance forwards by one item.                                               // 17956
 *                                                                                                                     // 17957
 * @method goToNextPage                                                                                                // 17958
 * @return {ViewSequence} The next node.                                                                               // 17959
 */                                                                                                                    // 17960
Scrollview.prototype.goToNextPage = function goToNextPage() {                                                          // 17961
    if (!this._node || this._onEdge === EdgeStates.BOTTOM) return null;                                                // 17962
    var nextNode = this._node.getNext();                                                                               // 17963
    if (nextNode) {                                                                                                    // 17964
        var currentNodeSize = _nodeSizeForDirection.call(this, this._node);                                            // 17965
        this._scroller.sequenceFrom(nextNode);                                                                         // 17966
        this._node = nextNode;                                                                                         // 17967
        _shiftOrigin.call(this, -currentNodeSize);                                                                     // 17968
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 17969
    }                                                                                                                  // 17970
    return nextNode;                                                                                                   // 17971
};                                                                                                                     // 17972
                                                                                                                       // 17973
/**                                                                                                                    // 17974
 * Paginates the Scrollview to an absolute page index.                                                                 // 17975
 *                                                                                                                     // 17976
 * @method goToPage                                                                                                    // 17977
 */                                                                                                                    // 17978
Scrollview.prototype.goToPage = function goToPage(index) {                                                             // 17979
    var currentIndex = this.getCurrentIndex();                                                                         // 17980
    var i;                                                                                                             // 17981
                                                                                                                       // 17982
    if (currentIndex > index) {                                                                                        // 17983
        for (i = 0; i < currentIndex - index; i++)                                                                     // 17984
            this.goToPreviousPage();                                                                                   // 17985
    }                                                                                                                  // 17986
                                                                                                                       // 17987
    if (currentIndex < index) {                                                                                        // 17988
        for (i = 0; i < index - currentIndex; i++)                                                                     // 17989
            this.goToNextPage();                                                                                       // 17990
    }                                                                                                                  // 17991
};                                                                                                                     // 17992
                                                                                                                       // 17993
Scrollview.prototype.outputFrom = function outputFrom() {                                                              // 17994
    return this._scroller.outputFrom.apply(this._scroller, arguments);                                                 // 17995
};                                                                                                                     // 17996
                                                                                                                       // 17997
/**                                                                                                                    // 17998
 * Returns the position associated with the Scrollview instance's current node                                         // 17999
 *  (generally the node currently at the top).                                                                         // 18000
 *                                                                                                                     // 18001
 * @deprecated                                                                                                         // 18002
 * @method getPosition                                                                                                 // 18003
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 18004
 * Scrollview instance's currently managed collection.                                                                 // 18005
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 18006
 * in pixels translated.                                                                                               // 18007
 */                                                                                                                    // 18008
Scrollview.prototype.getPosition = function getPosition() {                                                            // 18009
    return this._particle.getPosition1D();                                                                             // 18010
};                                                                                                                     // 18011
                                                                                                                       // 18012
/**                                                                                                                    // 18013
 * Returns the absolute position associated with the Scrollview instance                                               // 18014
 *                                                                                                                     // 18015
 * @method getAbsolutePosition                                                                                         // 18016
 * @return {number} The position of the Scrollview's current Node,                                                     // 18017
 * in pixels translated.                                                                                               // 18018
 */                                                                                                                    // 18019
Scrollview.prototype.getAbsolutePosition = function getAbsolutePosition() {                                            // 18020
    return this._scroller.getCumulativeSize(this.getCurrentIndex())[this.options.direction] + this.getPosition();      // 18021
};                                                                                                                     // 18022
                                                                                                                       // 18023
/**                                                                                                                    // 18024
 * Returns the offset associated with the Scrollview instance's current node                                           // 18025
 *  (generally the node currently at the top).                                                                         // 18026
 *                                                                                                                     // 18027
 * @method getOffset                                                                                                   // 18028
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 18029
 * Scrollview instance's currently managed collection.                                                                 // 18030
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 18031
 * in pixels translated.                                                                                               // 18032
 */                                                                                                                    // 18033
Scrollview.prototype.getOffset = Scrollview.prototype.getPosition;                                                     // 18034
                                                                                                                       // 18035
/**                                                                                                                    // 18036
 * Sets the position of the physics particle that controls Scrollview instance's "position"                            // 18037
 *                                                                                                                     // 18038
 * @deprecated                                                                                                         // 18039
 * @method setPosition                                                                                                 // 18040
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 18041
 */                                                                                                                    // 18042
Scrollview.prototype.setPosition = function setPosition(x) {                                                           // 18043
    this._particle.setPosition1D(x);                                                                                   // 18044
};                                                                                                                     // 18045
                                                                                                                       // 18046
/**                                                                                                                    // 18047
 * Sets the offset of the physics particle that controls Scrollview instance's "position"                              // 18048
 *                                                                                                                     // 18049
 * @method setPosition                                                                                                 // 18050
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 18051
 */                                                                                                                    // 18052
Scrollview.prototype.setOffset = Scrollview.prototype.setPosition;                                                     // 18053
                                                                                                                       // 18054
/**                                                                                                                    // 18055
 * Returns the Scrollview instance's velocity.                                                                         // 18056
 *                                                                                                                     // 18057
 * @method getVelocity                                                                                                 // 18058
 * @return {Number} The velocity.                                                                                      // 18059
 */                                                                                                                    // 18060
                                                                                                                       // 18061
Scrollview.prototype.getVelocity = function getVelocity() {                                                            // 18062
    return this._touchCount ? this._touchVelocity : this._particle.getVelocity1D();                                    // 18063
};                                                                                                                     // 18064
                                                                                                                       // 18065
/**                                                                                                                    // 18066
 * Sets the Scrollview instance's velocity. Until affected by input or another call of setVelocity                     // 18067
 *  the Scrollview instance will scroll at the passed-in velocity.                                                     // 18068
 *                                                                                                                     // 18069
 * @method setVelocity                                                                                                 // 18070
 * @param {number} v The magnitude of the velocity.                                                                    // 18071
 */                                                                                                                    // 18072
Scrollview.prototype.setVelocity = function setVelocity(v) {                                                           // 18073
    this._particle.setVelocity1D(v);                                                                                   // 18074
};                                                                                                                     // 18075
                                                                                                                       // 18076
/**                                                                                                                    // 18077
 * Patches the Scrollview instance's options with the passed-in ones.                                                  // 18078
 *                                                                                                                     // 18079
 * @method setOptions                                                                                                  // 18080
 * @param {Options} options An object of configurable options for the Scrollview instance.                             // 18081
 */                                                                                                                    // 18082
Scrollview.prototype.setOptions = function setOptions(options) {                                                       // 18083
    // preprocess custom options                                                                                       // 18084
    if (options.direction !== undefined) {                                                                             // 18085
        if (options.direction === 'x') options.direction = Utility.Direction.X;                                        // 18086
        else if (options.direction === 'y') options.direction = Utility.Direction.Y;                                   // 18087
    }                                                                                                                  // 18088
                                                                                                                       // 18089
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 18090
        if (options.groupScroll)                                                                                       // 18091
            this.subscribe(this._scroller);                                                                            // 18092
        else                                                                                                           // 18093
            this.unsubscribe(this._scroller);                                                                          // 18094
    }                                                                                                                  // 18095
                                                                                                                       // 18096
    // patch custom options                                                                                            // 18097
    this._optionsManager.setOptions(options);                                                                          // 18098
                                                                                                                       // 18099
    // propagate options to sub-components                                                                             // 18100
                                                                                                                       // 18101
    // scroller sub-component                                                                                          // 18102
    this._scroller.setOptions(options);                                                                                // 18103
                                                                                                                       // 18104
    // physics sub-components                                                                                          // 18105
    if (options.drag !== undefined) this.drag.setOptions({strength: this.options.drag});                               // 18106
    if (options.friction !== undefined) this.friction.setOptions({strength: this.options.friction});                   // 18107
    if (options.edgePeriod !== undefined || options.edgeDamp !== undefined) {                                          // 18108
        this.spring.setOptions({                                                                                       // 18109
            period: this.options.edgePeriod,                                                                           // 18110
            dampingRatio: this.options.edgeDamp                                                                        // 18111
        });                                                                                                            // 18112
    }                                                                                                                  // 18113
                                                                                                                       // 18114
    // sync sub-component                                                                                              // 18115
    if (options.rails || options.direction !== undefined || options.syncScale !== undefined || options.preventDefault) {
        this.sync.setOptions({                                                                                         // 18117
            rails: this.options.rails,                                                                                 // 18118
            direction: (this.options.direction === Utility.Direction.X) ? GenericSync.DIRECTION_X : GenericSync.DIRECTION_Y,
            scale: this.options.syncScale,                                                                             // 18120
            preventDefault: this.options.preventDefault                                                                // 18121
        });                                                                                                            // 18122
    }                                                                                                                  // 18123
};                                                                                                                     // 18124
                                                                                                                       // 18125
/**                                                                                                                    // 18126
 * Sets the collection of renderables under the Scrollview instance's control, by                                      // 18127
 *  setting its current node to the passed in ViewSequence. If you                                                     // 18128
 *  pass in an array, the Scrollview instance will set its node as a ViewSequence instantiated with                    // 18129
 *  the passed-in array.                                                                                               // 18130
 *                                                                                                                     // 18131
 * @method sequenceFrom                                                                                                // 18132
 * @param {Array|ViewSequence} node Either an array of renderables or a Famous viewSequence.                           // 18133
 */                                                                                                                    // 18134
Scrollview.prototype.sequenceFrom = function sequenceFrom(node) {                                                      // 18135
    if (node instanceof Array) node = new ViewSequence({array: node, trackSize: true});                                // 18136
    this._node = node;                                                                                                 // 18137
    return this._scroller.sequenceFrom(node);                                                                          // 18138
};                                                                                                                     // 18139
                                                                                                                       // 18140
/**                                                                                                                    // 18141
 * Returns the width and the height of the Scrollview instance.                                                        // 18142
 *                                                                                                                     // 18143
 * @method getSize                                                                                                     // 18144
 * @return {Array} A two value array of the Scrollview instance's current width and height (in that order).            // 18145
 */                                                                                                                    // 18146
Scrollview.prototype.getSize = function getSize() {                                                                    // 18147
    return this._scroller.getSize.apply(this._scroller, arguments);                                                    // 18148
};                                                                                                                     // 18149
                                                                                                                       // 18150
/**                                                                                                                    // 18151
 * Generate a render spec from the contents of this component.                                                         // 18152
 *                                                                                                                     // 18153
 * @private                                                                                                            // 18154
 * @method render                                                                                                      // 18155
 * @return {number} Render spec for this component                                                                     // 18156
 */                                                                                                                    // 18157
Scrollview.prototype.render = function render() {                                                                      // 18158
    if (this.options.paginated && this._needsPaginationCheck) _handlePagination.call(this);                            // 18159
                                                                                                                       // 18160
    return this._scroller.render();                                                                                    // 18161
};                                                                                                                     // 18162
                                                                                                                       // 18163
module.exports = Scrollview;                                                                                           // 18164
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/ViewSequence":17,"../inputs/GenericSync":27,"../inputs/ScrollSync":32,"../inputs/TouchSync":33,"../physics/PhysicsEngine":48,"../physics/bodies/Particle":51,"../physics/forces/Drag":63,"../physics/forces/Spring":68,"../utilities/Utility":95,"../views/Scroller":108}],110:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18166
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18167
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18168
 *                                                                                                                     // 18169
 * Owner: felix@famo.us                                                                                                // 18170
 * @license MPL 2.0                                                                                                    // 18171
 * @copyright Famous Industries, Inc. 2014                                                                             // 18172
 */                                                                                                                    // 18173
                                                                                                                       // 18174
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 18175
var Transform = _dereq_('../core/Transform');                                                                          // 18176
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 18177
var Utility = _dereq_('../utilities/Utility');                                                                         // 18178
                                                                                                                       // 18179
/**                                                                                                                    // 18180
 * SequentialLayout will lay out a collection of renderables sequentially in the specified direction.                  // 18181
 * @class SequentialLayout                                                                                             // 18182
 * @constructor                                                                                                        // 18183
 * @param {Options} [options] An object of configurable options.                                                       // 18184
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 18185
 * module, this option will lay out the SequentialLayout instance's renderables either horizontally                    // 18186
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 18187
 * to just use integers as well.                                                                                       // 18188
 */                                                                                                                    // 18189
function SequentialLayout(options) {                                                                                   // 18190
    this._items = null;                                                                                                // 18191
    this._size = null;                                                                                                 // 18192
    this._outputFunction = SequentialLayout.DEFAULT_OUTPUT_FUNCTION;                                                   // 18193
                                                                                                                       // 18194
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || SequentialLayout.DEFAULT_OPTIONS);                // 18195
    this.optionsManager = new OptionsManager(this.options);                                                            // 18196
                                                                                                                       // 18197
    if (options) this.setOptions(options);                                                                             // 18198
}                                                                                                                      // 18199
                                                                                                                       // 18200
SequentialLayout.DEFAULT_OPTIONS = {                                                                                   // 18201
    direction: Utility.Direction.Y,                                                                                    // 18202
    itemSpacing: 0                                                                                                     // 18203
};                                                                                                                     // 18204
                                                                                                                       // 18205
SequentialLayout.DEFAULT_OUTPUT_FUNCTION = function DEFAULT_OUTPUT_FUNCTION(input, offset, index) {                    // 18206
    var transform = (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
    return {                                                                                                           // 18208
        transform: transform,                                                                                          // 18209
        target: input.render()                                                                                         // 18210
    };                                                                                                                 // 18211
};                                                                                                                     // 18212
                                                                                                                       // 18213
/**                                                                                                                    // 18214
 * Returns the width and the height of the SequentialLayout instance.                                                  // 18215
 *                                                                                                                     // 18216
 * @method getSize                                                                                                     // 18217
 * @return {Array} A two value array of the SequentialLayout instance's current width and height (in that order).      // 18218
 */                                                                                                                    // 18219
SequentialLayout.prototype.getSize = function getSize() {                                                              // 18220
    if (!this._size) this.render(); // hack size in                                                                    // 18221
    return this._size;                                                                                                 // 18222
};                                                                                                                     // 18223
                                                                                                                       // 18224
/**                                                                                                                    // 18225
 * Sets the collection of renderables under the SequentialLayout instance's control.                                   // 18226
 *                                                                                                                     // 18227
 * @method sequenceFrom                                                                                                // 18228
 * @param {Array|ViewSequence} items Either an array of renderables or a Famous viewSequence.                          // 18229
 * @chainable                                                                                                          // 18230
 */                                                                                                                    // 18231
SequentialLayout.prototype.sequenceFrom = function sequenceFrom(items) {                                               // 18232
    if (items instanceof Array) items = new ViewSequence(items);                                                       // 18233
    this._items = items;                                                                                               // 18234
    return this;                                                                                                       // 18235
};                                                                                                                     // 18236
                                                                                                                       // 18237
/**                                                                                                                    // 18238
 * Patches the SequentialLayout instance's options with the passed-in ones.                                            // 18239
 *                                                                                                                     // 18240
 * @method setOptions                                                                                                  // 18241
 * @param {Options} options An object of configurable options for the SequentialLayout instance.                       // 18242
 * @chainable                                                                                                          // 18243
 */                                                                                                                    // 18244
SequentialLayout.prototype.setOptions = function setOptions(options) {                                                 // 18245
    this.optionsManager.setOptions.apply(this.optionsManager, arguments);                                              // 18246
    return this;                                                                                                       // 18247
};                                                                                                                     // 18248
                                                                                                                       // 18249
/**                                                                                                                    // 18250
 * setOutputFunction is used to apply a user-defined output transform on each processed renderable.                    // 18251
 *  For a good example, check out SequentialLayout's own DEFAULT_OUTPUT_FUNCTION in the code.                          // 18252
 *                                                                                                                     // 18253
 * @method setOutputFunction                                                                                           // 18254
 * @param {Function} outputFunction An output processer for each renderable in the SequentialLayout                    // 18255
 * instance.                                                                                                           // 18256
 * @chainable                                                                                                          // 18257
 */                                                                                                                    // 18258
SequentialLayout.prototype.setOutputFunction = function setOutputFunction(outputFunction) {                            // 18259
    this._outputFunction = outputFunction;                                                                             // 18260
    return this;                                                                                                       // 18261
};                                                                                                                     // 18262
                                                                                                                       // 18263
/**                                                                                                                    // 18264
 * Generate a render spec from the contents of this component.                                                         // 18265
 *                                                                                                                     // 18266
 * @private                                                                                                            // 18267
 * @method render                                                                                                      // 18268
 * @return {number} Render spec for this component                                                                     // 18269
 */                                                                                                                    // 18270
SequentialLayout.prototype.render = function render() {                                                                // 18271
    var length             = 0;                                                                                        // 18272
    var secondaryDirection = this.options.direction ^ 1;                                                               // 18273
    var currentNode        = this._items;                                                                              // 18274
    var item               = null;                                                                                     // 18275
    var itemSize           = [];                                                                                       // 18276
    var output             = {};                                                                                       // 18277
    var result             = [];                                                                                       // 18278
    var i                  = 0;                                                                                        // 18279
                                                                                                                       // 18280
    this._size = [0, 0];                                                                                               // 18281
                                                                                                                       // 18282
    while (currentNode) {                                                                                              // 18283
        item = currentNode.get();                                                                                      // 18284
        if (!item) break;                                                                                              // 18285
                                                                                                                       // 18286
        if (item.getSize) itemSize = item.getSize();                                                                   // 18287
                                                                                                                       // 18288
        output = this._outputFunction.call(this, item, length, i++);                                                   // 18289
        result.push(output);                                                                                           // 18290
                                                                                                                       // 18291
        if (itemSize) {                                                                                                // 18292
            if (itemSize[this.options.direction]) length += itemSize[this.options.direction];                          // 18293
            if (itemSize[secondaryDirection] > this._size[secondaryDirection]) this._size[secondaryDirection] = itemSize[secondaryDirection];
            if (itemSize[secondaryDirection] === 0) this._size[secondaryDirection] = undefined;                        // 18295
        }                                                                                                              // 18296
                                                                                                                       // 18297
        currentNode = currentNode.getNext();                                                                           // 18298
                                                                                                                       // 18299
        if (this.options.itemSpacing && currentNode) length += this.options.itemSpacing;                               // 18300
    }                                                                                                                  // 18301
                                                                                                                       // 18302
    this._size[this.options.direction] = length;                                                                       // 18303
                                                                                                                       // 18304
    return {                                                                                                           // 18305
        size: this.getSize(),                                                                                          // 18306
        target: result                                                                                                 // 18307
    };                                                                                                                 // 18308
};                                                                                                                     // 18309
                                                                                                                       // 18310
module.exports = SequentialLayout;                                                                                     // 18311
},{"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":95}],111:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 18313
  ContextualView: _dereq_('./ContextualView'),                                                                         // 18314
  Deck: _dereq_('./Deck'),                                                                                             // 18315
  DrawerLayout: _dereq_('./DrawerLayout'),                                                                             // 18316
  EdgeSwapper: _dereq_('./EdgeSwapper'),                                                                               // 18317
  FlexibleLayout: _dereq_('./FlexibleLayout'),                                                                         // 18318
  Flipper: _dereq_('./Flipper'),                                                                                       // 18319
  GridLayout: _dereq_('./GridLayout'),                                                                                 // 18320
  HeaderFooterLayout: _dereq_('./HeaderFooterLayout'),                                                                 // 18321
  Lightbox: _dereq_('./Lightbox'),                                                                                     // 18322
  RenderController: _dereq_('./RenderController'),                                                                     // 18323
  ScrollContainer: _dereq_('./ScrollContainer'),                                                                       // 18324
  Scroller: _dereq_('./Scroller'),                                                                                     // 18325
  Scrollview: _dereq_('./Scrollview'),                                                                                 // 18326
  SequentialLayout: _dereq_('./SequentialLayout')                                                                      // 18327
};                                                                                                                     // 18328
                                                                                                                       // 18329
},{"./ContextualView":97,"./Deck":98,"./DrawerLayout":99,"./EdgeSwapper":100,"./FlexibleLayout":101,"./Flipper":102,"./GridLayout":103,"./HeaderFooterLayout":104,"./Lightbox":105,"./RenderController":106,"./ScrollContainer":107,"./Scroller":108,"./Scrollview":109,"./SequentialLayout":110}],112:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18331
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18332
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18333
 *                                                                                                                     // 18334
 * Owner: mark@famo.us                                                                                                 // 18335
 * @license MPL 2.0                                                                                                    // 18336
 * @copyright Famous Industries, Inc. 2014                                                                             // 18337
 */                                                                                                                    // 18338
                                                                                                                       // 18339
var Scene = _dereq_('../core/Scene');                                                                                  // 18340
var Surface = _dereq_('../core/Surface');                                                                              // 18341
var Transform = _dereq_('../core/Transform');                                                                          // 18342
var View = _dereq_('../core/View');                                                                                    // 18343
                                                                                                                       // 18344
/**                                                                                                                    // 18345
 * A view for displaying the title of the current page                                                                 // 18346
 *  as well as icons for navigating backwards and opening                                                              // 18347
 *  further options                                                                                                    // 18348
 *                                                                                                                     // 18349
 * @class NavigationBar                                                                                                // 18350
 * @extends View                                                                                                       // 18351
 * @constructor                                                                                                        // 18352
 *                                                                                                                     // 18353
 * @param {object} [options] overrides of default options                                                              // 18354
 * @param {Array.number} [options.size=(undefined,0.5)] Size of the navigation bar and it's componenets.               // 18355
 * @param {Array.string} [options.backClasses=(back)] CSS Classes attached to back of Navigation.                      // 18356
 * @param {String} [options.backContent=(&#x25c0;)] Content of the back button.                                        // 18357
 * @param {Array.string} [options.classes=(navigation)] CSS Classes attached to the surfaces.                          // 18358
 * @param {String} [options.content] Content to pass into title bar.                                                   // 18359
 * @param {Array.string} [options.classes=(more)] CSS Classes attached to the More surface.                            // 18360
 * @param {String} [options.moreContent=(&#x271a;)] Content of the more button.                                        // 18361
 */                                                                                                                    // 18362
function NavigationBar(options) {                                                                                      // 18363
    View.apply(this, arguments);                                                                                       // 18364
                                                                                                                       // 18365
    this.title = new Surface({                                                                                         // 18366
        classes: this.options.classes,                                                                                 // 18367
        content: this.options.content                                                                                  // 18368
    });                                                                                                                // 18369
                                                                                                                       // 18370
    this.back = new Surface({                                                                                          // 18371
        size: [this.options.size[1], this.options.size[1]],                                                            // 18372
        classes: this.options.classes,                                                                                 // 18373
        content: this.options.backContent                                                                              // 18374
    });                                                                                                                // 18375
    this.back.on('click', function() {                                                                                 // 18376
        this._eventOutput.emit('back', {});                                                                            // 18377
    }.bind(this));                                                                                                     // 18378
                                                                                                                       // 18379
    this.more = new Surface({                                                                                          // 18380
        size: [this.options.size[1], this.options.size[1]],                                                            // 18381
        classes: this.options.classes,                                                                                 // 18382
        content: this.options.moreContent                                                                              // 18383
    });                                                                                                                // 18384
    this.more.on('click', function() {                                                                                 // 18385
        this._eventOutput.emit('more', {});                                                                            // 18386
    }.bind(this));                                                                                                     // 18387
                                                                                                                       // 18388
    this.layout = new Scene({                                                                                          // 18389
        id: 'master',                                                                                                  // 18390
        size: this.options.size,                                                                                       // 18391
        target: [                                                                                                      // 18392
            {                                                                                                          // 18393
                transform: Transform.inFront,                                                                          // 18394
                origin: [0, 0.5],                                                                                      // 18395
                align: [0, 0.5],                                                                                       // 18396
                target: this.back                                                                                      // 18397
            },                                                                                                         // 18398
            {                                                                                                          // 18399
                origin: [0.5, 0.5],                                                                                    // 18400
                align: [0.5, 0.5],                                                                                     // 18401
                target: this.title                                                                                     // 18402
            },                                                                                                         // 18403
            {                                                                                                          // 18404
                transform: Transform.inFront,                                                                          // 18405
                origin: [1, 0.5],                                                                                      // 18406
                align: [1, 0.5],                                                                                       // 18407
                target: this.more                                                                                      // 18408
            }                                                                                                          // 18409
        ]                                                                                                              // 18410
    });                                                                                                                // 18411
                                                                                                                       // 18412
    this._add(this.layout);                                                                                            // 18413
                                                                                                                       // 18414
    this._optionsManager.on('change', function(event) {                                                                // 18415
        var key = event.id;                                                                                            // 18416
        var data = event.value;                                                                                        // 18417
        if (key === 'size') {                                                                                          // 18418
            this.layout.id.master.setSize(data);                                                                       // 18419
            this.title.setSize(data);                                                                                  // 18420
            this.back.setSize([data[1], data[1]]);                                                                     // 18421
            this.more.setSize([data[1], data[1]]);                                                                     // 18422
        }                                                                                                              // 18423
        else if (key === 'backClasses') {                                                                              // 18424
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18425
        }                                                                                                              // 18426
        else if (key === 'backContent') {                                                                              // 18427
            this.back.setContent(this.options.backContent);                                                            // 18428
        }                                                                                                              // 18429
        else if (key === 'classes') {                                                                                  // 18430
            this.title.setOptions({classes: this.options.classes});                                                    // 18431
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18432
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18433
        }                                                                                                              // 18434
        else if (key === 'content') {                                                                                  // 18435
            this.setContent(this.options.content);                                                                     // 18436
        }                                                                                                              // 18437
        else if (key === 'moreClasses') {                                                                              // 18438
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18439
        }                                                                                                              // 18440
        else if (key === 'moreContent') {                                                                              // 18441
            this.more.setContent(this.options.content);                                                                // 18442
        }                                                                                                              // 18443
    }.bind(this));                                                                                                     // 18444
}                                                                                                                      // 18445
                                                                                                                       // 18446
NavigationBar.prototype = Object.create(View.prototype);                                                               // 18447
NavigationBar.prototype.constructor = NavigationBar;                                                                   // 18448
                                                                                                                       // 18449
NavigationBar.DEFAULT_OPTIONS = {                                                                                      // 18450
    size: [undefined, 50],                                                                                             // 18451
    backClasses: ['back'],                                                                                             // 18452
    backContent: '&#x25c0;',                                                                                           // 18453
    classes: ['navigation'],                                                                                           // 18454
    content: '',                                                                                                       // 18455
    moreClasses: ['more'],                                                                                             // 18456
    moreContent: '&#x271a;'                                                                                            // 18457
};                                                                                                                     // 18458
                                                                                                                       // 18459
/**                                                                                                                    // 18460
 * Set the title of the NavigationBar                                                                                  // 18461
 *                                                                                                                     // 18462
 * @method setContent                                                                                                  // 18463
 *                                                                                                                     // 18464
 * @param {object} content JSON object containing title information                                                    // 18465
 *                                                                                                                     // 18466
 * @return {undefined}                                                                                                 // 18467
 */                                                                                                                    // 18468
NavigationBar.prototype.setContent = function setContent(content) {                                                    // 18469
    return this.title.setContent(content);                                                                             // 18470
};                                                                                                                     // 18471
                                                                                                                       // 18472
module.exports = NavigationBar;                                                                                        // 18473
},{"../core/Scene":12,"../core/Surface":14,"../core/Transform":15,"../core/View":16}],113:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18475
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18476
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18477
 *                                                                                                                     // 18478
 * Owner: mark@famo.us                                                                                                 // 18479
 * @license MPL 2.0                                                                                                    // 18480
 * @copyright Famous Industries, Inc. 2014                                                                             // 18481
 */                                                                                                                    // 18482
                                                                                                                       // 18483
var Surface = _dereq_('../core/Surface');                                                                              // 18484
var CanvasSurface = _dereq_('../surfaces/CanvasSurface');                                                              // 18485
var Transform = _dereq_('../core/Transform');                                                                          // 18486
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 18487
var Utilities = _dereq_('../math/Utilities');                                                                          // 18488
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 18489
var MouseSync = _dereq_('../inputs/MouseSync');                                                                        // 18490
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 18491
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 18492
                                                                                                                       // 18493
GenericSync.register({                                                                                                 // 18494
    mouse : MouseSync,                                                                                                 // 18495
    touch : TouchSync                                                                                                  // 18496
});                                                                                                                    // 18497
                                                                                                                       // 18498
/** @constructor */                                                                                                    // 18499
function Slider(options) {                                                                                             // 18500
    this.options = Object.create(Slider.DEFAULT_OPTIONS);                                                              // 18501
    this.optionsManager = new OptionsManager(this.options);                                                            // 18502
    if (options) this.setOptions(options);                                                                             // 18503
                                                                                                                       // 18504
    this.indicator = new CanvasSurface({                                                                               // 18505
        size: this.options.indicatorSize,                                                                              // 18506
        classes : ['slider-back']                                                                                      // 18507
    });                                                                                                                // 18508
                                                                                                                       // 18509
    this.label = new Surface({                                                                                         // 18510
        size: this.options.labelSize,                                                                                  // 18511
        content: this.options.label,                                                                                   // 18512
        properties : {pointerEvents : 'none'},                                                                         // 18513
        classes: ['slider-label']                                                                                      // 18514
    });                                                                                                                // 18515
                                                                                                                       // 18516
    this.eventOutput = new EventHandler();                                                                             // 18517
    this.eventInput = new EventHandler();                                                                              // 18518
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 18519
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 18520
                                                                                                                       // 18521
    var scale = (this.options.range[1] - this.options.range[0]) / this.options.indicatorSize[0];                       // 18522
                                                                                                                       // 18523
    this.sync = new GenericSync(                                                                                       // 18524
        ['mouse', 'touch'],                                                                                            // 18525
        {                                                                                                              // 18526
            scale : scale,                                                                                             // 18527
            direction : GenericSync.DIRECTION_X                                                                        // 18528
        }                                                                                                              // 18529
    );                                                                                                                 // 18530
                                                                                                                       // 18531
    this.indicator.pipe(this.sync);                                                                                    // 18532
    this.sync.pipe(this);                                                                                              // 18533
                                                                                                                       // 18534
    this.eventInput.on('update', function(data) {                                                                      // 18535
        this.set(data.position);                                                                                       // 18536
    }.bind(this));                                                                                                     // 18537
                                                                                                                       // 18538
    this._drawPos = 0;                                                                                                 // 18539
    _updateLabel.call(this);                                                                                           // 18540
}                                                                                                                      // 18541
                                                                                                                       // 18542
Slider.DEFAULT_OPTIONS = {                                                                                             // 18543
    size: [200, 60],                                                                                                   // 18544
    indicatorSize: [200, 30],                                                                                          // 18545
    labelSize: [200, 30],                                                                                              // 18546
    range: [0, 1],                                                                                                     // 18547
    precision: 2,                                                                                                      // 18548
    value: 0,                                                                                                          // 18549
    label: '',                                                                                                         // 18550
    fillColor: 'rgba(170, 170, 170, 1)'                                                                                // 18551
};                                                                                                                     // 18552
                                                                                                                       // 18553
function _updateLabel() {                                                                                              // 18554
    this.label.setContent(this.options.label + '<span style="float: right">' + this.get().toFixed(this.options.precision) + '</span>');
}                                                                                                                      // 18556
                                                                                                                       // 18557
Slider.prototype.setOptions = function setOptions(options) {                                                           // 18558
    return this.optionsManager.setOptions(options);                                                                    // 18559
};                                                                                                                     // 18560
                                                                                                                       // 18561
Slider.prototype.get = function get() {                                                                                // 18562
    return this.options.value;                                                                                         // 18563
};                                                                                                                     // 18564
                                                                                                                       // 18565
Slider.prototype.set = function set(value) {                                                                           // 18566
    if (value === this.options.value) return;                                                                          // 18567
    this.options.value = Utilities.clamp(value, this.options.range);                                                   // 18568
    _updateLabel.call(this);                                                                                           // 18569
    this.eventOutput.emit('change', {value: value});                                                                   // 18570
};                                                                                                                     // 18571
                                                                                                                       // 18572
Slider.prototype.getSize = function getSize() {                                                                        // 18573
    return this.options.size;                                                                                          // 18574
};                                                                                                                     // 18575
                                                                                                                       // 18576
Slider.prototype.render = function render() {                                                                          // 18577
    var range = this.options.range;                                                                                    // 18578
    var fillSize = Math.floor(((this.get() - range[0]) / (range[1] - range[0])) * this.options.indicatorSize[0]);      // 18579
                                                                                                                       // 18580
    if (fillSize < this._drawPos) {                                                                                    // 18581
        this.indicator.getContext('2d').clearRect(fillSize, 0, this._drawPos - fillSize + 1, this.options.indicatorSize[1]);
    }                                                                                                                  // 18583
    else if (fillSize > this._drawPos) {                                                                               // 18584
        var ctx = this.indicator.getContext('2d');                                                                     // 18585
        ctx.fillStyle = this.options.fillColor;                                                                        // 18586
        ctx.fillRect(this._drawPos-1, 0, fillSize - this._drawPos+1, this.options.indicatorSize[1]);                   // 18587
    }                                                                                                                  // 18588
    this._drawPos = fillSize;                                                                                          // 18589
                                                                                                                       // 18590
    return {                                                                                                           // 18591
        size: this.options.size,                                                                                       // 18592
        target: [                                                                                                      // 18593
            {                                                                                                          // 18594
                origin: [0, 0],                                                                                        // 18595
                target: this.indicator.render()                                                                        // 18596
            },                                                                                                         // 18597
            {                                                                                                          // 18598
                transform: Transform.translate(0, 0, 1),                                                               // 18599
                origin: [0, 0],                                                                                        // 18600
                target: this.label.render()                                                                            // 18601
            }                                                                                                          // 18602
        ]                                                                                                              // 18603
    };                                                                                                                 // 18604
};                                                                                                                     // 18605
                                                                                                                       // 18606
module.exports = Slider;                                                                                               // 18607
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Surface":14,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":33,"../math/Utilities":40,"../surfaces/CanvasSurface":74}],114:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18609
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18610
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18611
 *                                                                                                                     // 18612
 * Owner: mark@famo.us                                                                                                 // 18613
 * @license MPL 2.0                                                                                                    // 18614
 * @copyright Famous Industries, Inc. 2014                                                                             // 18615
 */                                                                                                                    // 18616
                                                                                                                       // 18617
var Utility = _dereq_('../utilities/Utility');                                                                         // 18618
var View = _dereq_('../core/View');                                                                                    // 18619
var GridLayout = _dereq_('../views/GridLayout');                                                                       // 18620
var ToggleButton = _dereq_('./ToggleButton');                                                                          // 18621
                                                                                                                       // 18622
/**                                                                                                                    // 18623
 * A view for displaying various tabs that dispatch events                                                             // 18624
 *  based on the id of the button that was clicked                                                                     // 18625
 *                                                                                                                     // 18626
 * @class TabBar                                                                                                       // 18627
 * @extends View                                                                                                       // 18628
 * @constructor                                                                                                        // 18629
 *                                                                                                                     // 18630
 * @param {object} options overrides of default options                                                                // 18631
 */                                                                                                                    // 18632
function TabBar(options) {                                                                                             // 18633
    View.apply(this, arguments);                                                                                       // 18634
                                                                                                                       // 18635
    this.layout = new GridLayout();                                                                                    // 18636
    this.buttons = [];                                                                                                 // 18637
    this._buttonIds = {};                                                                                              // 18638
    this._buttonCallbacks = {};                                                                                        // 18639
                                                                                                                       // 18640
    this.layout.sequenceFrom(this.buttons);                                                                            // 18641
    this._add(this.layout);                                                                                            // 18642
                                                                                                                       // 18643
    this._optionsManager.on('change', _updateOptions.bind(this));                                                      // 18644
}                                                                                                                      // 18645
                                                                                                                       // 18646
TabBar.prototype = Object.create(View.prototype);                                                                      // 18647
TabBar.prototype.constructor = TabBar;                                                                                 // 18648
                                                                                                                       // 18649
TabBar.DEFAULT_OPTIONS = {                                                                                             // 18650
    sections: [],                                                                                                      // 18651
    widget: ToggleButton,                                                                                              // 18652
    size: [undefined, 50],                                                                                             // 18653
    direction: Utility.Direction.X,                                                                                    // 18654
    buttons: {                                                                                                         // 18655
        toggleMode: ToggleButton.ON                                                                                    // 18656
    }                                                                                                                  // 18657
};                                                                                                                     // 18658
                                                                                                                       // 18659
/**                                                                                                                    // 18660
 * Update the options for all components of the view                                                                   // 18661
 *                                                                                                                     // 18662
 * @method _updateOptions                                                                                              // 18663
 *                                                                                                                     // 18664
 * @param {object} data component options                                                                              // 18665
 */                                                                                                                    // 18666
function _updateOptions(data) {                                                                                        // 18667
    var id = data.id;                                                                                                  // 18668
    var value = data.value;                                                                                            // 18669
                                                                                                                       // 18670
    if (id === 'direction') {                                                                                          // 18671
        this.layout.setOptions({dimensions: _resolveGridDimensions.call(this.buttons.length, this.options.direction)});
    }                                                                                                                  // 18673
    else if (id === 'buttons') {                                                                                       // 18674
        for (var i in this.buttons) {                                                                                  // 18675
            this.buttons[i].setOptions(value);                                                                         // 18676
        }                                                                                                              // 18677
    }                                                                                                                  // 18678
    else if (id === 'sections') {                                                                                      // 18679
        for (var sectionId in this.options.sections) {                                                                 // 18680
            this.defineSection(sectionId, this.options.sections[sectionId]);                                           // 18681
        }                                                                                                              // 18682
    }                                                                                                                  // 18683
}                                                                                                                      // 18684
                                                                                                                       // 18685
/**                                                                                                                    // 18686
 * Return an array of the proper dimensions for the tabs                                                               // 18687
 *                                                                                                                     // 18688
 * @method _resolveGridDimensions                                                                                      // 18689
 *                                                                                                                     // 18690
 * @param {number} count number of buttons                                                                             // 18691
 * @param {number} direction direction of the layout                                                                   // 18692
 *                                                                                                                     // 18693
 * @return {array} the dimensions of the tab section                                                                   // 18694
 */                                                                                                                    // 18695
function _resolveGridDimensions(count, direction) {                                                                    // 18696
    if (direction === Utility.Direction.X) return [count, 1];                                                          // 18697
    else return [1, count];                                                                                            // 18698
}                                                                                                                      // 18699
                                                                                                                       // 18700
/**                                                                                                                    // 18701
 * Create a new button with the specified id.  If one already exists with                                              // 18702
 *  that id, unbind all listeners.                                                                                     // 18703
 *                                                                                                                     // 18704
 * @method defineSection                                                                                               // 18705
 *                                                                                                                     // 18706
 * @param {string} id name of the button                                                                               // 18707
 * @param {object} content data for the creation of a new ToggleButton                                                 // 18708
 */                                                                                                                    // 18709
TabBar.prototype.defineSection = function defineSection(id, content) {                                                 // 18710
    var button;                                                                                                        // 18711
    var i = this._buttonIds[id];                                                                                       // 18712
                                                                                                                       // 18713
    if (i === undefined) {                                                                                             // 18714
        i = this.buttons.length;                                                                                       // 18715
        this._buttonIds[id] = i;                                                                                       // 18716
        var widget = this.options.widget;                                                                              // 18717
        button = new widget();                                                                                         // 18718
        this.buttons[i] = button;                                                                                      // 18719
        this.layout.setOptions({dimensions: _resolveGridDimensions(this.buttons.length, this.options.direction)});     // 18720
    }                                                                                                                  // 18721
    else {                                                                                                             // 18722
        button = this.buttons[i];                                                                                      // 18723
        button.unbind('select', this._buttonCallbacks[id]);                                                            // 18724
    }                                                                                                                  // 18725
                                                                                                                       // 18726
    if (this.options.buttons) button.setOptions(this.options.buttons);                                                 // 18727
    button.setOptions(content);                                                                                        // 18728
                                                                                                                       // 18729
    this._buttonCallbacks[id] = this.select.bind(this, id);                                                            // 18730
    button.on('select', this._buttonCallbacks[id]);                                                                    // 18731
};                                                                                                                     // 18732
                                                                                                                       // 18733
/**                                                                                                                    // 18734
 * Select a particular button and dispatch the id of the selection                                                     // 18735
 *  to any listeners.  Deselect all others                                                                             // 18736
 *                                                                                                                     // 18737
 * @method select                                                                                                      // 18738
 *                                                                                                                     // 18739
 * @param {string} id button id                                                                                        // 18740
 */                                                                                                                    // 18741
TabBar.prototype.select = function select(id) {                                                                        // 18742
    var btn = this._buttonIds[id];                                                                                     // 18743
    // this prevents event loop                                                                                        // 18744
    if (this.buttons[btn] && this.buttons[btn].isSelected()) {                                                         // 18745
        this._eventOutput.emit('select', {id: id});                                                                    // 18746
    }                                                                                                                  // 18747
    else if (this.buttons[btn]) {                                                                                      // 18748
        this.buttons[btn].select();                                                                                    // 18749
    }                                                                                                                  // 18750
                                                                                                                       // 18751
    for (var i = 0; i < this.buttons.length; i++) {                                                                    // 18752
        if (i !== btn) this.buttons[i].deselect();                                                                     // 18753
    }                                                                                                                  // 18754
};                                                                                                                     // 18755
                                                                                                                       // 18756
module.exports = TabBar;                                                                                               // 18757
},{"../core/View":16,"../utilities/Utility":95,"../views/GridLayout":103,"./ToggleButton":115}],115:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18759
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18760
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18761
 *                                                                                                                     // 18762
 * Owner: mark@famo.us                                                                                                 // 18763
 * @license MPL 2.0                                                                                                    // 18764
 * @copyright Famous Industries, Inc. 2014                                                                             // 18765
 */                                                                                                                    // 18766
                                                                                                                       // 18767
var Surface = _dereq_('../core/Surface');                                                                              // 18768
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 18769
var RenderController = _dereq_('../views/RenderController');                                                           // 18770
                                                                                                                       // 18771
/**                                                                                                                    // 18772
 * A view for transitioning between two surfaces based                                                                 // 18773
 *  on a 'on' and 'off' state                                                                                          // 18774
 *                                                                                                                     // 18775
 * @class TabBar                                                                                                       // 18776
 * @extends View                                                                                                       // 18777
 * @constructor                                                                                                        // 18778
 *                                                                                                                     // 18779
 * @param {object} options overrides of default options                                                                // 18780
 */                                                                                                                    // 18781
function ToggleButton(options) {                                                                                       // 18782
    this.options = {                                                                                                   // 18783
        content: ['', ''],                                                                                             // 18784
        offClasses: ['off'],                                                                                           // 18785
        onClasses: ['on'],                                                                                             // 18786
        size: undefined,                                                                                               // 18787
        outTransition: {curve: 'easeInOut', duration: 300},                                                            // 18788
        inTransition: {curve: 'easeInOut', duration: 300},                                                             // 18789
        toggleMode: ToggleButton.TOGGLE,                                                                               // 18790
        crossfade: true                                                                                                // 18791
    };                                                                                                                 // 18792
                                                                                                                       // 18793
    this._eventOutput = new EventHandler();                                                                            // 18794
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 18795
                                                                                                                       // 18796
    this.offSurface = new Surface();                                                                                   // 18797
    this.offSurface.on('click', function() {                                                                           // 18798
        if (this.options.toggleMode !== ToggleButton.OFF) this.select();                                               // 18799
    }.bind(this));                                                                                                     // 18800
    this.offSurface.pipe(this._eventOutput);                                                                           // 18801
                                                                                                                       // 18802
    this.onSurface = new Surface();                                                                                    // 18803
    this.onSurface.on('click', function() {                                                                            // 18804
        if (this.options.toggleMode !== ToggleButton.ON) this.deselect();                                              // 18805
    }.bind(this));                                                                                                     // 18806
    this.onSurface.pipe(this._eventOutput);                                                                            // 18807
                                                                                                                       // 18808
    this.arbiter = new RenderController({                                                                              // 18809
        overlap : this.options.crossfade                                                                               // 18810
    });                                                                                                                // 18811
                                                                                                                       // 18812
    this.deselect();                                                                                                   // 18813
                                                                                                                       // 18814
    if (options) this.setOptions(options);                                                                             // 18815
}                                                                                                                      // 18816
                                                                                                                       // 18817
ToggleButton.OFF = 0;                                                                                                  // 18818
ToggleButton.ON = 1;                                                                                                   // 18819
ToggleButton.TOGGLE = 2;                                                                                               // 18820
                                                                                                                       // 18821
/**                                                                                                                    // 18822
 * Transition towards the 'on' state and dispatch an event to                                                          // 18823
 *  listeners to announce it was selected. Accepts an optional                                                         // 18824
 *  argument, `suppressEvent`, which, if truthy, prevents the                                                          // 18825
 *  event from being dispatched.                                                                                       // 18826
 *                                                                                                                     // 18827
 * @method select                                                                                                      // 18828
 * @param [suppressEvent] {Boolean} When truthy, prevents the                                                          // 18829
 *   widget from emitting the 'select' event.                                                                          // 18830
 */                                                                                                                    // 18831
ToggleButton.prototype.select = function select(suppressEvent) {                                                       // 18832
    this.selected = true;                                                                                              // 18833
    this.arbiter.show(this.onSurface, this.options.inTransition);                                                      // 18834
//        this.arbiter.setMode(ToggleButton.ON, this.options.inTransition);                                            // 18835
    if (!suppressEvent) {                                                                                              // 18836
        this._eventOutput.emit('select');                                                                              // 18837
    }                                                                                                                  // 18838
};                                                                                                                     // 18839
                                                                                                                       // 18840
/**                                                                                                                    // 18841
 * Transition towards the 'off' state and dispatch an event to                                                         // 18842
 *  listeners to announce it was deselected. Accepts an optional                                                       // 18843
 *  argument, `suppressEvent`, which, if truthy, prevents the                                                          // 18844
 *  event from being dispatched.                                                                                       // 18845
 *                                                                                                                     // 18846
 * @method deselect                                                                                                    // 18847
 * @param [suppressEvent] {Boolean} When truthy, prevents the                                                          // 18848
 *   widget from emitting the 'deselect' event.                                                                        // 18849
 */                                                                                                                    // 18850
ToggleButton.prototype.deselect = function deselect(suppressEvent) {                                                   // 18851
    this.selected = false;                                                                                             // 18852
    this.arbiter.show(this.offSurface, this.options.outTransition);                                                    // 18853
    if (!suppressEvent) {                                                                                              // 18854
        this._eventOutput.emit('deselect');                                                                            // 18855
    }                                                                                                                  // 18856
};                                                                                                                     // 18857
                                                                                                                       // 18858
/**                                                                                                                    // 18859
 * Return the state of the button                                                                                      // 18860
 *                                                                                                                     // 18861
 * @method isSelected                                                                                                  // 18862
 *                                                                                                                     // 18863
 * @return {boolean} selected state                                                                                    // 18864
 */                                                                                                                    // 18865
ToggleButton.prototype.isSelected = function isSelected() {                                                            // 18866
    return this.selected;                                                                                              // 18867
};                                                                                                                     // 18868
                                                                                                                       // 18869
/**                                                                                                                    // 18870
 * Override the current options                                                                                        // 18871
 *                                                                                                                     // 18872
 * @method setOptions                                                                                                  // 18873
 *                                                                                                                     // 18874
 * @param {object} options JSON                                                                                        // 18875
 */                                                                                                                    // 18876
ToggleButton.prototype.setOptions = function setOptions(options) {                                                     // 18877
    if (options.content !== undefined) {                                                                               // 18878
        if (!(options.content instanceof Array))                                                                       // 18879
            options.content = [options.content, options.content];                                                      // 18880
        this.options.content = options.content;                                                                        // 18881
        this.offSurface.setContent(this.options.content[0]);                                                           // 18882
        this.onSurface.setContent(this.options.content[1]);                                                            // 18883
    }                                                                                                                  // 18884
    if (options.offClasses) {                                                                                          // 18885
        this.options.offClasses = options.offClasses;                                                                  // 18886
        this.offSurface.setClasses(this.options.offClasses);                                                           // 18887
    }                                                                                                                  // 18888
    if (options.onClasses) {                                                                                           // 18889
        this.options.onClasses = options.onClasses;                                                                    // 18890
        this.onSurface.setClasses(this.options.onClasses);                                                             // 18891
    }                                                                                                                  // 18892
    if (options.size !== undefined) {                                                                                  // 18893
        this.options.size = options.size;                                                                              // 18894
        this.onSurface.setSize(this.options.size);                                                                     // 18895
        this.offSurface.setSize(this.options.size);                                                                    // 18896
    }                                                                                                                  // 18897
    if (options.toggleMode !== undefined) this.options.toggleMode = options.toggleMode;                                // 18898
    if (options.outTransition !== undefined) this.options.outTransition = options.outTransition;                       // 18899
    if (options.inTransition !== undefined) this.options.inTransition = options.inTransition;                          // 18900
    if (options.crossfade !== undefined) {                                                                             // 18901
        this.options.crossfade = options.crossfade;                                                                    // 18902
        this.arbiter.setOptions({overlap: this.options.crossfade});                                                    // 18903
    }                                                                                                                  // 18904
};                                                                                                                     // 18905
                                                                                                                       // 18906
/**                                                                                                                    // 18907
 * Return the size defined in the options object                                                                       // 18908
 *                                                                                                                     // 18909
 * @method getSize                                                                                                     // 18910
 *                                                                                                                     // 18911
 * @return {array} two element array [height, width]                                                                   // 18912
 */                                                                                                                    // 18913
ToggleButton.prototype.getSize = function getSize() {                                                                  // 18914
    return this.options.size;                                                                                          // 18915
};                                                                                                                     // 18916
                                                                                                                       // 18917
/**                                                                                                                    // 18918
 * Generate a render spec from the contents of this component.                                                         // 18919
 *                                                                                                                     // 18920
 * @private                                                                                                            // 18921
 * @method render                                                                                                      // 18922
 * @return {number} Render spec for this component                                                                     // 18923
 */                                                                                                                    // 18924
ToggleButton.prototype.render = function render() {                                                                    // 18925
    return this.arbiter.render();                                                                                      // 18926
};                                                                                                                     // 18927
                                                                                                                       // 18928
module.exports = ToggleButton;                                                                                         // 18929
},{"../core/EventHandler":7,"../core/Surface":14,"../views/RenderController":106}],116:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 18931
  NavigationBar: _dereq_('./NavigationBar'),                                                                           // 18932
  Slider: _dereq_('./Slider'),                                                                                         // 18933
  TabBar: _dereq_('./TabBar'),                                                                                         // 18934
  ToggleButton: _dereq_('./ToggleButton')                                                                              // 18935
};                                                                                                                     // 18936
                                                                                                                       // 18937
},{"./NavigationBar":112,"./Slider":113,"./TabBar":114,"./ToggleButton":115}]},{},[23])(23)                            // 18938
});                                                                                                                    // 18939
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/export.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
famous = window.famous;                                                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mjn:famous'] = {
  famous: famous
};

})();
