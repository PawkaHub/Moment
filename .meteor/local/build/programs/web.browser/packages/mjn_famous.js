//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

/* Package-scope variables */
var famous;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/functionPrototypeBind.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
if (!Function.prototype.bind) {                                                                                        // 1
    Function.prototype.bind = function (oThis) {                                                                       // 2
        if (typeof this !== "function") {                                                                              // 3
            // closest thing possible to the ECMAScript 5 internal IsCallable function                                 // 4
            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");               // 5
        }                                                                                                              // 6
                                                                                                                       // 7
        var aArgs = Array.prototype.slice.call(arguments, 1),                                                          // 8
        fToBind = this,                                                                                                // 9
        fNOP = function () {},                                                                                         // 10
        fBound = function () {                                                                                         // 11
            return fToBind.apply(this instanceof fNOP && oThis                                                         // 12
                ? this                                                                                                 // 13
                : oThis,                                                                                               // 14
                aArgs.concat(Array.prototype.slice.call(arguments)));                                                  // 15
        };                                                                                                             // 16
                                                                                                                       // 17
        fNOP.prototype = this.prototype;                                                                               // 18
        fBound.prototype = new fNOP();                                                                                 // 19
                                                                                                                       // 20
        return fBound;                                                                                                 // 21
    };                                                                                                                 // 22
}                                                                                                                      // 23
                                                                                                                       // 24
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/classList.js                                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
/*                                                                                                                     // 2
 * classList.js: Cross-browser full element.classList implementation.                                                  // 3
 * 2011-06-15                                                                                                          // 4
 *                                                                                                                     // 5
 * By Eli Grey, http://eligrey.com                                                                                     // 6
 * Public Domain.                                                                                                      // 7
 * NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
/*global self, document, DOMException */                                                                               // 11
                                                                                                                       // 12
/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/                                     // 13
                                                                                                                       // 14
if (typeof document !== "undefined" && !("classList" in document.createElement("a"))) {                                // 15
                                                                                                                       // 16
(function (view) {                                                                                                     // 17
                                                                                                                       // 18
"use strict";                                                                                                          // 19
                                                                                                                       // 20
var                                                                                                                    // 21
	  classListProp = "classList"                                                                                         // 22
	, protoProp = "prototype"                                                                                             // 23
	, elemCtrProto = (view.HTMLElement || view.Element)[protoProp]                                                        // 24
	, objCtr = Object                                                                                                     // 25
	, strTrim = String[protoProp].trim || function () {                                                                   // 26
		return this.replace(/^\s+|\s+$/g, "");                                                                               // 27
	}                                                                                                                     // 28
	, arrIndexOf = Array[protoProp].indexOf || function (item) {                                                          // 29
		var                                                                                                                  // 30
			  i = 0                                                                                                             // 31
			, len = this.length                                                                                                 // 32
		;                                                                                                                    // 33
		for (; i < len; i++) {                                                                                               // 34
			if (i in this && this[i] === item) {                                                                                // 35
				return i;                                                                                                          // 36
			}                                                                                                                   // 37
		}                                                                                                                    // 38
		return -1;                                                                                                           // 39
	}                                                                                                                     // 40
	// Vendors: please allow content code to instantiate DOMExceptions                                                    // 41
	, DOMEx = function (type, message) {                                                                                  // 42
		this.name = type;                                                                                                    // 43
		this.code = DOMException[type];                                                                                      // 44
		this.message = message;                                                                                              // 45
	}                                                                                                                     // 46
	, checkTokenAndGetIndex = function (classList, token) {                                                               // 47
		if (token === "") {                                                                                                  // 48
			throw new DOMEx(                                                                                                    // 49
				  "SYNTAX_ERR"                                                                                                     // 50
				, "An invalid or illegal string was specified"                                                                     // 51
			);                                                                                                                  // 52
		}                                                                                                                    // 53
		if (/\s/.test(token)) {                                                                                              // 54
			throw new DOMEx(                                                                                                    // 55
				  "INVALID_CHARACTER_ERR"                                                                                          // 56
				, "String contains an invalid character"                                                                           // 57
			);                                                                                                                  // 58
		}                                                                                                                    // 59
		return arrIndexOf.call(classList, token);                                                                            // 60
	}                                                                                                                     // 61
	, ClassList = function (elem) {                                                                                       // 62
		var                                                                                                                  // 63
			  trimmedClasses = strTrim.call(elem.className)                                                                     // 64
			, classes = trimmedClasses ? trimmedClasses.split(/\s+/) : []                                                       // 65
			, i = 0                                                                                                             // 66
			, len = classes.length                                                                                              // 67
		;                                                                                                                    // 68
		for (; i < len; i++) {                                                                                               // 69
			this.push(classes[i]);                                                                                              // 70
		}                                                                                                                    // 71
		this._updateClassName = function () {                                                                                // 72
			elem.className = this.toString();                                                                                   // 73
		};                                                                                                                   // 74
	}                                                                                                                     // 75
	, classListProto = ClassList[protoProp] = []                                                                          // 76
	, classListGetter = function () {                                                                                     // 77
		return new ClassList(this);                                                                                          // 78
	}                                                                                                                     // 79
;                                                                                                                      // 80
// Most DOMException implementations don't allow calling DOMException's toString()                                     // 81
// on non-DOMExceptions. Error's toString() is sufficient here.                                                        // 82
DOMEx[protoProp] = Error[protoProp];                                                                                   // 83
classListProto.item = function (i) {                                                                                   // 84
	return this[i] || null;                                                                                               // 85
};                                                                                                                     // 86
classListProto.contains = function (token) {                                                                           // 87
	token += "";                                                                                                          // 88
	return checkTokenAndGetIndex(this, token) !== -1;                                                                     // 89
};                                                                                                                     // 90
classListProto.add = function (token) {                                                                                // 91
	token += "";                                                                                                          // 92
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 93
		this.push(token);                                                                                                    // 94
		this._updateClassName();                                                                                             // 95
	}                                                                                                                     // 96
};                                                                                                                     // 97
classListProto.remove = function (token) {                                                                             // 98
	token += "";                                                                                                          // 99
	var index = checkTokenAndGetIndex(this, token);                                                                       // 100
	if (index !== -1) {                                                                                                   // 101
		this.splice(index, 1);                                                                                               // 102
		this._updateClassName();                                                                                             // 103
	}                                                                                                                     // 104
};                                                                                                                     // 105
classListProto.toggle = function (token) {                                                                             // 106
	token += "";                                                                                                          // 107
	if (checkTokenAndGetIndex(this, token) === -1) {                                                                      // 108
		this.add(token);                                                                                                     // 109
	} else {                                                                                                              // 110
		this.remove(token);                                                                                                  // 111
	}                                                                                                                     // 112
};                                                                                                                     // 113
classListProto.toString = function () {                                                                                // 114
	return this.join(" ");                                                                                                // 115
};                                                                                                                     // 116
                                                                                                                       // 117
if (objCtr.defineProperty) {                                                                                           // 118
	var classListPropDesc = {                                                                                             // 119
		  get: classListGetter                                                                                               // 120
		, enumerable: true                                                                                                   // 121
		, configurable: true                                                                                                 // 122
	};                                                                                                                    // 123
	try {                                                                                                                 // 124
		objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                               // 125
	} catch (ex) { // IE 8 doesn't support enumerable:true                                                                // 126
		if (ex.number === -0x7FF5EC54) {                                                                                     // 127
			classListPropDesc.enumerable = false;                                                                               // 128
			objCtr.defineProperty(elemCtrProto, classListProp, classListPropDesc);                                              // 129
		}                                                                                                                    // 130
	}                                                                                                                     // 131
} else if (objCtr[protoProp].__defineGetter__) {                                                                       // 132
	elemCtrProto.__defineGetter__(classListProp, classListGetter);                                                        // 133
}                                                                                                                      // 134
                                                                                                                       // 135
}(self));                                                                                                              // 136
                                                                                                                       // 137
}                                                                                                                      // 138
                                                                                                                       // 139
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/requestAnimationFrame.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// adds requestAnimationFrame functionality                                                                            // 1
// Source: http://strd6.com/2011/05/better-window-requestanimationframe-shim/                                          // 2
                                                                                                                       // 3
window.requestAnimationFrame || (window.requestAnimationFrame =                                                        // 4
  window.webkitRequestAnimationFrame ||                                                                                // 5
  window.mozRequestAnimationFrame    ||                                                                                // 6
  window.oRequestAnimationFrame      ||                                                                                // 7
  window.msRequestAnimationFrame     ||                                                                                // 8
  function(callback, element) {                                                                                        // 9
    return window.setTimeout(function() {                                                                              // 10
      callback(+new Date());                                                                                           // 11
  }, 1000 / 60);                                                                                                       // 12
});                                                                                                                    // 13
                                                                                                                       // 14
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/famous-global.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.famous=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4
 *                                                                                                                     // 5
 * Owner: mark@famo.us                                                                                                 // 6
 * @license MPL 2.0                                                                                                    // 7
 * @copyright Famous Industries, Inc. 2014                                                                             // 8
 */                                                                                                                    // 9
                                                                                                                       // 10
var RenderNode = _dereq_('./RenderNode');                                                                              // 11
var EventHandler = _dereq_('./EventHandler');                                                                          // 12
var ElementAllocator = _dereq_('./ElementAllocator');                                                                  // 13
var Transform = _dereq_('./Transform');                                                                                // 14
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15
                                                                                                                       // 16
var _zeroZero = [0, 0];                                                                                                // 17
var usePrefix = !('perspective' in document.documentElement.style);                                                    // 18
                                                                                                                       // 19
function _getElementSize(element) {                                                                                    // 20
    return [element.clientWidth, element.clientHeight];                                                                // 21
}                                                                                                                      // 22
                                                                                                                       // 23
var _setPerspective = usePrefix ? function(element, perspective) {                                                     // 24
    element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';                                 // 25
} : function(element, perspective) {                                                                                   // 26
    element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';                                       // 27
};                                                                                                                     // 28
                                                                                                                       // 29
/**                                                                                                                    // 30
 * The top-level container for a Famous-renderable piece of the document.                                              // 31
 *   It is directly updated by the process-wide Engine object, and manages one                                         // 32
 *   render tree root, which can contain other renderables.                                                            // 33
 *                                                                                                                     // 34
 * @class Context                                                                                                      // 35
 * @constructor                                                                                                        // 36
 * @private                                                                                                            // 37
 * @param {Node} container Element in which content will be inserted                                                   // 38
 */                                                                                                                    // 39
function Context(container) {                                                                                          // 40
    this.container = container;                                                                                        // 41
    this._allocator = new ElementAllocator(container);                                                                 // 42
                                                                                                                       // 43
    this._node = new RenderNode();                                                                                     // 44
    this._eventOutput = new EventHandler();                                                                            // 45
    this._size = _getElementSize(this.container);                                                                      // 46
                                                                                                                       // 47
    this._perspectiveState = new Transitionable(0);                                                                    // 48
    this._perspective = undefined;                                                                                     // 49
                                                                                                                       // 50
    this._nodeContext = {                                                                                              // 51
        allocator: this._allocator,                                                                                    // 52
        transform: Transform.identity,                                                                                 // 53
        opacity: 1,                                                                                                    // 54
        origin: _zeroZero,                                                                                             // 55
        align: _zeroZero,                                                                                              // 56
        size: this._size                                                                                               // 57
    };                                                                                                                 // 58
                                                                                                                       // 59
    this._eventOutput.on('resize', function() {                                                                        // 60
        this.setSize(_getElementSize(this.container));                                                                 // 61
    }.bind(this));                                                                                                     // 62
                                                                                                                       // 63
}                                                                                                                      // 64
                                                                                                                       // 65
// Note: Unused                                                                                                        // 66
Context.prototype.getAllocator = function getAllocator() {                                                             // 67
    return this._allocator;                                                                                            // 68
};                                                                                                                     // 69
                                                                                                                       // 70
/**                                                                                                                    // 71
 * Add renderables to this Context's render tree.                                                                      // 72
 *                                                                                                                     // 73
 * @method add                                                                                                         // 74
 *                                                                                                                     // 75
 * @param {Object} obj renderable object                                                                               // 76
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 77
 */                                                                                                                    // 78
Context.prototype.add = function add(obj) {                                                                            // 79
    return this._node.add(obj);                                                                                        // 80
};                                                                                                                     // 81
                                                                                                                       // 82
/**                                                                                                                    // 83
 * Move this Context to another containing document element.                                                           // 84
 *                                                                                                                     // 85
 * @method migrate                                                                                                     // 86
 *                                                                                                                     // 87
 * @param {Node} container Element to which content will be migrated                                                   // 88
 */                                                                                                                    // 89
Context.prototype.migrate = function migrate(container) {                                                              // 90
    if (container === this.container) return;                                                                          // 91
    this.container = container;                                                                                        // 92
    this._allocator.migrate(container);                                                                                // 93
};                                                                                                                     // 94
                                                                                                                       // 95
/**                                                                                                                    // 96
 * Gets viewport size for Context.                                                                                     // 97
 *                                                                                                                     // 98
 * @method getSize                                                                                                     // 99
 *                                                                                                                     // 100
 * @return {Array.Number} viewport size as [width, height]                                                             // 101
 */                                                                                                                    // 102
Context.prototype.getSize = function getSize() {                                                                       // 103
    return this._size;                                                                                                 // 104
};                                                                                                                     // 105
                                                                                                                       // 106
/**                                                                                                                    // 107
 * Sets viewport size for Context.                                                                                     // 108
 *                                                                                                                     // 109
 * @method setSize                                                                                                     // 110
 *                                                                                                                     // 111
 * @param {Array.Number} size [width, height].  If unspecified, use size of root document element.                     // 112
 */                                                                                                                    // 113
Context.prototype.setSize = function setSize(size) {                                                                   // 114
    if (!size) size = _getElementSize(this.container);                                                                 // 115
    this._size[0] = size[0];                                                                                           // 116
    this._size[1] = size[1];                                                                                           // 117
};                                                                                                                     // 118
                                                                                                                       // 119
/**                                                                                                                    // 120
 * Commit this Context's content changes to the document.                                                              // 121
 *                                                                                                                     // 122
 * @private                                                                                                            // 123
 * @method update                                                                                                      // 124
 * @param {Object} contextParameters engine commit specification                                                       // 125
 */                                                                                                                    // 126
Context.prototype.update = function update(contextParameters) {                                                        // 127
    if (contextParameters) {                                                                                           // 128
        if (contextParameters.transform) this._nodeContext.transform = contextParameters.transform;                    // 129
        if (contextParameters.opacity) this._nodeContext.opacity = contextParameters.opacity;                          // 130
        if (contextParameters.origin) this._nodeContext.origin = contextParameters.origin;                             // 131
        if (contextParameters.align) this._nodeContext.align = contextParameters.align;                                // 132
        if (contextParameters.size) this._nodeContext.size = contextParameters.size;                                   // 133
    }                                                                                                                  // 134
    var perspective = this._perspectiveState.get();                                                                    // 135
    if (perspective !== this._perspective) {                                                                           // 136
        _setPerspective(this.container, perspective);                                                                  // 137
        this._perspective = perspective;                                                                               // 138
    }                                                                                                                  // 139
                                                                                                                       // 140
    this._node.commit(this._nodeContext);                                                                              // 141
};                                                                                                                     // 142
                                                                                                                       // 143
/**                                                                                                                    // 144
 * Get current perspective of this context in pixels.                                                                  // 145
 *                                                                                                                     // 146
 * @method getPerspective                                                                                              // 147
 * @return {Number} depth perspective in pixels                                                                        // 148
 */                                                                                                                    // 149
Context.prototype.getPerspective = function getPerspective() {                                                         // 150
    return this._perspectiveState.get();                                                                               // 151
};                                                                                                                     // 152
                                                                                                                       // 153
/**                                                                                                                    // 154
 * Set current perspective of this context in pixels.                                                                  // 155
 *                                                                                                                     // 156
 * @method setPerspective                                                                                              // 157
 * @param {Number} perspective in pixels                                                                               // 158
 * @param {Object} [transition] Transitionable object for applying the change                                          // 159
 * @param {function(Object)} callback function called on completion of transition                                      // 160
 */                                                                                                                    // 161
Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {                        // 162
    return this._perspectiveState.set(perspective, transition, callback);                                              // 163
};                                                                                                                     // 164
                                                                                                                       // 165
/**                                                                                                                    // 166
 * Trigger an event, sending to all downstream handlers                                                                // 167
 *   listening for provided 'type' key.                                                                                // 168
 *                                                                                                                     // 169
 * @method emit                                                                                                        // 170
 *                                                                                                                     // 171
 * @param {string} type event type key (for example, 'click')                                                          // 172
 * @param {Object} event event data                                                                                    // 173
 * @return {EventHandler} this                                                                                         // 174
 */                                                                                                                    // 175
Context.prototype.emit = function emit(type, event) {                                                                  // 176
    return this._eventOutput.emit(type, event);                                                                        // 177
};                                                                                                                     // 178
                                                                                                                       // 179
/**                                                                                                                    // 180
 * Bind a callback function to an event type handled by this object.                                                   // 181
 *                                                                                                                     // 182
 * @method "on"                                                                                                        // 183
 *                                                                                                                     // 184
 * @param {string} type event type key (for example, 'click')                                                          // 185
 * @param {function(string, Object)} handler callback                                                                  // 186
 * @return {EventHandler} this                                                                                         // 187
 */                                                                                                                    // 188
Context.prototype.on = function on(type, handler) {                                                                    // 189
    return this._eventOutput.on(type, handler);                                                                        // 190
};                                                                                                                     // 191
                                                                                                                       // 192
/**                                                                                                                    // 193
 * Unbind an event by type and handler.                                                                                // 194
 *   This undoes the work of "on".                                                                                     // 195
 *                                                                                                                     // 196
 * @method removeListener                                                                                              // 197
 *                                                                                                                     // 198
 * @param {string} type event type key (for example, 'click')                                                          // 199
 * @param {function} handler function object to remove                                                                 // 200
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 201
 */                                                                                                                    // 202
Context.prototype.removeListener = function removeListener(type, handler) {                                            // 203
    return this._eventOutput.removeListener(type, handler);                                                            // 204
};                                                                                                                     // 205
                                                                                                                       // 206
/**                                                                                                                    // 207
 * Add event handler object to set of downstream handlers.                                                             // 208
 *                                                                                                                     // 209
 * @method pipe                                                                                                        // 210
 *                                                                                                                     // 211
 * @param {EventHandler} target event handler target object                                                            // 212
 * @return {EventHandler} passed event handler                                                                         // 213
 */                                                                                                                    // 214
Context.prototype.pipe = function pipe(target) {                                                                       // 215
    return this._eventOutput.pipe(target);                                                                             // 216
};                                                                                                                     // 217
                                                                                                                       // 218
/**                                                                                                                    // 219
 * Remove handler object from set of downstream handlers.                                                              // 220
 *   Undoes work of "pipe".                                                                                            // 221
 *                                                                                                                     // 222
 * @method unpipe                                                                                                      // 223
 *                                                                                                                     // 224
 * @param {EventHandler} target target handler object                                                                  // 225
 * @return {EventHandler} provided target                                                                              // 226
 */                                                                                                                    // 227
Context.prototype.unpipe = function unpipe(target) {                                                                   // 228
    return this._eventOutput.unpipe(target);                                                                           // 229
};                                                                                                                     // 230
                                                                                                                       // 231
module.exports = Context;                                                                                              // 232
},{"../transitions/Transitionable":89,"./ElementAllocator":2,"./EventHandler":7,"./RenderNode":11,"./Transform":15}],2:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 234
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 235
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 236
 *                                                                                                                     // 237
 * Owner: mark@famo.us                                                                                                 // 238
 * @license MPL 2.0                                                                                                    // 239
 * @copyright Famous Industries, Inc. 2014                                                                             // 240
 */                                                                                                                    // 241
                                                                                                                       // 242
                                                                                                                       // 243
                                                                                                                       // 244
                                                                                                                       // 245
/**                                                                                                                    // 246
 * Internal helper object to Context that handles the process of                                                       // 247
 *   creating and allocating DOM elements within a managed div.                                                        // 248
 *   Private.                                                                                                          // 249
 *                                                                                                                     // 250
 * @class ElementAllocator                                                                                             // 251
 * @constructor                                                                                                        // 252
 * @private                                                                                                            // 253
 * @param {Node} container document element in which Famo.us content will be inserted                                  // 254
 */                                                                                                                    // 255
function ElementAllocator(container) {                                                                                 // 256
    if (!container) container = document.createDocumentFragment();                                                     // 257
    this.container = container;                                                                                        // 258
    this.detachedNodes = {};                                                                                           // 259
    this.nodeCount = 0;                                                                                                // 260
}                                                                                                                      // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * Move the document elements from their original container to a new one.                                              // 264
 *                                                                                                                     // 265
 * @private                                                                                                            // 266
 * @method migrate                                                                                                     // 267
 *                                                                                                                     // 268
 * @param {Node} container document element to which Famo.us content will be migrated                                  // 269
 */                                                                                                                    // 270
ElementAllocator.prototype.migrate = function migrate(container) {                                                     // 271
    var oldContainer = this.container;                                                                                 // 272
    if (container === oldContainer) return;                                                                            // 273
                                                                                                                       // 274
    if (oldContainer instanceof DocumentFragment) {                                                                    // 275
        container.appendChild(oldContainer);                                                                           // 276
    }                                                                                                                  // 277
    else {                                                                                                             // 278
        while (oldContainer.hasChildNodes()) {                                                                         // 279
            container.appendChild(oldContainer.firstChild);                                                            // 280
        }                                                                                                              // 281
    }                                                                                                                  // 282
                                                                                                                       // 283
    this.container = container;                                                                                        // 284
};                                                                                                                     // 285
                                                                                                                       // 286
/**                                                                                                                    // 287
 * Allocate an element of specified type from the pool.                                                                // 288
 *                                                                                                                     // 289
 * @private                                                                                                            // 290
 * @method allocate                                                                                                    // 291
 *                                                                                                                     // 292
 * @param {string} type type of element, e.g. 'div'                                                                    // 293
 * @return {Node} allocated document element                                                                           // 294
 */                                                                                                                    // 295
ElementAllocator.prototype.allocate = function allocate(type) {                                                        // 296
    type = type.toLowerCase();                                                                                         // 297
    if (!(type in this.detachedNodes)) this.detachedNodes[type] = [];                                                  // 298
    var nodeStore = this.detachedNodes[type];                                                                          // 299
    var result;                                                                                                        // 300
    if (nodeStore.length > 0) {                                                                                        // 301
        result = nodeStore.pop();                                                                                      // 302
    }                                                                                                                  // 303
    else {                                                                                                             // 304
        result = document.createElement(type);                                                                         // 305
        this.container.appendChild(result);                                                                            // 306
    }                                                                                                                  // 307
    this.nodeCount++;                                                                                                  // 308
    return result;                                                                                                     // 309
};                                                                                                                     // 310
                                                                                                                       // 311
/**                                                                                                                    // 312
 * De-allocate an element of specified type to the pool.                                                               // 313
 *                                                                                                                     // 314
 * @private                                                                                                            // 315
 * @method deallocate                                                                                                  // 316
 *                                                                                                                     // 317
 * @param {Node} element document element to deallocate                                                                // 318
 */                                                                                                                    // 319
ElementAllocator.prototype.deallocate = function deallocate(element) {                                                 // 320
    var nodeType = element.nodeName.toLowerCase();                                                                     // 321
    var nodeStore = this.detachedNodes[nodeType];                                                                      // 322
    nodeStore.push(element);                                                                                           // 323
    this.nodeCount--;                                                                                                  // 324
};                                                                                                                     // 325
                                                                                                                       // 326
/**                                                                                                                    // 327
 * Get count of total allocated nodes in the document.                                                                 // 328
 *                                                                                                                     // 329
 * @private                                                                                                            // 330
 * @method getNodeCount                                                                                                // 331
 *                                                                                                                     // 332
 * @return {Number} total node count                                                                                   // 333
 */                                                                                                                    // 334
ElementAllocator.prototype.getNodeCount = function getNodeCount() {                                                    // 335
    return this.nodeCount;                                                                                             // 336
};                                                                                                                     // 337
                                                                                                                       // 338
module.exports = ElementAllocator;                                                                                     // 339
},{}],3:[function(_dereq_,module,exports){                                                                             // 340
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 341
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 342
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 343
 *                                                                                                                     // 344
 * Owner: mark@famo.us                                                                                                 // 345
 * @license MPL 2.0                                                                                                    // 346
 * @copyright Famous Industries, Inc. 2014                                                                             // 347
 */                                                                                                                    // 348
                                                                                                                       // 349
var Entity = _dereq_('./Entity');                                                                                      // 350
var EventHandler = _dereq_('./EventHandler');                                                                          // 351
var Transform = _dereq_('./Transform');                                                                                // 352
                                                                                                                       // 353
var usePrefix = !('transform' in document.documentElement.style);                                                      // 354
var devicePixelRatio = window.devicePixelRatio || 1;                                                                   // 355
                                                                                                                       // 356
/**                                                                                                                    // 357
 * A base class for viewable content and event                                                                         // 358
 *   targets inside a Famo.us application, containing a renderable document                                            // 359
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 360
 *   properties, classes, and handle events.                                                                           // 361
 *                                                                                                                     // 362
 * @class ElementOutput                                                                                                // 363
 * @constructor                                                                                                        // 364
 *                                                                                                                     // 365
 * @param {Node} element document parent of this container                                                             // 366
 */                                                                                                                    // 367
function ElementOutput(element) {                                                                                      // 368
    this._matrix = null;                                                                                               // 369
    this._opacity = 1;                                                                                                 // 370
    this._origin = null;                                                                                               // 371
    this._size = null;                                                                                                 // 372
                                                                                                                       // 373
    this._eventOutput = new EventHandler();                                                                            // 374
    this._eventOutput.bindThis(this);                                                                                  // 375
                                                                                                                       // 376
    /** @ignore */                                                                                                     // 377
    this.eventForwarder = function eventForwarder(event) {                                                             // 378
        this._eventOutput.emit(event.type, event);                                                                     // 379
    }.bind(this);                                                                                                      // 380
                                                                                                                       // 381
    this.id = Entity.register(this);                                                                                   // 382
    this._element = null;                                                                                              // 383
    this._sizeDirty = false;                                                                                           // 384
    this._originDirty = false;                                                                                         // 385
    this._transformDirty = false;                                                                                      // 386
                                                                                                                       // 387
    this._invisible = false;                                                                                           // 388
    if (element) this.attach(element);                                                                                 // 389
}                                                                                                                      // 390
                                                                                                                       // 391
/**                                                                                                                    // 392
 * Bind a callback function to an event type handled by this object.                                                   // 393
 *                                                                                                                     // 394
 * @method "on"                                                                                                        // 395
 *                                                                                                                     // 396
 * @param {string} type event type key (for example, 'click')                                                          // 397
 * @param {function(string, Object)} fn handler callback                                                               // 398
 * @return {EventHandler} this                                                                                         // 399
 */                                                                                                                    // 400
ElementOutput.prototype.on = function on(type, fn) {                                                                   // 401
    if (this._element) this._element.addEventListener(type, this.eventForwarder);                                      // 402
    this._eventOutput.on(type, fn);                                                                                    // 403
};                                                                                                                     // 404
                                                                                                                       // 405
/**                                                                                                                    // 406
 * Unbind an event by type and handler.                                                                                // 407
 *   This undoes the work of "on"                                                                                      // 408
 *                                                                                                                     // 409
 * @method removeListener                                                                                              // 410
 * @param {string} type event type key (for example, 'click')                                                          // 411
 * @param {function(string, Object)} fn handler                                                                        // 412
 */                                                                                                                    // 413
ElementOutput.prototype.removeListener = function removeListener(type, fn) {                                           // 414
    this._eventOutput.removeListener(type, fn);                                                                        // 415
};                                                                                                                     // 416
                                                                                                                       // 417
/**                                                                                                                    // 418
 * Trigger an event, sending to all downstream handlers                                                                // 419
 *   listening for provided 'type' key.                                                                                // 420
 *                                                                                                                     // 421
 * @method emit                                                                                                        // 422
 *                                                                                                                     // 423
 * @param {string} type event type key (for example, 'click')                                                          // 424
 * @param {Object} [event] event data                                                                                  // 425
 * @return {EventHandler} this                                                                                         // 426
 */                                                                                                                    // 427
ElementOutput.prototype.emit = function emit(type, event) {                                                            // 428
    if (event && !event.origin) event.origin = this;                                                                   // 429
    var handled = this._eventOutput.emit(type, event);                                                                 // 430
    if (handled && event && event.stopPropagation) event.stopPropagation();                                            // 431
    return handled;                                                                                                    // 432
};                                                                                                                     // 433
                                                                                                                       // 434
/**                                                                                                                    // 435
 * Add event handler object to set of downstream handlers.                                                             // 436
 *                                                                                                                     // 437
 * @method pipe                                                                                                        // 438
 *                                                                                                                     // 439
 * @param {EventHandler} target event handler target object                                                            // 440
 * @return {EventHandler} passed event handler                                                                         // 441
 */                                                                                                                    // 442
ElementOutput.prototype.pipe = function pipe(target) {                                                                 // 443
    return this._eventOutput.pipe(target);                                                                             // 444
};                                                                                                                     // 445
                                                                                                                       // 446
/**                                                                                                                    // 447
 * Remove handler object from set of downstream handlers.                                                              // 448
 *   Undoes work of "pipe"                                                                                             // 449
 *                                                                                                                     // 450
 * @method unpipe                                                                                                      // 451
 *                                                                                                                     // 452
 * @param {EventHandler} target target handler object                                                                  // 453
 * @return {EventHandler} provided target                                                                              // 454
 */                                                                                                                    // 455
ElementOutput.prototype.unpipe = function unpipe(target) {                                                             // 456
    return this._eventOutput.unpipe(target);                                                                           // 457
};                                                                                                                     // 458
                                                                                                                       // 459
/**                                                                                                                    // 460
 * Return spec for this surface. Note that for a base surface, this is                                                 // 461
 *    simply an id.                                                                                                    // 462
 *                                                                                                                     // 463
 * @method render                                                                                                      // 464
 * @private                                                                                                            // 465
 * @return {Object} render spec for this surface (spec id)                                                             // 466
 */                                                                                                                    // 467
ElementOutput.prototype.render = function render() {                                                                   // 468
    return this.id;                                                                                                    // 469
};                                                                                                                     // 470
                                                                                                                       // 471
//  Attach Famous event handling to document events emanating from target                                              // 472
//    document element.  This occurs just after attachment to the document.                                            // 473
//    Calling this enables methods like #on and #pipe.                                                                 // 474
function _addEventListeners(target) {                                                                                  // 475
    for (var i in this._eventOutput.listeners) {                                                                       // 476
        target.addEventListener(i, this.eventForwarder);                                                               // 477
    }                                                                                                                  // 478
}                                                                                                                      // 479
                                                                                                                       // 480
//  Detach Famous event handling from document events emanating from target                                            // 481
//  document element.  This occurs just before detach from the document.                                               // 482
function _removeEventListeners(target) {                                                                               // 483
    for (var i in this._eventOutput.listeners) {                                                                       // 484
        target.removeEventListener(i, this.eventForwarder);                                                            // 485
    }                                                                                                                  // 486
}                                                                                                                      // 487
                                                                                                                       // 488
/**                                                                                                                    // 489
 * Return a Matrix's webkit css representation to be used with the                                                     // 490
 *    CSS3 -webkit-transform style.                                                                                    // 491
 *    Example: -webkit-transform: matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,716,243,0,1)                                        // 492
 *                                                                                                                     // 493
 * @method _formatCSSTransform                                                                                         // 494
 * @private                                                                                                            // 495
 * @param {FamousMatrix} m matrix                                                                                      // 496
 * @return {string} matrix3d CSS style representation of the transform                                                 // 497
 */                                                                                                                    // 498
function _formatCSSTransform(m) {                                                                                      // 499
    m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;                                                   // 500
    m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;                                                   // 501
                                                                                                                       // 502
    var result = 'matrix3d(';                                                                                          // 503
    for (var i = 0; i < 15; i++) {                                                                                     // 504
        result += (m[i] < 0.000001 && m[i] > -0.000001) ? '0,' : m[i] + ',';                                           // 505
    }                                                                                                                  // 506
    result += m[15] + ')';                                                                                             // 507
    return result;                                                                                                     // 508
}                                                                                                                      // 509
                                                                                                                       // 510
/**                                                                                                                    // 511
 * Directly apply given FamousMatrix to the document element as the                                                    // 512
 *   appropriate webkit CSS style.                                                                                     // 513
 *                                                                                                                     // 514
 * @method setMatrix                                                                                                   // 515
 *                                                                                                                     // 516
 * @static                                                                                                             // 517
 * @private                                                                                                            // 518
 * @param {Element} element document element                                                                           // 519
 * @param {FamousMatrix} matrix                                                                                        // 520
 */                                                                                                                    // 521
                                                                                                                       // 522
var _setMatrix;                                                                                                        // 523
if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {                                                       // 524
    _setMatrix = function(element, matrix) {                                                                           // 525
        element.style.zIndex = (matrix[14] * 1000000) | 0;    // fix for Firefox z-buffer issues                       // 526
        element.style.transform = _formatCSSTransform(matrix);                                                         // 527
    };                                                                                                                 // 528
}                                                                                                                      // 529
else if (usePrefix) {                                                                                                  // 530
    _setMatrix = function(element, matrix) {                                                                           // 531
        element.style.webkitTransform = _formatCSSTransform(matrix);                                                   // 532
    };                                                                                                                 // 533
}                                                                                                                      // 534
else {                                                                                                                 // 535
    _setMatrix = function(element, matrix) {                                                                           // 536
        element.style.transform = _formatCSSTransform(matrix);                                                         // 537
    };                                                                                                                 // 538
}                                                                                                                      // 539
                                                                                                                       // 540
// format origin as CSS percentage string                                                                              // 541
function _formatCSSOrigin(origin) {                                                                                    // 542
    return (100 * origin[0]) + '% ' + (100 * origin[1]) + '%';                                                         // 543
}                                                                                                                      // 544
                                                                                                                       // 545
// Directly apply given origin coordinates to the document element as the                                              // 546
// appropriate webkit CSS style.                                                                                       // 547
var _setOrigin = usePrefix ? function(element, origin) {                                                               // 548
    element.style.webkitTransformOrigin = _formatCSSOrigin(origin);                                                    // 549
} : function(element, origin) {                                                                                        // 550
    element.style.transformOrigin = _formatCSSOrigin(origin);                                                          // 551
};                                                                                                                     // 552
                                                                                                                       // 553
// Shrink given document element until it is effectively invisible.                                                    // 554
var _setInvisible = usePrefix ? function(element) {                                                                    // 555
    element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';                                                   // 556
    element.style.opacity = 0;                                                                                         // 557
} : function(element) {                                                                                                // 558
    element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';                                                         // 559
    element.style.opacity = 0;                                                                                         // 560
};                                                                                                                     // 561
                                                                                                                       // 562
function _xyNotEquals(a, b) {                                                                                          // 563
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 564
}                                                                                                                      // 565
                                                                                                                       // 566
/**                                                                                                                    // 567
 * Apply changes from this component to the corresponding document element.                                            // 568
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 569
 * and matrix transforms.                                                                                              // 570
 *                                                                                                                     // 571
 * @private                                                                                                            // 572
 * @method commit                                                                                                      // 573
 * @param {Context} context commit context                                                                             // 574
 */                                                                                                                    // 575
ElementOutput.prototype.commit = function commit(context) {                                                            // 576
    var target = this._element;                                                                                        // 577
    if (!target) return;                                                                                               // 578
                                                                                                                       // 579
    var matrix = context.transform;                                                                                    // 580
    var opacity = context.opacity;                                                                                     // 581
    var origin = context.origin;                                                                                       // 582
    var size = context.size;                                                                                           // 583
                                                                                                                       // 584
    if (!matrix && this._matrix) {                                                                                     // 585
        this._matrix = null;                                                                                           // 586
        this._opacity = 0;                                                                                             // 587
        _setInvisible(target);                                                                                         // 588
        return;                                                                                                        // 589
    }                                                                                                                  // 590
                                                                                                                       // 591
    if (_xyNotEquals(this._origin, origin)) this._originDirty = true;                                                  // 592
    if (Transform.notEquals(this._matrix, matrix)) this._transformDirty = true;                                        // 593
                                                                                                                       // 594
    if (this._invisible) {                                                                                             // 595
        this._invisible = false;                                                                                       // 596
        this._element.style.display = '';                                                                              // 597
    }                                                                                                                  // 598
                                                                                                                       // 599
    if (this._opacity !== opacity) {                                                                                   // 600
        this._opacity = opacity;                                                                                       // 601
        target.style.opacity = (opacity >= 1) ? '0.999999' : opacity;                                                  // 602
    }                                                                                                                  // 603
                                                                                                                       // 604
    if (this._transformDirty || this._originDirty || this._sizeDirty) {                                                // 605
        if (this._sizeDirty) this._sizeDirty = false;                                                                  // 606
                                                                                                                       // 607
        if (this._originDirty) {                                                                                       // 608
            if (origin) {                                                                                              // 609
                if (!this._origin) this._origin = [0, 0];                                                              // 610
                this._origin[0] = origin[0];                                                                           // 611
                this._origin[1] = origin[1];                                                                           // 612
            }                                                                                                          // 613
            else this._origin = null;                                                                                  // 614
            _setOrigin(target, this._origin);                                                                          // 615
            this._originDirty = false;                                                                                 // 616
        }                                                                                                              // 617
                                                                                                                       // 618
        if (!matrix) matrix = Transform.identity;                                                                      // 619
        this._matrix = matrix;                                                                                         // 620
        var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0]*origin[0], -this._size[1]*origin[1], 0]) : matrix;
        _setMatrix(target, aaMatrix);                                                                                  // 622
        this._transformDirty = false;                                                                                  // 623
    }                                                                                                                  // 624
};                                                                                                                     // 625
                                                                                                                       // 626
ElementOutput.prototype.cleanup = function cleanup() {                                                                 // 627
    if (this._element) {                                                                                               // 628
        this._invisible = true;                                                                                        // 629
        this._element.style.display = 'none';                                                                          // 630
    }                                                                                                                  // 631
};                                                                                                                     // 632
                                                                                                                       // 633
/**                                                                                                                    // 634
 * Place the document element that this component manages into the document.                                           // 635
 *                                                                                                                     // 636
 * @private                                                                                                            // 637
 * @method attach                                                                                                      // 638
 * @param {Node} target document parent of this container                                                              // 639
 */                                                                                                                    // 640
ElementOutput.prototype.attach = function attach(target) {                                                             // 641
    this._element = target;                                                                                            // 642
    _addEventListeners.call(this, target);                                                                             // 643
};                                                                                                                     // 644
                                                                                                                       // 645
/**                                                                                                                    // 646
 * Remove any contained document content associated with this surface                                                  // 647
 *   from the actual document.                                                                                         // 648
 *                                                                                                                     // 649
 * @private                                                                                                            // 650
 * @method detach                                                                                                      // 651
 */                                                                                                                    // 652
ElementOutput.prototype.detach = function detach() {                                                                   // 653
    var target = this._element;                                                                                        // 654
    if (target) {                                                                                                      // 655
        _removeEventListeners.call(this, target);                                                                      // 656
        if (this._invisible) {                                                                                         // 657
            this._invisible = false;                                                                                   // 658
            this._element.style.display = '';                                                                          // 659
        }                                                                                                              // 660
    }                                                                                                                  // 661
    this._element = null;                                                                                              // 662
    return target;                                                                                                     // 663
};                                                                                                                     // 664
                                                                                                                       // 665
module.exports = ElementOutput;                                                                                        // 666
},{"./Entity":5,"./EventHandler":7,"./Transform":15}],4:[function(_dereq_,module,exports){                             // 667
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 668
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 669
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 670
 *                                                                                                                     // 671
 * Owner: mark@famo.us                                                                                                 // 672
 * @license MPL 2.0                                                                                                    // 673
 * @copyright Famous Industries, Inc. 2014                                                                             // 674
 */                                                                                                                    // 675
                                                                                                                       // 676
/**                                                                                                                    // 677
 * The singleton object initiated upon process                                                                         // 678
 *   startup which manages all active Context instances, runs                                                          // 679
 *   the render dispatch loop, and acts as a listener and dispatcher                                                   // 680
 *   for events.  All methods are therefore static.                                                                    // 681
 *                                                                                                                     // 682
 *   On static initialization, window.requestAnimationFrame is called with                                             // 683
 *     the event loop function.                                                                                        // 684
 *                                                                                                                     // 685
 *   Note: Any window in which Engine runs will prevent default                                                        // 686
 *     scrolling behavior on the 'touchmove' event.                                                                    // 687
 *                                                                                                                     // 688
 * @static                                                                                                             // 689
 * @class Engine                                                                                                       // 690
 */                                                                                                                    // 691
var Context = _dereq_('./Context');                                                                                    // 692
var EventHandler = _dereq_('./EventHandler');                                                                          // 693
var OptionsManager = _dereq_('./OptionsManager');                                                                      // 694
                                                                                                                       // 695
var Engine = {};                                                                                                       // 696
                                                                                                                       // 697
var contexts = [];                                                                                                     // 698
                                                                                                                       // 699
var nextTickQueue = [];                                                                                                // 700
                                                                                                                       // 701
var currentFrame = 0;                                                                                                  // 702
var nextTickFrame = 0;                                                                                                 // 703
                                                                                                                       // 704
var deferQueue = [];                                                                                                   // 705
                                                                                                                       // 706
var lastTime = Date.now();                                                                                             // 707
var frameTime;                                                                                                         // 708
var frameTimeLimit;                                                                                                    // 709
var loopEnabled = true;                                                                                                // 710
var eventForwarders = {};                                                                                              // 711
var eventHandler = new EventHandler();                                                                                 // 712
                                                                                                                       // 713
var options = {                                                                                                        // 714
    containerType: 'div',                                                                                              // 715
    containerClass: 'famous-container',                                                                                // 716
    fpsCap: undefined,                                                                                                 // 717
    runLoop: true,                                                                                                     // 718
    appMode: true                                                                                                      // 719
};                                                                                                                     // 720
var optionsManager = new OptionsManager(options);                                                                      // 721
                                                                                                                       // 722
/** @const */                                                                                                          // 723
var MAX_DEFER_FRAME_TIME = 10;                                                                                         // 724
                                                                                                                       // 725
/**                                                                                                                    // 726
 * Inside requestAnimationFrame loop, step() is called, which:                                                         // 727
 *   calculates current FPS (throttling loop if it is over limit set in setFPSCap),                                    // 728
 *   emits dataless 'prerender' event on start of loop,                                                                // 729
 *   calls in order any one-shot functions registered by nextTick on last loop,                                        // 730
 *   calls Context.update on all Context objects registered,                                                           // 731
 *   and emits dataless 'postrender' event on end of loop.                                                             // 732
 *                                                                                                                     // 733
 * @static                                                                                                             // 734
 * @private                                                                                                            // 735
 * @method step                                                                                                        // 736
 */                                                                                                                    // 737
Engine.step = function step() {                                                                                        // 738
    currentFrame++;                                                                                                    // 739
    nextTickFrame = currentFrame;                                                                                      // 740
                                                                                                                       // 741
    var currentTime = Date.now();                                                                                      // 742
                                                                                                                       // 743
    // skip frame if we're over our framerate cap                                                                      // 744
    if (frameTimeLimit && currentTime - lastTime < frameTimeLimit) return;                                             // 745
                                                                                                                       // 746
    var i = 0;                                                                                                         // 747
                                                                                                                       // 748
    frameTime = currentTime - lastTime;                                                                                // 749
    lastTime = currentTime;                                                                                            // 750
                                                                                                                       // 751
    eventHandler.emit('prerender');                                                                                    // 752
                                                                                                                       // 753
    // empty the queue                                                                                                 // 754
    var numFunctions = nextTickQueue.length;                                                                           // 755
    while (numFunctions--) (nextTickQueue.shift())(currentFrame);                                                      // 756
                                                                                                                       // 757
    // limit total execution time for deferrable functions                                                             // 758
    while (deferQueue.length && (Date.now() - currentTime) < MAX_DEFER_FRAME_TIME) {                                   // 759
        deferQueue.shift().call(this);                                                                                 // 760
    }                                                                                                                  // 761
                                                                                                                       // 762
    for (i = 0; i < contexts.length; i++) contexts[i].update();                                                        // 763
                                                                                                                       // 764
    eventHandler.emit('postrender');                                                                                   // 765
};                                                                                                                     // 766
                                                                                                                       // 767
// engage requestAnimationFrame                                                                                        // 768
function loop() {                                                                                                      // 769
    if (options.runLoop) {                                                                                             // 770
        Engine.step();                                                                                                 // 771
        window.requestAnimationFrame(loop);                                                                            // 772
    }                                                                                                                  // 773
    else loopEnabled = false;                                                                                          // 774
}                                                                                                                      // 775
window.requestAnimationFrame(loop);                                                                                    // 776
                                                                                                                       // 777
//                                                                                                                     // 778
// Upon main document window resize (unless on an "input" HTML element):                                               // 779
//   scroll to the top left corner of the window,                                                                      // 780
//   and for each managed Context: emit the 'resize' event and update its size.                                        // 781
// @param {Object=} event document event                                                                               // 782
//                                                                                                                     // 783
function handleResize(event) {                                                                                         // 784
    for (var i = 0; i < contexts.length; i++) {                                                                        // 785
        contexts[i].emit('resize');                                                                                    // 786
    }                                                                                                                  // 787
    eventHandler.emit('resize');                                                                                       // 788
}                                                                                                                      // 789
window.addEventListener('resize', handleResize, false);                                                                // 790
handleResize();                                                                                                        // 791
                                                                                                                       // 792
/**                                                                                                                    // 793
 * Initialize famous for app mode                                                                                      // 794
 *                                                                                                                     // 795
 * @static                                                                                                             // 796
 * @private                                                                                                            // 797
 * @method initialize                                                                                                  // 798
 */                                                                                                                    // 799
function initialize() {                                                                                                // 800
    // prevent scrolling via browser                                                                                   // 801
    window.addEventListener('touchmove', function(event) {                                                             // 802
        event.preventDefault();                                                                                        // 803
    }, true);                                                                                                          // 804
                                                                                                                       // 805
    addRootClasses();                                                                                                  // 806
}                                                                                                                      // 807
var initialized = false;                                                                                               // 808
                                                                                                                       // 809
function addRootClasses() {                                                                                            // 810
    if (!document.body) {                                                                                              // 811
        Engine.nextTick(addRootClasses);                                                                               // 812
        return;                                                                                                        // 813
    }                                                                                                                  // 814
                                                                                                                       // 815
    document.body.classList.add('famous-root');                                                                        // 816
    document.documentElement.classList.add('famous-root');                                                             // 817
}                                                                                                                      // 818
                                                                                                                       // 819
/**                                                                                                                    // 820
 * Add event handler object to set of downstream handlers.                                                             // 821
 *                                                                                                                     // 822
 * @method pipe                                                                                                        // 823
 *                                                                                                                     // 824
 * @param {EventHandler} target event handler target object                                                            // 825
 * @return {EventHandler} passed event handler                                                                         // 826
 */                                                                                                                    // 827
Engine.pipe = function pipe(target) {                                                                                  // 828
    if (target.subscribe instanceof Function) return target.subscribe(Engine);                                         // 829
    else return eventHandler.pipe(target);                                                                             // 830
};                                                                                                                     // 831
                                                                                                                       // 832
/**                                                                                                                    // 833
 * Remove handler object from set of downstream handlers.                                                              // 834
 *   Undoes work of "pipe".                                                                                            // 835
 *                                                                                                                     // 836
 * @method unpipe                                                                                                      // 837
 *                                                                                                                     // 838
 * @param {EventHandler} target target handler object                                                                  // 839
 * @return {EventHandler} provided target                                                                              // 840
 */                                                                                                                    // 841
Engine.unpipe = function unpipe(target) {                                                                              // 842
    if (target.unsubscribe instanceof Function) return target.unsubscribe(Engine);                                     // 843
    else return eventHandler.unpipe(target);                                                                           // 844
};                                                                                                                     // 845
                                                                                                                       // 846
/**                                                                                                                    // 847
 * Bind a callback function to an event type handled by this object.                                                   // 848
 *                                                                                                                     // 849
 * @static                                                                                                             // 850
 * @method "on"                                                                                                        // 851
 *                                                                                                                     // 852
 * @param {string} type event type key (for example, 'click')                                                          // 853
 * @param {function(string, Object)} handler callback                                                                  // 854
 * @return {EventHandler} this                                                                                         // 855
 */                                                                                                                    // 856
Engine.on = function on(type, handler) {                                                                               // 857
    if (!(type in eventForwarders)) {                                                                                  // 858
        eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);                                            // 859
                                                                                                                       // 860
        addEngineListener(type, eventForwarders[type]);                                                                // 861
    }                                                                                                                  // 862
    return eventHandler.on(type, handler);                                                                             // 863
};                                                                                                                     // 864
                                                                                                                       // 865
function addEngineListener(type, forwarder) {                                                                          // 866
    if (!document.body) {                                                                                              // 867
        Engine.nextTick(addEventListener.bind(this, type, forwarder));                                                 // 868
        return;                                                                                                        // 869
    }                                                                                                                  // 870
                                                                                                                       // 871
    document.body.addEventListener(type, forwarder);                                                                   // 872
}                                                                                                                      // 873
                                                                                                                       // 874
/**                                                                                                                    // 875
 * Trigger an event, sending to all downstream handlers                                                                // 876
 *   listening for provided 'type' key.                                                                                // 877
 *                                                                                                                     // 878
 * @method emit                                                                                                        // 879
 *                                                                                                                     // 880
 * @param {string} type event type key (for example, 'click')                                                          // 881
 * @param {Object} event event data                                                                                    // 882
 * @return {EventHandler} this                                                                                         // 883
 */                                                                                                                    // 884
Engine.emit = function emit(type, event) {                                                                             // 885
    return eventHandler.emit(type, event);                                                                             // 886
};                                                                                                                     // 887
                                                                                                                       // 888
/**                                                                                                                    // 889
 * Unbind an event by type and handler.                                                                                // 890
 *   This undoes the work of "on".                                                                                     // 891
 *                                                                                                                     // 892
 * @static                                                                                                             // 893
 * @method removeListener                                                                                              // 894
 *                                                                                                                     // 895
 * @param {string} type event type key (for example, 'click')                                                          // 896
 * @param {function} handler function object to remove                                                                 // 897
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 898
 */                                                                                                                    // 899
Engine.removeListener = function removeListener(type, handler) {                                                       // 900
    return eventHandler.removeListener(type, handler);                                                                 // 901
};                                                                                                                     // 902
                                                                                                                       // 903
/**                                                                                                                    // 904
 * Return the current calculated frames per second of the Engine.                                                      // 905
 *                                                                                                                     // 906
 * @static                                                                                                             // 907
 * @method getFPS                                                                                                      // 908
 *                                                                                                                     // 909
 * @return {Number} calculated fps                                                                                     // 910
 */                                                                                                                    // 911
Engine.getFPS = function getFPS() {                                                                                    // 912
    return 1000 / frameTime;                                                                                           // 913
};                                                                                                                     // 914
                                                                                                                       // 915
/**                                                                                                                    // 916
 * Set the maximum fps at which the system should run. If internal render                                              // 917
 *    loop is called at a greater frequency than this FPSCap, Engine will                                              // 918
 *    throttle render and update until this rate is achieved.                                                          // 919
 *                                                                                                                     // 920
 * @static                                                                                                             // 921
 * @method setFPSCap                                                                                                   // 922
 *                                                                                                                     // 923
 * @param {Number} fps maximum frames per second                                                                       // 924
 */                                                                                                                    // 925
Engine.setFPSCap = function setFPSCap(fps) {                                                                           // 926
    frameTimeLimit = Math.floor(1000 / fps);                                                                           // 927
};                                                                                                                     // 928
                                                                                                                       // 929
/**                                                                                                                    // 930
 * Return engine options.                                                                                              // 931
 *                                                                                                                     // 932
 * @static                                                                                                             // 933
 * @method getOptions                                                                                                  // 934
 * @param {string} key                                                                                                 // 935
 * @return {Object} engine options                                                                                     // 936
 */                                                                                                                    // 937
Engine.getOptions = function getOptions(key) {                                                                         // 938
    return optionsManager.getOptions(key);                                                                             // 939
};                                                                                                                     // 940
                                                                                                                       // 941
/**                                                                                                                    // 942
 * Set engine options                                                                                                  // 943
 *                                                                                                                     // 944
 * @static                                                                                                             // 945
 * @method setOptions                                                                                                  // 946
 *                                                                                                                     // 947
 * @param {Object} [options] overrides of default options                                                              // 948
 * @param {Number} [options.fpsCap]  maximum fps at which the system should run                                        // 949
 * @param {boolean} [options.runLoop=true] whether the run loop should continue                                        // 950
 * @param {string} [options.containerType="div"] type of container element.  Defaults to 'div'.                        // 951
 * @param {string} [options.containerClass="famous-container"] type of container element.  Defaults to 'famous-container'.
 */                                                                                                                    // 953
Engine.setOptions = function setOptions(options) {                                                                     // 954
    return optionsManager.setOptions.apply(optionsManager, arguments);                                                 // 955
};                                                                                                                     // 956
                                                                                                                       // 957
/**                                                                                                                    // 958
 * Creates a new Context for rendering and event handling with                                                         // 959
 *    provided document element as top of each tree. This will be tracked by the                                       // 960
 *    process-wide Engine.                                                                                             // 961
 *                                                                                                                     // 962
 * @static                                                                                                             // 963
 * @method createContext                                                                                               // 964
 *                                                                                                                     // 965
 * @param {Node} el will be top of Famo.us document element tree                                                       // 966
 * @return {Context} new Context within el                                                                             // 967
 */                                                                                                                    // 968
Engine.createContext = function createContext(el) {                                                                    // 969
    if (!initialized && options.appMode) Engine.nextTick(initialize);                                                  // 970
                                                                                                                       // 971
    var needMountContainer = false;                                                                                    // 972
    if (!el) {                                                                                                         // 973
        el = document.createElement(options.containerType);                                                            // 974
        el.classList.add(options.containerClass);                                                                      // 975
        needMountContainer = true;                                                                                     // 976
    }                                                                                                                  // 977
                                                                                                                       // 978
    var context = new Context(el);                                                                                     // 979
    Engine.registerContext(context);                                                                                   // 980
                                                                                                                       // 981
    if (needMountContainer) mount(context, el);                                                                        // 982
                                                                                                                       // 983
    return context;                                                                                                    // 984
};                                                                                                                     // 985
                                                                                                                       // 986
function mount(context, el) {                                                                                          // 987
    if (!document.body) {                                                                                              // 988
        Engine.nextTick(mount.bind(this, context, el));                                                                // 989
        return;                                                                                                        // 990
    }                                                                                                                  // 991
                                                                                                                       // 992
    document.body.appendChild(el);                                                                                     // 993
    context.emit('resize');                                                                                            // 994
}                                                                                                                      // 995
                                                                                                                       // 996
/**                                                                                                                    // 997
 * Registers an existing context to be updated within the run loop.                                                    // 998
 *                                                                                                                     // 999
 * @static                                                                                                             // 1000
 * @method registerContext                                                                                             // 1001
 *                                                                                                                     // 1002
 * @param {Context} context Context to register                                                                        // 1003
 * @return {FamousContext} provided context                                                                            // 1004
 */                                                                                                                    // 1005
Engine.registerContext = function registerContext(context) {                                                           // 1006
    contexts.push(context);                                                                                            // 1007
    return context;                                                                                                    // 1008
};                                                                                                                     // 1009
                                                                                                                       // 1010
/**                                                                                                                    // 1011
 * Returns a list of all contexts.                                                                                     // 1012
 *                                                                                                                     // 1013
 * @static                                                                                                             // 1014
 * @method getContexts                                                                                                 // 1015
 * @return {Array} contexts that are updated on each tick                                                              // 1016
 */                                                                                                                    // 1017
Engine.getContexts = function getContexts() {                                                                          // 1018
    return contexts;                                                                                                   // 1019
};                                                                                                                     // 1020
                                                                                                                       // 1021
/**                                                                                                                    // 1022
 * Removes a context from the run loop. Note: this does not do any                                                     // 1023
 *     cleanup.                                                                                                        // 1024
 *                                                                                                                     // 1025
 * @static                                                                                                             // 1026
 * @method deregisterContext                                                                                           // 1027
 *                                                                                                                     // 1028
 * @param {Context} context Context to deregister                                                                      // 1029
 */                                                                                                                    // 1030
Engine.deregisterContext = function deregisterContext(context) {                                                       // 1031
    var i = contexts.indexOf(context);                                                                                 // 1032
    if (i >= 0) contexts.splice(i, 1);                                                                                 // 1033
};                                                                                                                     // 1034
                                                                                                                       // 1035
/**                                                                                                                    // 1036
 * Queue a function to be executed on the next tick of the                                                             // 1037
 *    Engine.                                                                                                          // 1038
 *                                                                                                                     // 1039
 * @static                                                                                                             // 1040
 * @method nextTick                                                                                                    // 1041
 *                                                                                                                     // 1042
 * @param {function(Object)} fn function accepting window object                                                       // 1043
 */                                                                                                                    // 1044
Engine.nextTick = function nextTick(fn) {                                                                              // 1045
    nextTickQueue.push(fn);                                                                                            // 1046
};                                                                                                                     // 1047
                                                                                                                       // 1048
/**                                                                                                                    // 1049
 * Queue a function to be executed sometime soon, at a time that is                                                    // 1050
 *    unlikely to affect frame rate.                                                                                   // 1051
 *                                                                                                                     // 1052
 * @static                                                                                                             // 1053
 * @method defer                                                                                                       // 1054
 *                                                                                                                     // 1055
 * @param {Function} fn                                                                                                // 1056
 */                                                                                                                    // 1057
Engine.defer = function defer(fn) {                                                                                    // 1058
    deferQueue.push(fn);                                                                                               // 1059
};                                                                                                                     // 1060
                                                                                                                       // 1061
optionsManager.on('change', function(data) {                                                                           // 1062
    if (data.id === 'fpsCap') Engine.setFPSCap(data.value);                                                            // 1063
    else if (data.id === 'runLoop') {                                                                                  // 1064
        // kick off the loop only if it was stopped                                                                    // 1065
        if (!loopEnabled && data.value) {                                                                              // 1066
            loopEnabled = true;                                                                                        // 1067
            window.requestAnimationFrame(loop);                                                                        // 1068
        }                                                                                                              // 1069
    }                                                                                                                  // 1070
});                                                                                                                    // 1071
                                                                                                                       // 1072
module.exports = Engine;                                                                                               // 1073
},{"./Context":1,"./EventHandler":7,"./OptionsManager":10}],5:[function(_dereq_,module,exports){                       // 1074
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1075
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1076
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1077
 *                                                                                                                     // 1078
 * Owner: mark@famo.us                                                                                                 // 1079
 * @license MPL 2.0                                                                                                    // 1080
 * @copyright Famous Industries, Inc. 2014                                                                             // 1081
 */                                                                                                                    // 1082
                                                                                                                       // 1083
                                                                                                                       // 1084
                                                                                                                       // 1085
/**                                                                                                                    // 1086
 * A singleton that maintains a global registry of Surfaces.                                                           // 1087
 *   Private.                                                                                                          // 1088
 *                                                                                                                     // 1089
 * @private                                                                                                            // 1090
 * @static                                                                                                             // 1091
 * @class Entity                                                                                                       // 1092
 */                                                                                                                    // 1093
                                                                                                                       // 1094
var entities = [];                                                                                                     // 1095
                                                                                                                       // 1096
/**                                                                                                                    // 1097
 * Get entity from global index.                                                                                       // 1098
 *                                                                                                                     // 1099
 * @private                                                                                                            // 1100
 * @method get                                                                                                         // 1101
 * @param {Number} id entity registration id                                                                           // 1102
 * @return {Surface} entity in the global index                                                                        // 1103
 */                                                                                                                    // 1104
function get(id) {                                                                                                     // 1105
    return entities[id];                                                                                               // 1106
}                                                                                                                      // 1107
                                                                                                                       // 1108
/**                                                                                                                    // 1109
 * Overwrite entity in the global index                                                                                // 1110
 *                                                                                                                     // 1111
 * @private                                                                                                            // 1112
 * @method set                                                                                                         // 1113
 * @param {Number} id entity registration id                                                                           // 1114
 * @param {Surface} entity to add to the global index                                                                  // 1115
 */                                                                                                                    // 1116
function set(id, entity) {                                                                                             // 1117
    entities[id] = entity;                                                                                             // 1118
}                                                                                                                      // 1119
                                                                                                                       // 1120
/**                                                                                                                    // 1121
 * Add entity to global index                                                                                          // 1122
 *                                                                                                                     // 1123
 * @private                                                                                                            // 1124
 * @method register                                                                                                    // 1125
 * @param {Surface} entity to add to global index                                                                      // 1126
 * @return {Number} new id                                                                                             // 1127
 */                                                                                                                    // 1128
function register(entity) {                                                                                            // 1129
    var id = entities.length;                                                                                          // 1130
    set(id, entity);                                                                                                   // 1131
    return id;                                                                                                         // 1132
}                                                                                                                      // 1133
                                                                                                                       // 1134
/**                                                                                                                    // 1135
 * Remove entity from global index                                                                                     // 1136
 *                                                                                                                     // 1137
 * @private                                                                                                            // 1138
 * @method unregister                                                                                                  // 1139
 * @param {Number} id entity registration id                                                                           // 1140
 */                                                                                                                    // 1141
function unregister(id) {                                                                                              // 1142
    set(id, null);                                                                                                     // 1143
}                                                                                                                      // 1144
                                                                                                                       // 1145
module.exports = {                                                                                                     // 1146
    register: register,                                                                                                // 1147
    unregister: unregister,                                                                                            // 1148
    get: get,                                                                                                          // 1149
    set: set                                                                                                           // 1150
};                                                                                                                     // 1151
},{}],6:[function(_dereq_,module,exports){                                                                             // 1152
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1153
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1154
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1155
 *                                                                                                                     // 1156
 * Owner: mark@famo.us                                                                                                 // 1157
 * @license MPL 2.0                                                                                                    // 1158
 * @copyright Famous Industries, Inc. 2014                                                                             // 1159
 */                                                                                                                    // 1160
                                                                                                                       // 1161
                                                                                                                       // 1162
                                                                                                                       // 1163
/**                                                                                                                    // 1164
 * EventEmitter represents a channel for events.                                                                       // 1165
 *                                                                                                                     // 1166
 * @class EventEmitter                                                                                                 // 1167
 * @constructor                                                                                                        // 1168
 */                                                                                                                    // 1169
function EventEmitter() {                                                                                              // 1170
    this.listeners = {};                                                                                               // 1171
    this._owner = this;                                                                                                // 1172
}                                                                                                                      // 1173
                                                                                                                       // 1174
/**                                                                                                                    // 1175
 * Trigger an event, sending to all downstream handlers                                                                // 1176
 *   listening for provided 'type' key.                                                                                // 1177
 *                                                                                                                     // 1178
 * @method emit                                                                                                        // 1179
 *                                                                                                                     // 1180
 * @param {string} type event type key (for example, 'click')                                                          // 1181
 * @param {Object} event event data                                                                                    // 1182
 * @return {EventHandler} this                                                                                         // 1183
 */                                                                                                                    // 1184
EventEmitter.prototype.emit = function emit(type, event) {                                                             // 1185
    var handlers = this.listeners[type];                                                                               // 1186
    if (handlers) {                                                                                                    // 1187
        for (var i = 0; i < handlers.length; i++) {                                                                    // 1188
            handlers[i].call(this._owner, event);                                                                      // 1189
        }                                                                                                              // 1190
    }                                                                                                                  // 1191
    return this;                                                                                                       // 1192
};                                                                                                                     // 1193
                                                                                                                       // 1194
/**                                                                                                                    // 1195
 * Bind a callback function to an event type handled by this object.                                                   // 1196
 *                                                                                                                     // 1197
 * @method "on"                                                                                                        // 1198
 *                                                                                                                     // 1199
 * @param {string} type event type key (for example, 'click')                                                          // 1200
 * @param {function(string, Object)} handler callback                                                                  // 1201
 * @return {EventHandler} this                                                                                         // 1202
 */                                                                                                                    // 1203
   EventEmitter.prototype.on = function on(type, handler) {                                                            // 1204
    if (!(type in this.listeners)) this.listeners[type] = [];                                                          // 1205
    var index = this.listeners[type].indexOf(handler);                                                                 // 1206
    if (index < 0) this.listeners[type].push(handler);                                                                 // 1207
    return this;                                                                                                       // 1208
};                                                                                                                     // 1209
                                                                                                                       // 1210
/**                                                                                                                    // 1211
 * Alias for "on".                                                                                                     // 1212
 * @method addListener                                                                                                 // 1213
 */                                                                                                                    // 1214
EventEmitter.prototype.addListener = EventEmitter.prototype.on;                                                        // 1215
                                                                                                                       // 1216
   /**                                                                                                                 // 1217
 * Unbind an event by type and handler.                                                                                // 1218
 *   This undoes the work of "on".                                                                                     // 1219
 *                                                                                                                     // 1220
 * @method removeListener                                                                                              // 1221
 *                                                                                                                     // 1222
 * @param {string} type event type key (for example, 'click')                                                          // 1223
 * @param {function} handler function object to remove                                                                 // 1224
 * @return {EventEmitter} this                                                                                         // 1225
 */                                                                                                                    // 1226
EventEmitter.prototype.removeListener = function removeListener(type, handler) {                                       // 1227
    var listener = this.listeners[type];                                                                               // 1228
    if (listener !== undefined) {                                                                                      // 1229
        var index = listener.indexOf(handler);                                                                         // 1230
        if (index >= 0) listener.splice(index, 1);                                                                     // 1231
    }                                                                                                                  // 1232
    return this;                                                                                                       // 1233
};                                                                                                                     // 1234
                                                                                                                       // 1235
/**                                                                                                                    // 1236
 * Call event handlers with this set to owner.                                                                         // 1237
 *                                                                                                                     // 1238
 * @method bindThis                                                                                                    // 1239
 *                                                                                                                     // 1240
 * @param {Object} owner object this EventEmitter belongs to                                                           // 1241
 */                                                                                                                    // 1242
EventEmitter.prototype.bindThis = function bindThis(owner) {                                                           // 1243
    this._owner = owner;                                                                                               // 1244
};                                                                                                                     // 1245
                                                                                                                       // 1246
module.exports = EventEmitter;                                                                                         // 1247
},{}],7:[function(_dereq_,module,exports){                                                                             // 1248
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1249
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1250
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1251
 *                                                                                                                     // 1252
 * Owner: mark@famo.us                                                                                                 // 1253
 * @license MPL 2.0                                                                                                    // 1254
 * @copyright Famous Industries, Inc. 2014                                                                             // 1255
 */                                                                                                                    // 1256
                                                                                                                       // 1257
var EventEmitter = _dereq_('./EventEmitter');                                                                          // 1258
                                                                                                                       // 1259
/**                                                                                                                    // 1260
 * EventHandler forwards received events to a set of provided callback functions.                                      // 1261
 * It allows events to be captured, processed, and optionally piped through to other event handlers.                   // 1262
 *                                                                                                                     // 1263
 * @class EventHandler                                                                                                 // 1264
 * @extends EventEmitter                                                                                               // 1265
 * @constructor                                                                                                        // 1266
 */                                                                                                                    // 1267
function EventHandler() {                                                                                              // 1268
    EventEmitter.apply(this, arguments);                                                                               // 1269
                                                                                                                       // 1270
    this.downstream = []; // downstream event handlers                                                                 // 1271
    this.downstreamFn = []; // downstream functions                                                                    // 1272
                                                                                                                       // 1273
    this.upstream = []; // upstream event handlers                                                                     // 1274
    this.upstreamListeners = {}; // upstream listeners                                                                 // 1275
}                                                                                                                      // 1276
EventHandler.prototype = Object.create(EventEmitter.prototype);                                                        // 1277
EventHandler.prototype.constructor = EventHandler;                                                                     // 1278
                                                                                                                       // 1279
/**                                                                                                                    // 1280
 * Assign an event handler to receive an object's input events.                                                        // 1281
 *                                                                                                                     // 1282
 * @method setInputHandler                                                                                             // 1283
 * @static                                                                                                             // 1284
 *                                                                                                                     // 1285
 * @param {Object} object object to mix trigger, subscribe, and unsubscribe functions into                             // 1286
 * @param {EventHandler} handler assigned event handler                                                                // 1287
 */                                                                                                                    // 1288
EventHandler.setInputHandler = function setInputHandler(object, handler) {                                             // 1289
    object.trigger = handler.trigger.bind(handler);                                                                    // 1290
    if (handler.subscribe && handler.unsubscribe) {                                                                    // 1291
        object.subscribe = handler.subscribe.bind(handler);                                                            // 1292
        object.unsubscribe = handler.unsubscribe.bind(handler);                                                        // 1293
    }                                                                                                                  // 1294
};                                                                                                                     // 1295
                                                                                                                       // 1296
/**                                                                                                                    // 1297
 * Assign an event handler to receive an object's output events.                                                       // 1298
 *                                                                                                                     // 1299
 * @method setOutputHandler                                                                                            // 1300
 * @static                                                                                                             // 1301
 *                                                                                                                     // 1302
 * @param {Object} object object to mix pipe, unpipe, on, addListener, and removeListener functions into               // 1303
 * @param {EventHandler} handler assigned event handler                                                                // 1304
 */                                                                                                                    // 1305
EventHandler.setOutputHandler = function setOutputHandler(object, handler) {                                           // 1306
    if (handler instanceof EventHandler) handler.bindThis(object);                                                     // 1307
    object.pipe = handler.pipe.bind(handler);                                                                          // 1308
    object.unpipe = handler.unpipe.bind(handler);                                                                      // 1309
    object.on = handler.on.bind(handler);                                                                              // 1310
    object.addListener = object.on;                                                                                    // 1311
    object.removeListener = handler.removeListener.bind(handler);                                                      // 1312
};                                                                                                                     // 1313
                                                                                                                       // 1314
/**                                                                                                                    // 1315
 * Trigger an event, sending to all downstream handlers                                                                // 1316
 *   listening for provided 'type' key.                                                                                // 1317
 *                                                                                                                     // 1318
 * @method emit                                                                                                        // 1319
 *                                                                                                                     // 1320
 * @param {string} type event type key (for example, 'click')                                                          // 1321
 * @param {Object} event event data                                                                                    // 1322
 * @return {EventHandler} this                                                                                         // 1323
 */                                                                                                                    // 1324
EventHandler.prototype.emit = function emit(type, event) {                                                             // 1325
    EventEmitter.prototype.emit.apply(this, arguments);                                                                // 1326
    var i = 0;                                                                                                         // 1327
    for (i = 0; i < this.downstream.length; i++) {                                                                     // 1328
        if (this.downstream[i].trigger) this.downstream[i].trigger(type, event);                                       // 1329
    }                                                                                                                  // 1330
    for (i = 0; i < this.downstreamFn.length; i++) {                                                                   // 1331
        this.downstreamFn[i](type, event);                                                                             // 1332
    }                                                                                                                  // 1333
    return this;                                                                                                       // 1334
};                                                                                                                     // 1335
                                                                                                                       // 1336
/**                                                                                                                    // 1337
 * Alias for emit                                                                                                      // 1338
 * @method addListener                                                                                                 // 1339
 */                                                                                                                    // 1340
EventHandler.prototype.trigger = EventHandler.prototype.emit;                                                          // 1341
                                                                                                                       // 1342
/**                                                                                                                    // 1343
 * Add event handler object to set of downstream handlers.                                                             // 1344
 *                                                                                                                     // 1345
 * @method pipe                                                                                                        // 1346
 *                                                                                                                     // 1347
 * @param {EventHandler} target event handler target object                                                            // 1348
 * @return {EventHandler} passed event handler                                                                         // 1349
 */                                                                                                                    // 1350
EventHandler.prototype.pipe = function pipe(target) {                                                                  // 1351
    if (target.subscribe instanceof Function) return target.subscribe(this);                                           // 1352
                                                                                                                       // 1353
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1354
    var index = downstreamCtx.indexOf(target);                                                                         // 1355
    if (index < 0) downstreamCtx.push(target);                                                                         // 1356
                                                                                                                       // 1357
    if (target instanceof Function) target('pipe', null);                                                              // 1358
    else if (target.trigger) target.trigger('pipe', null);                                                             // 1359
                                                                                                                       // 1360
    return target;                                                                                                     // 1361
};                                                                                                                     // 1362
                                                                                                                       // 1363
/**                                                                                                                    // 1364
 * Remove handler object from set of downstream handlers.                                                              // 1365
 *   Undoes work of "pipe".                                                                                            // 1366
 *                                                                                                                     // 1367
 * @method unpipe                                                                                                      // 1368
 *                                                                                                                     // 1369
 * @param {EventHandler} target target handler object                                                                  // 1370
 * @return {EventHandler} provided target                                                                              // 1371
 */                                                                                                                    // 1372
EventHandler.prototype.unpipe = function unpipe(target) {                                                              // 1373
    if (target.unsubscribe instanceof Function) return target.unsubscribe(this);                                       // 1374
                                                                                                                       // 1375
    var downstreamCtx = (target instanceof Function) ? this.downstreamFn : this.downstream;                            // 1376
    var index = downstreamCtx.indexOf(target);                                                                         // 1377
    if (index >= 0) {                                                                                                  // 1378
        downstreamCtx.splice(index, 1);                                                                                // 1379
        if (target instanceof Function) target('unpipe', null);                                                        // 1380
        else if (target.trigger) target.trigger('unpipe', null);                                                       // 1381
        return target;                                                                                                 // 1382
    }                                                                                                                  // 1383
    else return false;                                                                                                 // 1384
};                                                                                                                     // 1385
                                                                                                                       // 1386
/**                                                                                                                    // 1387
 * Bind a callback function to an event type handled by this object.                                                   // 1388
 *                                                                                                                     // 1389
 * @method "on"                                                                                                        // 1390
 *                                                                                                                     // 1391
 * @param {string} type event type key (for example, 'click')                                                          // 1392
 * @param {function(string, Object)} handler callback                                                                  // 1393
 * @return {EventHandler} this                                                                                         // 1394
 */                                                                                                                    // 1395
EventHandler.prototype.on = function on(type, handler) {                                                               // 1396
    EventEmitter.prototype.on.apply(this, arguments);                                                                  // 1397
    if (!(type in this.upstreamListeners)) {                                                                           // 1398
        var upstreamListener = this.trigger.bind(this, type);                                                          // 1399
        this.upstreamListeners[type] = upstreamListener;                                                               // 1400
        for (var i = 0; i < this.upstream.length; i++) {                                                               // 1401
            this.upstream[i].on(type, upstreamListener);                                                               // 1402
        }                                                                                                              // 1403
    }                                                                                                                  // 1404
    return this;                                                                                                       // 1405
};                                                                                                                     // 1406
                                                                                                                       // 1407
/**                                                                                                                    // 1408
 * Alias for "on"                                                                                                      // 1409
 * @method addListener                                                                                                 // 1410
 */                                                                                                                    // 1411
EventHandler.prototype.addListener = EventHandler.prototype.on;                                                        // 1412
                                                                                                                       // 1413
/**                                                                                                                    // 1414
 * Listen for events from an upstream event handler.                                                                   // 1415
 *                                                                                                                     // 1416
 * @method subscribe                                                                                                   // 1417
 *                                                                                                                     // 1418
 * @param {EventEmitter} source source emitter object                                                                  // 1419
 * @return {EventHandler} this                                                                                         // 1420
 */                                                                                                                    // 1421
EventHandler.prototype.subscribe = function subscribe(source) {                                                        // 1422
    var index = this.upstream.indexOf(source);                                                                         // 1423
    if (index < 0) {                                                                                                   // 1424
        this.upstream.push(source);                                                                                    // 1425
        for (var type in this.upstreamListeners) {                                                                     // 1426
            source.on(type, this.upstreamListeners[type]);                                                             // 1427
        }                                                                                                              // 1428
    }                                                                                                                  // 1429
    return this;                                                                                                       // 1430
};                                                                                                                     // 1431
                                                                                                                       // 1432
/**                                                                                                                    // 1433
 * Stop listening to events from an upstream event handler.                                                            // 1434
 *                                                                                                                     // 1435
 * @method unsubscribe                                                                                                 // 1436
 *                                                                                                                     // 1437
 * @param {EventEmitter} source source emitter object                                                                  // 1438
 * @return {EventHandler} this                                                                                         // 1439
 */                                                                                                                    // 1440
EventHandler.prototype.unsubscribe = function unsubscribe(source) {                                                    // 1441
    var index = this.upstream.indexOf(source);                                                                         // 1442
    if (index >= 0) {                                                                                                  // 1443
        this.upstream.splice(index, 1);                                                                                // 1444
        for (var type in this.upstreamListeners) {                                                                     // 1445
            source.removeListener(type, this.upstreamListeners[type]);                                                 // 1446
        }                                                                                                              // 1447
    }                                                                                                                  // 1448
    return this;                                                                                                       // 1449
};                                                                                                                     // 1450
                                                                                                                       // 1451
module.exports = EventHandler;                                                                                         // 1452
},{"./EventEmitter":6}],8:[function(_dereq_,module,exports){                                                           // 1453
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1454
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1455
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1456
 *                                                                                                                     // 1457
 * Owner: mark@famo.us                                                                                                 // 1458
 * @license MPL 2.0                                                                                                    // 1459
 * @copyright Famous Industries, Inc. 2014                                                                             // 1460
 */                                                                                                                    // 1461
                                                                                                                       // 1462
var Context = _dereq_('./Context');                                                                                    // 1463
var Transform = _dereq_('./Transform');                                                                                // 1464
var Surface = _dereq_('./Surface');                                                                                    // 1465
                                                                                                                       // 1466
/**                                                                                                                    // 1467
 * A Context designed to contain surfaces and set properties                                                           // 1468
 *   to be applied to all of them at once.                                                                             // 1469
 *   This is primarily used for specific performance improvements in the rendering engine.                             // 1470
 *   Private.                                                                                                          // 1471
 *                                                                                                                     // 1472
 * @private                                                                                                            // 1473
 * @class Group                                                                                                        // 1474
 * @extends Surface                                                                                                    // 1475
 * @constructor                                                                                                        // 1476
 * @param {Object} [options] Surface options array (see Surface})                                                      // 1477
 */                                                                                                                    // 1478
function Group(options) {                                                                                              // 1479
    Surface.call(this, options);                                                                                       // 1480
    this._shouldRecalculateSize = false;                                                                               // 1481
    this._container = document.createDocumentFragment();                                                               // 1482
    this.context = new Context(this._container);                                                                       // 1483
    this.setContent(this._container);                                                                                  // 1484
    this._groupSize = [undefined, undefined];                                                                          // 1485
}                                                                                                                      // 1486
                                                                                                                       // 1487
/** @const */                                                                                                          // 1488
Group.SIZE_ZERO = [0, 0];                                                                                              // 1489
                                                                                                                       // 1490
Group.prototype = Object.create(Surface.prototype);                                                                    // 1491
Group.prototype.elementType = 'div';                                                                                   // 1492
Group.prototype.elementClass = 'famous-group';                                                                         // 1493
                                                                                                                       // 1494
/**                                                                                                                    // 1495
 * Add renderables to this component's render tree.                                                                    // 1496
 *                                                                                                                     // 1497
 * @method add                                                                                                         // 1498
 * @private                                                                                                            // 1499
 * @param {Object} obj renderable object                                                                               // 1500
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 1501
 */                                                                                                                    // 1502
Group.prototype.add = function add() {                                                                                 // 1503
    return this.context.add.apply(this.context, arguments);                                                            // 1504
};                                                                                                                     // 1505
                                                                                                                       // 1506
/**                                                                                                                    // 1507
 * Generate a render spec from the contents of this component.                                                         // 1508
 *                                                                                                                     // 1509
 * @private                                                                                                            // 1510
 * @method render                                                                                                      // 1511
 * @return {Number} Render spec for this component                                                                     // 1512
 */                                                                                                                    // 1513
Group.prototype.render = function render() {                                                                           // 1514
    return Surface.prototype.render.call(this);                                                                        // 1515
};                                                                                                                     // 1516
                                                                                                                       // 1517
/**                                                                                                                    // 1518
 * Place the document element this component manages into the document.                                                // 1519
 *                                                                                                                     // 1520
 * @private                                                                                                            // 1521
 * @method deploy                                                                                                      // 1522
 * @param {Node} target document parent of this container                                                              // 1523
 */                                                                                                                    // 1524
Group.prototype.deploy = function deploy(target) {                                                                     // 1525
    this.context.migrate(target);                                                                                      // 1526
};                                                                                                                     // 1527
                                                                                                                       // 1528
/**                                                                                                                    // 1529
 * Remove this component and contained content from the document                                                       // 1530
 *                                                                                                                     // 1531
 * @private                                                                                                            // 1532
 * @method recall                                                                                                      // 1533
 *                                                                                                                     // 1534
 * @param {Node} target node to which the component was deployed                                                       // 1535
 */                                                                                                                    // 1536
Group.prototype.recall = function recall(target) {                                                                     // 1537
    this._container = document.createDocumentFragment();                                                               // 1538
    this.context.migrate(this._container);                                                                             // 1539
};                                                                                                                     // 1540
                                                                                                                       // 1541
/**                                                                                                                    // 1542
 * Apply changes from this component to the corresponding document element.                                            // 1543
 *                                                                                                                     // 1544
 * @private                                                                                                            // 1545
 * @method commit                                                                                                      // 1546
 *                                                                                                                     // 1547
 * @param {Object} context update spec passed in from above in the render tree.                                        // 1548
 */                                                                                                                    // 1549
Group.prototype.commit = function commit(context) {                                                                    // 1550
    var transform = context.transform;                                                                                 // 1551
    var origin = context.origin;                                                                                       // 1552
    var opacity = context.opacity;                                                                                     // 1553
    var size = context.size;                                                                                           // 1554
    var result = Surface.prototype.commit.call(this, {                                                                 // 1555
        allocator: context.allocator,                                                                                  // 1556
        transform: Transform.thenMove(transform, [-origin[0] * size[0], -origin[1] * size[1], 0]),                     // 1557
        opacity: opacity,                                                                                              // 1558
        origin: origin,                                                                                                // 1559
        size: Group.SIZE_ZERO                                                                                          // 1560
    });                                                                                                                // 1561
    if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {                                            // 1562
        this._groupSize[0] = size[0];                                                                                  // 1563
        this._groupSize[1] = size[1];                                                                                  // 1564
        this.context.setSize(size);                                                                                    // 1565
    }                                                                                                                  // 1566
    this.context.update({                                                                                              // 1567
        transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),                                 // 1568
        origin: origin,                                                                                                // 1569
        size: size                                                                                                     // 1570
    });                                                                                                                // 1571
    return result;                                                                                                     // 1572
};                                                                                                                     // 1573
                                                                                                                       // 1574
module.exports = Group;                                                                                                // 1575
},{"./Context":1,"./Surface":14,"./Transform":15}],9:[function(_dereq_,module,exports){                                // 1576
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 1577
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 1578
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 1579
 *                                                                                                                     // 1580
 * Owner: mark@famo.us                                                                                                 // 1581
 * @license MPL 2.0                                                                                                    // 1582
 * @copyright Famous Industries, Inc. 2014                                                                             // 1583
 */                                                                                                                    // 1584
                                                                                                                       // 1585
var Transform = _dereq_('./Transform');                                                                                // 1586
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 1587
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 1588
                                                                                                                       // 1589
/**                                                                                                                    // 1590
 *                                                                                                                     // 1591
 *  A collection of visual changes to be                                                                               // 1592
 *    applied to another renderable component. This collection includes a                                              // 1593
 *    transform matrix, an opacity constant, a size, an origin specifier.                                              // 1594
 *    Modifier objects can be added to any RenderNode or object                                                        // 1595
 *    capable of displaying renderables.  The Modifier's children and descendants                                      // 1596
 *    are transformed by the amounts specified in the Modifier's properties.                                           // 1597
 *                                                                                                                     // 1598
 * @class Modifier                                                                                                     // 1599
 * @constructor                                                                                                        // 1600
 * @param {Object} [options] overrides of default options                                                              // 1601
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 1602
 * @param {Number} [options.opacity]                                                                                   // 1603
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 1604
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 1605
 */                                                                                                                    // 1606
function Modifier(options) {                                                                                           // 1607
    this._transformGetter = null;                                                                                      // 1608
    this._opacityGetter = null;                                                                                        // 1609
    this._originGetter = null;                                                                                         // 1610
    this._alignGetter = null;                                                                                          // 1611
    this._sizeGetter = null;                                                                                           // 1612
    this._proportionGetter = null;                                                                                     // 1613
                                                                                                                       // 1614
    /* TODO: remove this when deprecation complete */                                                                  // 1615
    this._legacyStates = {};                                                                                           // 1616
                                                                                                                       // 1617
    this._output = {                                                                                                   // 1618
        transform: Transform.identity,                                                                                 // 1619
        opacity: 1,                                                                                                    // 1620
        origin: null,                                                                                                  // 1621
        align: null,                                                                                                   // 1622
        size: null,                                                                                                    // 1623
        proportions: null,                                                                                             // 1624
        target: null                                                                                                   // 1625
    };                                                                                                                 // 1626
                                                                                                                       // 1627
    if (options) {                                                                                                     // 1628
        if (options.transform) this.transformFrom(options.transform);                                                  // 1629
        if (options.opacity !== undefined) this.opacityFrom(options.opacity);                                          // 1630
        if (options.origin) this.originFrom(options.origin);                                                           // 1631
        if (options.align) this.alignFrom(options.align);                                                              // 1632
        if (options.size) this.sizeFrom(options.size);                                                                 // 1633
        if (options.proportions) this.proportionsFrom(options.proportions);                                            // 1634
    }                                                                                                                  // 1635
}                                                                                                                      // 1636
                                                                                                                       // 1637
/**                                                                                                                    // 1638
 * Function, object, or static transform matrix which provides the transform.                                          // 1639
 *   This is evaluated on every tick of the engine.                                                                    // 1640
 *                                                                                                                     // 1641
 * @method transformFrom                                                                                               // 1642
 *                                                                                                                     // 1643
 * @param {Object} transform transform provider object                                                                 // 1644
 * @return {Modifier} this                                                                                             // 1645
 */                                                                                                                    // 1646
Modifier.prototype.transformFrom = function transformFrom(transform) {                                                 // 1647
    if (transform instanceof Function) this._transformGetter = transform;                                              // 1648
    else if (transform instanceof Object && transform.get) this._transformGetter = transform.get.bind(transform);      // 1649
    else {                                                                                                             // 1650
        this._transformGetter = null;                                                                                  // 1651
        this._output.transform = transform;                                                                            // 1652
    }                                                                                                                  // 1653
    return this;                                                                                                       // 1654
};                                                                                                                     // 1655
                                                                                                                       // 1656
/**                                                                                                                    // 1657
 * Set function, object, or number to provide opacity, in range [0,1].                                                 // 1658
 *                                                                                                                     // 1659
 * @method opacityFrom                                                                                                 // 1660
 *                                                                                                                     // 1661
 * @param {Object} opacity provider object                                                                             // 1662
 * @return {Modifier} this                                                                                             // 1663
 */                                                                                                                    // 1664
Modifier.prototype.opacityFrom = function opacityFrom(opacity) {                                                       // 1665
    if (opacity instanceof Function) this._opacityGetter = opacity;                                                    // 1666
    else if (opacity instanceof Object && opacity.get) this._opacityGetter = opacity.get.bind(opacity);                // 1667
    else {                                                                                                             // 1668
        this._opacityGetter = null;                                                                                    // 1669
        this._output.opacity = opacity;                                                                                // 1670
    }                                                                                                                  // 1671
    return this;                                                                                                       // 1672
};                                                                                                                     // 1673
                                                                                                                       // 1674
/**                                                                                                                    // 1675
 * Set function, object, or numerical array to provide origin, as [x,y],                                               // 1676
 *   where x and y are in the range [0,1].                                                                             // 1677
 *                                                                                                                     // 1678
 * @method originFrom                                                                                                  // 1679
 *                                                                                                                     // 1680
 * @param {Object} origin provider object                                                                              // 1681
 * @return {Modifier} this                                                                                             // 1682
 */                                                                                                                    // 1683
Modifier.prototype.originFrom = function originFrom(origin) {                                                          // 1684
    if (origin instanceof Function) this._originGetter = origin;                                                       // 1685
    else if (origin instanceof Object && origin.get) this._originGetter = origin.get.bind(origin);                     // 1686
    else {                                                                                                             // 1687
        this._originGetter = null;                                                                                     // 1688
        this._output.origin = origin;                                                                                  // 1689
    }                                                                                                                  // 1690
    return this;                                                                                                       // 1691
};                                                                                                                     // 1692
                                                                                                                       // 1693
/**                                                                                                                    // 1694
 * Set function, object, or numerical array to provide align, as [x,y],                                                // 1695
 *   where x and y are in the range [0,1].                                                                             // 1696
 *                                                                                                                     // 1697
 * @method alignFrom                                                                                                   // 1698
 *                                                                                                                     // 1699
 * @param {Object} align provider object                                                                               // 1700
 * @return {Modifier} this                                                                                             // 1701
 */                                                                                                                    // 1702
Modifier.prototype.alignFrom = function alignFrom(align) {                                                             // 1703
    if (align instanceof Function) this._alignGetter = align;                                                          // 1704
    else if (align instanceof Object && align.get) this._alignGetter = align.get.bind(align);                          // 1705
    else {                                                                                                             // 1706
        this._alignGetter = null;                                                                                      // 1707
        this._output.align = align;                                                                                    // 1708
    }                                                                                                                  // 1709
    return this;                                                                                                       // 1710
};                                                                                                                     // 1711
                                                                                                                       // 1712
/**                                                                                                                    // 1713
 * Set function, object, or numerical array to provide size, as [width, height].                                       // 1714
 *                                                                                                                     // 1715
 * @method sizeFrom                                                                                                    // 1716
 *                                                                                                                     // 1717
 * @param {Object} size provider object                                                                                // 1718
 * @return {Modifier} this                                                                                             // 1719
 */                                                                                                                    // 1720
Modifier.prototype.sizeFrom = function sizeFrom(size) {                                                                // 1721
    if (size instanceof Function) this._sizeGetter = size;                                                             // 1722
    else if (size instanceof Object && size.get) this._sizeGetter = size.get.bind(size);                               // 1723
    else {                                                                                                             // 1724
        this._sizeGetter = null;                                                                                       // 1725
        this._output.size = size;                                                                                      // 1726
    }                                                                                                                  // 1727
    return this;                                                                                                       // 1728
};                                                                                                                     // 1729
                                                                                                                       // 1730
/**                                                                                                                    // 1731
 * Set function, object, or numerical array to provide proportions, as [percent of width, percent of height].          // 1732
 *                                                                                                                     // 1733
 * @method proportionsFrom                                                                                             // 1734
 *                                                                                                                     // 1735
 * @param {Object} proportions provider object                                                                         // 1736
 * @return {Modifier} this                                                                                             // 1737
 */                                                                                                                    // 1738
Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {                                           // 1739
    if (proportions instanceof Function) this._proportionGetter = proportions;                                         // 1740
    else if (proportions instanceof Object && proportions.get) this._proportionGetter = proportions.get.bind(proportions);
    else {                                                                                                             // 1742
        this._proportionGetter = null;                                                                                 // 1743
        this._output.proportions = proportions;                                                                        // 1744
    }                                                                                                                  // 1745
    return this;                                                                                                       // 1746
};                                                                                                                     // 1747
                                                                                                                       // 1748
 /**                                                                                                                   // 1749
 * Deprecated: Prefer transformFrom with static Transform, or use a TransitionableTransform.                           // 1750
 * @deprecated                                                                                                         // 1751
 * @method setTransform                                                                                                // 1752
 *                                                                                                                     // 1753
 * @param {Transform} transform Transform to transition to                                                             // 1754
 * @param {Transitionable} transition Valid transitionable object                                                      // 1755
 * @param {Function} callback callback to call after transition completes                                              // 1756
 * @return {Modifier} this                                                                                             // 1757
 */                                                                                                                    // 1758
Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {                             // 1759
    if (transition || this._legacyStates.transform) {                                                                  // 1760
        if (!this._legacyStates.transform) {                                                                           // 1761
            this._legacyStates.transform = new TransitionableTransform(this._output.transform);                        // 1762
        }                                                                                                              // 1763
        if (!this._transformGetter) this.transformFrom(this._legacyStates.transform);                                  // 1764
                                                                                                                       // 1765
        this._legacyStates.transform.set(transform, transition, callback);                                             // 1766
        return this;                                                                                                   // 1767
    }                                                                                                                  // 1768
    else return this.transformFrom(transform);                                                                         // 1769
};                                                                                                                     // 1770
                                                                                                                       // 1771
/**                                                                                                                    // 1772
 * Deprecated: Prefer opacityFrom with static opacity array, or use a Transitionable with that opacity.                // 1773
 * @deprecated                                                                                                         // 1774
 * @method setOpacity                                                                                                  // 1775
 *                                                                                                                     // 1776
 * @param {Number} opacity Opacity value to transition to.                                                             // 1777
 * @param {Transitionable} transition Valid transitionable object                                                      // 1778
 * @param {Function} callback callback to call after transition completes                                              // 1779
 * @return {Modifier} this                                                                                             // 1780
 */                                                                                                                    // 1781
Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                                   // 1782
    if (transition || this._legacyStates.opacity) {                                                                    // 1783
        if (!this._legacyStates.opacity) {                                                                             // 1784
            this._legacyStates.opacity = new Transitionable(this._output.opacity);                                     // 1785
        }                                                                                                              // 1786
        if (!this._opacityGetter) this.opacityFrom(this._legacyStates.opacity);                                        // 1787
                                                                                                                       // 1788
        return this._legacyStates.opacity.set(opacity, transition, callback);                                          // 1789
    }                                                                                                                  // 1790
    else return this.opacityFrom(opacity);                                                                             // 1791
};                                                                                                                     // 1792
                                                                                                                       // 1793
/**                                                                                                                    // 1794
 * Deprecated: Prefer originFrom with static origin array, or use a Transitionable with that origin.                   // 1795
 * @deprecated                                                                                                         // 1796
 * @method setOrigin                                                                                                   // 1797
 *                                                                                                                     // 1798
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 1799
 * @param {Transitionable} transition Valid transitionable object                                                      // 1800
 * @param {Function} callback callback to call after transition completes                                              // 1801
 * @return {Modifier} this                                                                                             // 1802
 */                                                                                                                    // 1803
Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                      // 1804
    /* TODO: remove this if statement when deprecation complete */                                                     // 1805
    if (transition || this._legacyStates.origin) {                                                                     // 1806
                                                                                                                       // 1807
        if (!this._legacyStates.origin) {                                                                              // 1808
            this._legacyStates.origin = new Transitionable(this._output.origin || [0, 0]);                             // 1809
        }                                                                                                              // 1810
        if (!this._originGetter) this.originFrom(this._legacyStates.origin);                                           // 1811
                                                                                                                       // 1812
        this._legacyStates.origin.set(origin, transition, callback);                                                   // 1813
        return this;                                                                                                   // 1814
    }                                                                                                                  // 1815
    else return this.originFrom(origin);                                                                               // 1816
};                                                                                                                     // 1817
                                                                                                                       // 1818
/**                                                                                                                    // 1819
 * Deprecated: Prefer alignFrom with static align array, or use a Transitionable with that align.                      // 1820
 * @deprecated                                                                                                         // 1821
 * @method setAlign                                                                                                    // 1822
 *                                                                                                                     // 1823
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 1824
 * @param {Transitionable} transition Valid transitionable object                                                      // 1825
 * @param {Function} callback callback to call after transition completes                                              // 1826
 * @return {Modifier} this                                                                                             // 1827
 */                                                                                                                    // 1828
Modifier.prototype.setAlign = function setAlign(align, transition, callback) {                                         // 1829
    /* TODO: remove this if statement when deprecation complete */                                                     // 1830
    if (transition || this._legacyStates.align) {                                                                      // 1831
                                                                                                                       // 1832
        if (!this._legacyStates.align) {                                                                               // 1833
            this._legacyStates.align = new Transitionable(this._output.align || [0, 0]);                               // 1834
        }                                                                                                              // 1835
        if (!this._alignGetter) this.alignFrom(this._legacyStates.align);                                              // 1836
                                                                                                                       // 1837
        this._legacyStates.align.set(align, transition, callback);                                                     // 1838
        return this;                                                                                                   // 1839
    }                                                                                                                  // 1840
    else return this.alignFrom(align);                                                                                 // 1841
};                                                                                                                     // 1842
                                                                                                                       // 1843
/**                                                                                                                    // 1844
 * Deprecated: Prefer sizeFrom with static origin array, or use a Transitionable with that size.                       // 1845
 * @deprecated                                                                                                         // 1846
 * @method setSize                                                                                                     // 1847
 * @param {Array.Number} size two element array of [width, height]                                                     // 1848
 * @param {Transitionable} transition Valid transitionable object                                                      // 1849
 * @param {Function} callback callback to call after transition completes                                              // 1850
 * @return {Modifier} this                                                                                             // 1851
 */                                                                                                                    // 1852
Modifier.prototype.setSize = function setSize(size, transition, callback) {                                            // 1853
    if (size && (transition || this._legacyStates.size)) {                                                             // 1854
        if (!this._legacyStates.size) {                                                                                // 1855
            this._legacyStates.size = new Transitionable(this._output.size || [0, 0]);                                 // 1856
        }                                                                                                              // 1857
        if (!this._sizeGetter) this.sizeFrom(this._legacyStates.size);                                                 // 1858
                                                                                                                       // 1859
        this._legacyStates.size.set(size, transition, callback);                                                       // 1860
        return this;                                                                                                   // 1861
    }                                                                                                                  // 1862
    else return this.sizeFrom(size);                                                                                   // 1863
};                                                                                                                     // 1864
                                                                                                                       // 1865
/**                                                                                                                    // 1866
 * Deprecated: Prefer proportionsFrom with static origin array, or use a Transitionable with those proportions.        // 1867
 * @deprecated                                                                                                         // 1868
 * @method setProportions                                                                                              // 1869
 * @param {Array.Number} proportions two element array of [percent of width, percent of height]                        // 1870
 * @param {Transitionable} transition Valid transitionable object                                                      // 1871
 * @param {Function} callback callback to call after transition completes                                              // 1872
 * @return {Modifier} this                                                                                             // 1873
 */                                                                                                                    // 1874
Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {                       // 1875
    if (proportions && (transition || this._legacyStates.proportions)) {                                               // 1876
        if (!this._legacyStates.proportions) {                                                                         // 1877
            this._legacyStates.proportions = new Transitionable(this._output.proportions || [0, 0]);                   // 1878
        }                                                                                                              // 1879
        if (!this._proportionGetter) this.proportionsFrom(this._legacyStates.proportions);                             // 1880
                                                                                                                       // 1881
        this._legacyStates.proportions.set(proportions, transition, callback);                                         // 1882
        return this;                                                                                                   // 1883
    }                                                                                                                  // 1884
    else return this.proportionsFrom(proportions);                                                                     // 1885
};                                                                                                                     // 1886
                                                                                                                       // 1887
/**                                                                                                                    // 1888
 * Deprecated: Prefer to stop transform in your provider object.                                                       // 1889
 * @deprecated                                                                                                         // 1890
 * @method halt                                                                                                        // 1891
 */                                                                                                                    // 1892
Modifier.prototype.halt = function halt() {                                                                            // 1893
    if (this._legacyStates.transform) this._legacyStates.transform.halt();                                             // 1894
    if (this._legacyStates.opacity) this._legacyStates.opacity.halt();                                                 // 1895
    if (this._legacyStates.origin) this._legacyStates.origin.halt();                                                   // 1896
    if (this._legacyStates.align) this._legacyStates.align.halt();                                                     // 1897
    if (this._legacyStates.size) this._legacyStates.size.halt();                                                       // 1898
    if (this._legacyStates.proportions) this._legacyStates.proportions.halt();                                         // 1899
    this._transformGetter = null;                                                                                      // 1900
    this._opacityGetter = null;                                                                                        // 1901
    this._originGetter = null;                                                                                         // 1902
    this._alignGetter = null;                                                                                          // 1903
    this._sizeGetter = null;                                                                                           // 1904
    this._proportionGetter = null;                                                                                     // 1905
};                                                                                                                     // 1906
                                                                                                                       // 1907
/**                                                                                                                    // 1908
 * Deprecated: Prefer to use your provided transform or output of your transform provider.                             // 1909
 * @deprecated                                                                                                         // 1910
 * @method getTransform                                                                                                // 1911
 * @return {Object} transform provider object                                                                          // 1912
 */                                                                                                                    // 1913
Modifier.prototype.getTransform = function getTransform() {                                                            // 1914
    return this._transformGetter();                                                                                    // 1915
};                                                                                                                     // 1916
                                                                                                                       // 1917
/**                                                                                                                    // 1918
 * Deprecated: Prefer to determine the end state of your transform from your transform provider                        // 1919
 * @deprecated                                                                                                         // 1920
 * @method getFinalTransform                                                                                           // 1921
 * @return {Transform} transform matrix                                                                                // 1922
 */                                                                                                                    // 1923
Modifier.prototype.getFinalTransform = function getFinalTransform() {                                                  // 1924
    return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;            // 1925
};                                                                                                                     // 1926
                                                                                                                       // 1927
/**                                                                                                                    // 1928
 * Deprecated: Prefer to use your provided opacity or output of your opacity provider.                                 // 1929
 * @deprecated                                                                                                         // 1930
 * @method getOpacity                                                                                                  // 1931
 * @return {Object} opacity provider object                                                                            // 1932
 */                                                                                                                    // 1933
Modifier.prototype.getOpacity = function getOpacity() {                                                                // 1934
    return this._opacityGetter();                                                                                      // 1935
};                                                                                                                     // 1936
                                                                                                                       // 1937
/**                                                                                                                    // 1938
 * Deprecated: Prefer to use your provided origin or output of your origin provider.                                   // 1939
 * @deprecated                                                                                                         // 1940
 * @method getOrigin                                                                                                   // 1941
 * @return {Object} origin provider object                                                                             // 1942
 */                                                                                                                    // 1943
Modifier.prototype.getOrigin = function getOrigin() {                                                                  // 1944
    return this._originGetter();                                                                                       // 1945
};                                                                                                                     // 1946
                                                                                                                       // 1947
/**                                                                                                                    // 1948
 * Deprecated: Prefer to use your provided align or output of your align provider.                                     // 1949
 * @deprecated                                                                                                         // 1950
 * @method getAlign                                                                                                    // 1951
 * @return {Object} align provider object                                                                              // 1952
 */                                                                                                                    // 1953
Modifier.prototype.getAlign = function getAlign() {                                                                    // 1954
    return this._alignGetter();                                                                                        // 1955
};                                                                                                                     // 1956
                                                                                                                       // 1957
/**                                                                                                                    // 1958
 * Deprecated: Prefer to use your provided size or output of your size provider.                                       // 1959
 * @deprecated                                                                                                         // 1960
 * @method getSize                                                                                                     // 1961
 * @return {Object} size provider object                                                                               // 1962
 */                                                                                                                    // 1963
Modifier.prototype.getSize = function getSize() {                                                                      // 1964
    return this._sizeGetter ? this._sizeGetter() : this._output.size;                                                  // 1965
};                                                                                                                     // 1966
                                                                                                                       // 1967
/**                                                                                                                    // 1968
 * Deprecated: Prefer to use your provided proportions or output of your proportions provider.                         // 1969
 * @deprecated                                                                                                         // 1970
 * @method getProportions                                                                                              // 1971
 * @return {Object} proportions provider object                                                                        // 1972
 */                                                                                                                    // 1973
Modifier.prototype.getProportions = function getProportions() {                                                        // 1974
    return this._proportionGetter ? this._proportionGetter() : this._output.proportions;                               // 1975
};                                                                                                                     // 1976
                                                                                                                       // 1977
// call providers on tick to receive render spec elements to apply                                                     // 1978
function _update() {                                                                                                   // 1979
    if (this._transformGetter) this._output.transform = this._transformGetter();                                       // 1980
    if (this._opacityGetter) this._output.opacity = this._opacityGetter();                                             // 1981
    if (this._originGetter) this._output.origin = this._originGetter();                                                // 1982
    if (this._alignGetter) this._output.align = this._alignGetter();                                                   // 1983
    if (this._sizeGetter) this._output.size = this._sizeGetter();                                                      // 1984
    if (this._proportionGetter) this._output.proportions = this._proportionGetter();                                   // 1985
}                                                                                                                      // 1986
                                                                                                                       // 1987
/**                                                                                                                    // 1988
 * Return render spec for this Modifier, applying to the provided                                                      // 1989
 *    target component.  This is similar to render() for Surfaces.                                                     // 1990
 *                                                                                                                     // 1991
 * @private                                                                                                            // 1992
 * @method modify                                                                                                      // 1993
 *                                                                                                                     // 1994
 * @param {Object} target (already rendered) render spec to                                                            // 1995
 *    which to apply the transform.                                                                                    // 1996
 * @return {Object} render spec for this Modifier, including the                                                       // 1997
 *    provided target                                                                                                  // 1998
 */                                                                                                                    // 1999
Modifier.prototype.modify = function modify(target) {                                                                  // 2000
    _update.call(this);                                                                                                // 2001
    this._output.target = target;                                                                                      // 2002
    return this._output;                                                                                               // 2003
};                                                                                                                     // 2004
                                                                                                                       // 2005
module.exports = Modifier;                                                                                             // 2006
},{"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90,"./Transform":15}],10:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2008
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2009
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2010
 *                                                                                                                     // 2011
 * Owner: mark@famo.us                                                                                                 // 2012
 * @license MPL 2.0                                                                                                    // 2013
 * @copyright Famous Industries, Inc. 2014                                                                             // 2014
 */                                                                                                                    // 2015
                                                                                                                       // 2016
var EventHandler = _dereq_('./EventHandler');                                                                          // 2017
                                                                                                                       // 2018
/**                                                                                                                    // 2019
 *  A collection of methods for setting options which can be extended                                                  // 2020
 *  onto other classes.                                                                                                // 2021
 *                                                                                                                     // 2022
 *                                                                                                                     // 2023
 *  **** WARNING ****                                                                                                  // 2024
 *  You can only pass through objects that will compile into valid JSON.                                               // 2025
 *                                                                                                                     // 2026
 *  Valid options:                                                                                                     // 2027
 *      Strings,                                                                                                       // 2028
 *      Arrays,                                                                                                        // 2029
 *      Objects,                                                                                                       // 2030
 *      Numbers,                                                                                                       // 2031
 *      Nested Objects,                                                                                                // 2032
 *      Nested Arrays.                                                                                                 // 2033
 *                                                                                                                     // 2034
 *    This excludes:                                                                                                   // 2035
 *        Document Fragments,                                                                                          // 2036
 *        Functions                                                                                                    // 2037
 * @class OptionsManager                                                                                               // 2038
 * @constructor                                                                                                        // 2039
 * @param {Object} value options dictionary                                                                            // 2040
 */                                                                                                                    // 2041
function OptionsManager(value) {                                                                                       // 2042
    this._value = value;                                                                                               // 2043
    this.eventOutput = null;                                                                                           // 2044
}                                                                                                                      // 2045
                                                                                                                       // 2046
/**                                                                                                                    // 2047
 * Create options manager from source dictionary with arguments overriden by patch dictionary.                         // 2048
 *                                                                                                                     // 2049
 * @static                                                                                                             // 2050
 * @method OptionsManager.patch                                                                                        // 2051
 *                                                                                                                     // 2052
 * @param {Object} source source arguments                                                                             // 2053
 * @param {...Object} data argument additions and overwrites                                                           // 2054
 * @return {Object} source object                                                                                      // 2055
 */                                                                                                                    // 2056
OptionsManager.patch = function patchObject(source, data) {                                                            // 2057
    var manager = new OptionsManager(source);                                                                          // 2058
    for (var i = 1; i < arguments.length; i++) manager.patch(arguments[i]);                                            // 2059
    return source;                                                                                                     // 2060
};                                                                                                                     // 2061
                                                                                                                       // 2062
function _createEventOutput() {                                                                                        // 2063
    this.eventOutput = new EventHandler();                                                                             // 2064
    this.eventOutput.bindThis(this);                                                                                   // 2065
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 2066
}                                                                                                                      // 2067
                                                                                                                       // 2068
/**                                                                                                                    // 2069
 * Create OptionsManager from source with arguments overriden by patches.                                              // 2070
 *   Triggers 'change' event on this object's event handler if the state of                                            // 2071
 *   the OptionsManager changes as a result.                                                                           // 2072
 *                                                                                                                     // 2073
 * @method patch                                                                                                       // 2074
 *                                                                                                                     // 2075
 * @param {...Object} arguments list of patch objects                                                                  // 2076
 * @return {OptionsManager} this                                                                                       // 2077
 */                                                                                                                    // 2078
OptionsManager.prototype.patch = function patch() {                                                                    // 2079
    var myState = this._value;                                                                                         // 2080
    for (var i = 0; i < arguments.length; i++) {                                                                       // 2081
        var data = arguments[i];                                                                                       // 2082
        for (var k in data) {                                                                                          // 2083
            if ((k in myState) && (data[k] && data[k].constructor === Object) && (myState[k] && myState[k].constructor === Object)) {
                if (!myState.hasOwnProperty(k)) myState[k] = Object.create(myState[k]);                                // 2085
                this.key(k).patch(data[k]);                                                                            // 2086
                if (this.eventOutput) this.eventOutput.emit('change', {id: k, value: this.key(k).value()});            // 2087
            }                                                                                                          // 2088
            else this.set(k, data[k]);                                                                                 // 2089
        }                                                                                                              // 2090
    }                                                                                                                  // 2091
    return this;                                                                                                       // 2092
};                                                                                                                     // 2093
                                                                                                                       // 2094
/**                                                                                                                    // 2095
 * Alias for patch                                                                                                     // 2096
 *                                                                                                                     // 2097
 * @method setOptions                                                                                                  // 2098
 *                                                                                                                     // 2099
 */                                                                                                                    // 2100
OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;                                                  // 2101
                                                                                                                       // 2102
/**                                                                                                                    // 2103
 * Return OptionsManager based on sub-object retrieved by key                                                          // 2104
 *                                                                                                                     // 2105
 * @method key                                                                                                         // 2106
 *                                                                                                                     // 2107
 * @param {string} identifier key                                                                                      // 2108
 * @return {OptionsManager} new options manager with the value                                                         // 2109
 */                                                                                                                    // 2110
OptionsManager.prototype.key = function key(identifier) {                                                              // 2111
    var result = new OptionsManager(this._value[identifier]);                                                          // 2112
    if (!(result._value instanceof Object) || result._value instanceof Array) result._value = {};                      // 2113
    return result;                                                                                                     // 2114
};                                                                                                                     // 2115
                                                                                                                       // 2116
/**                                                                                                                    // 2117
 * Look up value by key or get the full options hash                                                                   // 2118
 * @method get                                                                                                         // 2119
 *                                                                                                                     // 2120
 * @param {string} key key                                                                                             // 2121
 * @return {Object} associated object or full options hash                                                             // 2122
 */                                                                                                                    // 2123
OptionsManager.prototype.get = function get(key) {                                                                     // 2124
    return key ? this._value[key] : this._value;                                                                       // 2125
};                                                                                                                     // 2126
                                                                                                                       // 2127
/**                                                                                                                    // 2128
 * Alias for get                                                                                                       // 2129
 * @method getOptions                                                                                                  // 2130
 */                                                                                                                    // 2131
OptionsManager.prototype.getOptions = OptionsManager.prototype.get;                                                    // 2132
                                                                                                                       // 2133
/**                                                                                                                    // 2134
 * Set key to value.  Outputs 'change' event if a value is overwritten.                                                // 2135
 *                                                                                                                     // 2136
 * @method set                                                                                                         // 2137
 *                                                                                                                     // 2138
 * @param {string} key key string                                                                                      // 2139
 * @param {Object} value value object                                                                                  // 2140
 * @return {OptionsManager} new options manager based on the value object                                              // 2141
 */                                                                                                                    // 2142
OptionsManager.prototype.set = function set(key, value) {                                                              // 2143
    var originalValue = this.get(key);                                                                                 // 2144
    this._value[key] = value;                                                                                          // 2145
    if (this.eventOutput && value !== originalValue) this.eventOutput.emit('change', {id: key, value: value});         // 2146
    return this;                                                                                                       // 2147
};                                                                                                                     // 2148
                                                                                                                       // 2149
/**                                                                                                                    // 2150
 * Bind a callback function to an event type handled by this object.                                                   // 2151
 *                                                                                                                     // 2152
 * @method "on"                                                                                                        // 2153
 *                                                                                                                     // 2154
 * @param {string} type event type key (for example, 'change')                                                         // 2155
 * @param {function(string, Object)} handler callback                                                                  // 2156
 * @return {EventHandler} this                                                                                         // 2157
 */                                                                                                                    // 2158
OptionsManager.prototype.on = function on() {                                                                          // 2159
    _createEventOutput.call(this);                                                                                     // 2160
    return this.on.apply(this, arguments);                                                                             // 2161
};                                                                                                                     // 2162
                                                                                                                       // 2163
/**                                                                                                                    // 2164
 * Unbind an event by type and handler.                                                                                // 2165
 *   This undoes the work of "on".                                                                                     // 2166
 *                                                                                                                     // 2167
 * @method removeListener                                                                                              // 2168
 *                                                                                                                     // 2169
 * @param {string} type event type key (for example, 'change')                                                         // 2170
 * @param {function} handler function object to remove                                                                 // 2171
 * @return {EventHandler} internal event handler object (for chaining)                                                 // 2172
 */                                                                                                                    // 2173
OptionsManager.prototype.removeListener = function removeListener() {                                                  // 2174
    _createEventOutput.call(this);                                                                                     // 2175
    return this.removeListener.apply(this, arguments);                                                                 // 2176
};                                                                                                                     // 2177
                                                                                                                       // 2178
/**                                                                                                                    // 2179
 * Add event handler object to set of downstream handlers.                                                             // 2180
 *                                                                                                                     // 2181
 * @method pipe                                                                                                        // 2182
 *                                                                                                                     // 2183
 * @param {EventHandler} target event handler target object                                                            // 2184
 * @return {EventHandler} passed event handler                                                                         // 2185
 */                                                                                                                    // 2186
OptionsManager.prototype.pipe = function pipe() {                                                                      // 2187
    _createEventOutput.call(this);                                                                                     // 2188
    return this.pipe.apply(this, arguments);                                                                           // 2189
};                                                                                                                     // 2190
                                                                                                                       // 2191
/**                                                                                                                    // 2192
 * Remove handler object from set of downstream handlers.                                                              // 2193
 * Undoes work of "pipe"                                                                                               // 2194
 *                                                                                                                     // 2195
 * @method unpipe                                                                                                      // 2196
 *                                                                                                                     // 2197
 * @param {EventHandler} target target handler object                                                                  // 2198
 * @return {EventHandler} provided target                                                                              // 2199
 */                                                                                                                    // 2200
OptionsManager.prototype.unpipe = function unpipe() {                                                                  // 2201
    _createEventOutput.call(this);                                                                                     // 2202
    return this.unpipe.apply(this, arguments);                                                                         // 2203
};                                                                                                                     // 2204
                                                                                                                       // 2205
module.exports = OptionsManager;                                                                                       // 2206
},{"./EventHandler":7}],11:[function(_dereq_,module,exports){                                                          // 2207
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2208
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2209
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2210
 *                                                                                                                     // 2211
 * Owner: mark@famo.us                                                                                                 // 2212
 * @license MPL 2.0                                                                                                    // 2213
 * @copyright Famous Industries, Inc. 2014                                                                             // 2214
 */                                                                                                                    // 2215
                                                                                                                       // 2216
var Entity = _dereq_('./Entity');                                                                                      // 2217
var SpecParser = _dereq_('./SpecParser');                                                                              // 2218
                                                                                                                       // 2219
/**                                                                                                                    // 2220
 * A wrapper for inserting a renderable component (like a Modifer or                                                   // 2221
 *   Surface) into the render tree.                                                                                    // 2222
 *                                                                                                                     // 2223
 * @class RenderNode                                                                                                   // 2224
 * @constructor                                                                                                        // 2225
 *                                                                                                                     // 2226
 * @param {Object} object Target renderable component                                                                  // 2227
 */                                                                                                                    // 2228
function RenderNode(object) {                                                                                          // 2229
    this._object = null;                                                                                               // 2230
    this._child = null;                                                                                                // 2231
    this._hasMultipleChildren = false;                                                                                 // 2232
    this._isRenderable = false;                                                                                        // 2233
    this._isModifier = false;                                                                                          // 2234
                                                                                                                       // 2235
    this._resultCache = {};                                                                                            // 2236
    this._prevResults = {};                                                                                            // 2237
                                                                                                                       // 2238
    this._childResult = null;                                                                                          // 2239
                                                                                                                       // 2240
    if (object) this.set(object);                                                                                      // 2241
}                                                                                                                      // 2242
                                                                                                                       // 2243
/**                                                                                                                    // 2244
 * Append a renderable to the list of this node's children.                                                            // 2245
 *   This produces a new RenderNode in the tree.                                                                       // 2246
 *   Note: Does not double-wrap if child is a RenderNode already.                                                      // 2247
 *                                                                                                                     // 2248
 * @method add                                                                                                         // 2249
 * @param {Object} child renderable object                                                                             // 2250
 * @return {RenderNode} new render node wrapping child                                                                 // 2251
 */                                                                                                                    // 2252
RenderNode.prototype.add = function add(child) {                                                                       // 2253
    var childNode = (child instanceof RenderNode) ? child : new RenderNode(child);                                     // 2254
    if (this._child instanceof Array) this._child.push(childNode);                                                     // 2255
    else if (this._child) {                                                                                            // 2256
        this._child = [this._child, childNode];                                                                        // 2257
        this._hasMultipleChildren = true;                                                                              // 2258
        this._childResult = []; // to be used later                                                                    // 2259
    }                                                                                                                  // 2260
    else this._child = childNode;                                                                                      // 2261
                                                                                                                       // 2262
    return childNode;                                                                                                  // 2263
};                                                                                                                     // 2264
                                                                                                                       // 2265
/**                                                                                                                    // 2266
 * Return the single wrapped object.  Returns null if this node has multiple child nodes.                              // 2267
 *                                                                                                                     // 2268
 * @method get                                                                                                         // 2269
 *                                                                                                                     // 2270
 * @return {Ojbect} contained renderable object                                                                        // 2271
 */                                                                                                                    // 2272
RenderNode.prototype.get = function get() {                                                                            // 2273
    return this._object || (this._hasMultipleChildren ? null : (this._child ? this._child.get() : null));              // 2274
};                                                                                                                     // 2275
                                                                                                                       // 2276
/**                                                                                                                    // 2277
 * Overwrite the list of children to contain the single provided object                                                // 2278
 *                                                                                                                     // 2279
 * @method set                                                                                                         // 2280
 * @param {Object} child renderable object                                                                             // 2281
 * @return {RenderNode} this render node, or child if it is a RenderNode                                               // 2282
 */                                                                                                                    // 2283
RenderNode.prototype.set = function set(child) {                                                                       // 2284
    this._childResult = null;                                                                                          // 2285
    this._hasMultipleChildren = false;                                                                                 // 2286
    this._isRenderable = child.render ? true : false;                                                                  // 2287
    this._isModifier = child.modify ? true : false;                                                                    // 2288
    this._object = child;                                                                                              // 2289
    this._child = null;                                                                                                // 2290
    if (child instanceof RenderNode) return child;                                                                     // 2291
    else return this;                                                                                                  // 2292
};                                                                                                                     // 2293
                                                                                                                       // 2294
/**                                                                                                                    // 2295
 * Get render size of contained object.                                                                                // 2296
 *                                                                                                                     // 2297
 * @method getSize                                                                                                     // 2298
 * @return {Array.Number} size of this or size of single child.                                                        // 2299
 */                                                                                                                    // 2300
RenderNode.prototype.getSize = function getSize() {                                                                    // 2301
    var result = null;                                                                                                 // 2302
    var target = this.get();                                                                                           // 2303
    if (target && target.getSize) result = target.getSize();                                                           // 2304
    if (!result && this._child && this._child.getSize) result = this._child.getSize();                                 // 2305
    return result;                                                                                                     // 2306
};                                                                                                                     // 2307
                                                                                                                       // 2308
// apply results of rendering this subtree to the document                                                             // 2309
function _applyCommit(spec, context, cacheStorage) {                                                                   // 2310
    var result = SpecParser.parse(spec, context);                                                                      // 2311
    var keys = Object.keys(result);                                                                                    // 2312
    for (var i = 0; i < keys.length; i++) {                                                                            // 2313
        var id = keys[i];                                                                                              // 2314
        var childNode = Entity.get(id);                                                                                // 2315
        var commitParams = result[id];                                                                                 // 2316
        commitParams.allocator = context.allocator;                                                                    // 2317
        var commitResult = childNode.commit(commitParams);                                                             // 2318
        if (commitResult) _applyCommit(commitResult, context, cacheStorage);                                           // 2319
        else cacheStorage[id] = commitParams;                                                                          // 2320
    }                                                                                                                  // 2321
}                                                                                                                      // 2322
                                                                                                                       // 2323
/**                                                                                                                    // 2324
 * Commit the content change from this node to the document.                                                           // 2325
 *                                                                                                                     // 2326
 * @private                                                                                                            // 2327
 * @method commit                                                                                                      // 2328
 * @param {Context} context render context                                                                             // 2329
 */                                                                                                                    // 2330
RenderNode.prototype.commit = function commit(context) {                                                               // 2331
    // free up some divs from the last loop                                                                            // 2332
    var prevKeys = Object.keys(this._prevResults);                                                                     // 2333
    for (var i = 0; i < prevKeys.length; i++) {                                                                        // 2334
        var id = prevKeys[i];                                                                                          // 2335
        if (this._resultCache[id] === undefined) {                                                                     // 2336
            var object = Entity.get(id);                                                                               // 2337
            if (object.cleanup) object.cleanup(context.allocator);                                                     // 2338
        }                                                                                                              // 2339
    }                                                                                                                  // 2340
                                                                                                                       // 2341
    this._prevResults = this._resultCache;                                                                             // 2342
    this._resultCache = {};                                                                                            // 2343
    _applyCommit(this.render(), context, this._resultCache);                                                           // 2344
};                                                                                                                     // 2345
                                                                                                                       // 2346
/**                                                                                                                    // 2347
 * Generate a render spec from the contents of the wrapped component.                                                  // 2348
 *                                                                                                                     // 2349
 * @private                                                                                                            // 2350
 * @method render                                                                                                      // 2351
 *                                                                                                                     // 2352
 * @return {Object} render specification for the component subtree                                                     // 2353
 *    only under this node.                                                                                            // 2354
 */                                                                                                                    // 2355
RenderNode.prototype.render = function render() {                                                                      // 2356
    if (this._isRenderable) return this._object.render();                                                              // 2357
                                                                                                                       // 2358
    var result = null;                                                                                                 // 2359
    if (this._hasMultipleChildren) {                                                                                   // 2360
        result = this._childResult;                                                                                    // 2361
        var children = this._child;                                                                                    // 2362
        for (var i = 0; i < children.length; i++) {                                                                    // 2363
            result[i] = children[i].render();                                                                          // 2364
        }                                                                                                              // 2365
    }                                                                                                                  // 2366
    else if (this._child) result = this._child.render();                                                               // 2367
                                                                                                                       // 2368
    return this._isModifier ? this._object.modify(result) : result;                                                    // 2369
};                                                                                                                     // 2370
                                                                                                                       // 2371
module.exports = RenderNode;                                                                                           // 2372
},{"./Entity":5,"./SpecParser":13}],12:[function(_dereq_,module,exports){                                              // 2373
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2374
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2375
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2376
 *                                                                                                                     // 2377
 * Owner: mark@famo.us                                                                                                 // 2378
 * @license MPL 2.0                                                                                                    // 2379
 * @copyright Famous Industries, Inc. 2014                                                                             // 2380
 */                                                                                                                    // 2381
                                                                                                                       // 2382
var Transform = _dereq_('./Transform');                                                                                // 2383
var Modifier = _dereq_('./Modifier');                                                                                  // 2384
var RenderNode = _dereq_('./RenderNode');                                                                              // 2385
                                                                                                                       // 2386
/**                                                                                                                    // 2387
 * Builds and renders a scene graph based on a declarative structure definition.                                       // 2388
 * See the Scene examples in the examples distribution (http://github.com/Famous/examples.git).                        // 2389
 *                                                                                                                     // 2390
 * @class Scene                                                                                                        // 2391
 * @constructor                                                                                                        // 2392
 * @param {Object|Array|Spec} definition in the format of a render spec.                                               // 2393
 */                                                                                                                    // 2394
function Scene(definition) {                                                                                           // 2395
    this.id = null;                                                                                                    // 2396
    this._objects = null;                                                                                              // 2397
                                                                                                                       // 2398
    this.node = new RenderNode();                                                                                      // 2399
    this._definition = null;                                                                                           // 2400
                                                                                                                       // 2401
    if (definition) this.load(definition);                                                                             // 2402
}                                                                                                                      // 2403
                                                                                                                       // 2404
var _MATRIX_GENERATORS = {                                                                                             // 2405
    'translate': Transform.translate,                                                                                  // 2406
    'rotate': Transform.rotate,                                                                                        // 2407
    'rotateX': Transform.rotateX,                                                                                      // 2408
    'rotateY': Transform.rotateY,                                                                                      // 2409
    'rotateZ': Transform.rotateZ,                                                                                      // 2410
    'rotateAxis': Transform.rotateAxis,                                                                                // 2411
    'scale': Transform.scale,                                                                                          // 2412
    'skew': Transform.skew,                                                                                            // 2413
    'matrix3d': function() {                                                                                           // 2414
        return arguments;                                                                                              // 2415
    }                                                                                                                  // 2416
};                                                                                                                     // 2417
                                                                                                                       // 2418
/**                                                                                                                    // 2419
 * Clone this scene                                                                                                    // 2420
 *                                                                                                                     // 2421
 * @method create                                                                                                      // 2422
 * @return {Scene} deep copy of this scene                                                                             // 2423
 */                                                                                                                    // 2424
Scene.prototype.create = function create() {                                                                           // 2425
    return new Scene(this._definition);                                                                                // 2426
};                                                                                                                     // 2427
                                                                                                                       // 2428
function _resolveTransformMatrix(matrixDefinition) {                                                                   // 2429
    for (var type in _MATRIX_GENERATORS) {                                                                             // 2430
        if (type in matrixDefinition) {                                                                                // 2431
            var args = matrixDefinition[type];                                                                         // 2432
            if (!(args instanceof Array)) args = [args];                                                               // 2433
            return _MATRIX_GENERATORS[type].apply(this, args);                                                         // 2434
        }                                                                                                              // 2435
    }                                                                                                                  // 2436
}                                                                                                                      // 2437
                                                                                                                       // 2438
// parse transform into tree of render nodes, doing matrix multiplication                                              // 2439
// when available                                                                                                      // 2440
function _parseTransform(definition) {                                                                                 // 2441
    var transformDefinition = definition.transform;                                                                    // 2442
    var opacity = definition.opacity;                                                                                  // 2443
    var origin = definition.origin;                                                                                    // 2444
    var align = definition.align;                                                                                      // 2445
    var size = definition.size;                                                                                        // 2446
    var transform = Transform.identity;                                                                                // 2447
    if (transformDefinition instanceof Array) {                                                                        // 2448
        if (transformDefinition.length === 16 && typeof transformDefinition[0] === 'number') {                         // 2449
            transform = transformDefinition;                                                                           // 2450
        }                                                                                                              // 2451
        else {                                                                                                         // 2452
            for (var i = 0; i < transformDefinition.length; i++) {                                                     // 2453
                transform = Transform.multiply(transform, _resolveTransformMatrix(transformDefinition[i]));            // 2454
            }                                                                                                          // 2455
        }                                                                                                              // 2456
    }                                                                                                                  // 2457
    else if (transformDefinition instanceof Function) {                                                                // 2458
        transform = transformDefinition;                                                                               // 2459
    }                                                                                                                  // 2460
    else if (transformDefinition instanceof Object) {                                                                  // 2461
        transform = _resolveTransformMatrix(transformDefinition);                                                      // 2462
    }                                                                                                                  // 2463
                                                                                                                       // 2464
    var result = new Modifier({                                                                                        // 2465
        transform: transform,                                                                                          // 2466
        opacity: opacity,                                                                                              // 2467
        origin: origin,                                                                                                // 2468
        align: align,                                                                                                  // 2469
        size: size                                                                                                     // 2470
    });                                                                                                                // 2471
    return result;                                                                                                     // 2472
}                                                                                                                      // 2473
                                                                                                                       // 2474
function _parseArray(definition) {                                                                                     // 2475
    var result = new RenderNode();                                                                                     // 2476
    for (var i = 0; i < definition.length; i++) {                                                                      // 2477
        var obj = _parse.call(this, definition[i]);                                                                    // 2478
        if (obj) result.add(obj);                                                                                      // 2479
    }                                                                                                                  // 2480
    return result;                                                                                                     // 2481
}                                                                                                                      // 2482
                                                                                                                       // 2483
// parse object directly into tree of RenderNodes                                                                      // 2484
function _parse(definition) {                                                                                          // 2485
    var result;                                                                                                        // 2486
    var id;                                                                                                            // 2487
    if (definition instanceof Array) {                                                                                 // 2488
        result = _parseArray.call(this, definition);                                                                   // 2489
    }                                                                                                                  // 2490
    else {                                                                                                             // 2491
        id = this._objects.length;                                                                                     // 2492
        if (definition.render && (definition.render instanceof Function)) {                                            // 2493
            result = definition;                                                                                       // 2494
        }                                                                                                              // 2495
        else if (definition.target) {                                                                                  // 2496
            var targetObj = _parse.call(this, definition.target);                                                      // 2497
            var obj = _parseTransform.call(this, definition);                                                          // 2498
                                                                                                                       // 2499
            result = new RenderNode(obj);                                                                              // 2500
            result.add(targetObj);                                                                                     // 2501
            if (definition.id) this.id[definition.id] = obj;                                                           // 2502
        }                                                                                                              // 2503
        else if (definition.id) {                                                                                      // 2504
            result = new RenderNode();                                                                                 // 2505
            this.id[definition.id] = result;                                                                           // 2506
        }                                                                                                              // 2507
    }                                                                                                                  // 2508
    this._objects[id] = result;                                                                                        // 2509
    return result;                                                                                                     // 2510
}                                                                                                                      // 2511
                                                                                                                       // 2512
/**                                                                                                                    // 2513
 * Builds and renders a scene graph based on a canonical declarative scene definition.                                 // 2514
 * See examples/Scene/example.js.                                                                                      // 2515
 *                                                                                                                     // 2516
 * @method load                                                                                                        // 2517
 * @param {Object} definition definition in the format of a render spec.                                               // 2518
 */                                                                                                                    // 2519
Scene.prototype.load = function load(definition) {                                                                     // 2520
    this._definition = definition;                                                                                     // 2521
    this.id = {};                                                                                                      // 2522
    this._objects = [];                                                                                                // 2523
    this.node.set(_parse.call(this, definition));                                                                      // 2524
};                                                                                                                     // 2525
                                                                                                                       // 2526
/**                                                                                                                    // 2527
 * Add renderables to this component's render tree                                                                     // 2528
 *                                                                                                                     // 2529
 * @method add                                                                                                         // 2530
 *                                                                                                                     // 2531
 * @param {Object} obj renderable object                                                                               // 2532
 * @return {RenderNode} Render wrapping provided object, if not already a RenderNode                                   // 2533
 */                                                                                                                    // 2534
Scene.prototype.add = function add() {                                                                                 // 2535
    return this.node.add.apply(this.node, arguments);                                                                  // 2536
};                                                                                                                     // 2537
                                                                                                                       // 2538
/**                                                                                                                    // 2539
 * Generate a render spec from the contents of this component.                                                         // 2540
 *                                                                                                                     // 2541
 * @private                                                                                                            // 2542
 * @method render                                                                                                      // 2543
 * @return {number} Render spec for this component                                                                     // 2544
 */                                                                                                                    // 2545
Scene.prototype.render = function render() {                                                                           // 2546
    return this.node.render.apply(this.node, arguments);                                                               // 2547
};                                                                                                                     // 2548
                                                                                                                       // 2549
module.exports = Scene;                                                                                                // 2550
},{"./Modifier":9,"./RenderNode":11,"./Transform":15}],13:[function(_dereq_,module,exports){                           // 2551
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2552
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2553
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2554
 *                                                                                                                     // 2555
 * Owner: mark@famo.us                                                                                                 // 2556
 * @license MPL 2.0                                                                                                    // 2557
 * @copyright Famous Industries, Inc. 2014                                                                             // 2558
 */                                                                                                                    // 2559
                                                                                                                       // 2560
var Transform = _dereq_('./Transform');                                                                                // 2561
                                                                                                                       // 2562
/**                                                                                                                    // 2563
 *                                                                                                                     // 2564
 * This object translates the rendering instructions ("render specs")                                                  // 2565
 *   that renderable components generate into document update                                                          // 2566
 *   instructions ("update specs").  Private.                                                                          // 2567
 *                                                                                                                     // 2568
 * @private                                                                                                            // 2569
 * @class SpecParser                                                                                                   // 2570
 * @constructor                                                                                                        // 2571
 */                                                                                                                    // 2572
function SpecParser() {                                                                                                // 2573
    this.result = {};                                                                                                  // 2574
}                                                                                                                      // 2575
SpecParser._instance = new SpecParser();                                                                               // 2576
                                                                                                                       // 2577
/**                                                                                                                    // 2578
 * Convert a render spec coming from the context's render chain to an                                                  // 2579
 *    update spec for the update chain. This is the only major entry point                                             // 2580
 *    for a consumer of this class.                                                                                    // 2581
 *                                                                                                                     // 2582
 * @method parse                                                                                                       // 2583
 * @static                                                                                                             // 2584
 * @private                                                                                                            // 2585
 *                                                                                                                     // 2586
 * @param {renderSpec} spec input render spec                                                                          // 2587
 * @param {Object} context context to do the parse in                                                                  // 2588
 * @return {Object} the resulting update spec (if no callback                                                          // 2589
 *   specified, else none)                                                                                             // 2590
 */                                                                                                                    // 2591
SpecParser.parse = function parse(spec, context) {                                                                     // 2592
    return SpecParser._instance.parse(spec, context);                                                                  // 2593
};                                                                                                                     // 2594
                                                                                                                       // 2595
/**                                                                                                                    // 2596
 * Convert a renderSpec coming from the context's render chain to an update                                            // 2597
 *    spec for the update chain. This is the only major entrypoint for a                                               // 2598
 *    consumer of this class.                                                                                          // 2599
 *                                                                                                                     // 2600
 * @method parse                                                                                                       // 2601
 *                                                                                                                     // 2602
 * @private                                                                                                            // 2603
 * @param {renderSpec} spec input render spec                                                                          // 2604
 * @param {Context} context                                                                                            // 2605
 * @return {updateSpec} the resulting update spec                                                                      // 2606
 */                                                                                                                    // 2607
SpecParser.prototype.parse = function parse(spec, context) {                                                           // 2608
    this.reset();                                                                                                      // 2609
    this._parseSpec(spec, context, Transform.identity);                                                                // 2610
    return this.result;                                                                                                // 2611
};                                                                                                                     // 2612
                                                                                                                       // 2613
/**                                                                                                                    // 2614
 * Prepare SpecParser for re-use (or first use) by setting internal state                                              // 2615
 *  to blank.                                                                                                          // 2616
 *                                                                                                                     // 2617
 * @private                                                                                                            // 2618
 * @method reset                                                                                                       // 2619
 */                                                                                                                    // 2620
SpecParser.prototype.reset = function reset() {                                                                        // 2621
    this.result = {};                                                                                                  // 2622
};                                                                                                                     // 2623
                                                                                                                       // 2624
// Multiply matrix M by vector v                                                                                       // 2625
function _vecInContext(v, m) {                                                                                         // 2626
    return [                                                                                                           // 2627
        v[0] * m[0] + v[1] * m[4] + v[2] * m[8],                                                                       // 2628
        v[0] * m[1] + v[1] * m[5] + v[2] * m[9],                                                                       // 2629
        v[0] * m[2] + v[1] * m[6] + v[2] * m[10]                                                                       // 2630
    ];                                                                                                                 // 2631
}                                                                                                                      // 2632
                                                                                                                       // 2633
var _zeroZero = [0, 0];                                                                                                // 2634
                                                                                                                       // 2635
// From the provided renderSpec tree, recursively compose opacities,                                                   // 2636
//    origins, transforms, and sizes corresponding to each surface id from                                             // 2637
//    the provided renderSpec tree structure. On completion, those                                                     // 2638
//    properties of 'this' object should be ready to use to build an                                                   // 2639
//    updateSpec.                                                                                                      // 2640
SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {                              // 2641
    var id;                                                                                                            // 2642
    var target;                                                                                                        // 2643
    var transform;                                                                                                     // 2644
    var opacity;                                                                                                       // 2645
    var origin;                                                                                                        // 2646
    var align;                                                                                                         // 2647
    var size;                                                                                                          // 2648
                                                                                                                       // 2649
    if (typeof spec === 'number') {                                                                                    // 2650
        id = spec;                                                                                                     // 2651
        transform = parentContext.transform;                                                                           // 2652
        align = parentContext.align || _zeroZero;                                                                      // 2653
        if (parentContext.size && align && (align[0] || align[1])) {                                                   // 2654
            var alignAdjust = [align[0] * parentContext.size[0], align[1] * parentContext.size[1], 0];                 // 2655
            transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));                        // 2656
        }                                                                                                              // 2657
        this.result[id] = {                                                                                            // 2658
            transform: transform,                                                                                      // 2659
            opacity: parentContext.opacity,                                                                            // 2660
            origin: parentContext.origin || _zeroZero,                                                                 // 2661
            align: parentContext.align || _zeroZero,                                                                   // 2662
            size: parentContext.size                                                                                   // 2663
        };                                                                                                             // 2664
    }                                                                                                                  // 2665
    else if (!spec) { // placed here so 0 will be cached earlier                                                       // 2666
        return;                                                                                                        // 2667
    }                                                                                                                  // 2668
    else if (spec instanceof Array) {                                                                                  // 2669
        for (var i = 0; i < spec.length; i++) {                                                                        // 2670
            this._parseSpec(spec[i], parentContext, sizeContext);                                                      // 2671
        }                                                                                                              // 2672
    }                                                                                                                  // 2673
    else {                                                                                                             // 2674
        target = spec.target;                                                                                          // 2675
        transform = parentContext.transform;                                                                           // 2676
        opacity = parentContext.opacity;                                                                               // 2677
        origin = parentContext.origin;                                                                                 // 2678
        align = parentContext.align;                                                                                   // 2679
        size = parentContext.size;                                                                                     // 2680
        var nextSizeContext = sizeContext;                                                                             // 2681
                                                                                                                       // 2682
        if (spec.opacity !== undefined) opacity = parentContext.opacity * spec.opacity;                                // 2683
        if (spec.transform) transform = Transform.multiply(parentContext.transform, spec.transform);                   // 2684
        if (spec.origin) {                                                                                             // 2685
            origin = spec.origin;                                                                                      // 2686
            nextSizeContext = parentContext.transform;                                                                 // 2687
        }                                                                                                              // 2688
        if (spec.align) align = spec.align;                                                                            // 2689
                                                                                                                       // 2690
        if (spec.size || spec.proportions) {                                                                           // 2691
            var parentSize = size;                                                                                     // 2692
            size = [size[0], size[1]];                                                                                 // 2693
                                                                                                                       // 2694
            if (spec.size) {                                                                                           // 2695
                if (spec.size[0] !== undefined) size[0] = spec.size[0];                                                // 2696
                if (spec.size[1] !== undefined) size[1] = spec.size[1];                                                // 2697
            }                                                                                                          // 2698
                                                                                                                       // 2699
            if (spec.proportions) {                                                                                    // 2700
                if (spec.proportions[0] !== undefined) size[0] = size[0] * spec.proportions[0];                        // 2701
                if (spec.proportions[1] !== undefined) size[1] = size[1] * spec.proportions[1];                        // 2702
            }                                                                                                          // 2703
                                                                                                                       // 2704
            if (parentSize) {                                                                                          // 2705
                if (align && (align[0] || align[1])) transform = Transform.thenMove(transform, _vecInContext([align[0] * parentSize[0], align[1] * parentSize[1], 0], sizeContext));
                if (origin && (origin[0] || origin[1])) transform = Transform.moveThen([-origin[0] * size[0], -origin[1] * size[1], 0], transform);
            }                                                                                                          // 2708
                                                                                                                       // 2709
            nextSizeContext = parentContext.transform;                                                                 // 2710
            origin = null;                                                                                             // 2711
            align = null;                                                                                              // 2712
        }                                                                                                              // 2713
                                                                                                                       // 2714
        this._parseSpec(target, {                                                                                      // 2715
            transform: transform,                                                                                      // 2716
            opacity: opacity,                                                                                          // 2717
            origin: origin,                                                                                            // 2718
            align: align,                                                                                              // 2719
            size: size                                                                                                 // 2720
        }, nextSizeContext);                                                                                           // 2721
    }                                                                                                                  // 2722
};                                                                                                                     // 2723
                                                                                                                       // 2724
module.exports = SpecParser;                                                                                           // 2725
},{"./Transform":15}],14:[function(_dereq_,module,exports){                                                            // 2726
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 2727
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 2728
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 2729
 *                                                                                                                     // 2730
 * Owner: mark@famo.us                                                                                                 // 2731
 * @license MPL 2.0                                                                                                    // 2732
 * @copyright Famous Industries, Inc. 2014                                                                             // 2733
 */                                                                                                                    // 2734
                                                                                                                       // 2735
var ElementOutput = _dereq_('./ElementOutput');                                                                        // 2736
                                                                                                                       // 2737
/**                                                                                                                    // 2738
 * A base class for viewable content and event                                                                         // 2739
 *   targets inside a Famo.us application, containing a renderable document                                            // 2740
 *   fragment. Like an HTML div, it can accept internal markup,                                                        // 2741
 *   properties, classes, and handle events.                                                                           // 2742
 *                                                                                                                     // 2743
 * @class Surface                                                                                                      // 2744
 * @constructor                                                                                                        // 2745
 *                                                                                                                     // 2746
 * @param {Object} [options] default option overrides                                                                  // 2747
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 2748
 * @param {Array.string} [options.classes] CSS classes to set on target div                                            // 2749
 * @param {Array} [options.properties] string dictionary of CSS properties to set on target div                        // 2750
 * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div                       // 2751
 * @param {string} [options.content] inner (HTML) content of surface                                                   // 2752
 */                                                                                                                    // 2753
function Surface(options) {                                                                                            // 2754
    ElementOutput.call(this);                                                                                          // 2755
                                                                                                                       // 2756
    this.options = {};                                                                                                 // 2757
                                                                                                                       // 2758
    this.properties = {};                                                                                              // 2759
    this.attributes = {};                                                                                              // 2760
    this.content = '';                                                                                                 // 2761
    this.classList = [];                                                                                               // 2762
    this.size = null;                                                                                                  // 2763
                                                                                                                       // 2764
    this._classesDirty = true;                                                                                         // 2765
    this._stylesDirty = true;                                                                                          // 2766
    this._attributesDirty = true;                                                                                      // 2767
    this._sizeDirty = true;                                                                                            // 2768
    this._contentDirty = true;                                                                                         // 2769
    this._trueSizeCheck = true;                                                                                        // 2770
                                                                                                                       // 2771
    this._dirtyClasses = [];                                                                                           // 2772
                                                                                                                       // 2773
    if (options) this.setOptions(options);                                                                             // 2774
                                                                                                                       // 2775
    this._currentTarget = null;                                                                                        // 2776
}                                                                                                                      // 2777
Surface.prototype = Object.create(ElementOutput.prototype);                                                            // 2778
Surface.prototype.constructor = Surface;                                                                               // 2779
Surface.prototype.elementType = 'div';                                                                                 // 2780
Surface.prototype.elementClass = 'famous-surface';                                                                     // 2781
                                                                                                                       // 2782
/**                                                                                                                    // 2783
 * Set HTML attributes on this Surface. Note that this will cause                                                      // 2784
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2785
 *                                                                                                                     // 2786
 * @method setAttributes                                                                                               // 2787
* @param {Object} attributes property dictionary of "key" => "value"                                                   // 2788
 */                                                                                                                    // 2789
Surface.prototype.setAttributes = function setAttributes(attributes) {                                                 // 2790
    for (var n in attributes) {                                                                                        // 2791
        if (n === 'style') throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
        this.attributes[n] = attributes[n];                                                                            // 2793
    }                                                                                                                  // 2794
    this._attributesDirty = true;                                                                                      // 2795
};                                                                                                                     // 2796
                                                                                                                       // 2797
/**                                                                                                                    // 2798
 * Get HTML attributes on this Surface.                                                                                // 2799
 *                                                                                                                     // 2800
 * @method getAttributes                                                                                               // 2801
 *                                                                                                                     // 2802
 * @return {Object} Dictionary of this Surface's attributes.                                                           // 2803
 */                                                                                                                    // 2804
Surface.prototype.getAttributes = function getAttributes() {                                                           // 2805
    return this.attributes;                                                                                            // 2806
};                                                                                                                     // 2807
                                                                                                                       // 2808
/**                                                                                                                    // 2809
 * Set CSS-style properties on this Surface. Note that this will cause                                                 // 2810
 *    dirtying and thus re-rendering, even if values do not change.                                                    // 2811
 *                                                                                                                     // 2812
 * @method setProperties                                                                                               // 2813
 * @chainable                                                                                                          // 2814
 * @param {Object} properties property dictionary of "key" => "value"                                                  // 2815
 */                                                                                                                    // 2816
Surface.prototype.setProperties = function setProperties(properties) {                                                 // 2817
    for (var n in properties) {                                                                                        // 2818
        this.properties[n] = properties[n];                                                                            // 2819
    }                                                                                                                  // 2820
    this._stylesDirty = true;                                                                                          // 2821
    return this;                                                                                                       // 2822
};                                                                                                                     // 2823
                                                                                                                       // 2824
/**                                                                                                                    // 2825
 * Get CSS-style properties on this Surface.                                                                           // 2826
 *                                                                                                                     // 2827
 * @method getProperties                                                                                               // 2828
 *                                                                                                                     // 2829
 * @return {Object} Dictionary of this Surface's properties.                                                           // 2830
 */                                                                                                                    // 2831
Surface.prototype.getProperties = function getProperties() {                                                           // 2832
    return this.properties;                                                                                            // 2833
};                                                                                                                     // 2834
                                                                                                                       // 2835
/**                                                                                                                    // 2836
 * Add CSS-style class to the list of classes on this Surface. Note                                                    // 2837
 *   this will map directly to the HTML property of the actual                                                         // 2838
 *   corresponding rendered <div>.                                                                                     // 2839
 *                                                                                                                     // 2840
 * @method addClass                                                                                                    // 2841
 * @chainable                                                                                                          // 2842
 * @param {string} className name of class to add                                                                      // 2843
 */                                                                                                                    // 2844
Surface.prototype.addClass = function addClass(className) {                                                            // 2845
    if (this.classList.indexOf(className) < 0) {                                                                       // 2846
        this.classList.push(className);                                                                                // 2847
        this._classesDirty = true;                                                                                     // 2848
    }                                                                                                                  // 2849
    return this;                                                                                                       // 2850
};                                                                                                                     // 2851
                                                                                                                       // 2852
/**                                                                                                                    // 2853
 * Remove CSS-style class from the list of classes on this Surface.                                                    // 2854
 *   Note this will map directly to the HTML property of the actual                                                    // 2855
 *   corresponding rendered <div>.                                                                                     // 2856
 *                                                                                                                     // 2857
 * @method removeClass                                                                                                 // 2858
 * @chainable                                                                                                          // 2859
 * @param {string} className name of class to remove                                                                   // 2860
 */                                                                                                                    // 2861
Surface.prototype.removeClass = function removeClass(className) {                                                      // 2862
    var i = this.classList.indexOf(className);                                                                         // 2863
    if (i >= 0) {                                                                                                      // 2864
        this._dirtyClasses.push(this.classList.splice(i, 1)[0]);                                                       // 2865
        this._classesDirty = true;                                                                                     // 2866
    }                                                                                                                  // 2867
    return this;                                                                                                       // 2868
};                                                                                                                     // 2869
                                                                                                                       // 2870
/**                                                                                                                    // 2871
 * Toggle CSS-style class from the list of classes on this Surface.                                                    // 2872
 *   Note this will map directly to the HTML property of the actual                                                    // 2873
 *   corresponding rendered <div>.                                                                                     // 2874
 *                                                                                                                     // 2875
 * @method toggleClass                                                                                                 // 2876
 * @param {string} className name of class to toggle                                                                   // 2877
 */                                                                                                                    // 2878
Surface.prototype.toggleClass = function toggleClass(className) {                                                      // 2879
    var i = this.classList.indexOf(className);                                                                         // 2880
    if (i >= 0) {                                                                                                      // 2881
        this.removeClass(className);                                                                                   // 2882
    } else {                                                                                                           // 2883
        this.addClass(className);                                                                                      // 2884
    }                                                                                                                  // 2885
    return this;                                                                                                       // 2886
};                                                                                                                     // 2887
                                                                                                                       // 2888
/**                                                                                                                    // 2889
 * Reset class list to provided dictionary.                                                                            // 2890
 * @method setClasses                                                                                                  // 2891
 * @chainable                                                                                                          // 2892
 * @param {Array.string} classList                                                                                     // 2893
 */                                                                                                                    // 2894
Surface.prototype.setClasses = function setClasses(classList) {                                                        // 2895
    var i = 0;                                                                                                         // 2896
    var removal = [];                                                                                                  // 2897
    for (i = 0; i < this.classList.length; i++) {                                                                      // 2898
        if (classList.indexOf(this.classList[i]) < 0) removal.push(this.classList[i]);                                 // 2899
    }                                                                                                                  // 2900
    for (i = 0; i < removal.length; i++) this.removeClass(removal[i]);                                                 // 2901
    // duplicates are already checked by addClass()                                                                    // 2902
    for (i = 0; i < classList.length; i++) this.addClass(classList[i]);                                                // 2903
    return this;                                                                                                       // 2904
};                                                                                                                     // 2905
                                                                                                                       // 2906
/**                                                                                                                    // 2907
 * Get array of CSS-style classes attached to this div.                                                                // 2908
 *                                                                                                                     // 2909
 * @method getClasslist                                                                                                // 2910
 * @return {Array.string} array of class names                                                                         // 2911
 */                                                                                                                    // 2912
Surface.prototype.getClassList = function getClassList() {                                                             // 2913
    return this.classList;                                                                                             // 2914
};                                                                                                                     // 2915
                                                                                                                       // 2916
/**                                                                                                                    // 2917
 * Set or overwrite inner (HTML) content of this surface. Note that this                                               // 2918
 *    causes a re-rendering if the content has changed.                                                                // 2919
 *                                                                                                                     // 2920
 * @method setContent                                                                                                  // 2921
 * @chainable                                                                                                          // 2922
 * @param {string|Document Fragment} content HTML content                                                              // 2923
 */                                                                                                                    // 2924
Surface.prototype.setContent = function setContent(content) {                                                          // 2925
    if (this.content !== content) {                                                                                    // 2926
        this.content = content;                                                                                        // 2927
        this._contentDirty = true;                                                                                     // 2928
    }                                                                                                                  // 2929
    return this;                                                                                                       // 2930
};                                                                                                                     // 2931
                                                                                                                       // 2932
/**                                                                                                                    // 2933
 * Return inner (HTML) content of this surface.                                                                        // 2934
 *                                                                                                                     // 2935
 * @method getContent                                                                                                  // 2936
 *                                                                                                                     // 2937
 * @return {string} inner (HTML) content                                                                               // 2938
 */                                                                                                                    // 2939
Surface.prototype.getContent = function getContent() {                                                                 // 2940
    return this.content;                                                                                               // 2941
};                                                                                                                     // 2942
                                                                                                                       // 2943
/**                                                                                                                    // 2944
 * Set options for this surface                                                                                        // 2945
 *                                                                                                                     // 2946
 * @method setOptions                                                                                                  // 2947
 * @chainable                                                                                                          // 2948
 * @param {Object} [options] overrides for default options.  See constructor.                                          // 2949
 */                                                                                                                    // 2950
Surface.prototype.setOptions = function setOptions(options) {                                                          // 2951
    if (options.size) this.setSize(options.size);                                                                      // 2952
    if (options.classes) this.setClasses(options.classes);                                                             // 2953
    if (options.properties) this.setProperties(options.properties);                                                    // 2954
    if (options.attributes) this.setAttributes(options.attributes);                                                    // 2955
    if (options.content) this.setContent(options.content);                                                             // 2956
    return this;                                                                                                       // 2957
};                                                                                                                     // 2958
                                                                                                                       // 2959
//  Apply to document all changes from removeClass() since last setup().                                               // 2960
function _cleanupClasses(target) {                                                                                     // 2961
    for (var i = 0; i < this._dirtyClasses.length; i++) target.classList.remove(this._dirtyClasses[i]);                // 2962
    this._dirtyClasses = [];                                                                                           // 2963
}                                                                                                                      // 2964
                                                                                                                       // 2965
// Apply values of all Famous-managed styles to the document element.                                                  // 2966
//  These will be deployed to the document on call to #setup().                                                        // 2967
function _applyStyles(target) {                                                                                        // 2968
    for (var n in this.properties) {                                                                                   // 2969
        target.style[n] = this.properties[n];                                                                          // 2970
    }                                                                                                                  // 2971
}                                                                                                                      // 2972
                                                                                                                       // 2973
// Clear all Famous-managed styles from the document element.                                                          // 2974
// These will be deployed to the document on call to #setup().                                                         // 2975
function _cleanupStyles(target) {                                                                                      // 2976
    for (var n in this.properties) {                                                                                   // 2977
        target.style[n] = '';                                                                                          // 2978
    }                                                                                                                  // 2979
}                                                                                                                      // 2980
                                                                                                                       // 2981
// Apply values of all Famous-managed attributes to the document element.                                              // 2982
//  These will be deployed to the document on call to #setup().                                                        // 2983
function _applyAttributes(target) {                                                                                    // 2984
    for (var n in this.attributes) {                                                                                   // 2985
        target.setAttribute(n, this.attributes[n]);                                                                    // 2986
    }                                                                                                                  // 2987
}                                                                                                                      // 2988
                                                                                                                       // 2989
// Clear all Famous-managed attributes from the document element.                                                      // 2990
// These will be deployed to the document on call to #setup().                                                         // 2991
function _cleanupAttributes(target) {                                                                                  // 2992
    for (var n in this.attributes) {                                                                                   // 2993
        target.removeAttribute(n);                                                                                     // 2994
    }                                                                                                                  // 2995
}                                                                                                                      // 2996
                                                                                                                       // 2997
function _xyNotEquals(a, b) {                                                                                          // 2998
    return (a && b) ? (a[0] !== b[0] || a[1] !== b[1]) : a !== b;                                                      // 2999
}                                                                                                                      // 3000
                                                                                                                       // 3001
/**                                                                                                                    // 3002
 * One-time setup for an element to be ready for commits to document.                                                  // 3003
 *                                                                                                                     // 3004
 * @private                                                                                                            // 3005
 * @method setup                                                                                                       // 3006
 *                                                                                                                     // 3007
 * @param {ElementAllocator} allocator document element pool for this context                                          // 3008
 */                                                                                                                    // 3009
Surface.prototype.setup = function setup(allocator) {                                                                  // 3010
    var target = allocator.allocate(this.elementType);                                                                 // 3011
    if (this.elementClass) {                                                                                           // 3012
        if (this.elementClass instanceof Array) {                                                                      // 3013
            for (var i = 0; i < this.elementClass.length; i++) {                                                       // 3014
                target.classList.add(this.elementClass[i]);                                                            // 3015
            }                                                                                                          // 3016
        }                                                                                                              // 3017
        else {                                                                                                         // 3018
            target.classList.add(this.elementClass);                                                                   // 3019
        }                                                                                                              // 3020
    }                                                                                                                  // 3021
    target.style.display = '';                                                                                         // 3022
    this.attach(target);                                                                                               // 3023
    this._opacity = null;                                                                                              // 3024
    this._currentTarget = target;                                                                                      // 3025
    this._stylesDirty = true;                                                                                          // 3026
    this._classesDirty = true;                                                                                         // 3027
    this._attributesDirty = true;                                                                                      // 3028
    this._sizeDirty = true;                                                                                            // 3029
    this._contentDirty = true;                                                                                         // 3030
    this._originDirty = true;                                                                                          // 3031
    this._transformDirty = true;                                                                                       // 3032
};                                                                                                                     // 3033
                                                                                                                       // 3034
/**                                                                                                                    // 3035
 * Apply changes from this component to the corresponding document element.                                            // 3036
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 3037
 * and matrix transforms.                                                                                              // 3038
 *                                                                                                                     // 3039
 * @private                                                                                                            // 3040
 * @method commit                                                                                                      // 3041
 * @param {Context} context commit context                                                                             // 3042
 */                                                                                                                    // 3043
Surface.prototype.commit = function commit(context) {                                                                  // 3044
    if (!this._currentTarget) this.setup(context.allocator);                                                           // 3045
    var target = this._currentTarget;                                                                                  // 3046
    var size = context.size;                                                                                           // 3047
                                                                                                                       // 3048
    if (this._classesDirty) {                                                                                          // 3049
        _cleanupClasses.call(this, target);                                                                            // 3050
        var classList = this.getClassList();                                                                           // 3051
        for (var i = 0; i < classList.length; i++) target.classList.add(classList[i]);                                 // 3052
        this._classesDirty = false;                                                                                    // 3053
        this._trueSizeCheck = true;                                                                                    // 3054
    }                                                                                                                  // 3055
                                                                                                                       // 3056
    if (this._stylesDirty) {                                                                                           // 3057
        _applyStyles.call(this, target);                                                                               // 3058
        this._stylesDirty = false;                                                                                     // 3059
        this._trueSizeCheck = true;                                                                                    // 3060
    }                                                                                                                  // 3061
                                                                                                                       // 3062
    if (this._attributesDirty) {                                                                                       // 3063
        _applyAttributes.call(this, target);                                                                           // 3064
        this._attributesDirty = false;                                                                                 // 3065
        this._trueSizeCheck = true;                                                                                    // 3066
    }                                                                                                                  // 3067
                                                                                                                       // 3068
    if (this.size) {                                                                                                   // 3069
        var origSize = context.size;                                                                                   // 3070
        size = [this.size[0], this.size[1]];                                                                           // 3071
        if (size[0] === undefined) size[0] = origSize[0];                                                              // 3072
        if (size[1] === undefined) size[1] = origSize[1];                                                              // 3073
        if (size[0] === true || size[1] === true) {                                                                    // 3074
            if (size[0] === true){                                                                                     // 3075
                if (this._trueSizeCheck || (this._size[0] === 0)) {                                                    // 3076
                    var width = target.offsetWidth;                                                                    // 3077
                    if (this._size && this._size[0] !== width) {                                                       // 3078
                        this._size[0] = width;                                                                         // 3079
                        this._sizeDirty = true;                                                                        // 3080
                    }                                                                                                  // 3081
                    size[0] = width;                                                                                   // 3082
                } else {                                                                                               // 3083
                    if (this._size) size[0] = this._size[0];                                                           // 3084
                }                                                                                                      // 3085
            }                                                                                                          // 3086
            if (size[1] === true){                                                                                     // 3087
                if (this._trueSizeCheck || (this._size[1] === 0)) {                                                    // 3088
                    var height = target.offsetHeight;                                                                  // 3089
                    if (this._size && this._size[1] !== height) {                                                      // 3090
                        this._size[1] = height;                                                                        // 3091
                        this._sizeDirty = true;                                                                        // 3092
                    }                                                                                                  // 3093
                    size[1] = height;                                                                                  // 3094
                } else {                                                                                               // 3095
                    if (this._size) size[1] = this._size[1];                                                           // 3096
                }                                                                                                      // 3097
            }                                                                                                          // 3098
            this._trueSizeCheck = false;                                                                               // 3099
        }                                                                                                              // 3100
    }                                                                                                                  // 3101
                                                                                                                       // 3102
    if (_xyNotEquals(this._size, size)) {                                                                              // 3103
        if (!this._size) this._size = [0, 0];                                                                          // 3104
        this._size[0] = size[0];                                                                                       // 3105
        this._size[1] = size[1];                                                                                       // 3106
                                                                                                                       // 3107
        this._sizeDirty = true;                                                                                        // 3108
    }                                                                                                                  // 3109
                                                                                                                       // 3110
    if (this._sizeDirty) {                                                                                             // 3111
        if (this._size) {                                                                                              // 3112
            target.style.width = (this.size && this.size[0] === true) ? '' : this._size[0] + 'px';                     // 3113
            target.style.height = (this.size && this.size[1] === true) ?  '' : this._size[1] + 'px';                   // 3114
        }                                                                                                              // 3115
                                                                                                                       // 3116
        this._eventOutput.emit('resize');                                                                              // 3117
    }                                                                                                                  // 3118
                                                                                                                       // 3119
    if (this._contentDirty) {                                                                                          // 3120
        this.deploy(target);                                                                                           // 3121
        this._eventOutput.emit('deploy');                                                                              // 3122
        this._contentDirty = false;                                                                                    // 3123
        this._trueSizeCheck = true;                                                                                    // 3124
    }                                                                                                                  // 3125
                                                                                                                       // 3126
    ElementOutput.prototype.commit.call(this, context);                                                                // 3127
};                                                                                                                     // 3128
                                                                                                                       // 3129
/**                                                                                                                    // 3130
 *  Remove all Famous-relevant attributes from a document element.                                                     // 3131
 *    This is called by SurfaceManager's detach().                                                                     // 3132
 *    This is in some sense the reverse of .deploy().                                                                  // 3133
 *                                                                                                                     // 3134
 * @private                                                                                                            // 3135
 * @method cleanup                                                                                                     // 3136
 * @param {ElementAllocator} allocator                                                                                 // 3137
 */                                                                                                                    // 3138
Surface.prototype.cleanup = function cleanup(allocator) {                                                              // 3139
    var i = 0;                                                                                                         // 3140
    var target = this._currentTarget;                                                                                  // 3141
    this._eventOutput.emit('recall');                                                                                  // 3142
    this.recall(target);                                                                                               // 3143
    target.style.display = 'none';                                                                                     // 3144
    target.style.opacity = '';                                                                                         // 3145
    target.style.width = '';                                                                                           // 3146
    target.style.height = '';                                                                                          // 3147
    _cleanupStyles.call(this, target);                                                                                 // 3148
    _cleanupAttributes.call(this, target);                                                                             // 3149
    var classList = this.getClassList();                                                                               // 3150
    _cleanupClasses.call(this, target);                                                                                // 3151
    for (i = 0; i < classList.length; i++) target.classList.remove(classList[i]);                                      // 3152
    if (this.elementClass) {                                                                                           // 3153
        if (this.elementClass instanceof Array) {                                                                      // 3154
            for (i = 0; i < this.elementClass.length; i++) {                                                           // 3155
                target.classList.remove(this.elementClass[i]);                                                         // 3156
            }                                                                                                          // 3157
        }                                                                                                              // 3158
        else {                                                                                                         // 3159
            target.classList.remove(this.elementClass);                                                                // 3160
        }                                                                                                              // 3161
    }                                                                                                                  // 3162
    this.detach(target);                                                                                               // 3163
    this._currentTarget = null;                                                                                        // 3164
    allocator.deallocate(target);                                                                                      // 3165
};                                                                                                                     // 3166
                                                                                                                       // 3167
/**                                                                                                                    // 3168
 * Place the document element that this component manages into the document.                                           // 3169
 *                                                                                                                     // 3170
 * @private                                                                                                            // 3171
 * @method deploy                                                                                                      // 3172
 * @param {Node} target document parent of this container                                                              // 3173
 */                                                                                                                    // 3174
Surface.prototype.deploy = function deploy(target) {                                                                   // 3175
    var content = this.getContent();                                                                                   // 3176
    if (content instanceof Node) {                                                                                     // 3177
        while (target.hasChildNodes()) target.removeChild(target.firstChild);                                          // 3178
        target.appendChild(content);                                                                                   // 3179
    }                                                                                                                  // 3180
    else target.innerHTML = content;                                                                                   // 3181
};                                                                                                                     // 3182
                                                                                                                       // 3183
/**                                                                                                                    // 3184
 * Remove any contained document content associated with this surface                                                  // 3185
 *   from the actual document.                                                                                         // 3186
 *                                                                                                                     // 3187
 * @private                                                                                                            // 3188
 * @method recall                                                                                                      // 3189
 */                                                                                                                    // 3190
Surface.prototype.recall = function recall(target) {                                                                   // 3191
    var df = document.createDocumentFragment();                                                                        // 3192
    while (target.hasChildNodes()) df.appendChild(target.firstChild);                                                  // 3193
    this.setContent(df);                                                                                               // 3194
};                                                                                                                     // 3195
                                                                                                                       // 3196
/**                                                                                                                    // 3197
 *  Get the x and y dimensions of the surface.                                                                         // 3198
 *                                                                                                                     // 3199
 * @method getSize                                                                                                     // 3200
 * @return {Array.Number} [x,y] size of surface                                                                        // 3201
 */                                                                                                                    // 3202
Surface.prototype.getSize = function getSize() {                                                                       // 3203
    return this._size ? this._size : this.size;                                                                        // 3204
};                                                                                                                     // 3205
                                                                                                                       // 3206
/**                                                                                                                    // 3207
 * Set x and y dimensions of the surface.                                                                              // 3208
 *                                                                                                                     // 3209
 * @method setSize                                                                                                     // 3210
 * @chainable                                                                                                          // 3211
 * @param {Array.Number} size as [width, height]                                                                       // 3212
 */                                                                                                                    // 3213
Surface.prototype.setSize = function setSize(size) {                                                                   // 3214
    this.size = size ? [size[0], size[1]] : null;                                                                      // 3215
    this._sizeDirty = true;                                                                                            // 3216
    return this;                                                                                                       // 3217
};                                                                                                                     // 3218
                                                                                                                       // 3219
module.exports = Surface;                                                                                              // 3220
},{"./ElementOutput":3}],15:[function(_dereq_,module,exports){                                                         // 3221
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3222
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3223
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3224
 *                                                                                                                     // 3225
 * Owner: mark@famo.us                                                                                                 // 3226
 * @license MPL 2.0                                                                                                    // 3227
 * @copyright Famous Industries, Inc. 2014                                                                             // 3228
 */                                                                                                                    // 3229
                                                                                                                       // 3230
                                                                                                                       // 3231
                                                                                                                       // 3232
                                                                                                                       // 3233
/**                                                                                                                    // 3234
 *  A high-performance static matrix math library used to calculate                                                    // 3235
 *    affine transforms on surfaces and other renderables.                                                             // 3236
 *    Famo.us uses 4x4 matrices corresponding directly to                                                              // 3237
 *    WebKit matrices (column-major order).                                                                            // 3238
 *                                                                                                                     // 3239
 *    The internal "type" of a Matrix is a 16-long float array in                                                      // 3240
 *    row-major order, with:                                                                                           // 3241
 *    elements [0],[1],[2],[4],[5],[6],[8],[9],[10] forming the 3x3                                                    // 3242
 *          transformation matrix;                                                                                     // 3243
 *    elements [12], [13], [14] corresponding to the t_x, t_y, t_z                                                     // 3244
 *           translation;                                                                                              // 3245
 *    elements [3], [7], [11] set to 0;                                                                                // 3246
 *    element [15] set to 1.                                                                                           // 3247
 *    All methods are static.                                                                                          // 3248
 *                                                                                                                     // 3249
 * @static                                                                                                             // 3250
 *                                                                                                                     // 3251
 * @class Transform                                                                                                    // 3252
 */                                                                                                                    // 3253
var Transform = {};                                                                                                    // 3254
                                                                                                                       // 3255
// WARNING: these matrices correspond to WebKit matrices, which are                                                    // 3256
//    transposed from their math counterparts                                                                          // 3257
Transform.precision = 1e-6;                                                                                            // 3258
Transform.identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                                 // 3259
                                                                                                                       // 3260
/**                                                                                                                    // 3261
 * Multiply two or more Transform matrix types to return a Transform matrix.                                           // 3262
 *                                                                                                                     // 3263
 * @method multiply4x4                                                                                                 // 3264
 * @static                                                                                                             // 3265
 * @param {Transform} a left Transform                                                                                 // 3266
 * @param {Transform} b right Transform                                                                                // 3267
 * @return {Transform}                                                                                                 // 3268
 */                                                                                                                    // 3269
Transform.multiply4x4 = function multiply4x4(a, b) {                                                                   // 3270
    return [                                                                                                           // 3271
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3],                                                        // 3272
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3],                                                        // 3273
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3],                                                       // 3274
        a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3],                                                       // 3275
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7],                                                        // 3276
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7],                                                        // 3277
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7],                                                       // 3278
        a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7],                                                       // 3279
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11],                                                      // 3280
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11],                                                      // 3281
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11],                                                     // 3282
        a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11],                                                     // 3283
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15],                                                    // 3284
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15],                                                    // 3285
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15],                                                   // 3286
        a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]                                                    // 3287
    ];                                                                                                                 // 3288
};                                                                                                                     // 3289
                                                                                                                       // 3290
/**                                                                                                                    // 3291
 * Fast-multiply two or more Transform matrix types to return a                                                        // 3292
 *    Matrix, assuming bottom row on each is [0 0 0 1].                                                                // 3293
 *                                                                                                                     // 3294
 * @method multiply                                                                                                    // 3295
 * @static                                                                                                             // 3296
 * @param {Transform} a left Transform                                                                                 // 3297
 * @param {Transform} b right Transform                                                                                // 3298
 * @return {Transform}                                                                                                 // 3299
 */                                                                                                                    // 3300
Transform.multiply = function multiply(a, b) {                                                                         // 3301
    return [                                                                                                           // 3302
        a[0] * b[0] + a[4] * b[1] + a[8] * b[2],                                                                       // 3303
        a[1] * b[0] + a[5] * b[1] + a[9] * b[2],                                                                       // 3304
        a[2] * b[0] + a[6] * b[1] + a[10] * b[2],                                                                      // 3305
        0,                                                                                                             // 3306
        a[0] * b[4] + a[4] * b[5] + a[8] * b[6],                                                                       // 3307
        a[1] * b[4] + a[5] * b[5] + a[9] * b[6],                                                                       // 3308
        a[2] * b[4] + a[6] * b[5] + a[10] * b[6],                                                                      // 3309
        0,                                                                                                             // 3310
        a[0] * b[8] + a[4] * b[9] + a[8] * b[10],                                                                      // 3311
        a[1] * b[8] + a[5] * b[9] + a[9] * b[10],                                                                      // 3312
        a[2] * b[8] + a[6] * b[9] + a[10] * b[10],                                                                     // 3313
        0,                                                                                                             // 3314
        a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12],                                                            // 3315
        a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13],                                                            // 3316
        a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14],                                                           // 3317
        1                                                                                                              // 3318
    ];                                                                                                                 // 3319
};                                                                                                                     // 3320
                                                                                                                       // 3321
/**                                                                                                                    // 3322
 * Return a Transform translated by additional amounts in each                                                         // 3323
 *    dimension. This is equivalent to the result of                                                                   // 3324
 *                                                                                                                     // 3325
 *    Transform.multiply(Matrix.translate(t[0], t[1], t[2]), m).                                                       // 3326
 *                                                                                                                     // 3327
 * @method thenMove                                                                                                    // 3328
 * @static                                                                                                             // 3329
 * @param {Transform} m a Transform                                                                                    // 3330
 * @param {Array.Number} t floats delta vector of length 2 or 3                                                        // 3331
 * @return {Transform}                                                                                                 // 3332
 */                                                                                                                    // 3333
Transform.thenMove = function thenMove(m, t) {                                                                         // 3334
    if (!t[2]) t[2] = 0;                                                                                               // 3335
    return [m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, m[12] + t[0], m[13] + t[1], m[14] + t[2], 1];
};                                                                                                                     // 3337
                                                                                                                       // 3338
/**                                                                                                                    // 3339
 * Return a Transform matrix which represents the result of a transform matrix                                         // 3340
 *    applied after a move. This is faster than the equivalent multiply.                                               // 3341
 *    This is equivalent to the result of:                                                                             // 3342
 *                                                                                                                     // 3343
 *    Transform.multiply(m, Transform.translate(t[0], t[1], t[2])).                                                    // 3344
 *                                                                                                                     // 3345
 * @method moveThen                                                                                                    // 3346
 * @static                                                                                                             // 3347
 * @param {Array.Number} v vector representing initial movement                                                        // 3348
 * @param {Transform} m matrix to apply afterwards                                                                     // 3349
 * @return {Transform} the resulting matrix                                                                            // 3350
 */                                                                                                                    // 3351
Transform.moveThen = function moveThen(v, m) {                                                                         // 3352
    if (!v[2]) v[2] = 0;                                                                                               // 3353
    var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];                                                                  // 3354
    var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];                                                                  // 3355
    var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];                                                                 // 3356
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3357
};                                                                                                                     // 3358
                                                                                                                       // 3359
/**                                                                                                                    // 3360
 * Return a Transform which represents a translation by specified                                                      // 3361
 *    amounts in each dimension.                                                                                       // 3362
 *                                                                                                                     // 3363
 * @method translate                                                                                                   // 3364
 * @static                                                                                                             // 3365
 * @param {Number} x x translation                                                                                     // 3366
 * @param {Number} y y translation                                                                                     // 3367
 * @param {Number} z z translation                                                                                     // 3368
 * @return {Transform}                                                                                                 // 3369
 */                                                                                                                    // 3370
Transform.translate = function translate(x, y, z) {                                                                    // 3371
    if (z === undefined) z = 0;                                                                                        // 3372
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];                                                           // 3373
};                                                                                                                     // 3374
                                                                                                                       // 3375
/**                                                                                                                    // 3376
 * Return a Transform scaled by a vector in each                                                                       // 3377
 *    dimension. This is a more performant equivalent to the result of                                                 // 3378
 *                                                                                                                     // 3379
 *    Transform.multiply(Transform.scale(s[0], s[1], s[2]), m).                                                        // 3380
 *                                                                                                                     // 3381
 * @method thenScale                                                                                                   // 3382
 * @static                                                                                                             // 3383
 * @param {Transform} m a matrix                                                                                       // 3384
 * @param {Array.Number} s delta vector (array of floats &&                                                            // 3385
 *    array.length == 3)                                                                                               // 3386
 * @return {Transform}                                                                                                 // 3387
 */                                                                                                                    // 3388
Transform.thenScale = function thenScale(m, s) {                                                                       // 3389
    return [                                                                                                           // 3390
        s[0] * m[0], s[1] * m[1], s[2] * m[2], 0,                                                                      // 3391
        s[0] * m[4], s[1] * m[5], s[2] * m[6], 0,                                                                      // 3392
        s[0] * m[8], s[1] * m[9], s[2] * m[10], 0,                                                                     // 3393
        s[0] * m[12], s[1] * m[13], s[2] * m[14], 1                                                                    // 3394
    ];                                                                                                                 // 3395
};                                                                                                                     // 3396
                                                                                                                       // 3397
/**                                                                                                                    // 3398
 * Return a Transform which represents a scale by specified amounts                                                    // 3399
 *    in each dimension.                                                                                               // 3400
 *                                                                                                                     // 3401
 * @method scale                                                                                                       // 3402
 * @static                                                                                                             // 3403
 * @param {Number} x x scale factor                                                                                    // 3404
 * @param {Number} y y scale factor                                                                                    // 3405
 * @param {Number} z z scale factor                                                                                    // 3406
 * @return {Transform}                                                                                                 // 3407
 */                                                                                                                    // 3408
Transform.scale = function scale(x, y, z) {                                                                            // 3409
    if (z === undefined) z = 1;                                                                                        // 3410
    if (y === undefined) y = x;                                                                                        // 3411
    return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];                                                           // 3412
};                                                                                                                     // 3413
                                                                                                                       // 3414
/**                                                                                                                    // 3415
 * Return a Transform which represents a clockwise                                                                     // 3416
 *    rotation around the x axis.                                                                                      // 3417
 *                                                                                                                     // 3418
 * @method rotateX                                                                                                     // 3419
 * @static                                                                                                             // 3420
 * @param {Number} theta radians                                                                                       // 3421
 * @return {Transform}                                                                                                 // 3422
 */                                                                                                                    // 3423
Transform.rotateX = function rotateX(theta) {                                                                          // 3424
    var cosTheta = Math.cos(theta);                                                                                    // 3425
    var sinTheta = Math.sin(theta);                                                                                    // 3426
    return [1, 0, 0, 0, 0, cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1];                              // 3427
};                                                                                                                     // 3428
                                                                                                                       // 3429
/**                                                                                                                    // 3430
 * Return a Transform which represents a clockwise                                                                     // 3431
 *    rotation around the y axis.                                                                                      // 3432
 *                                                                                                                     // 3433
 * @method rotateY                                                                                                     // 3434
 * @static                                                                                                             // 3435
 * @param {Number} theta radians                                                                                       // 3436
 * @return {Transform}                                                                                                 // 3437
 */                                                                                                                    // 3438
Transform.rotateY = function rotateY(theta) {                                                                          // 3439
    var cosTheta = Math.cos(theta);                                                                                    // 3440
    var sinTheta = Math.sin(theta);                                                                                    // 3441
    return [cosTheta, 0, -sinTheta, 0, 0, 1, 0, 0, sinTheta, 0, cosTheta, 0, 0, 0, 0, 1];                              // 3442
};                                                                                                                     // 3443
                                                                                                                       // 3444
/**                                                                                                                    // 3445
 * Return a Transform which represents a clockwise                                                                     // 3446
 *    rotation around the z axis.                                                                                      // 3447
 *                                                                                                                     // 3448
 * @method rotateZ                                                                                                     // 3449
 * @static                                                                                                             // 3450
 * @param {Number} theta radians                                                                                       // 3451
 * @return {Transform}                                                                                                 // 3452
 */                                                                                                                    // 3453
Transform.rotateZ = function rotateZ(theta) {                                                                          // 3454
    var cosTheta = Math.cos(theta);                                                                                    // 3455
    var sinTheta = Math.sin(theta);                                                                                    // 3456
    return [cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                              // 3457
};                                                                                                                     // 3458
                                                                                                                       // 3459
/**                                                                                                                    // 3460
 * Return a Transform which represents composed clockwise                                                              // 3461
 *    rotations along each of the axes. Equivalent to the result of                                                    // 3462
 *    Matrix.multiply(rotateX(phi), rotateY(theta), rotateZ(psi)).                                                     // 3463
 *                                                                                                                     // 3464
 * @method rotate                                                                                                      // 3465
 * @static                                                                                                             // 3466
 * @param {Number} phi radians to rotate about the positive x axis                                                     // 3467
 * @param {Number} theta radians to rotate about the positive y axis                                                   // 3468
 * @param {Number} psi radians to rotate about the positive z axis                                                     // 3469
 * @return {Transform}                                                                                                 // 3470
 */                                                                                                                    // 3471
Transform.rotate = function rotate(phi, theta, psi) {                                                                  // 3472
    var cosPhi = Math.cos(phi);                                                                                        // 3473
    var sinPhi = Math.sin(phi);                                                                                        // 3474
    var cosTheta = Math.cos(theta);                                                                                    // 3475
    var sinTheta = Math.sin(theta);                                                                                    // 3476
    var cosPsi = Math.cos(psi);                                                                                        // 3477
    var sinPsi = Math.sin(psi);                                                                                        // 3478
    var result = [                                                                                                     // 3479
        cosTheta * cosPsi,                                                                                             // 3480
        cosPhi * sinPsi + sinPhi * sinTheta * cosPsi,                                                                  // 3481
        sinPhi * sinPsi - cosPhi * sinTheta * cosPsi,                                                                  // 3482
        0,                                                                                                             // 3483
        -cosTheta * sinPsi,                                                                                            // 3484
        cosPhi * cosPsi - sinPhi * sinTheta * sinPsi,                                                                  // 3485
        sinPhi * cosPsi + cosPhi * sinTheta * sinPsi,                                                                  // 3486
        0,                                                                                                             // 3487
        sinTheta,                                                                                                      // 3488
        -sinPhi * cosTheta,                                                                                            // 3489
        cosPhi * cosTheta,                                                                                             // 3490
        0,                                                                                                             // 3491
        0, 0, 0, 1                                                                                                     // 3492
    ];                                                                                                                 // 3493
    return result;                                                                                                     // 3494
};                                                                                                                     // 3495
                                                                                                                       // 3496
/**                                                                                                                    // 3497
 * Return a Transform which represents an axis-angle rotation                                                          // 3498
 *                                                                                                                     // 3499
 * @method rotateAxis                                                                                                  // 3500
 * @static                                                                                                             // 3501
 * @param {Array.Number} v unit vector representing the axis to rotate about                                           // 3502
 * @param {Number} theta radians to rotate clockwise about the axis                                                    // 3503
 * @return {Transform}                                                                                                 // 3504
 */                                                                                                                    // 3505
Transform.rotateAxis = function rotateAxis(v, theta) {                                                                 // 3506
    var sinTheta = Math.sin(theta);                                                                                    // 3507
    var cosTheta = Math.cos(theta);                                                                                    // 3508
    var verTheta = 1 - cosTheta; // versine of theta                                                                   // 3509
                                                                                                                       // 3510
    var xxV = v[0] * v[0] * verTheta;                                                                                  // 3511
    var xyV = v[0] * v[1] * verTheta;                                                                                  // 3512
    var xzV = v[0] * v[2] * verTheta;                                                                                  // 3513
    var yyV = v[1] * v[1] * verTheta;                                                                                  // 3514
    var yzV = v[1] * v[2] * verTheta;                                                                                  // 3515
    var zzV = v[2] * v[2] * verTheta;                                                                                  // 3516
    var xs = v[0] * sinTheta;                                                                                          // 3517
    var ys = v[1] * sinTheta;                                                                                          // 3518
    var zs = v[2] * sinTheta;                                                                                          // 3519
                                                                                                                       // 3520
    var result = [                                                                                                     // 3521
        xxV + cosTheta, xyV + zs, xzV - ys, 0,                                                                         // 3522
        xyV - zs, yyV + cosTheta, yzV + xs, 0,                                                                         // 3523
        xzV + ys, yzV - xs, zzV + cosTheta, 0,                                                                         // 3524
        0, 0, 0, 1                                                                                                     // 3525
    ];                                                                                                                 // 3526
    return result;                                                                                                     // 3527
};                                                                                                                     // 3528
                                                                                                                       // 3529
/**                                                                                                                    // 3530
 * Return a Transform which represents a transform matrix applied about                                                // 3531
 * a separate origin point.                                                                                            // 3532
 *                                                                                                                     // 3533
 * @method aboutOrigin                                                                                                 // 3534
 * @static                                                                                                             // 3535
 * @param {Array.Number} v origin point to apply matrix                                                                // 3536
 * @param {Transform} m matrix to apply                                                                                // 3537
 * @return {Transform}                                                                                                 // 3538
 */                                                                                                                    // 3539
Transform.aboutOrigin = function aboutOrigin(v, m) {                                                                   // 3540
    var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);                                                         // 3541
    var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);                                                         // 3542
    var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);                                                        // 3543
    return Transform.thenMove(m, [t0, t1, t2]);                                                                        // 3544
};                                                                                                                     // 3545
                                                                                                                       // 3546
/**                                                                                                                    // 3547
 * Return a Transform representation of a skew transformation                                                          // 3548
 *                                                                                                                     // 3549
 * @method skew                                                                                                        // 3550
 * @static                                                                                                             // 3551
 * @param {Number} phi scale factor skew in the x axis                                                                 // 3552
 * @param {Number} theta scale factor skew in the y axis                                                               // 3553
 * @param {Number} psi scale factor skew in the z axis                                                                 // 3554
 * @return {Transform}                                                                                                 // 3555
 */                                                                                                                    // 3556
Transform.skew = function skew(phi, theta, psi) {                                                                      // 3557
    return [1, Math.tan(theta), 0, 0, Math.tan(psi), 1, 0, 0, 0, Math.tan(phi), 1, 0, 0, 0, 0, 1];                     // 3558
};                                                                                                                     // 3559
                                                                                                                       // 3560
/**                                                                                                                    // 3561
 * Return a Transform representation of a skew in the x-direction                                                      // 3562
 *                                                                                                                     // 3563
 * @method skewX                                                                                                       // 3564
 * @static                                                                                                             // 3565
 * @param {Number} angle the angle between the top and left sides                                                      // 3566
 * @return {Transform}                                                                                                 // 3567
 */                                                                                                                    // 3568
Transform.skewX = function skewX(angle) {                                                                              // 3569
    return [1, 0, 0, 0, Math.tan(angle), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3570
};                                                                                                                     // 3571
                                                                                                                       // 3572
/**                                                                                                                    // 3573
 * Return a Transform representation of a skew in the y-direction                                                      // 3574
 *                                                                                                                     // 3575
 * @method skewY                                                                                                       // 3576
 * @static                                                                                                             // 3577
 * @param {Number} angle the angle between the top and right sides                                                     // 3578
 * @return {Transform}                                                                                                 // 3579
 */                                                                                                                    // 3580
Transform.skewY = function skewY(angle) {                                                                              // 3581
    return [1, Math.tan(angle), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];                                             // 3582
};                                                                                                                     // 3583
                                                                                                                       // 3584
/**                                                                                                                    // 3585
 * Returns a perspective Transform matrix                                                                              // 3586
 *                                                                                                                     // 3587
 * @method perspective                                                                                                 // 3588
 * @static                                                                                                             // 3589
 * @param {Number} focusZ z position of focal point                                                                    // 3590
 * @return {Transform}                                                                                                 // 3591
 */                                                                                                                    // 3592
Transform.perspective = function perspective(focusZ) {                                                                 // 3593
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1 / focusZ, 0, 0, 0, 1];                                                 // 3594
};                                                                                                                     // 3595
                                                                                                                       // 3596
/**                                                                                                                    // 3597
 * Return translation vector component of given Transform                                                              // 3598
 *                                                                                                                     // 3599
 * @method getTranslate                                                                                                // 3600
 * @static                                                                                                             // 3601
 * @param {Transform} m Transform                                                                                      // 3602
 * @return {Array.Number} the translation vector [t_x, t_y, t_z]                                                       // 3603
 */                                                                                                                    // 3604
Transform.getTranslate = function getTranslate(m) {                                                                    // 3605
    return [m[12], m[13], m[14]];                                                                                      // 3606
};                                                                                                                     // 3607
                                                                                                                       // 3608
/**                                                                                                                    // 3609
 * Return inverse affine transform for given Transform.                                                                // 3610
 *   Note: This assumes m[3] = m[7] = m[11] = 0, and m[15] = 1.                                                        // 3611
 *   Will provide incorrect results if not invertible or preconditions not met.                                        // 3612
 *                                                                                                                     // 3613
 * @method inverse                                                                                                     // 3614
 * @static                                                                                                             // 3615
 * @param {Transform} m Transform                                                                                      // 3616
 * @return {Transform}                                                                                                 // 3617
 */                                                                                                                    // 3618
Transform.inverse = function inverse(m) {                                                                              // 3619
    // only need to consider 3x3 section for affine                                                                    // 3620
    var c0 = m[5] * m[10] - m[6] * m[9];                                                                               // 3621
    var c1 = m[4] * m[10] - m[6] * m[8];                                                                               // 3622
    var c2 = m[4] * m[9] - m[5] * m[8];                                                                                // 3623
    var c4 = m[1] * m[10] - m[2] * m[9];                                                                               // 3624
    var c5 = m[0] * m[10] - m[2] * m[8];                                                                               // 3625
    var c6 = m[0] * m[9] - m[1] * m[8];                                                                                // 3626
    var c8 = m[1] * m[6] - m[2] * m[5];                                                                                // 3627
    var c9 = m[0] * m[6] - m[2] * m[4];                                                                                // 3628
    var c10 = m[0] * m[5] - m[1] * m[4];                                                                               // 3629
    var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;                                                                      // 3630
    var invD = 1 / detM;                                                                                               // 3631
    var result = [                                                                                                     // 3632
        invD * c0, -invD * c4, invD * c8, 0,                                                                           // 3633
        -invD * c1, invD * c5, -invD * c9, 0,                                                                          // 3634
        invD * c2, -invD * c6, invD * c10, 0,                                                                          // 3635
        0, 0, 0, 1                                                                                                     // 3636
    ];                                                                                                                 // 3637
    result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];                                           // 3638
    result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];                                           // 3639
    result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];                                          // 3640
    return result;                                                                                                     // 3641
};                                                                                                                     // 3642
                                                                                                                       // 3643
/**                                                                                                                    // 3644
 * Returns the transpose of a 4x4 matrix                                                                               // 3645
 *                                                                                                                     // 3646
 * @method transpose                                                                                                   // 3647
 * @static                                                                                                             // 3648
 * @param {Transform} m matrix                                                                                         // 3649
 * @return {Transform} the resulting transposed matrix                                                                 // 3650
 */                                                                                                                    // 3651
Transform.transpose = function transpose(m) {                                                                          // 3652
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];     // 3653
};                                                                                                                     // 3654
                                                                                                                       // 3655
function _normSquared(v) {                                                                                             // 3656
    return (v.length === 2) ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];                     // 3657
}                                                                                                                      // 3658
function _norm(v) {                                                                                                    // 3659
    return Math.sqrt(_normSquared(v));                                                                                 // 3660
}                                                                                                                      // 3661
function _sign(n) {                                                                                                    // 3662
    return (n < 0) ? -1 : 1;                                                                                           // 3663
}                                                                                                                      // 3664
                                                                                                                       // 3665
/**                                                                                                                    // 3666
 * Decompose Transform into separate .translate, .rotate, .scale,                                                      // 3667
 *    and .skew components.                                                                                            // 3668
 *                                                                                                                     // 3669
 * @method interpret                                                                                                   // 3670
 * @static                                                                                                             // 3671
 * @param {Transform} M transform matrix                                                                               // 3672
 * @return {Object} matrix spec object with component matrices .translate,                                             // 3673
 *    .rotate, .scale, .skew                                                                                           // 3674
 */                                                                                                                    // 3675
Transform.interpret = function interpret(M) {                                                                          // 3676
                                                                                                                       // 3677
    // QR decomposition via Householder reflections                                                                    // 3678
    //FIRST ITERATION                                                                                                  // 3679
                                                                                                                       // 3680
    //default Q1 to the identity matrix;                                                                               // 3681
    var x = [M[0], M[1], M[2]];                // first column vector                                                  // 3682
    var sgn = _sign(x[0]);                     // sign of first component of x (for stability)                         // 3683
    var xNorm = _norm(x);                      // norm of first column vector                                          // 3684
    var v = [x[0] + sgn * xNorm, x[1], x[2]];  // v = x + sign(x[0])|x|e1                                              // 3685
    var mult = 2 / _normSquared(v);            // mult = 2/v'v                                                         // 3686
                                                                                                                       // 3687
    //bail out if our Matrix is singular                                                                               // 3688
    if (mult >= Infinity) {                                                                                            // 3689
        return {translate: Transform.getTranslate(M), rotate: [0, 0, 0], scale: [0, 0, 0], skew: [0, 0, 0]};           // 3690
    }                                                                                                                  // 3691
                                                                                                                       // 3692
    //evaluate Q1 = I - 2vv'/v'v                                                                                       // 3693
    var Q1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3694
                                                                                                                       // 3695
    //diagonals                                                                                                        // 3696
    Q1[0]  = 1 - mult * v[0] * v[0];    // 0,0 entry                                                                   // 3697
    Q1[5]  = 1 - mult * v[1] * v[1];    // 1,1 entry                                                                   // 3698
    Q1[10] = 1 - mult * v[2] * v[2];    // 2,2 entry                                                                   // 3699
                                                                                                                       // 3700
    //upper diagonal                                                                                                   // 3701
    Q1[1] = -mult * v[0] * v[1];        // 0,1 entry                                                                   // 3702
    Q1[2] = -mult * v[0] * v[2];        // 0,2 entry                                                                   // 3703
    Q1[6] = -mult * v[1] * v[2];        // 1,2 entry                                                                   // 3704
                                                                                                                       // 3705
    //lower diagonal                                                                                                   // 3706
    Q1[4] = Q1[1];                      // 1,0 entry                                                                   // 3707
    Q1[8] = Q1[2];                      // 2,0 entry                                                                   // 3708
    Q1[9] = Q1[6];                      // 2,1 entry                                                                   // 3709
                                                                                                                       // 3710
    //reduce first column of M                                                                                         // 3711
    var MQ1 = Transform.multiply(Q1, M);                                                                               // 3712
                                                                                                                       // 3713
    //SECOND ITERATION on (1,1) minor                                                                                  // 3714
    var x2 = [MQ1[5], MQ1[6]];                                                                                         // 3715
    var sgn2 = _sign(x2[0]);                    // sign of first component of x (for stability)                        // 3716
    var x2Norm = _norm(x2);                     // norm of first column vector                                         // 3717
    var v2 = [x2[0] + sgn2 * x2Norm, x2[1]];    // v = x + sign(x[0])|x|e1                                             // 3718
    var mult2 = 2 / _normSquared(v2);           // mult = 2/v'v                                                        // 3719
                                                                                                                       // 3720
    //evaluate Q2 = I - 2vv'/v'v                                                                                       // 3721
    var Q2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];                                                         // 3722
                                                                                                                       // 3723
    //diagonal                                                                                                         // 3724
    Q2[5]  = 1 - mult2 * v2[0] * v2[0]; // 1,1 entry                                                                   // 3725
    Q2[10] = 1 - mult2 * v2[1] * v2[1]; // 2,2 entry                                                                   // 3726
                                                                                                                       // 3727
    //off diagonals                                                                                                    // 3728
    Q2[6] = -mult2 * v2[0] * v2[1];     // 2,1 entry                                                                   // 3729
    Q2[9] = Q2[6];                      // 1,2 entry                                                                   // 3730
                                                                                                                       // 3731
    //calc QR decomposition. Q = Q1*Q2, R = Q'*M                                                                       // 3732
    var Q = Transform.multiply(Q2, Q1);      //note: really Q transpose                                                // 3733
    var R = Transform.multiply(Q, M);                                                                                  // 3734
                                                                                                                       // 3735
    //remove negative scaling                                                                                          // 3736
    var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);                           // 3737
    R = Transform.multiply(R, remover);                                                                                // 3738
    Q = Transform.multiply(remover, Q);                                                                                // 3739
                                                                                                                       // 3740
    //decompose into rotate/scale/skew matrices                                                                        // 3741
    var result = {};                                                                                                   // 3742
    result.translate = Transform.getTranslate(M);                                                                      // 3743
    result.rotate = [Math.atan2(-Q[6], Q[10]), Math.asin(Q[2]), Math.atan2(-Q[1], Q[0])];                              // 3744
    if (!result.rotate[0]) {                                                                                           // 3745
        result.rotate[0] = 0;                                                                                          // 3746
        result.rotate[2] = Math.atan2(Q[4], Q[5]);                                                                     // 3747
    }                                                                                                                  // 3748
    result.scale = [R[0], R[5], R[10]];                                                                                // 3749
    result.skew = [Math.atan2(R[9], result.scale[2]), Math.atan2(R[8], result.scale[2]), Math.atan2(R[4], result.scale[0])];
                                                                                                                       // 3751
    //double rotation workaround                                                                                       // 3752
    if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {                                     // 3753
        result.rotate[1] = Math.PI - result.rotate[1];                                                                 // 3754
        if (result.rotate[1] > Math.PI) result.rotate[1] -= 2 * Math.PI;                                               // 3755
        if (result.rotate[1] < -Math.PI) result.rotate[1] += 2 * Math.PI;                                              // 3756
        if (result.rotate[0] < 0) result.rotate[0] += Math.PI;                                                         // 3757
        else result.rotate[0] -= Math.PI;                                                                              // 3758
        if (result.rotate[2] < 0) result.rotate[2] += Math.PI;                                                         // 3759
        else result.rotate[2] -= Math.PI;                                                                              // 3760
    }                                                                                                                  // 3761
                                                                                                                       // 3762
    return result;                                                                                                     // 3763
};                                                                                                                     // 3764
                                                                                                                       // 3765
/**                                                                                                                    // 3766
 * Weighted average between two matrices by averaging their                                                            // 3767
 *     translation, rotation, scale, skew components.                                                                  // 3768
 *     f(M1,M2,t) = (1 - t) * M1 + t * M2                                                                              // 3769
 *                                                                                                                     // 3770
 * @method average                                                                                                     // 3771
 * @static                                                                                                             // 3772
 * @param {Transform} M1 f(M1,M2,0) = M1                                                                               // 3773
 * @param {Transform} M2 f(M1,M2,1) = M2                                                                               // 3774
 * @param {Number} t                                                                                                   // 3775
 * @return {Transform}                                                                                                 // 3776
 */                                                                                                                    // 3777
Transform.average = function average(M1, M2, t) {                                                                      // 3778
    t = (t === undefined) ? 0.5 : t;                                                                                   // 3779
    var specM1 = Transform.interpret(M1);                                                                              // 3780
    var specM2 = Transform.interpret(M2);                                                                              // 3781
                                                                                                                       // 3782
    var specAvg = {                                                                                                    // 3783
        translate: [0, 0, 0],                                                                                          // 3784
        rotate: [0, 0, 0],                                                                                             // 3785
        scale: [0, 0, 0],                                                                                              // 3786
        skew: [0, 0, 0]                                                                                                // 3787
    };                                                                                                                 // 3788
                                                                                                                       // 3789
    for (var i = 0; i < 3; i++) {                                                                                      // 3790
        specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];                                // 3791
        specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];                                         // 3792
        specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];                                            // 3793
        specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];                                               // 3794
    }                                                                                                                  // 3795
    return Transform.build(specAvg);                                                                                   // 3796
};                                                                                                                     // 3797
                                                                                                                       // 3798
/**                                                                                                                    // 3799
 * Compose .translate, .rotate, .scale, .skew components into                                                          // 3800
 * Transform matrix                                                                                                    // 3801
 *                                                                                                                     // 3802
 * @method build                                                                                                       // 3803
 * @static                                                                                                             // 3804
 * @param {matrixSpec} spec object with component matrices .translate,                                                 // 3805
 *    .rotate, .scale, .skew                                                                                           // 3806
 * @return {Transform} composed transform                                                                              // 3807
 */                                                                                                                    // 3808
Transform.build = function build(spec) {                                                                               // 3809
    var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);                                    // 3810
    var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);                                         // 3811
    var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);                               // 3812
    return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
};                                                                                                                     // 3814
                                                                                                                       // 3815
/**                                                                                                                    // 3816
 * Determine if two Transforms are component-wise equal                                                                // 3817
 *   Warning: breaks on perspective Transforms                                                                         // 3818
 *                                                                                                                     // 3819
 * @method equals                                                                                                      // 3820
 * @static                                                                                                             // 3821
 * @param {Transform} a matrix                                                                                         // 3822
 * @param {Transform} b matrix                                                                                         // 3823
 * @return {boolean}                                                                                                   // 3824
 */                                                                                                                    // 3825
Transform.equals = function equals(a, b) {                                                                             // 3826
    return !Transform.notEquals(a, b);                                                                                 // 3827
};                                                                                                                     // 3828
                                                                                                                       // 3829
/**                                                                                                                    // 3830
 * Determine if two Transforms are component-wise unequal                                                              // 3831
 *   Warning: breaks on perspective Transforms                                                                         // 3832
 *                                                                                                                     // 3833
 * @method notEquals                                                                                                   // 3834
 * @static                                                                                                             // 3835
 * @param {Transform} a matrix                                                                                         // 3836
 * @param {Transform} b matrix                                                                                         // 3837
 * @return {boolean}                                                                                                   // 3838
 */                                                                                                                    // 3839
Transform.notEquals = function notEquals(a, b) {                                                                       // 3840
    if (a === b) return false;                                                                                         // 3841
                                                                                                                       // 3842
    // shortci                                                                                                         // 3843
    return !(a && b) ||                                                                                                // 3844
        a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] ||                                                       // 3845
        a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] ||                                                             // 3846
        a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] ||                                                             // 3847
        a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];                                                             // 3848
};                                                                                                                     // 3849
                                                                                                                       // 3850
/**                                                                                                                    // 3851
 * Constrain angle-trio components to range of [-pi, pi).                                                              // 3852
 *                                                                                                                     // 3853
 * @method normalizeRotation                                                                                           // 3854
 * @static                                                                                                             // 3855
 * @param {Array.Number} rotation phi, theta, psi (array of floats                                                     // 3856
 *    && array.length == 3)                                                                                            // 3857
 * @return {Array.Number} new phi, theta, psi triplet                                                                  // 3858
 *    (array of floats && array.length == 3)                                                                           // 3859
 */                                                                                                                    // 3860
Transform.normalizeRotation = function normalizeRotation(rotation) {                                                   // 3861
    var result = rotation.slice(0);                                                                                    // 3862
    if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {                                                 // 3863
        result[0] = -result[0];                                                                                        // 3864
        result[1] = Math.PI - result[1];                                                                               // 3865
        result[2] -= Math.PI;                                                                                          // 3866
    }                                                                                                                  // 3867
    if (result[0] > Math.PI * 0.5) {                                                                                   // 3868
        result[0] = result[0] - Math.PI;                                                                               // 3869
        result[1] = Math.PI - result[1];                                                                               // 3870
        result[2] -= Math.PI;                                                                                          // 3871
    }                                                                                                                  // 3872
    if (result[0] < -Math.PI * 0.5) {                                                                                  // 3873
        result[0] = result[0] + Math.PI;                                                                               // 3874
        result[1] = -Math.PI - result[1];                                                                              // 3875
        result[2] -= Math.PI;                                                                                          // 3876
    }                                                                                                                  // 3877
    while (result[1] < -Math.PI) result[1] += 2 * Math.PI;                                                             // 3878
    while (result[1] >= Math.PI) result[1] -= 2 * Math.PI;                                                             // 3879
    while (result[2] < -Math.PI) result[2] += 2 * Math.PI;                                                             // 3880
    while (result[2] >= Math.PI) result[2] -= 2 * Math.PI;                                                             // 3881
    return result;                                                                                                     // 3882
};                                                                                                                     // 3883
                                                                                                                       // 3884
/**                                                                                                                    // 3885
 * (Property) Array defining a translation forward in z by 1                                                           // 3886
 *                                                                                                                     // 3887
 * @property {array} inFront                                                                                           // 3888
 * @static                                                                                                             // 3889
 * @final                                                                                                              // 3890
 */                                                                                                                    // 3891
Transform.inFront = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1e-3, 1];                                               // 3892
                                                                                                                       // 3893
/**                                                                                                                    // 3894
 * (Property) Array defining a translation backwards in z by 1                                                         // 3895
 *                                                                                                                     // 3896
 * @property {array} behind                                                                                            // 3897
 * @static                                                                                                             // 3898
 * @final                                                                                                              // 3899
 */                                                                                                                    // 3900
Transform.behind = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1e-3, 1];                                               // 3901
                                                                                                                       // 3902
module.exports = Transform;                                                                                            // 3903
},{}],16:[function(_dereq_,module,exports){                                                                            // 3904
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 3905
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 3906
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 3907
 *                                                                                                                     // 3908
 * Owner: mark@famo.us                                                                                                 // 3909
 * @license MPL 2.0                                                                                                    // 3910
 * @copyright Famous Industries, Inc. 2014                                                                             // 3911
 */                                                                                                                    // 3912
                                                                                                                       // 3913
var EventHandler = _dereq_('./EventHandler');                                                                          // 3914
var OptionsManager = _dereq_('./OptionsManager');                                                                      // 3915
var RenderNode = _dereq_('./RenderNode');                                                                              // 3916
var Utility = _dereq_('../utilities/Utility');                                                                         // 3917
                                                                                                                       // 3918
/**                                                                                                                    // 3919
 * Useful for quickly creating elements within applications                                                            // 3920
 *   with large event systems.  Consists of a RenderNode paired with                                                   // 3921
 *   an input EventHandler and an output EventHandler.                                                                 // 3922
 *   Meant to be extended by the developer.                                                                            // 3923
 *                                                                                                                     // 3924
 * @class View                                                                                                         // 3925
 * @uses EventHandler                                                                                                  // 3926
 * @uses OptionsManager                                                                                                // 3927
 * @uses RenderNode                                                                                                    // 3928
 * @constructor                                                                                                        // 3929
 */                                                                                                                    // 3930
function View(options) {                                                                                               // 3931
    this._node = new RenderNode();                                                                                     // 3932
                                                                                                                       // 3933
    this._eventInput = new EventHandler();                                                                             // 3934
    this._eventOutput = new EventHandler();                                                                            // 3935
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 3936
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 3937
                                                                                                                       // 3938
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);                            // 3939
    this._optionsManager = new OptionsManager(this.options);                                                           // 3940
                                                                                                                       // 3941
    if (options) this.setOptions(options);                                                                             // 3942
}                                                                                                                      // 3943
                                                                                                                       // 3944
View.DEFAULT_OPTIONS = {}; // no defaults                                                                              // 3945
                                                                                                                       // 3946
/**                                                                                                                    // 3947
 * Look up options value by key                                                                                        // 3948
 * @method getOptions                                                                                                  // 3949
 *                                                                                                                     // 3950
 * @param {string} key key                                                                                             // 3951
 * @return {Object} associated object                                                                                  // 3952
 */                                                                                                                    // 3953
View.prototype.getOptions = function getOptions(key) {                                                                 // 3954
    return this._optionsManager.getOptions(key);                                                                       // 3955
};                                                                                                                     // 3956
                                                                                                                       // 3957
/*                                                                                                                     // 3958
 *  Set internal options.                                                                                              // 3959
 *  No defaults options are set in View.                                                                               // 3960
 *                                                                                                                     // 3961
 *  @method setOptions                                                                                                 // 3962
 *  @param {Object} options                                                                                            // 3963
 */                                                                                                                    // 3964
View.prototype.setOptions = function setOptions(options) {                                                             // 3965
    this._optionsManager.patch(options);                                                                               // 3966
};                                                                                                                     // 3967
                                                                                                                       // 3968
/**                                                                                                                    // 3969
 * Add a child renderable to the view.                                                                                 // 3970
 *   Note: This is meant to be used by an inheriting class                                                             // 3971
 *   rather than from outside the prototype chain.                                                                     // 3972
 *                                                                                                                     // 3973
 * @method add                                                                                                         // 3974
 * @return {RenderNode}                                                                                                // 3975
 * @protected                                                                                                          // 3976
 */                                                                                                                    // 3977
View.prototype.add = function add() {                                                                                  // 3978
    return this._node.add.apply(this._node, arguments);                                                                // 3979
};                                                                                                                     // 3980
                                                                                                                       // 3981
/**                                                                                                                    // 3982
 * Alias for add                                                                                                       // 3983
 * @method _add                                                                                                        // 3984
 */                                                                                                                    // 3985
View.prototype._add = View.prototype.add;                                                                              // 3986
                                                                                                                       // 3987
/**                                                                                                                    // 3988
 * Generate a render spec from the contents of this component.                                                         // 3989
 *                                                                                                                     // 3990
 * @private                                                                                                            // 3991
 * @method render                                                                                                      // 3992
 * @return {number} Render spec for this component                                                                     // 3993
 */                                                                                                                    // 3994
View.prototype.render = function render() {                                                                            // 3995
    return this._node.render();                                                                                        // 3996
};                                                                                                                     // 3997
                                                                                                                       // 3998
/**                                                                                                                    // 3999
 * Return size of contained element.                                                                                   // 4000
 *                                                                                                                     // 4001
 * @method getSize                                                                                                     // 4002
 * @return {Array.Number} [width, height]                                                                              // 4003
 */                                                                                                                    // 4004
View.prototype.getSize = function getSize() {                                                                          // 4005
    if (this._node && this._node.getSize) {                                                                            // 4006
        return this._node.getSize.apply(this._node, arguments) || this.options.size;                                   // 4007
    }                                                                                                                  // 4008
    else return this.options.size;                                                                                     // 4009
};                                                                                                                     // 4010
                                                                                                                       // 4011
module.exports = View;                                                                                                 // 4012
},{"../utilities/Utility":96,"./EventHandler":7,"./OptionsManager":10,"./RenderNode":11}],17:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4014
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4015
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4016
 *                                                                                                                     // 4017
 * Owner: mark@famo.us                                                                                                 // 4018
 * @license MPL 2.0                                                                                                    // 4019
 * @copyright Famous Industries, Inc. 2014                                                                             // 4020
 */                                                                                                                    // 4021
                                                                                                                       // 4022
                                                                                                                       // 4023
                                                                                                                       // 4024
                                                                                                                       // 4025
/**                                                                                                                    // 4026
 * Helper object used to iterate through items sequentially. Used in                                                   // 4027
 *   views that deal with layout.  A ViewSequence object conceptually points                                           // 4028
 *   to a node in a linked list.                                                                                       // 4029
 *                                                                                                                     // 4030
 * @class ViewSequence                                                                                                 // 4031
 *                                                                                                                     // 4032
 * @constructor                                                                                                        // 4033
 * @param {Object|Array} options Options object, or content array.                                                     // 4034
 * @param {Number} [options.index] starting index.                                                                     // 4035
 * @param {Number} [options.array] Array of elements to populate the ViewSequence                                      // 4036
 * @param {Object} [options._] Optional backing store (internal                                                        // 4037
 * @param {Boolean} [options.loop] Whether to wrap when accessing elements just past the end                           // 4038
 *   (or beginning) of the sequence.                                                                                   // 4039
 */                                                                                                                    // 4040
function ViewSequence(options) {                                                                                       // 4041
    if (!options) options = [];                                                                                        // 4042
    if (options instanceof Array) options = {array: options};                                                          // 4043
                                                                                                                       // 4044
    this._ = null;                                                                                                     // 4045
    this.index = options.index || 0;                                                                                   // 4046
                                                                                                                       // 4047
    if (options.array) this._ = new (this.constructor.Backing)(options.array);                                         // 4048
    else if (options._) this._ = options._;                                                                            // 4049
                                                                                                                       // 4050
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4051
    if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                            // 4052
                                                                                                                       // 4053
    if (options.loop !== undefined) this._.loop = options.loop;                                                        // 4054
                                                                                                                       // 4055
    if (options.trackSize !== undefined) this._.trackSize = options.trackSize;                                         // 4056
                                                                                                                       // 4057
    this._previousNode = null;                                                                                         // 4058
    this._nextNode = null;                                                                                             // 4059
}                                                                                                                      // 4060
                                                                                                                       // 4061
// constructor for internal storage                                                                                    // 4062
ViewSequence.Backing = function Backing(array) {                                                                       // 4063
    this.array = array;                                                                                                // 4064
    this.firstIndex = 0;                                                                                               // 4065
    this.loop = false;                                                                                                 // 4066
    this.firstNode = null;                                                                                             // 4067
    this.lastNode = null;                                                                                              // 4068
    this.cumulativeSizes = [[0, 0]];                                                                                   // 4069
    this.sizeDirty = true;                                                                                             // 4070
    this.trackSize = false;                                                                                            // 4071
};                                                                                                                     // 4072
                                                                                                                       // 4073
// Get value "i" slots away from the first index.                                                                      // 4074
ViewSequence.Backing.prototype.getValue = function getValue(i) {                                                       // 4075
    var _i = i - this.firstIndex;                                                                                      // 4076
    if (_i < 0 || _i >= this.array.length) return null;                                                                // 4077
    return this.array[_i];                                                                                             // 4078
};                                                                                                                     // 4079
                                                                                                                       // 4080
// Set value "i" slots away from the first index.                                                                      // 4081
ViewSequence.Backing.prototype.setValue = function setValue(i, value) {                                                // 4082
    this.array[i - this.firstIndex] = value;                                                                           // 4083
};                                                                                                                     // 4084
                                                                                                                       // 4085
// Get sequence size from backing up to index                                                                          // 4086
// TODO: remove from viewSequence with proper abstraction                                                              // 4087
ViewSequence.Backing.prototype.getSize = function getSize(index) {                                                     // 4088
    return this.cumulativeSizes[index];                                                                                // 4089
};                                                                                                                     // 4090
                                                                                                                       // 4091
// Calculates cumulative size                                                                                          // 4092
// TODO: remove from viewSequence with proper abstraction                                                              // 4093
ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {                                         // 4094
    index = index || this.array.length;                                                                                // 4095
    var size = [0, 0];                                                                                                 // 4096
    for (var i = 0; i < index; i++) {                                                                                  // 4097
        var nodeSize = this.array[i].getSize();                                                                        // 4098
        if (!nodeSize) return undefined;                                                                               // 4099
        if (size[0] !== undefined) {                                                                                   // 4100
            if (nodeSize[0] === undefined) size[0] = undefined;                                                        // 4101
            else size[0] += nodeSize[0];                                                                               // 4102
        }                                                                                                              // 4103
        if (size[1] !== undefined) {                                                                                   // 4104
            if (nodeSize[1] === undefined) size[1] = undefined;                                                        // 4105
            else size[1] += nodeSize[1];                                                                               // 4106
        }                                                                                                              // 4107
        this.cumulativeSizes[i + 1] = size.slice();                                                                    // 4108
    }                                                                                                                  // 4109
    this.sizeDirty = false;                                                                                            // 4110
    return size;                                                                                                       // 4111
};                                                                                                                     // 4112
                                                                                                                       // 4113
// After splicing into the backing store, restore the indexes of each node correctly.                                  // 4114
ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {                           // 4115
    if (!this.array[0]) return;                                                                                        // 4116
                                                                                                                       // 4117
    var i = 0;                                                                                                         // 4118
    var index = this.firstIndex;                                                                                       // 4119
    var indexShiftAmount = insertCount - removeCount;                                                                  // 4120
    var node = this.firstNode;                                                                                         // 4121
                                                                                                                       // 4122
    // find node to begin                                                                                              // 4123
    while (index < start - 1) {                                                                                        // 4124
        node = node.getNext();                                                                                         // 4125
        index++;                                                                                                       // 4126
    }                                                                                                                  // 4127
    // skip removed nodes                                                                                              // 4128
    var spliceStartNode = node;                                                                                        // 4129
    for (i = 0; i < removeCount; i++) {                                                                                // 4130
        node = node.getNext();                                                                                         // 4131
        if (node) node._previousNode = spliceStartNode;                                                                // 4132
    }                                                                                                                  // 4133
    var spliceResumeNode = node ? node.getNext() : null;                                                               // 4134
    // generate nodes for inserted items                                                                               // 4135
    spliceStartNode._nextNode = null;                                                                                  // 4136
    node = spliceStartNode;                                                                                            // 4137
    for (i = 0; i < insertCount; i++) node = node.getNext();                                                           // 4138
    index += insertCount;                                                                                              // 4139
    // resume the chain                                                                                                // 4140
    if (node !== spliceResumeNode) {                                                                                   // 4141
        node._nextNode = spliceResumeNode;                                                                             // 4142
        if (spliceResumeNode) spliceResumeNode._previousNode = node;                                                   // 4143
    }                                                                                                                  // 4144
    if (spliceResumeNode) {                                                                                            // 4145
        node = spliceResumeNode;                                                                                       // 4146
        index++;                                                                                                       // 4147
        while (node && index < this.array.length + this.firstIndex) {                                                  // 4148
            if (node._nextNode) node.index += indexShiftAmount;                                                        // 4149
            else node.index = index;                                                                                   // 4150
            node = node.getNext();                                                                                     // 4151
            index++;                                                                                                   // 4152
        }                                                                                                              // 4153
    }                                                                                                                  // 4154
    if (this.trackSize) this.sizeDirty = true;                                                                         // 4155
};                                                                                                                     // 4156
                                                                                                                       // 4157
/**                                                                                                                    // 4158
 * Return ViewSequence node previous to this node in the list, respecting looping if applied.                          // 4159
 *                                                                                                                     // 4160
 * @method getPrevious                                                                                                 // 4161
 * @return {ViewSequence} previous node.                                                                               // 4162
 */                                                                                                                    // 4163
ViewSequence.prototype.getPrevious = function getPrevious() {                                                          // 4164
    var len = this._.array.length;                                                                                     // 4165
    if (!len) {                                                                                                        // 4166
        this._previousNode = null;                                                                                     // 4167
    }                                                                                                                  // 4168
    else if (this.index === this._.firstIndex) {                                                                       // 4169
        if (this._.loop) {                                                                                             // 4170
            this._previousNode = this._.lastNode || new (this.constructor)({_: this._, index: this._.firstIndex + len - 1});
            this._previousNode._nextNode = this;                                                                       // 4172
        }                                                                                                              // 4173
        else {                                                                                                         // 4174
            this._previousNode = null;                                                                                 // 4175
        }                                                                                                              // 4176
    }                                                                                                                  // 4177
    else if (!this._previousNode) {                                                                                    // 4178
        this._previousNode = new (this.constructor)({_: this._, index: this.index - 1});                               // 4179
        this._previousNode._nextNode = this;                                                                           // 4180
    }                                                                                                                  // 4181
    return this._previousNode;                                                                                         // 4182
};                                                                                                                     // 4183
                                                                                                                       // 4184
/**                                                                                                                    // 4185
 * Return ViewSequence node next after this node in the list, respecting looping if applied.                           // 4186
 *                                                                                                                     // 4187
 * @method getNext                                                                                                     // 4188
 * @return {ViewSequence} previous node.                                                                               // 4189
 */                                                                                                                    // 4190
ViewSequence.prototype.getNext = function getNext() {                                                                  // 4191
    var len = this._.array.length;                                                                                     // 4192
    if (!len) {                                                                                                        // 4193
        this._nextNode = null;                                                                                         // 4194
    }                                                                                                                  // 4195
    else if (this.index === this._.firstIndex + len - 1) {                                                             // 4196
        if (this._.loop) {                                                                                             // 4197
            this._nextNode = this._.firstNode || new (this.constructor)({_: this._, index: this._.firstIndex});        // 4198
            this._nextNode._previousNode = this;                                                                       // 4199
        }                                                                                                              // 4200
        else {                                                                                                         // 4201
            this._nextNode = null;                                                                                     // 4202
        }                                                                                                              // 4203
    }                                                                                                                  // 4204
    else if (!this._nextNode) {                                                                                        // 4205
        this._nextNode = new (this.constructor)({_: this._, index: this.index + 1});                                   // 4206
        this._nextNode._previousNode = this;                                                                           // 4207
    }                                                                                                                  // 4208
    return this._nextNode;                                                                                             // 4209
};                                                                                                                     // 4210
                                                                                                                       // 4211
/**                                                                                                                    // 4212
 * Return index of the provided item in the backing array                                                              // 4213
 *                                                                                                                     // 4214
 * @method indexOf                                                                                                     // 4215
 * @return {Number} index or -1 if not found                                                                           // 4216
 */                                                                                                                    // 4217
ViewSequence.prototype.indexOf = function indexOf(item) {                                                              // 4218
    return this._.array.indexOf(item);                                                                                 // 4219
};                                                                                                                     // 4220
                                                                                                                       // 4221
/**                                                                                                                    // 4222
 * Return index of this ViewSequence node.                                                                             // 4223
 *                                                                                                                     // 4224
 * @method getIndex                                                                                                    // 4225
 * @return {Number} index                                                                                              // 4226
 */                                                                                                                    // 4227
ViewSequence.prototype.getIndex = function getIndex() {                                                                // 4228
    return this.index;                                                                                                 // 4229
};                                                                                                                     // 4230
                                                                                                                       // 4231
/**                                                                                                                    // 4232
 * Return printable version of this ViewSequence node.                                                                 // 4233
 *                                                                                                                     // 4234
 * @method toString                                                                                                    // 4235
 * @return {string} this index as a string                                                                             // 4236
 */                                                                                                                    // 4237
ViewSequence.prototype.toString = function toString() {                                                                // 4238
    return '' + this.index;                                                                                            // 4239
};                                                                                                                     // 4240
                                                                                                                       // 4241
/**                                                                                                                    // 4242
 * Add one or more objects to the beginning of the sequence.                                                           // 4243
 *                                                                                                                     // 4244
 * @method unshift                                                                                                     // 4245
 * @param {...Object} value arguments array of objects                                                                 // 4246
 */                                                                                                                    // 4247
ViewSequence.prototype.unshift = function unshift(value) {                                                             // 4248
    this._.array.unshift.apply(this._.array, arguments);                                                               // 4249
    this._.firstIndex -= arguments.length;                                                                             // 4250
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4251
};                                                                                                                     // 4252
                                                                                                                       // 4253
/**                                                                                                                    // 4254
 * Add one or more objects to the end of the sequence.                                                                 // 4255
 *                                                                                                                     // 4256
 * @method push                                                                                                        // 4257
 * @param {...Object} value arguments array of objects                                                                 // 4258
 */                                                                                                                    // 4259
ViewSequence.prototype.push = function push(value) {                                                                   // 4260
    this._.array.push.apply(this._.array, arguments);                                                                  // 4261
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4262
};                                                                                                                     // 4263
                                                                                                                       // 4264
/**                                                                                                                    // 4265
 * Remove objects from the sequence                                                                                    // 4266
 *                                                                                                                     // 4267
 * @method splice                                                                                                      // 4268
 * @param {Number} index starting index for removal                                                                    // 4269
 * @param {Number} howMany how many elements to remove                                                                 // 4270
 * @param {...Object} value arguments array of objects                                                                 // 4271
 */                                                                                                                    // 4272
ViewSequence.prototype.splice = function splice(index, howMany) {                                                      // 4273
    var values = Array.prototype.slice.call(arguments, 2);                                                             // 4274
    this._.array.splice.apply(this._.array, [index - this._.firstIndex, howMany].concat(values));                      // 4275
    this._.reindex(index, howMany, values.length);                                                                     // 4276
};                                                                                                                     // 4277
                                                                                                                       // 4278
/**                                                                                                                    // 4279
 * Exchange this element's sequence position with another's.                                                           // 4280
 *                                                                                                                     // 4281
 * @method swap                                                                                                        // 4282
 * @param {ViewSequence} other element to swap with.                                                                   // 4283
 */                                                                                                                    // 4284
ViewSequence.prototype.swap = function swap(other) {                                                                   // 4285
    var otherValue = other.get();                                                                                      // 4286
    var myValue = this.get();                                                                                          // 4287
    this._.setValue(this.index, otherValue);                                                                           // 4288
    this._.setValue(other.index, myValue);                                                                             // 4289
                                                                                                                       // 4290
    var myPrevious = this._previousNode;                                                                               // 4291
    var myNext = this._nextNode;                                                                                       // 4292
    var myIndex = this.index;                                                                                          // 4293
    var otherPrevious = other._previousNode;                                                                           // 4294
    var otherNext = other._nextNode;                                                                                   // 4295
    var otherIndex = other.index;                                                                                      // 4296
                                                                                                                       // 4297
    this.index = otherIndex;                                                                                           // 4298
    this._previousNode = (otherPrevious === this) ? other : otherPrevious;                                             // 4299
    if (this._previousNode) this._previousNode._nextNode = this;                                                       // 4300
    this._nextNode = (otherNext === this) ? other : otherNext;                                                         // 4301
    if (this._nextNode) this._nextNode._previousNode = this;                                                           // 4302
                                                                                                                       // 4303
    other.index = myIndex;                                                                                             // 4304
    other._previousNode = (myPrevious === other) ? this : myPrevious;                                                  // 4305
    if (other._previousNode) other._previousNode._nextNode = other;                                                    // 4306
    other._nextNode = (myNext === other) ? this : myNext;                                                              // 4307
    if (other._nextNode) other._nextNode._previousNode = other;                                                        // 4308
                                                                                                                       // 4309
    if (this.index === this._.firstIndex) this._.firstNode = this;                                                     // 4310
    else if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;                       // 4311
    if (other.index === this._.firstIndex) this._.firstNode = other;                                                   // 4312
    else if (other.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = other;                     // 4313
    if (this._.trackSize) this._.sizeDirty = true;                                                                     // 4314
};                                                                                                                     // 4315
                                                                                                                       // 4316
   /**                                                                                                                 // 4317
 * Return value of this ViewSequence node.                                                                             // 4318
 *                                                                                                                     // 4319
 * @method get                                                                                                         // 4320
 * @return {Object} value of thiss                                                                                     // 4321
 */                                                                                                                    // 4322
ViewSequence.prototype.get = function get() {                                                                          // 4323
    return this._.getValue(this.index);                                                                                // 4324
};                                                                                                                     // 4325
                                                                                                                       // 4326
   /**                                                                                                                 // 4327
 * Call getSize() on the contained View.                                                                               // 4328
 *                                                                                                                     // 4329
 * @method getSize                                                                                                     // 4330
 * @return {Array.Number} [width, height]                                                                              // 4331
 */                                                                                                                    // 4332
ViewSequence.prototype.getSize = function getSize() {                                                                  // 4333
    var target = this.get();                                                                                           // 4334
    return target ? target.getSize() : null;                                                                           // 4335
};                                                                                                                     // 4336
                                                                                                                       // 4337
/**                                                                                                                    // 4338
 * Generate a render spec from the contents of this component.                                                         // 4339
 * Specifically, this will render the value at the current index.                                                      // 4340
 * @private                                                                                                            // 4341
 * @method render                                                                                                      // 4342
 * @return {number} Render spec for this component                                                                     // 4343
 */                                                                                                                    // 4344
ViewSequence.prototype.render = function render() {                                                                    // 4345
    if (this._.trackSize && this._.sizeDirty) this._.calculateSize();                                                  // 4346
    var target = this.get();                                                                                           // 4347
    return target ? target.render.apply(target, arguments) : null;                                                     // 4348
};                                                                                                                     // 4349
                                                                                                                       // 4350
module.exports = ViewSequence;                                                                                         // 4351
},{}],18:[function(_dereq_,module,exports){                                                                            // 4352
module.exports = {                                                                                                     // 4353
  Context: _dereq_('./Context'),                                                                                       // 4354
  ElementAllocator: _dereq_('./ElementAllocator'),                                                                     // 4355
  ElementOutput: _dereq_('./ElementOutput'),                                                                           // 4356
  Entity: _dereq_('./Entity'),                                                                                         // 4357
  EventEmitter: _dereq_('./EventEmitter'),                                                                             // 4358
  Engine: _dereq_('./Engine'),                                                                                         // 4359
  EventHandler: _dereq_('./EventHandler'),                                                                             // 4360
  Group: _dereq_('./Group'),                                                                                           // 4361
  Modifier: _dereq_('./Modifier'),                                                                                     // 4362
  OptionsManager: _dereq_('./OptionsManager'),                                                                         // 4363
  RenderNode: _dereq_('./RenderNode'),                                                                                 // 4364
  Scene: _dereq_('./Scene'),                                                                                           // 4365
  SpecParser: _dereq_('./SpecParser'),                                                                                 // 4366
  Transform: _dereq_('./Transform'),                                                                                   // 4367
  Surface: _dereq_('./Surface'),                                                                                       // 4368
  View: _dereq_('./View'),                                                                                             // 4369
  ViewSequence: _dereq_('./ViewSequence')                                                                              // 4370
};                                                                                                                     // 4371
                                                                                                                       // 4372
},{"./Context":1,"./ElementAllocator":2,"./ElementOutput":3,"./Engine":4,"./Entity":5,"./EventEmitter":6,"./EventHandler":7,"./Group":8,"./Modifier":9,"./OptionsManager":10,"./RenderNode":11,"./Scene":12,"./SpecParser":13,"./Surface":14,"./Transform":15,"./View":16,"./ViewSequence":17}],19:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4374
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4375
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4376
 *                                                                                                                     // 4377
 * Owner: david@famo.us                                                                                                // 4378
 * @license MPL 2.0                                                                                                    // 4379
 * @copyright Famous Industries, Inc. 2014                                                                             // 4380
 */                                                                                                                    // 4381
                                                                                                                       // 4382
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4383
                                                                                                                       // 4384
/**                                                                                                                    // 4385
 * A switch which wraps several event destinations and                                                                 // 4386
 *  redirects received events to at most one of them.                                                                  // 4387
 *  Setting the 'mode' of the object dictates which one                                                                // 4388
 *  of these destinations will receive events.                                                                         // 4389
 *                                                                                                                     // 4390
 * @class EventArbiter                                                                                                 // 4391
 * @constructor                                                                                                        // 4392
 *                                                                                                                     // 4393
 * @param {Number | string} startMode initial setting of switch,                                                       // 4394
 */                                                                                                                    // 4395
function EventArbiter(startMode) {                                                                                     // 4396
    this.dispatchers = {};                                                                                             // 4397
    this.currMode = undefined;                                                                                         // 4398
    this.setMode(startMode);                                                                                           // 4399
}                                                                                                                      // 4400
                                                                                                                       // 4401
/**                                                                                                                    // 4402
 * Set switch to this mode, passing events to the corresponding                                                        // 4403
 *   EventHandler.  If mode has changed, emits 'change' event,                                                         // 4404
 *   emits 'unpipe' event to the old mode's handler, and emits 'pipe'                                                  // 4405
 *   event to the new mode's handler.                                                                                  // 4406
 *                                                                                                                     // 4407
 * @method setMode                                                                                                     // 4408
 *                                                                                                                     // 4409
 * @param {string | number} mode indicating which event handler to send to.                                            // 4410
 */                                                                                                                    // 4411
EventArbiter.prototype.setMode = function setMode(mode) {                                                              // 4412
    if (mode !== this.currMode) {                                                                                      // 4413
        var startMode = this.currMode;                                                                                 // 4414
                                                                                                                       // 4415
        if (this.dispatchers[this.currMode]) this.dispatchers[this.currMode].trigger('unpipe');                        // 4416
        this.currMode = mode;                                                                                          // 4417
        if (this.dispatchers[mode]) this.dispatchers[mode].emit('pipe');                                               // 4418
        this.emit('change', {from: startMode, to: mode});                                                              // 4419
    }                                                                                                                  // 4420
};                                                                                                                     // 4421
                                                                                                                       // 4422
/**                                                                                                                    // 4423
 * Return the existing EventHandler corresponding to this                                                              // 4424
 *   mode, creating one if it doesn't exist.                                                                           // 4425
 *                                                                                                                     // 4426
 * @method forMode                                                                                                     // 4427
 *                                                                                                                     // 4428
 * @param {string | number} mode mode to which this eventHandler corresponds                                           // 4429
 *                                                                                                                     // 4430
 * @return {EventHandler} eventHandler corresponding to this mode                                                      // 4431
 */                                                                                                                    // 4432
EventArbiter.prototype.forMode = function forMode(mode) {                                                              // 4433
    if (!this.dispatchers[mode]) this.dispatchers[mode] = new EventHandler();                                          // 4434
    return this.dispatchers[mode];                                                                                     // 4435
};                                                                                                                     // 4436
                                                                                                                       // 4437
/**                                                                                                                    // 4438
 * Trigger an event, sending to currently selected handler, if                                                         // 4439
 *   it is listening for provided 'type' key.                                                                          // 4440
 *                                                                                                                     // 4441
 * @method emit                                                                                                        // 4442
 *                                                                                                                     // 4443
 * @param {string} eventType event type key (for example, 'click')                                                     // 4444
 * @param {Object} event event data                                                                                    // 4445
 * @return {EventHandler} this                                                                                         // 4446
 */                                                                                                                    // 4447
EventArbiter.prototype.emit = function emit(eventType, event) {                                                        // 4448
    if (this.currMode === undefined) return false;                                                                     // 4449
    if (!event) event = {};                                                                                            // 4450
    var dispatcher = this.dispatchers[this.currMode];                                                                  // 4451
    if (dispatcher) return dispatcher.trigger(eventType, event);                                                       // 4452
};                                                                                                                     // 4453
                                                                                                                       // 4454
module.exports = EventArbiter;                                                                                         // 4455
},{"../core/EventHandler":7}],20:[function(_dereq_,module,exports){                                                    // 4456
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4457
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4458
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4459
 *                                                                                                                     // 4460
 * Owner: david@famo.us                                                                                                // 4461
 * @license MPL 2.0                                                                                                    // 4462
 * @copyright Famous Industries, Inc. 2014                                                                             // 4463
 */                                                                                                                    // 4464
                                                                                                                       // 4465
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4466
                                                                                                                       // 4467
/**                                                                                                                    // 4468
 * EventFilter regulates the broadcasting of events based on                                                           // 4469
 *  a specified condition function of standard event type: function(type, data).                                       // 4470
 *                                                                                                                     // 4471
 * @class EventFilter                                                                                                  // 4472
 * @constructor                                                                                                        // 4473
 *                                                                                                                     // 4474
 * @param {function} condition function to determine whether or not                                                    // 4475
 *    events are emitted.                                                                                              // 4476
 */                                                                                                                    // 4477
function EventFilter(condition) {                                                                                      // 4478
    EventHandler.call(this);                                                                                           // 4479
    this._condition = condition;                                                                                       // 4480
}                                                                                                                      // 4481
EventFilter.prototype = Object.create(EventHandler.prototype);                                                         // 4482
EventFilter.prototype.constructor = EventFilter;                                                                       // 4483
                                                                                                                       // 4484
/**                                                                                                                    // 4485
 * If filter condition is met, trigger an event, sending to all downstream handlers                                    // 4486
 *   listening for provided 'type' key.                                                                                // 4487
 *                                                                                                                     // 4488
 * @method emit                                                                                                        // 4489
 *                                                                                                                     // 4490
 * @param {string} type event type key (for example, 'click')                                                          // 4491
 * @param {Object} data event data                                                                                     // 4492
 * @return {EventHandler} this                                                                                         // 4493
 */                                                                                                                    // 4494
EventFilter.prototype.emit = function emit(type, data) {                                                               // 4495
    if (this._condition(type, data))                                                                                   // 4496
        return EventHandler.prototype.emit.apply(this, arguments);                                                     // 4497
};                                                                                                                     // 4498
                                                                                                                       // 4499
/**                                                                                                                    // 4500
 * An alias of emit. Trigger determines whether to send                                                                // 4501
 *  events based on the return value of it's condition function                                                        // 4502
 *  when passed the event type and associated data.                                                                    // 4503
 *                                                                                                                     // 4504
 * @method trigger                                                                                                     // 4505
 * @param {string} type name of the event                                                                              // 4506
 * @param {object} data associated data                                                                                // 4507
 */                                                                                                                    // 4508
EventFilter.prototype.trigger = EventFilter.prototype.emit;                                                            // 4509
                                                                                                                       // 4510
module.exports = EventFilter;                                                                                          // 4511
},{"../core/EventHandler":7}],21:[function(_dereq_,module,exports){                                                    // 4512
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4513
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4514
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4515
 *                                                                                                                     // 4516
 * Owner: david@famo.us                                                                                                // 4517
 * @license MPL 2.0                                                                                                    // 4518
 * @copyright Famous Industries, Inc. 2014                                                                             // 4519
 */                                                                                                                    // 4520
                                                                                                                       // 4521
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4522
                                                                                                                       // 4523
/**                                                                                                                    // 4524
 * EventMapper routes events to various event destinations                                                             // 4525
 *  based on custom logic.  The function signature is arbitrary.                                                       // 4526
 *                                                                                                                     // 4527
 * @class EventMapper                                                                                                  // 4528
 * @constructor                                                                                                        // 4529
 *                                                                                                                     // 4530
 * @param {function} mappingFunction function to determine where                                                       // 4531
 *  events are routed to.                                                                                              // 4532
 */                                                                                                                    // 4533
function EventMapper(mappingFunction) {                                                                                // 4534
    EventHandler.call(this);                                                                                           // 4535
    this._mappingFunction = mappingFunction;                                                                           // 4536
}                                                                                                                      // 4537
EventMapper.prototype = Object.create(EventHandler.prototype);                                                         // 4538
EventMapper.prototype.constructor = EventMapper;                                                                       // 4539
                                                                                                                       // 4540
EventMapper.prototype.subscribe = null;                                                                                // 4541
EventMapper.prototype.unsubscribe = null;                                                                              // 4542
                                                                                                                       // 4543
/**                                                                                                                    // 4544
 * Trigger an event, sending to all mapped downstream handlers                                                         // 4545
 *   listening for provided 'type' key.                                                                                // 4546
 *                                                                                                                     // 4547
 * @method emit                                                                                                        // 4548
 *                                                                                                                     // 4549
 * @param {string} type event type key (for example, 'click')                                                          // 4550
 * @param {Object} data event data                                                                                     // 4551
 * @return {EventHandler} this                                                                                         // 4552
 */                                                                                                                    // 4553
EventMapper.prototype.emit = function emit(type, data) {                                                               // 4554
    var target = this._mappingFunction.apply(this, arguments);                                                         // 4555
    if (target && (target.emit instanceof Function)) target.emit(type, data);                                          // 4556
};                                                                                                                     // 4557
                                                                                                                       // 4558
/**                                                                                                                    // 4559
 * Alias of emit.                                                                                                      // 4560
 * @method trigger                                                                                                     // 4561
 */                                                                                                                    // 4562
EventMapper.prototype.trigger = EventMapper.prototype.emit;                                                            // 4563
                                                                                                                       // 4564
module.exports = EventMapper;                                                                                          // 4565
},{"../core/EventHandler":7}],22:[function(_dereq_,module,exports){                                                    // 4566
module.exports = {                                                                                                     // 4567
  EventArbiter: _dereq_('./EventArbiter'),                                                                             // 4568
  EventFilter: _dereq_('./EventFilter'),                                                                               // 4569
  EventMapper: _dereq_('./EventMapper')                                                                                // 4570
};                                                                                                                     // 4571
                                                                                                                       // 4572
},{"./EventArbiter":19,"./EventFilter":20,"./EventMapper":21}],23:[function(_dereq_,module,exports){                   // 4573
module.exports = {                                                                                                     // 4574
  events: _dereq_('./events'),                                                                                         // 4575
  core: _dereq_('./core'),                                                                                             // 4576
  math: _dereq_('./math'),                                                                                             // 4577
  inputs: _dereq_('./inputs'),                                                                                         // 4578
  physics: _dereq_('./physics'),                                                                                       // 4579
  surfaces: _dereq_('./surfaces'),                                                                                     // 4580
  transitions: _dereq_('./transitions'),                                                                               // 4581
  utilities: _dereq_('./utilities'),                                                                                   // 4582
  views: _dereq_('./views'),                                                                                           // 4583
  modifiers: _dereq_('./modifiers'),                                                                                   // 4584
  widgets: _dereq_('./widgets')                                                                                        // 4585
};                                                                                                                     // 4586
                                                                                                                       // 4587
},{"./core":18,"./events":22,"./inputs":37,"./math":43,"./modifiers":48,"./physics":72,"./surfaces":83,"./transitions":93,"./utilities":97,"./views":112,"./widgets":117}],24:[function(_dereq_,module,exports){
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4589
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 4590
                                                                                                                       // 4591
/**                                                                                                                    // 4592
 * Accumulates differentials of event sources that emit a `delta`                                                      // 4593
 *  attribute taking a Number or Array of Number types. The accumulated                                                // 4594
 *  value is stored in a getter/setter.                                                                                // 4595
 *                                                                                                                     // 4596
 * @class Accumulator                                                                                                  // 4597
 * @constructor                                                                                                        // 4598
 * @param value {Number|Array|Transitionable}   Initializing value                                                     // 4599
 * @param [eventName='update'] {String}         Name of update event                                                   // 4600
 */                                                                                                                    // 4601
function Accumulator(value, eventName) {                                                                               // 4602
    if (eventName === undefined) eventName = 'update';                                                                 // 4603
                                                                                                                       // 4604
    this._state = (value && value.get && value.set)                                                                    // 4605
        ? value                                                                                                        // 4606
        : new Transitionable(value || 0);                                                                              // 4607
                                                                                                                       // 4608
    this._eventInput = new EventHandler();                                                                             // 4609
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4610
                                                                                                                       // 4611
    this._eventInput.on(eventName, _handleUpdate.bind(this));                                                          // 4612
}                                                                                                                      // 4613
                                                                                                                       // 4614
function _handleUpdate(data) {                                                                                         // 4615
    var delta = data.delta;                                                                                            // 4616
    var state = this.get();                                                                                            // 4617
                                                                                                                       // 4618
    if (delta.constructor === state.constructor){                                                                      // 4619
        var newState = (delta instanceof Array)                                                                        // 4620
            ? [state[0] + delta[0], state[1] + delta[1]]                                                               // 4621
            : state + delta;                                                                                           // 4622
        this.set(newState);                                                                                            // 4623
    }                                                                                                                  // 4624
}                                                                                                                      // 4625
                                                                                                                       // 4626
/**                                                                                                                    // 4627
 * Basic getter                                                                                                        // 4628
 *                                                                                                                     // 4629
 * @method get                                                                                                         // 4630
 * @return {Number|Array} current value                                                                                // 4631
 */                                                                                                                    // 4632
Accumulator.prototype.get = function get() {                                                                           // 4633
    return this._state.get();                                                                                          // 4634
};                                                                                                                     // 4635
                                                                                                                       // 4636
/**                                                                                                                    // 4637
 * Basic setter                                                                                                        // 4638
 *                                                                                                                     // 4639
 * @method set                                                                                                         // 4640
 * @param value {Number|Array} new value                                                                               // 4641
 */                                                                                                                    // 4642
Accumulator.prototype.set = function set(value) {                                                                      // 4643
    this._state.set(value);                                                                                            // 4644
};                                                                                                                     // 4645
                                                                                                                       // 4646
module.exports = Accumulator;                                                                                          // 4647
},{"../core/EventHandler":7,"../transitions/Transitionable":89}],25:[function(_dereq_,module,exports){                 // 4648
var hasTouch = 'ontouchstart' in window;                                                                               // 4649
                                                                                                                       // 4650
function kill(type) {                                                                                                  // 4651
    window.addEventListener(type, function(event) {                                                                    // 4652
        event.stopPropagation();                                                                                       // 4653
        return false;                                                                                                  // 4654
    }, true);                                                                                                          // 4655
}                                                                                                                      // 4656
                                                                                                                       // 4657
if (hasTouch) {                                                                                                        // 4658
    kill('mousedown');                                                                                                 // 4659
    kill('mousemove');                                                                                                 // 4660
    kill('mouseup');                                                                                                   // 4661
    kill('mouseleave');                                                                                                // 4662
}                                                                                                                      // 4663
},{}],26:[function(_dereq_,module,exports){                                                                            // 4664
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4665
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4666
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4667
 *                                                                                                                     // 4668
 * Owner: mark@famo.us                                                                                                 // 4669
 * @license MPL 2.0                                                                                                    // 4670
 * @copyright Famous Industries, Inc. 2014                                                                             // 4671
 */                                                                                                                    // 4672
                                                                                                                       // 4673
                                                                                                                       // 4674
                                                                                                                       // 4675
/**                                                                                                                    // 4676
 * FastClick is an override shim which maps event pairs of                                                             // 4677
 *   'touchstart' and 'touchend' which differ by less than a certain                                                   // 4678
 *   threshold to the 'click' event.                                                                                   // 4679
 *   This is used to speed up clicks on some browsers.                                                                 // 4680
 */                                                                                                                    // 4681
(function() {                                                                                                          // 4682
  if (!window.CustomEvent) return;                                                                                     // 4683
  var clickThreshold = 300;                                                                                            // 4684
  var clickWindow = 500;                                                                                               // 4685
  var potentialClicks = {};                                                                                            // 4686
  var recentlyDispatched = {};                                                                                         // 4687
  var _now = Date.now;                                                                                                 // 4688
                                                                                                                       // 4689
  window.addEventListener('touchstart', function(event) {                                                              // 4690
      var timestamp = _now();                                                                                          // 4691
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4692
          var touch = event.changedTouches[i];                                                                         // 4693
          potentialClicks[touch.identifier] = timestamp;                                                               // 4694
      }                                                                                                                // 4695
  });                                                                                                                  // 4696
                                                                                                                       // 4697
  window.addEventListener('touchmove', function(event) {                                                               // 4698
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4699
          var touch = event.changedTouches[i];                                                                         // 4700
          delete potentialClicks[touch.identifier];                                                                    // 4701
      }                                                                                                                // 4702
  });                                                                                                                  // 4703
                                                                                                                       // 4704
  window.addEventListener('touchend', function(event) {                                                                // 4705
      var currTime = _now();                                                                                           // 4706
      for (var i = 0; i < event.changedTouches.length; i++) {                                                          // 4707
          var touch = event.changedTouches[i];                                                                         // 4708
          var startTime = potentialClicks[touch.identifier];                                                           // 4709
          if (startTime && currTime - startTime < clickThreshold) {                                                    // 4710
              var clickEvt = new window.CustomEvent('click', {                                                         // 4711
                  'bubbles': true,                                                                                     // 4712
                  'detail': touch                                                                                      // 4713
              });                                                                                                      // 4714
              recentlyDispatched[currTime] = event;                                                                    // 4715
              event.target.dispatchEvent(clickEvt);                                                                    // 4716
          }                                                                                                            // 4717
          delete potentialClicks[touch.identifier];                                                                    // 4718
      }                                                                                                                // 4719
  });                                                                                                                  // 4720
                                                                                                                       // 4721
  window.addEventListener('click', function(event) {                                                                   // 4722
      var currTime = _now();                                                                                           // 4723
      for (var i in recentlyDispatched) {                                                                              // 4724
          var previousEvent = recentlyDispatched[i];                                                                   // 4725
          if (currTime - i < clickWindow) {                                                                            // 4726
              if (event instanceof window.MouseEvent && event.target === previousEvent.target) event.stopPropagation();
          }                                                                                                            // 4728
          else delete recentlyDispatched[i];                                                                           // 4729
      }                                                                                                                // 4730
  }, true);                                                                                                            // 4731
})();                                                                                                                  // 4732
},{}],27:[function(_dereq_,module,exports){                                                                            // 4733
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4734
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4735
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4736
 *                                                                                                                     // 4737
 * Owner: mark@famo.us                                                                                                 // 4738
 * @license MPL 2.0                                                                                                    // 4739
 * @copyright Famous Industries, Inc. 2014                                                                             // 4740
 */                                                                                                                    // 4741
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4742
                                                                                                                       // 4743
/**                                                                                                                    // 4744
 * Combines multiple types of sync classes (e.g. mouse, touch,                                                         // 4745
 *  scrolling) into one standardized interface for inclusion in widgets.                                               // 4746
 *                                                                                                                     // 4747
 *  Sync classes are first registered with a key, and then can be accessed                                             // 4748
 *  globally by key.                                                                                                   // 4749
 *                                                                                                                     // 4750
 *  Emits 'start', 'update' and 'end' events as a union of the sync class                                              // 4751
 *  providers.                                                                                                         // 4752
 *                                                                                                                     // 4753
 * @class GenericSync                                                                                                  // 4754
 * @constructor                                                                                                        // 4755
 * @param syncs {Object|Array} object with fields {sync key : sync options}                                            // 4756
 *    or an array of registered sync keys                                                                              // 4757
 * @param [options] {Object|Array} options object to set on all syncs                                                  // 4758
 */                                                                                                                    // 4759
function GenericSync(syncs, options) {                                                                                 // 4760
    this._eventInput = new EventHandler();                                                                             // 4761
    this._eventOutput = new EventHandler();                                                                            // 4762
                                                                                                                       // 4763
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4764
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4765
                                                                                                                       // 4766
    this._syncs = {};                                                                                                  // 4767
    if (syncs) this.addSync(syncs);                                                                                    // 4768
    if (options) this.setOptions(options);                                                                             // 4769
}                                                                                                                      // 4770
                                                                                                                       // 4771
GenericSync.DIRECTION_X = 0;                                                                                           // 4772
GenericSync.DIRECTION_Y = 1;                                                                                           // 4773
GenericSync.DIRECTION_Z = 2;                                                                                           // 4774
                                                                                                                       // 4775
// Global registry of sync classes. Append only.                                                                       // 4776
var registry = {};                                                                                                     // 4777
                                                                                                                       // 4778
/**                                                                                                                    // 4779
 * Register a global sync class with an identifying key                                                                // 4780
 *                                                                                                                     // 4781
 * @static                                                                                                             // 4782
 * @method register                                                                                                    // 4783
 *                                                                                                                     // 4784
 * @param syncObject {Object} an object of {sync key : sync options} fields                                            // 4785
 */                                                                                                                    // 4786
GenericSync.register = function register(syncObject) {                                                                 // 4787
    for (var key in syncObject){                                                                                       // 4788
        if (registry[key]){ // skip redundant registration                                                             // 4789
            if (registry[key] !== syncObject[key]) // only if same registered class                                    // 4790
                throw new Error('Conflicting sync classes for key: ' + key);                                           // 4791
        }                                                                                                              // 4792
        else registry[key] = syncObject[key];                                                                          // 4793
    }                                                                                                                  // 4794
};                                                                                                                     // 4795
                                                                                                                       // 4796
/**                                                                                                                    // 4797
 * Helper to set options on all sync instances                                                                         // 4798
 *                                                                                                                     // 4799
 * @method setOptions                                                                                                  // 4800
 * @param options {Object} options object                                                                              // 4801
 */                                                                                                                    // 4802
GenericSync.prototype.setOptions = function(options) {                                                                 // 4803
    for (var key in this._syncs){                                                                                      // 4804
        this._syncs[key].setOptions(options);                                                                          // 4805
    }                                                                                                                  // 4806
};                                                                                                                     // 4807
                                                                                                                       // 4808
/**                                                                                                                    // 4809
 * Pipe events to a sync class                                                                                         // 4810
 *                                                                                                                     // 4811
 * @method pipeSync                                                                                                    // 4812
 * @param key {String} identifier for sync class                                                                       // 4813
 */                                                                                                                    // 4814
GenericSync.prototype.pipeSync = function pipeToSync(key) {                                                            // 4815
    var sync = this._syncs[key];                                                                                       // 4816
    this._eventInput.pipe(sync);                                                                                       // 4817
    sync.pipe(this._eventOutput);                                                                                      // 4818
};                                                                                                                     // 4819
                                                                                                                       // 4820
/**                                                                                                                    // 4821
 * Unpipe events from a sync class                                                                                     // 4822
 *                                                                                                                     // 4823
 * @method unpipeSync                                                                                                  // 4824
 * @param key {String} identifier for sync class                                                                       // 4825
 */                                                                                                                    // 4826
GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {                                                      // 4827
    var sync = this._syncs[key];                                                                                       // 4828
    this._eventInput.unpipe(sync);                                                                                     // 4829
    sync.unpipe(this._eventOutput);                                                                                    // 4830
};                                                                                                                     // 4831
                                                                                                                       // 4832
function _addSingleSync(key, options) {                                                                                // 4833
    if (!registry[key]) return;                                                                                        // 4834
    this._syncs[key] = new (registry[key])(options);                                                                   // 4835
    this.pipeSync(key);                                                                                                // 4836
}                                                                                                                      // 4837
                                                                                                                       // 4838
/**                                                                                                                    // 4839
 * Add a sync class to from the registered classes                                                                     // 4840
 *                                                                                                                     // 4841
 * @method addSync                                                                                                     // 4842
 * @param syncs {Object|Array.String} an array of registered sync keys                                                 // 4843
 *    or an object with fields {sync key : sync options}                                                               // 4844
 */                                                                                                                    // 4845
GenericSync.prototype.addSync = function addSync(syncs) {                                                              // 4846
    if (syncs instanceof Array)                                                                                        // 4847
        for (var i = 0; i < syncs.length; i++)                                                                         // 4848
            _addSingleSync.call(this, syncs[i]);                                                                       // 4849
    else if (syncs instanceof Object)                                                                                  // 4850
        for (var key in syncs)                                                                                         // 4851
            _addSingleSync.call(this, key, syncs[key]);                                                                // 4852
};                                                                                                                     // 4853
                                                                                                                       // 4854
module.exports = GenericSync;                                                                                          // 4855
},{"../core/EventHandler":7}],28:[function(_dereq_,module,exports){                                                    // 4856
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 4857
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 4858
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 4859
 *                                                                                                                     // 4860
 * Owner: mark@famo.us                                                                                                 // 4861
 * @license MPL 2.0                                                                                                    // 4862
 * @copyright Famous Industries, Inc. 2014                                                                             // 4863
 */                                                                                                                    // 4864
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 4865
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 4866
var SyncUtils = _dereq_('./SyncUtils');                                                                                // 4867
                                                                                                                       // 4868
/**                                                                                                                    // 4869
 * Handles piped in mouse drag events. Outputs an object with the position delta from last frame, position from start, // 4870
 * current velocity averaged out over the velocitySampleLength (set via options), clientX, clientY, offsetX, and offsetY.
 *                                                                                                                     // 4872
 * Emits 'start', 'update' and 'end' events. Designed to be used either as a standalone MouseSync, or as part of a     // 4873
 * GenericSync.                                                                                                        // 4874
 *                                                                                                                     // 4875
 * @class MouseSync                                                                                                    // 4876
 * @constructor                                                                                                        // 4877
 *                                                                                                                     // 4878
 * @example                                                                                                            // 4879
 *   var Surface = require('../core/Surface');                                                                         // 4880
 *   var MouseSync = require('../inputs/MouseSync');                                                                   // 4881
 *                                                                                                                     // 4882
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 4883
 *   var mouseSync = new MouseSync();                                                                                  // 4884
 *   surface.pipe(mouseSync);                                                                                          // 4885
 *                                                                                                                     // 4886
 *   mouseSync.on('start', function (e) { // react to start });                                                        // 4887
 *   mouseSync.on('update', function (e) { // react to update });                                                      // 4888
 *   mouseSync.on('end', function (e) { // react to end });                                                            // 4889
 *                                                                                                                     // 4890
 * @param [options] {Object}                An object of the following configurable options.                           // 4891
 * @param [options.clickThreshold] {Number} Absolute distance from click origin that will still trigger a click.       // 4892
 * @param [options.direction] {Number}      Read from a particular axis. Valid options are: undefined, 0 or 1. 0 corresponds to x, and 1 to y. Default is undefined, which allows both x and y.
 * @param [options.rails] {Boolean}         Read from axis with the greatest differential.                             // 4894
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 4895
 * @param [options.propogate] {Boolean}     Add a listener to document on mouseleave. This allows drag events to continue across the entire page.
 */                                                                                                                    // 4897
function MouseSync(options) {                                                                                          // 4898
    this.options =  Object.create(MouseSync.DEFAULT_OPTIONS);                                                          // 4899
    this._optionsManager = new OptionsManager(this.options);                                                           // 4900
                                                                                                                       // 4901
    if (options) this.setOptions(options);                                                                             // 4902
                                                                                                                       // 4903
    this._eventInput = new EventHandler();                                                                             // 4904
    this._eventOutput = new EventHandler();                                                                            // 4905
                                                                                                                       // 4906
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 4907
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 4908
                                                                                                                       // 4909
    this._eventInput.on('mousedown', _handleStart.bind(this));                                                         // 4910
    this._eventInput.on('mousemove', _handleMove.bind(this));                                                          // 4911
    this._eventInput.on('mouseup', _handleEnd.bind(this));                                                             // 4912
                                                                                                                       // 4913
    if (this.options.propogate) this._eventInput.on('mouseleave', _handleLeave.bind(this));                            // 4914
    else this._eventInput.on('mouseleave', _handleEnd.bind(this));                                                     // 4915
                                                                                                                       // 4916
    if (this.options.clickThreshold) {                                                                                 // 4917
        window.addEventListener('click', function(event) {                                                             // 4918
            if (Math.sqrt(Math.pow(this._displacement[0], 2) + Math.pow(this._displacement[1], 2)) > this.options.clickThreshold) {
                event.stopPropagation();                                                                               // 4920
            }                                                                                                          // 4921
        }.bind(this), true);                                                                                           // 4922
    }                                                                                                                  // 4923
                                                                                                                       // 4924
    this._payload = {                                                                                                  // 4925
        delta    : null,                                                                                               // 4926
        position : null,                                                                                               // 4927
        velocity : null,                                                                                               // 4928
        clientX  : 0,                                                                                                  // 4929
        clientY  : 0,                                                                                                  // 4930
        offsetX  : 0,                                                                                                  // 4931
        offsetY  : 0                                                                                                   // 4932
    };                                                                                                                 // 4933
                                                                                                                       // 4934
    this._positionHistory = [];                                                                                        // 4935
    this._position = null;      // to be deprecated                                                                    // 4936
    this._down = false;                                                                                                // 4937
    this._moved = false;                                                                                               // 4938
    this._displacement = [0,0];                                                                                        // 4939
    this._documentActive = false;                                                                                      // 4940
}                                                                                                                      // 4941
                                                                                                                       // 4942
MouseSync.DEFAULT_OPTIONS = {                                                                                          // 4943
    clickThreshold: undefined,                                                                                         // 4944
    direction: undefined,                                                                                              // 4945
    rails: false,                                                                                                      // 4946
    scale: 1,                                                                                                          // 4947
    propogate: true,  // events piped to document on mouseleave                                                        // 4948
    velocitySampleLength: 10,                                                                                          // 4949
    timeSampleDuration: 400,                                                                                           // 4950
    preventDefault: true                                                                                               // 4951
};                                                                                                                     // 4952
                                                                                                                       // 4953
MouseSync.DIRECTION_X = 0;                                                                                             // 4954
MouseSync.DIRECTION_Y = 1;                                                                                             // 4955
                                                                                                                       // 4956
var MINIMUM_TICK_TIME = 8;                                                                                             // 4957
                                                                                                                       // 4958
/**                                                                                                                    // 4959
 *  Triggered by mousedown.                                                                                            // 4960
 *                                                                                                                     // 4961
 *  @method _handleStart                                                                                               // 4962
 *  @private                                                                                                           // 4963
 */                                                                                                                    // 4964
function _handleStart(event) {                                                                                         // 4965
    var delta;                                                                                                         // 4966
    var velocity;                                                                                                      // 4967
    if (this.options.preventDefault) event.preventDefault(); // prevent drag                                           // 4968
                                                                                                                       // 4969
    var x = event.clientX;                                                                                             // 4970
    var y = event.clientY;                                                                                             // 4971
    var currTime = Date.now();                                                                                         // 4972
                                                                                                                       // 4973
    this._down = true;                                                                                                 // 4974
    this._move = false;                                                                                                // 4975
                                                                                                                       // 4976
    if (this.options.direction !== undefined) {                                                                        // 4977
        this._position = 0;                                                                                            // 4978
        delta = 0;                                                                                                     // 4979
        velocity = 0;                                                                                                  // 4980
    }                                                                                                                  // 4981
    else {                                                                                                             // 4982
        this._position = [0, 0];                                                                                       // 4983
        delta = [0, 0];                                                                                                // 4984
        velocity = [0, 0];                                                                                             // 4985
    }                                                                                                                  // 4986
                                                                                                                       // 4987
    if (this.options.clickThreshold) {                                                                                 // 4988
        this._displacement = [0,0];                                                                                    // 4989
    }                                                                                                                  // 4990
                                                                                                                       // 4991
    var payload = this._payload;                                                                                       // 4992
    payload.delta = delta;                                                                                             // 4993
    payload.position = this._position;                                                                                 // 4994
    payload.velocity = velocity;                                                                                       // 4995
    payload.clientX = x;                                                                                               // 4996
    payload.clientY = y;                                                                                               // 4997
    payload.offsetX = event.offsetX;                                                                                   // 4998
    payload.offsetY = event.offsetY;                                                                                   // 4999
                                                                                                                       // 5000
    this._positionHistory.push({                                                                                       // 5001
        position: payload.position.slice ? payload.position.slice(0) : payload.position,                               // 5002
        clientPosition: [x, y],                                                                                        // 5003
        timestamp: currTime                                                                                            // 5004
    });                                                                                                                // 5005
    this._eventOutput.emit('start', payload);                                                                          // 5006
    this._documentActive = false;                                                                                      // 5007
}                                                                                                                      // 5008
                                                                                                                       // 5009
/**                                                                                                                    // 5010
 *  Triggered by mousemove.                                                                                            // 5011
 *                                                                                                                     // 5012
 *  @method _handleMove                                                                                                // 5013
 *  @private                                                                                                           // 5014
 */                                                                                                                    // 5015
function _handleMove(event) {                                                                                          // 5016
    if (this._positionHistory.length === 0) return;                                                                    // 5017
    var payload = calculatePayload.call(this, event);                                                                  // 5018
    this._eventOutput.emit('update', payload);                                                                         // 5019
    this._move = true;                                                                                                 // 5020
}                                                                                                                      // 5021
                                                                                                                       // 5022
/**                                                                                                                    // 5023
 *  Triggered by mouseup on the element or document body if propagation is enabled, or                                 // 5024
 *  mouseleave if propagation is off.                                                                                  // 5025
 *                                                                                                                     // 5026
 *  @method _handleEnd                                                                                                 // 5027
 *  @private                                                                                                           // 5028
 */                                                                                                                    // 5029
function _handleEnd(event) {                                                                                           // 5030
    if (!this._down) return;                                                                                           // 5031
    var payload = calculatePayload.call(this, event);                                                                  // 5032
    this._eventOutput.emit('end', payload);                                                                            // 5033
    this._down = false;                                                                                                // 5034
    this._move = false;                                                                                                // 5035
    this._positionHistory = [];                                                                                        // 5036
}                                                                                                                      // 5037
                                                                                                                       // 5038
/**                                                                                                                    // 5039
 *  Switches the mousemove listener to the document body, if propagation is enabled.                                   // 5040
 *  @method _handleLeave                                                                                               // 5041
 *  @private                                                                                                           // 5042
 */                                                                                                                    // 5043
function _handleLeave(event) {                                                                                         // 5044
    if (!this._down || !this._move) return;                                                                            // 5045
                                                                                                                       // 5046
    if (!this._documentActive) {                                                                                       // 5047
      var boundMove = _handleMove.bind(this);                                                                          // 5048
      var boundEnd = function(event) {                                                                                 // 5049
          _handleEnd.call(this, event);                                                                                // 5050
          document.removeEventListener('mousemove', boundMove);                                                        // 5051
          document.removeEventListener('mouseup', boundEnd);                                                           // 5052
      }.bind(this);                                                                                                    // 5053
      document.addEventListener('mousemove', boundMove);                                                               // 5054
      document.addEventListener('mouseup', boundEnd);                                                                  // 5055
      this._documentActive = true;                                                                                     // 5056
    }                                                                                                                  // 5057
}                                                                                                                      // 5058
                                                                                                                       // 5059
/**                                                                                                                    // 5060
 *  Calculates the data to send to listeners.                                                                          // 5061
 *  @method calculatePayload                                                                                           // 5062
 *  @private                                                                                                           // 5063
 */                                                                                                                    // 5064
function calculatePayload (event) {                                                                                    // 5065
    var payload = this._payload;                                                                                       // 5066
                                                                                                                       // 5067
    var scale = this.options.scale;                                                                                    // 5068
    var nextVel;                                                                                                       // 5069
    var nextDelta;                                                                                                     // 5070
                                                                                                                       // 5071
    var x = event.clientX;                                                                                             // 5072
    var y = event.clientY;                                                                                             // 5073
                                                                                                                       // 5074
    var currTime = Date.now();                                                                                         // 5075
                                                                                                                       // 5076
    var lastPos = this._positionHistory[this._positionHistory.length - 1];                                             // 5077
    var diffX = (x * scale) - lastPos.clientPosition[0];                                                               // 5078
    var diffY = (y * scale) - lastPos.clientPosition[1];                                                               // 5079
                                                                                                                       // 5080
    if (this.options.rails) {                                                                                          // 5081
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5082
        else diffX = 0;                                                                                                // 5083
    }                                                                                                                  // 5084
    if (this.options.direction === MouseSync.DIRECTION_X) {                                                            // 5085
        nextDelta = diffX;                                                                                             // 5086
        this._position += nextDelta;                                                                                   // 5087
    }                                                                                                                  // 5088
    else if (this.options.direction === MouseSync.DIRECTION_Y) {                                                       // 5089
        nextDelta = diffY;                                                                                             // 5090
        this._position += nextDelta;                                                                                   // 5091
    }                                                                                                                  // 5092
    else {                                                                                                             // 5093
        nextDelta = [diffX, diffY];                                                                                    // 5094
        this._position[0] += diffX;                                                                                    // 5095
        this._position[1] += diffY;                                                                                    // 5096
    }                                                                                                                  // 5097
                                                                                                                       // 5098
    if (this.options.clickThreshold !== false) {                                                                       // 5099
        this._displacement[0] += diffX;                                                                                // 5100
        this._displacement[1] += diffY;                                                                                // 5101
    }                                                                                                                  // 5102
                                                                                                                       // 5103
    payload.delta    = nextDelta;                                                                                      // 5104
    payload.position = this._position;                                                                                 // 5105
    payload.clientX  = x;                                                                                              // 5106
    payload.clientY  = y;                                                                                              // 5107
    payload.offsetX  = event.offsetX;                                                                                  // 5108
    payload.offsetY  = event.offsetY;                                                                                  // 5109
                                                                                                                       // 5110
    if (this._positionHistory.length === this.options.velocitySampleLength) {                                          // 5111
        this._positionHistory.shift();                                                                                 // 5112
    }                                                                                                                  // 5113
                                                                                                                       // 5114
    this._positionHistory.push({                                                                                       // 5115
        position: payload.position.slice ? payload.position.slice(0) : payload.position,                               // 5116
        clientPosition: [x, y],                                                                                        // 5117
        timestamp: currTime                                                                                            // 5118
    });                                                                                                                // 5119
                                                                                                                       // 5120
    // Calculate velocity                                                                                              // 5121
    var lastPositionHistory = SyncUtils.getTimeHistoryPosition(this._positionHistory, this.options.timeSampleDuration);
    var diffTime = Math.max(currTime - lastPositionHistory.timestamp, MINIMUM_TICK_TIME); // minimum tick time         // 5123
                                                                                                                       // 5124
    if (this.options.direction !== undefined) {                                                                        // 5125
        nextVel = scale * (this._position - lastPositionHistory.position) / diffTime;                                  // 5126
    }                                                                                                                  // 5127
    else {                                                                                                             // 5128
        nextVel = [                                                                                                    // 5129
            scale * (this._position[0] - lastPositionHistory.position[0]) / diffTime,                                  // 5130
            scale * (this._position[1] - lastPositionHistory.position[1]) / diffTime                                   // 5131
        ];                                                                                                             // 5132
    }                                                                                                                  // 5133
                                                                                                                       // 5134
    payload.velocity = nextVel;                                                                                        // 5135
                                                                                                                       // 5136
    return payload;                                                                                                    // 5137
}                                                                                                                      // 5138
                                                                                                                       // 5139
/**                                                                                                                    // 5140
 * Return entire options dictionary, including defaults.                                                               // 5141
 *                                                                                                                     // 5142
 * @method getOptions                                                                                                  // 5143
 * @return {Object} configuration options                                                                              // 5144
 */                                                                                                                    // 5145
MouseSync.prototype.getOptions = function getOptions() {                                                               // 5146
    return this.options;                                                                                               // 5147
};                                                                                                                     // 5148
                                                                                                                       // 5149
/**                                                                                                                    // 5150
 * Set internal options, overriding any default options                                                                // 5151
 *                                                                                                                     // 5152
 * @method setOptions                                                                                                  // 5153
 *                                                                                                                     // 5154
 * @param [options] {Object}             default options overrides                                                     // 5155
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5156
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5157
 * @param [options.propogate] {Boolean}  add listened to document on mouseleave                                        // 5158
 */                                                                                                                    // 5159
MouseSync.prototype.setOptions = function setOptions(options) {                                                        // 5160
    return this._optionsManager.setOptions(options);                                                                   // 5161
};                                                                                                                     // 5162
                                                                                                                       // 5163
module.exports = MouseSync;                                                                                            // 5164
},{"../core/EventHandler":7,"../core/OptionsManager":10,"./SyncUtils":33}],29:[function(_dereq_,module,exports){       // 5165
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5166
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5167
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5168
 *                                                                                                                     // 5169
 * Owner: mark@famo.us                                                                                                 // 5170
 * @license MPL 2.0                                                                                                    // 5171
 * @copyright Famous Industries, Inc. 2014                                                                             // 5172
 */                                                                                                                    // 5173
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5174
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5175
                                                                                                                       // 5176
/**                                                                                                                    // 5177
 * Handles piped in two-finger touch events to change position via pinching / expanding.                               // 5178
 *   Emits 'start', 'update' and 'end' events with                                                                     // 5179
 *   position, velocity, touch ids, and distance between fingers.                                                      // 5180
 *                                                                                                                     // 5181
 * @class PinchSync                                                                                                    // 5182
 * @extends TwoFingerSync                                                                                              // 5183
 * @constructor                                                                                                        // 5184
 * @param {Object} options default options overrides                                                                   // 5185
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5186
 */                                                                                                                    // 5187
function PinchSync(options) {                                                                                          // 5188
    TwoFingerSync.call(this);                                                                                          // 5189
                                                                                                                       // 5190
    this.options = Object.create(PinchSync.DEFAULT_OPTIONS);                                                           // 5191
    this._optionsManager = new OptionsManager(this.options);                                                           // 5192
    if (options) this.setOptions(options);                                                                             // 5193
                                                                                                                       // 5194
    this._displacement = 0;                                                                                            // 5195
    this._previousDistance = 0;                                                                                        // 5196
}                                                                                                                      // 5197
                                                                                                                       // 5198
PinchSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5199
PinchSync.prototype.constructor = PinchSync;                                                                           // 5200
                                                                                                                       // 5201
PinchSync.DEFAULT_OPTIONS = {                                                                                          // 5202
    scale : 1                                                                                                          // 5203
};                                                                                                                     // 5204
                                                                                                                       // 5205
PinchSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5206
    this._previousDistance = TwoFingerSync.calculateDistance(this.posA, this.posB);                                    // 5207
    this._displacement = 0;                                                                                            // 5208
                                                                                                                       // 5209
    this._eventOutput.emit('start', {                                                                                  // 5210
        count: event.touches.length,                                                                                   // 5211
        touches: [this.touchAId, this.touchBId],                                                                       // 5212
        distance: this._dist,                                                                                          // 5213
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5214
    });                                                                                                                // 5215
};                                                                                                                     // 5216
                                                                                                                       // 5217
PinchSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5218
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5219
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5220
                                                                                                                       // 5221
    var scale = this.options.scale;                                                                                    // 5222
    var delta = scale * (currDist - this._previousDistance);                                                           // 5223
    var velocity = delta / diffTime;                                                                                   // 5224
                                                                                                                       // 5225
    this._previousDistance = currDist;                                                                                 // 5226
    this._displacement += delta;                                                                                       // 5227
                                                                                                                       // 5228
    this._eventOutput.emit('update', {                                                                                 // 5229
        delta : delta,                                                                                                 // 5230
        velocity: velocity,                                                                                            // 5231
        distance: currDist,                                                                                            // 5232
        displacement: this._displacement,                                                                              // 5233
        center: center,                                                                                                // 5234
        touches: [this.touchAId, this.touchBId]                                                                        // 5235
    });                                                                                                                // 5236
};                                                                                                                     // 5237
                                                                                                                       // 5238
/**                                                                                                                    // 5239
 * Return entire options dictionary, including defaults.                                                               // 5240
 *                                                                                                                     // 5241
 * @method getOptions                                                                                                  // 5242
 * @return {Object} configuration options                                                                              // 5243
 */                                                                                                                    // 5244
PinchSync.prototype.getOptions = function getOptions() {                                                               // 5245
    return this.options;                                                                                               // 5246
};                                                                                                                     // 5247
                                                                                                                       // 5248
/**                                                                                                                    // 5249
 * Set internal options, overriding any default options                                                                // 5250
 *                                                                                                                     // 5251
 * @method setOptions                                                                                                  // 5252
 *                                                                                                                     // 5253
 * @param {Object} [options] overrides of default options                                                              // 5254
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5255
 */                                                                                                                    // 5256
PinchSync.prototype.setOptions = function setOptions(options) {                                                        // 5257
    return this._optionsManager.setOptions(options);                                                                   // 5258
};                                                                                                                     // 5259
                                                                                                                       // 5260
module.exports = PinchSync;                                                                                            // 5261
},{"../core/OptionsManager":10,"./TwoFingerSync":36}],30:[function(_dereq_,module,exports){                            // 5262
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5263
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5264
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5265
 *                                                                                                                     // 5266
 * Owner: mark@famo.us                                                                                                 // 5267
 * @license MPL 2.0                                                                                                    // 5268
 * @copyright Famous Industries, Inc. 2014                                                                             // 5269
 */                                                                                                                    // 5270
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5271
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5272
                                                                                                                       // 5273
/**                                                                                                                    // 5274
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5275
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, and angle.                 // 5276
 *   Useful for determining a rotation factor from initial two-finger touch.                                           // 5277
 *                                                                                                                     // 5278
 * @class RotateSync                                                                                                   // 5279
 * @extends TwoFingerSync                                                                                              // 5280
 * @constructor                                                                                                        // 5281
 * @param {Object} options default options overrides                                                                   // 5282
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5283
 */                                                                                                                    // 5284
function RotateSync(options) {                                                                                         // 5285
    TwoFingerSync.call(this);                                                                                          // 5286
                                                                                                                       // 5287
    this.options = Object.create(RotateSync.DEFAULT_OPTIONS);                                                          // 5288
    this._optionsManager = new OptionsManager(this.options);                                                           // 5289
    if (options) this.setOptions(options);                                                                             // 5290
                                                                                                                       // 5291
    this._angle = 0;                                                                                                   // 5292
    this._previousAngle = 0;                                                                                           // 5293
}                                                                                                                      // 5294
                                                                                                                       // 5295
RotateSync.prototype = Object.create(TwoFingerSync.prototype);                                                         // 5296
RotateSync.prototype.constructor = RotateSync;                                                                         // 5297
                                                                                                                       // 5298
RotateSync.DEFAULT_OPTIONS = {                                                                                         // 5299
    scale : 1                                                                                                          // 5300
};                                                                                                                     // 5301
                                                                                                                       // 5302
RotateSync.prototype._startUpdate = function _startUpdate(event) {                                                     // 5303
    this._angle = 0;                                                                                                   // 5304
    this._previousAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                          // 5305
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5306
    this._eventOutput.emit('start', {                                                                                  // 5307
        count: event.touches.length,                                                                                   // 5308
        angle: this._angle,                                                                                            // 5309
        center: center,                                                                                                // 5310
        touches: [this.touchAId, this.touchBId]                                                                        // 5311
    });                                                                                                                // 5312
};                                                                                                                     // 5313
                                                                                                                       // 5314
RotateSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                    // 5315
    var scale = this.options.scale;                                                                                    // 5316
                                                                                                                       // 5317
    var currAngle = TwoFingerSync.calculateAngle(this.posA, this.posB);                                                // 5318
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5319
                                                                                                                       // 5320
    var diffTheta = scale * (currAngle - this._previousAngle);                                                         // 5321
    var velTheta = diffTheta / diffTime;                                                                               // 5322
                                                                                                                       // 5323
    this._angle += diffTheta;                                                                                          // 5324
                                                                                                                       // 5325
    this._eventOutput.emit('update', {                                                                                 // 5326
        delta : diffTheta,                                                                                             // 5327
        velocity: velTheta,                                                                                            // 5328
        angle: this._angle,                                                                                            // 5329
        center: center,                                                                                                // 5330
        touches: [this.touchAId, this.touchBId]                                                                        // 5331
    });                                                                                                                // 5332
                                                                                                                       // 5333
    this._previousAngle = currAngle;                                                                                   // 5334
};                                                                                                                     // 5335
                                                                                                                       // 5336
/**                                                                                                                    // 5337
 * Return entire options dictionary, including defaults.                                                               // 5338
 *                                                                                                                     // 5339
 * @method getOptions                                                                                                  // 5340
 * @return {Object} configuration options                                                                              // 5341
 */                                                                                                                    // 5342
RotateSync.prototype.getOptions = function getOptions() {                                                              // 5343
    return this.options;                                                                                               // 5344
};                                                                                                                     // 5345
                                                                                                                       // 5346
/**                                                                                                                    // 5347
 * Set internal options, overriding any default options                                                                // 5348
 *                                                                                                                     // 5349
 * @method setOptions                                                                                                  // 5350
 *                                                                                                                     // 5351
 * @param {Object} [options] overrides of default options                                                              // 5352
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5353
 */                                                                                                                    // 5354
RotateSync.prototype.setOptions = function setOptions(options) {                                                       // 5355
    return this._optionsManager.setOptions(options);                                                                   // 5356
};                                                                                                                     // 5357
                                                                                                                       // 5358
module.exports = RotateSync;                                                                                           // 5359
},{"../core/OptionsManager":10,"./TwoFingerSync":36}],31:[function(_dereq_,module,exports){                            // 5360
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5361
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5362
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5363
 *                                                                                                                     // 5364
 * Owner: mark@famo.us                                                                                                 // 5365
 * @license MPL 2.0                                                                                                    // 5366
 * @copyright Famous Industries, Inc. 2014                                                                             // 5367
 */                                                                                                                    // 5368
var TwoFingerSync = _dereq_('./TwoFingerSync');                                                                        // 5369
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5370
                                                                                                                       // 5371
/**                                                                                                                    // 5372
 * Handles piped in two-finger touch events to increase or decrease scale via pinching / expanding.                    // 5373
 *   Emits 'start', 'update' and 'end' events an object with position, velocity, touch ids, distance, and scale factor.
 *   Useful for determining a scaling factor from initial two-finger touch.                                            // 5375
 *                                                                                                                     // 5376
 * @class ScaleSync                                                                                                    // 5377
 * @extends TwoFingerSync                                                                                              // 5378
 * @constructor                                                                                                        // 5379
 * @param {Object} options default options overrides                                                                   // 5380
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5381
 */                                                                                                                    // 5382
function ScaleSync(options) {                                                                                          // 5383
    TwoFingerSync.call(this);                                                                                          // 5384
                                                                                                                       // 5385
    this.options = Object.create(ScaleSync.DEFAULT_OPTIONS);                                                           // 5386
    this._optionsManager = new OptionsManager(this.options);                                                           // 5387
    if (options) this.setOptions(options);                                                                             // 5388
                                                                                                                       // 5389
    this._scaleFactor = 1;                                                                                             // 5390
    this._startDist = 0;                                                                                               // 5391
    this._eventInput.on('pipe', _reset.bind(this));                                                                    // 5392
}                                                                                                                      // 5393
                                                                                                                       // 5394
ScaleSync.prototype = Object.create(TwoFingerSync.prototype);                                                          // 5395
ScaleSync.prototype.constructor = ScaleSync;                                                                           // 5396
                                                                                                                       // 5397
ScaleSync.DEFAULT_OPTIONS = {                                                                                          // 5398
    scale : 1                                                                                                          // 5399
};                                                                                                                     // 5400
                                                                                                                       // 5401
function _reset() {                                                                                                    // 5402
    this.touchAId = undefined;                                                                                         // 5403
    this.touchBId = undefined;                                                                                         // 5404
}                                                                                                                      // 5405
                                                                                                                       // 5406
// handles initial touch of two fingers                                                                                // 5407
ScaleSync.prototype._startUpdate = function _startUpdate(event) {                                                      // 5408
    this._scaleFactor = 1;                                                                                             // 5409
    this._startDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                           // 5410
    this._eventOutput.emit('start', {                                                                                  // 5411
        count: event.touches.length,                                                                                   // 5412
        touches: [this.touchAId, this.touchBId],                                                                       // 5413
        distance: this._startDist,                                                                                     // 5414
        center: TwoFingerSync.calculateCenter(this.posA, this.posB)                                                    // 5415
    });                                                                                                                // 5416
};                                                                                                                     // 5417
                                                                                                                       // 5418
// handles movement of two fingers                                                                                     // 5419
ScaleSync.prototype._moveUpdate = function _moveUpdate(diffTime) {                                                     // 5420
    var scale = this.options.scale;                                                                                    // 5421
                                                                                                                       // 5422
    var currDist = TwoFingerSync.calculateDistance(this.posA, this.posB);                                              // 5423
    var center = TwoFingerSync.calculateCenter(this.posA, this.posB);                                                  // 5424
                                                                                                                       // 5425
    var delta = (currDist - this._startDist) / this._startDist;                                                        // 5426
    var newScaleFactor = Math.max(1 + scale * delta, 0);                                                               // 5427
    var veloScale = (newScaleFactor - this._scaleFactor) / diffTime;                                                   // 5428
                                                                                                                       // 5429
    this._eventOutput.emit('update', {                                                                                 // 5430
        delta : delta,                                                                                                 // 5431
        scale: newScaleFactor,                                                                                         // 5432
        velocity: veloScale,                                                                                           // 5433
        distance: currDist,                                                                                            // 5434
        center : center,                                                                                               // 5435
        touches: [this.touchAId, this.touchBId]                                                                        // 5436
    });                                                                                                                // 5437
                                                                                                                       // 5438
    this._scaleFactor = newScaleFactor;                                                                                // 5439
};                                                                                                                     // 5440
                                                                                                                       // 5441
/**                                                                                                                    // 5442
 * Return entire options dictionary, including defaults.                                                               // 5443
 *                                                                                                                     // 5444
 * @method getOptions                                                                                                  // 5445
 * @return {Object} configuration options                                                                              // 5446
 */                                                                                                                    // 5447
ScaleSync.prototype.getOptions = function getOptions() {                                                               // 5448
    return this.options;                                                                                               // 5449
};                                                                                                                     // 5450
                                                                                                                       // 5451
/**                                                                                                                    // 5452
 * Set internal options, overriding any default options                                                                // 5453
 *                                                                                                                     // 5454
 * @method setOptions                                                                                                  // 5455
 *                                                                                                                     // 5456
 * @param {Object} [options] overrides of default options                                                              // 5457
 * @param {Number} [options.scale] scale velocity by this factor                                                       // 5458
 */                                                                                                                    // 5459
ScaleSync.prototype.setOptions = function setOptions(options) {                                                        // 5460
    return this._optionsManager.setOptions(options);                                                                   // 5461
};                                                                                                                     // 5462
                                                                                                                       // 5463
module.exports = ScaleSync;                                                                                            // 5464
},{"../core/OptionsManager":10,"./TwoFingerSync":36}],32:[function(_dereq_,module,exports){                            // 5465
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5466
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5467
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5468
 *                                                                                                                     // 5469
 * Owner: mark@famo.us                                                                                                 // 5470
 * @license MPL 2.0                                                                                                    // 5471
 * @copyright Famous Industries, Inc. 2014                                                                             // 5472
 */                                                                                                                    // 5473
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5474
var Engine = _dereq_('../core/Engine');                                                                                // 5475
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5476
                                                                                                                       // 5477
/**                                                                                                                    // 5478
 * Handles piped in mousewheel events.                                                                                 // 5479
 *   Emits 'start', 'update', and 'end' events with payloads including:                                                // 5480
 *   delta: change since last position,                                                                                // 5481
 *   position: accumulated deltas,                                                                                     // 5482
 *   velocity: speed of change in pixels per ms,                                                                       // 5483
 *   slip: true (unused).                                                                                              // 5484
 *                                                                                                                     // 5485
 *   Can be used as delegate of GenericSync.                                                                           // 5486
 *                                                                                                                     // 5487
 * @class ScrollSync                                                                                                   // 5488
 * @constructor                                                                                                        // 5489
 * @param {Object} [options] overrides of default options                                                              // 5490
 * @param {Number} [options.direction] Pay attention to x changes (ScrollSync.DIRECTION_X),                            // 5491
 *   y changes (ScrollSync.DIRECTION_Y) or both (undefined)                                                            // 5492
 * @param {Number} [options.minimumEndSpeed] End speed calculation floors at this number, in pixels per ms             // 5493
 * @param {boolean} [options.rails] whether to snap position calculations to nearest axis                              // 5494
 * @param {Number | Array.Number} [options.scale] scale outputs in by scalar or pair of scalars                        // 5495
 * @param {Number} [options.stallTime] reset time for velocity calculation in ms                                       // 5496
 */                                                                                                                    // 5497
function ScrollSync(options) {                                                                                         // 5498
    this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);                                                          // 5499
    this._optionsManager = new OptionsManager(this.options);                                                           // 5500
    if (options) this.setOptions(options);                                                                             // 5501
                                                                                                                       // 5502
    this._payload = {                                                                                                  // 5503
        delta    : null,                                                                                               // 5504
        position : null,                                                                                               // 5505
        velocity : null,                                                                                               // 5506
        slip     : true                                                                                                // 5507
    };                                                                                                                 // 5508
                                                                                                                       // 5509
    this._eventInput = new EventHandler();                                                                             // 5510
    this._eventOutput = new EventHandler();                                                                            // 5511
                                                                                                                       // 5512
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 5513
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5514
                                                                                                                       // 5515
    this._position = (this.options.direction === undefined) ? [0,0] : 0;                                               // 5516
    this._prevTime = undefined;                                                                                        // 5517
    this._prevVel = undefined;                                                                                         // 5518
    this._eventInput.on('mousewheel', _handleMove.bind(this));                                                         // 5519
    this._eventInput.on('wheel', _handleMove.bind(this));                                                              // 5520
    this._inProgress = false;                                                                                          // 5521
    this._loopBound = false;                                                                                           // 5522
}                                                                                                                      // 5523
                                                                                                                       // 5524
ScrollSync.DEFAULT_OPTIONS = {                                                                                         // 5525
    direction: undefined,                                                                                              // 5526
    minimumEndSpeed: Infinity,                                                                                         // 5527
    rails: false,                                                                                                      // 5528
    scale: 1,                                                                                                          // 5529
    stallTime: 50,                                                                                                     // 5530
    lineHeight: 40,                                                                                                    // 5531
    preventDefault: true                                                                                               // 5532
};                                                                                                                     // 5533
                                                                                                                       // 5534
ScrollSync.DIRECTION_X = 0;                                                                                            // 5535
ScrollSync.DIRECTION_Y = 1;                                                                                            // 5536
                                                                                                                       // 5537
var MINIMUM_TICK_TIME = 8;                                                                                             // 5538
                                                                                                                       // 5539
var _now = Date.now;                                                                                                   // 5540
                                                                                                                       // 5541
function _newFrame() {                                                                                                 // 5542
    if (this._inProgress && (_now() - this._prevTime) > this.options.stallTime) {                                      // 5543
        this._inProgress = false;                                                                                      // 5544
                                                                                                                       // 5545
        var finalVel = (Math.abs(this._prevVel) >= this.options.minimumEndSpeed)                                       // 5546
            ? this._prevVel                                                                                            // 5547
            : 0;                                                                                                       // 5548
                                                                                                                       // 5549
        var payload = this._payload;                                                                                   // 5550
        payload.position = this._position;                                                                             // 5551
        payload.velocity = finalVel;                                                                                   // 5552
        payload.slip = true;                                                                                           // 5553
                                                                                                                       // 5554
        this._eventOutput.emit('end', payload);                                                                        // 5555
    }                                                                                                                  // 5556
}                                                                                                                      // 5557
                                                                                                                       // 5558
function _handleMove(event) {                                                                                          // 5559
    if (this.options.preventDefault) event.preventDefault();                                                           // 5560
                                                                                                                       // 5561
    if (!this._inProgress) {                                                                                           // 5562
        this._inProgress = true;                                                                                       // 5563
        this._position = (this.options.direction === undefined) ? [0,0] : 0;                                           // 5564
        payload = this._payload;                                                                                       // 5565
        payload.slip = true;                                                                                           // 5566
        payload.position = this._position;                                                                             // 5567
        payload.clientX = event.clientX;                                                                               // 5568
        payload.clientY = event.clientY;                                                                               // 5569
        payload.offsetX = event.offsetX;                                                                               // 5570
        payload.offsetY = event.offsetY;                                                                               // 5571
        this._eventOutput.emit('start', payload);                                                                      // 5572
        if (!this._loopBound) {                                                                                        // 5573
            Engine.on('prerender', _newFrame.bind(this));                                                              // 5574
            this._loopBound = true;                                                                                    // 5575
        }                                                                                                              // 5576
    }                                                                                                                  // 5577
                                                                                                                       // 5578
    var currTime = _now();                                                                                             // 5579
    var prevTime = this._prevTime || currTime;                                                                         // 5580
                                                                                                                       // 5581
    var diffX = (event.wheelDeltaX !== undefined) ? event.wheelDeltaX : -event.deltaX;                                 // 5582
    var diffY = (event.wheelDeltaY !== undefined) ? event.wheelDeltaY : -event.deltaY;                                 // 5583
                                                                                                                       // 5584
    if (event.deltaMode === 1) { // units in lines, not pixels                                                         // 5585
        diffX *= this.options.lineHeight;                                                                              // 5586
        diffY *= this.options.lineHeight;                                                                              // 5587
    }                                                                                                                  // 5588
                                                                                                                       // 5589
    if (this.options.rails) {                                                                                          // 5590
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5591
        else diffX = 0;                                                                                                // 5592
    }                                                                                                                  // 5593
                                                                                                                       // 5594
    var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME); // minimum tick time                              // 5595
                                                                                                                       // 5596
    var velX = diffX / diffTime;                                                                                       // 5597
    var velY = diffY / diffTime;                                                                                       // 5598
                                                                                                                       // 5599
    var scale = this.options.scale;                                                                                    // 5600
    var nextVel;                                                                                                       // 5601
    var nextDelta;                                                                                                     // 5602
                                                                                                                       // 5603
    if (this.options.direction === ScrollSync.DIRECTION_X) {                                                           // 5604
        nextDelta = scale * diffX;                                                                                     // 5605
        nextVel = scale * velX;                                                                                        // 5606
        this._position += nextDelta;                                                                                   // 5607
    }                                                                                                                  // 5608
    else if (this.options.direction === ScrollSync.DIRECTION_Y) {                                                      // 5609
        nextDelta = scale * diffY;                                                                                     // 5610
        nextVel = scale * velY;                                                                                        // 5611
        this._position += nextDelta;                                                                                   // 5612
    }                                                                                                                  // 5613
    else {                                                                                                             // 5614
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5615
        nextVel = [scale * velX, scale * velY];                                                                        // 5616
        this._position[0] += nextDelta[0];                                                                             // 5617
        this._position[1] += nextDelta[1];                                                                             // 5618
    }                                                                                                                  // 5619
                                                                                                                       // 5620
    var payload = this._payload;                                                                                       // 5621
    payload.delta    = nextDelta;                                                                                      // 5622
    payload.velocity = nextVel;                                                                                        // 5623
    payload.position = this._position;                                                                                 // 5624
    payload.slip     = true;                                                                                           // 5625
                                                                                                                       // 5626
    this._eventOutput.emit('update', payload);                                                                         // 5627
                                                                                                                       // 5628
    this._prevTime = currTime;                                                                                         // 5629
    this._prevVel = nextVel;                                                                                           // 5630
}                                                                                                                      // 5631
                                                                                                                       // 5632
/**                                                                                                                    // 5633
 * Return entire options dictionary, including defaults.                                                               // 5634
 *                                                                                                                     // 5635
 * @method getOptions                                                                                                  // 5636
 * @return {Object} configuration options                                                                              // 5637
 */                                                                                                                    // 5638
ScrollSync.prototype.getOptions = function getOptions() {                                                              // 5639
    return this.options;                                                                                               // 5640
};                                                                                                                     // 5641
                                                                                                                       // 5642
/**                                                                                                                    // 5643
 * Set internal options, overriding any default options                                                                // 5644
 *                                                                                                                     // 5645
 * @method setOptions                                                                                                  // 5646
 *                                                                                                                     // 5647
 * @param {Object} [options] overrides of default options                                                              // 5648
 * @param {Number} [options.minimimEndSpeed] If final velocity smaller than this, round down to 0.                     // 5649
 * @param {Number} [options.stallTime] ms of non-motion before 'end' emitted                                           // 5650
 * @param {Number} [options.rails] whether to constrain to nearest axis.                                               // 5651
 * @param {Number} [options.direction] ScrollSync.DIRECTION_X, DIRECTION_Y -                                           // 5652
 *    pay attention to one specific direction.                                                                         // 5653
 * @param {Number} [options.scale] constant factor to scale velocity output                                            // 5654
 */                                                                                                                    // 5655
ScrollSync.prototype.setOptions = function setOptions(options) {                                                       // 5656
    return this._optionsManager.setOptions(options);                                                                   // 5657
};                                                                                                                     // 5658
                                                                                                                       // 5659
module.exports = ScrollSync;                                                                                           // 5660
},{"../core/Engine":4,"../core/EventHandler":7,"../core/OptionsManager":10}],33:[function(_dereq_,module,exports){     // 5661
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5662
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5663
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5664
 *                                                                                                                     // 5665
 * Owner: mark@famo.us                                                                                                 // 5666
 * @license MPL 2.0                                                                                                    // 5667
 * @copyright Famous Industries, Inc. 2014                                                                             // 5668
 */                                                                                                                    // 5669
                                                                                                                       // 5670
                                                                                                                       // 5671
module.exports = {                                                                                                     // 5672
    getTimeHistoryPosition: function getTimeHistoryPosition(history, timeSampleDuration) {                             // 5673
        var len = history.length - 1;                                                                                  // 5674
        var index = len;                                                                                               // 5675
        var searching = true;                                                                                          // 5676
        var timeSearched = 0;                                                                                          // 5677
                                                                                                                       // 5678
        var lastHist;                                                                                                  // 5679
        var hist;                                                                                                      // 5680
        var diffTime;                                                                                                  // 5681
                                                                                                                       // 5682
        while (searching) {                                                                                            // 5683
            hist = history[index];                                                                                     // 5684
            if (index < 0) return lastHist;                                                                            // 5685
                                                                                                                       // 5686
            if (hist && lastHist) {                                                                                    // 5687
                diffTime = lastHist.timestamp - hist.timestamp;                                                        // 5688
                timeSearched += diffTime;                                                                              // 5689
                if (timeSearched >= timeSampleDuration) {                                                              // 5690
                    searching = false;                                                                                 // 5691
                    return hist;                                                                                       // 5692
                }                                                                                                      // 5693
            }                                                                                                          // 5694
                                                                                                                       // 5695
            index--;                                                                                                   // 5696
            lastHist = hist;                                                                                           // 5697
        }                                                                                                              // 5698
    }                                                                                                                  // 5699
};                                                                                                                     // 5700
},{}],34:[function(_dereq_,module,exports){                                                                            // 5701
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5702
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5703
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5704
 *                                                                                                                     // 5705
 * Owner: mark@famo.us                                                                                                 // 5706
 * @license MPL 2.0                                                                                                    // 5707
 * @copyright Famous Industries, Inc. 2014                                                                             // 5708
 */                                                                                                                    // 5709
var TouchTracker = _dereq_('./TouchTracker');                                                                          // 5710
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5711
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 5712
var SyncUtils = _dereq_('./SyncUtils');                                                                                // 5713
                                                                                                                       // 5714
/**                                                                                                                    // 5715
 * Handles piped in touch events. Emits 'start', 'update', and 'events'                                                // 5716
 *   events with delta, position, velocity, acceleration, clientX, clientY, count, and touch id.                       // 5717
 *   Useful for dealing with inputs on touch devices. Designed to be used either as standalone, or                     // 5718
 *   included in a GenericSync.                                                                                        // 5719
 *                                                                                                                     // 5720
 * @class TouchSync                                                                                                    // 5721
 * @constructor                                                                                                        // 5722
 *                                                                                                                     // 5723
 * @example                                                                                                            // 5724
 *   var Surface = require('../core/Surface');                                                                         // 5725
 *   var TouchSync = require('../inputs/TouchSync');                                                                   // 5726
 *                                                                                                                     // 5727
 *   var surface = new Surface({ size: [100, 100] });                                                                  // 5728
 *   var touchSync = new TouchSync();                                                                                  // 5729
 *   surface.pipe(touchSync);                                                                                          // 5730
 *                                                                                                                     // 5731
 *   touchSync.on('start', function (e) { // react to start });                                                        // 5732
 *   touchSync.on('update', function (e) { // react to update });                                                      // 5733
 *   touchSync.on('end', function (e) { // react to end });*                                                           // 5734
 *                                                                                                                     // 5735
 * @param [options] {Object}             default options overrides                                                     // 5736
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5737
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5738
 * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.                // 5739
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5740
 * @param [options.touchLimit] {Number}  touchLimit upper bound for emitting events based on number of touches         // 5741
 */                                                                                                                    // 5742
function TouchSync(options) {                                                                                          // 5743
    this.options =  Object.create(TouchSync.DEFAULT_OPTIONS);                                                          // 5744
    this._optionsManager = new OptionsManager(this.options);                                                           // 5745
    if (options) this.setOptions(options);                                                                             // 5746
                                                                                                                       // 5747
    this._eventOutput = new EventHandler();                                                                            // 5748
    this._touchTracker = new TouchTracker({                                                                            // 5749
        touchLimit: this.options.touchLimit                                                                            // 5750
    });                                                                                                                // 5751
                                                                                                                       // 5752
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 5753
    EventHandler.setInputHandler(this, this._touchTracker);                                                            // 5754
                                                                                                                       // 5755
    this._touchTracker.on('trackstart', _handleStart.bind(this));                                                      // 5756
    this._touchTracker.on('trackmove', _handleMove.bind(this));                                                        // 5757
    this._touchTracker.on('trackend', _handleEnd.bind(this));                                                          // 5758
                                                                                                                       // 5759
    this._payload = {                                                                                                  // 5760
        delta    : null,                                                                                               // 5761
        position : null,                                                                                               // 5762
        velocity : null,                                                                                               // 5763
        clientX  : undefined,                                                                                          // 5764
        clientY  : undefined,                                                                                          // 5765
        count    : 0,                                                                                                  // 5766
        touch    : undefined                                                                                           // 5767
    };                                                                                                                 // 5768
                                                                                                                       // 5769
    this._position = null; // to be deprecated                                                                         // 5770
}                                                                                                                      // 5771
                                                                                                                       // 5772
TouchSync.DEFAULT_OPTIONS = {                                                                                          // 5773
    direction: undefined,                                                                                              // 5774
    rails: false,                                                                                                      // 5775
    touchLimit: 1,                                                                                                     // 5776
    velocitySampleLength: 10,                                                                                          // 5777
    scale: 1,                                                                                                          // 5778
    timeSampleDuration: 400                                                                                            // 5779
};                                                                                                                     // 5780
                                                                                                                       // 5781
TouchSync.DIRECTION_X = 0;                                                                                             // 5782
TouchSync.DIRECTION_Y = 1;                                                                                             // 5783
                                                                                                                       // 5784
var MINIMUM_TICK_TIME = 8;                                                                                             // 5785
                                                                                                                       // 5786
/**                                                                                                                    // 5787
 *  Triggered by trackstart.                                                                                           // 5788
 *  @method _handleStart                                                                                               // 5789
 *  @private                                                                                                           // 5790
 */                                                                                                                    // 5791
function _handleStart(data) {                                                                                          // 5792
    var velocity;                                                                                                      // 5793
    var delta;                                                                                                         // 5794
    if (this.options.direction !== undefined){                                                                         // 5795
        this._position = 0;                                                                                            // 5796
        velocity = 0;                                                                                                  // 5797
        delta = 0;                                                                                                     // 5798
    }                                                                                                                  // 5799
    else {                                                                                                             // 5800
        this._position = [0, 0];                                                                                       // 5801
        velocity = [0, 0];                                                                                             // 5802
        delta = [0, 0];                                                                                                // 5803
    }                                                                                                                  // 5804
                                                                                                                       // 5805
    var payload = this._payload;                                                                                       // 5806
    payload.delta = delta;                                                                                             // 5807
    payload.position = this._position;                                                                                 // 5808
    payload.velocity = velocity;                                                                                       // 5809
    payload.clientX = data.x;                                                                                          // 5810
    payload.clientY = data.y;                                                                                          // 5811
    payload.count = data.count;                                                                                        // 5812
    payload.touch = data.identifier;                                                                                   // 5813
                                                                                                                       // 5814
    this._eventOutput.emit('start', payload);                                                                          // 5815
}                                                                                                                      // 5816
                                                                                                                       // 5817
/**                                                                                                                    // 5818
 *  Triggered by trackmove.                                                                                            // 5819
 *  @method _handleMove                                                                                                // 5820
 *  @private                                                                                                           // 5821
 */                                                                                                                    // 5822
function _handleMove(data) {                                                                                           // 5823
    calculatePayload.call(this, data);                                                                                 // 5824
}                                                                                                                      // 5825
                                                                                                                       // 5826
function calculatePayload (data) {                                                                                     // 5827
    var history = data.history;                                                                                        // 5828
                                                                                                                       // 5829
    var currHistory = history[history.length - 1];                                                                     // 5830
                                                                                                                       // 5831
    var distantHistory = SyncUtils.getTimeHistoryPosition(history, this.options.timeSampleDuration);                   // 5832
                                                                                                                       // 5833
    var distantTime = distantHistory.timestamp;                                                                        // 5834
    var currTime = currHistory.timestamp;                                                                              // 5835
                                                                                                                       // 5836
    var diffX = currHistory.x - distantTime.x;                                                                         // 5837
    var diffY = currHistory.y - distantTime.y;                                                                         // 5838
                                                                                                                       // 5839
    var velDiffX = currHistory.x - distantHistory.x;                                                                   // 5840
    var velDiffY = currHistory.y - distantHistory.y;                                                                   // 5841
                                                                                                                       // 5842
    if (this.options.rails) {                                                                                          // 5843
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;                                                              // 5844
        else diffX = 0;                                                                                                // 5845
                                                                                                                       // 5846
        if (Math.abs(velDiffX) > Math.abs(velDiffY)) velDiffY = 0;                                                     // 5847
        else velDiffX = 0;                                                                                             // 5848
    }                                                                                                                  // 5849
                                                                                                                       // 5850
    var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);                                                // 5851
                                                                                                                       // 5852
    var velX = velDiffX / diffTime;                                                                                    // 5853
    var velY = velDiffY / diffTime;                                                                                    // 5854
                                                                                                                       // 5855
    var scale = this.options.scale;                                                                                    // 5856
    var nextVel;                                                                                                       // 5857
    var nextDelta;                                                                                                     // 5858
                                                                                                                       // 5859
    if (this.options.direction === TouchSync.DIRECTION_X) {                                                            // 5860
        nextDelta = scale * diffX;                                                                                     // 5861
        nextVel = scale * velX;                                                                                        // 5862
        this._position += nextDelta;                                                                                   // 5863
    }                                                                                                                  // 5864
    else if (this.options.direction === TouchSync.DIRECTION_Y) {                                                       // 5865
        nextDelta = scale * diffY;                                                                                     // 5866
        nextVel = scale * velY;                                                                                        // 5867
        this._position += nextDelta;                                                                                   // 5868
    }                                                                                                                  // 5869
    else {                                                                                                             // 5870
        nextDelta = [scale * diffX, scale * diffY];                                                                    // 5871
        nextVel = [scale * velX, scale * velY];                                                                        // 5872
        this._position[0] += nextDelta[0];                                                                             // 5873
        this._position[1] += nextDelta[1];                                                                             // 5874
    }                                                                                                                  // 5875
                                                                                                                       // 5876
    var payload = this._payload;                                                                                       // 5877
    payload.delta    = nextDelta;                                                                                      // 5878
    payload.velocity = nextVel;                                                                                        // 5879
    payload.position = this._position;                                                                                 // 5880
    payload.clientX  = data.x;                                                                                         // 5881
    payload.clientY  = data.y;                                                                                         // 5882
    payload.count    = data.count;                                                                                     // 5883
    payload.touch    = data.identifier;                                                                                // 5884
                                                                                                                       // 5885
    this._eventOutput.emit('update', payload);                                                                         // 5886
}                                                                                                                      // 5887
                                                                                                                       // 5888
/**                                                                                                                    // 5889
 *  Triggered by trackend.                                                                                             // 5890
 *  @method _handleEnd                                                                                                 // 5891
 *  @private                                                                                                           // 5892
 */                                                                                                                    // 5893
function _handleEnd(data) {                                                                                            // 5894
    calculatePayload.call(this, data);                                                                                 // 5895
    this._payload.count = data.count;                                                                                  // 5896
    this._eventOutput.emit('end', this._payload);                                                                      // 5897
}                                                                                                                      // 5898
                                                                                                                       // 5899
/**                                                                                                                    // 5900
 * Set internal options, overriding any default options                                                                // 5901
 *                                                                                                                     // 5902
 * @method setOptions                                                                                                  // 5903
 *                                                                                                                     // 5904
 * @param [options] {Object}             default options overrides                                                     // 5905
 * @param [options.direction] {Number}   read from a particular axis                                                   // 5906
 * @param [options.rails] {Boolean}      read from axis with greatest differential                                     // 5907
 * @param [options.scale] {Number}       constant factor to scale velocity output                                      // 5908
 */                                                                                                                    // 5909
TouchSync.prototype.setOptions = function setOptions(options) {                                                        // 5910
    return this._optionsManager.setOptions(options);                                                                   // 5911
};                                                                                                                     // 5912
                                                                                                                       // 5913
/**                                                                                                                    // 5914
 * Return entire options dictionary, including defaults.                                                               // 5915
 *                                                                                                                     // 5916
 * @method getOptions                                                                                                  // 5917
 * @return {Object} configuration options                                                                              // 5918
 */                                                                                                                    // 5919
TouchSync.prototype.getOptions = function getOptions() {                                                               // 5920
    return this.options;                                                                                               // 5921
};                                                                                                                     // 5922
                                                                                                                       // 5923
module.exports = TouchSync;                                                                                            // 5924
},{"../core/EventHandler":7,"../core/OptionsManager":10,"./SyncUtils":33,"./TouchTracker":35}],35:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 5926
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 5927
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 5928
 *                                                                                                                     // 5929
 * Owner: mark@famo.us                                                                                                 // 5930
 * @license MPL 2.0                                                                                                    // 5931
 * @copyright Famous Industries, Inc. 2014                                                                             // 5932
 */                                                                                                                    // 5933
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 5934
                                                                                                                       // 5935
var _now = Date.now;                                                                                                   // 5936
                                                                                                                       // 5937
function _timestampTouch(touch, event, history) {                                                                      // 5938
    return {                                                                                                           // 5939
        x: touch.clientX,                                                                                              // 5940
        y: touch.clientY,                                                                                              // 5941
        identifier : touch.identifier,                                                                                 // 5942
        origin: event.origin,                                                                                          // 5943
        timestamp: _now(),                                                                                             // 5944
        count: event.touches.length,                                                                                   // 5945
        history: history                                                                                               // 5946
    };                                                                                                                 // 5947
}                                                                                                                      // 5948
                                                                                                                       // 5949
function _handleStart(event) {                                                                                         // 5950
    if (event.touches.length > this.touchLimit) return;                                                                // 5951
    this.isTouched = true;                                                                                             // 5952
                                                                                                                       // 5953
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5954
        var touch = event.changedTouches[i];                                                                           // 5955
        var data = _timestampTouch(touch, event, null);                                                                // 5956
        this.eventOutput.emit('trackstart', data);                                                                     // 5957
        if (!this.selective && !this.touchHistory[touch.identifier]) this.track(data);                                 // 5958
    }                                                                                                                  // 5959
}                                                                                                                      // 5960
                                                                                                                       // 5961
function _handleMove(event) {                                                                                          // 5962
    if (event.touches.length > this.touchLimit) return;                                                                // 5963
                                                                                                                       // 5964
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5965
        var touch = event.changedTouches[i];                                                                           // 5966
        var history = this.touchHistory[touch.identifier];                                                             // 5967
        if (history) {                                                                                                 // 5968
            var data = _timestampTouch(touch, event, history);                                                         // 5969
            this.touchHistory[touch.identifier].push(data);                                                            // 5970
            this.eventOutput.emit('trackmove', data);                                                                  // 5971
        }                                                                                                              // 5972
    }                                                                                                                  // 5973
}                                                                                                                      // 5974
                                                                                                                       // 5975
function _handleEnd(event) {                                                                                           // 5976
    if (!this.isTouched) return;                                                                                       // 5977
                                                                                                                       // 5978
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 5979
        var touch = event.changedTouches[i];                                                                           // 5980
        var history = this.touchHistory[touch.identifier];                                                             // 5981
        if (history) {                                                                                                 // 5982
            var data = _timestampTouch(touch, event, history);                                                         // 5983
            this.touchHistory[touch.identifier].push(data);                                                            // 5984
            this.eventOutput.emit('trackend', data);                                                                   // 5985
            delete this.touchHistory[touch.identifier];                                                                // 5986
        }                                                                                                              // 5987
    }                                                                                                                  // 5988
                                                                                                                       // 5989
    this.isTouched = false;                                                                                            // 5990
}                                                                                                                      // 5991
                                                                                                                       // 5992
function _handleUnpipe() {                                                                                             // 5993
    for (var i in this.touchHistory) {                                                                                 // 5994
        var history = this.touchHistory[i];                                                                            // 5995
        this.eventOutput.emit('trackend', {                                                                            // 5996
            touch: history[history.length - 1].touch,                                                                  // 5997
            timestamp: Date.now(),                                                                                     // 5998
            count: 0,                                                                                                  // 5999
            history: history                                                                                           // 6000
        });                                                                                                            // 6001
        delete this.touchHistory[i];                                                                                   // 6002
    }                                                                                                                  // 6003
}                                                                                                                      // 6004
                                                                                                                       // 6005
/**                                                                                                                    // 6006
 * Helper to TouchSync – tracks piped in touch events, organizes touch                                                 // 6007
 *   events by ID, and emits track events back to TouchSync.                                                           // 6008
 *   Emits 'trackstart', 'trackmove', and 'trackend' events upstream.                                                  // 6009
 *                                                                                                                     // 6010
 * @class TouchTracker                                                                                                 // 6011
 * @constructor                                                                                                        // 6012
 * @param {Object} options default options overrides                                                                   // 6013
 * @param [options.selective] {Boolean} selective if false, saves state for each touch                                 // 6014
 * @param [options.touchLimit] {Number} touchLimit upper bound for emitting events based on number of touches          // 6015
 */                                                                                                                    // 6016
function TouchTracker(options) {                                                                                       // 6017
    this.selective = options.selective;                                                                                // 6018
    this.touchLimit = options.touchLimit || 1;                                                                         // 6019
                                                                                                                       // 6020
    this.touchHistory = {};                                                                                            // 6021
                                                                                                                       // 6022
    this.eventInput = new EventHandler();                                                                              // 6023
    this.eventOutput = new EventHandler();                                                                             // 6024
                                                                                                                       // 6025
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 6026
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 6027
                                                                                                                       // 6028
    this.eventInput.on('touchstart', _handleStart.bind(this));                                                         // 6029
    this.eventInput.on('touchmove', _handleMove.bind(this));                                                           // 6030
    this.eventInput.on('touchend', _handleEnd.bind(this));                                                             // 6031
    this.eventInput.on('touchcancel', _handleEnd.bind(this));                                                          // 6032
    this.eventInput.on('unpipe', _handleUnpipe.bind(this));                                                            // 6033
                                                                                                                       // 6034
    this.isTouched = false;                                                                                            // 6035
}                                                                                                                      // 6036
                                                                                                                       // 6037
/**                                                                                                                    // 6038
 * Record touch data, if selective is false.                                                                           // 6039
 * @private                                                                                                            // 6040
 * @method track                                                                                                       // 6041
 * @param {Object} data touch data                                                                                     // 6042
 */                                                                                                                    // 6043
TouchTracker.prototype.track = function track(data) {                                                                  // 6044
    this.touchHistory[data.identifier] = [data];                                                                       // 6045
};                                                                                                                     // 6046
                                                                                                                       // 6047
module.exports = TouchTracker;                                                                                         // 6048
},{"../core/EventHandler":7}],36:[function(_dereq_,module,exports){                                                    // 6049
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6050
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6051
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6052
 *                                                                                                                     // 6053
 * Owner: mark@famo.us                                                                                                 // 6054
 * @license MPL 2.0                                                                                                    // 6055
 * @copyright Famous Industries, Inc. 2014                                                                             // 6056
 */                                                                                                                    // 6057
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 6058
                                                                                                                       // 6059
/**                                                                                                                    // 6060
 * Helper to PinchSync, RotateSync, and ScaleSync.  Generalized handling of                                            // 6061
 *   two-finger touch events.                                                                                          // 6062
 *   This class is meant to be overridden and not used directly.                                                       // 6063
 *                                                                                                                     // 6064
 * @class TwoFingerSync                                                                                                // 6065
 * @constructor                                                                                                        // 6066
 */                                                                                                                    // 6067
function TwoFingerSync() {                                                                                             // 6068
    this._eventInput = new EventHandler();                                                                             // 6069
    this._eventOutput = new EventHandler();                                                                            // 6070
                                                                                                                       // 6071
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 6072
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 6073
                                                                                                                       // 6074
    this.touchAEnabled = false;                                                                                        // 6075
    this.touchAId = 0;                                                                                                 // 6076
    this.posA = null;                                                                                                  // 6077
    this.timestampA = 0;                                                                                               // 6078
    this.touchBEnabled = false;                                                                                        // 6079
    this.touchBId = 0;                                                                                                 // 6080
    this.posB = null;                                                                                                  // 6081
    this.timestampB = 0;                                                                                               // 6082
                                                                                                                       // 6083
    this._eventInput.on('touchstart', this.handleStart.bind(this));                                                    // 6084
    this._eventInput.on('touchmove', this.handleMove.bind(this));                                                      // 6085
    this._eventInput.on('touchend', this.handleEnd.bind(this));                                                        // 6086
    this._eventInput.on('touchcancel', this.handleEnd.bind(this));                                                     // 6087
}                                                                                                                      // 6088
                                                                                                                       // 6089
TwoFingerSync.calculateAngle = function(posA, posB) {                                                                  // 6090
    var diffX = posB[0] - posA[0];                                                                                     // 6091
    var diffY = posB[1] - posA[1];                                                                                     // 6092
    return Math.atan2(diffY, diffX);                                                                                   // 6093
};                                                                                                                     // 6094
                                                                                                                       // 6095
TwoFingerSync.calculateDistance = function(posA, posB) {                                                               // 6096
    var diffX = posB[0] - posA[0];                                                                                     // 6097
    var diffY = posB[1] - posA[1];                                                                                     // 6098
    return Math.sqrt(diffX * diffX + diffY * diffY);                                                                   // 6099
};                                                                                                                     // 6100
                                                                                                                       // 6101
TwoFingerSync.calculateCenter = function(posA, posB) {                                                                 // 6102
    return [(posA[0] + posB[0]) / 2.0, (posA[1] + posB[1]) / 2.0];                                                     // 6103
};                                                                                                                     // 6104
                                                                                                                       // 6105
var _now = Date.now;                                                                                                   // 6106
                                                                                                                       // 6107
// private                                                                                                             // 6108
TwoFingerSync.prototype.handleStart = function handleStart(event) {                                                    // 6109
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6110
        var touch = event.changedTouches[i];                                                                           // 6111
        if (!this.touchAEnabled) {                                                                                     // 6112
            this.touchAId = touch.identifier;                                                                          // 6113
            this.touchAEnabled = true;                                                                                 // 6114
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6115
            this.timestampA = _now();                                                                                  // 6116
        }                                                                                                              // 6117
        else if (!this.touchBEnabled) {                                                                                // 6118
            this.touchBId = touch.identifier;                                                                          // 6119
            this.touchBEnabled = true;                                                                                 // 6120
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6121
            this.timestampB = _now();                                                                                  // 6122
            this._startUpdate(event);                                                                                  // 6123
        }                                                                                                              // 6124
    }                                                                                                                  // 6125
};                                                                                                                     // 6126
                                                                                                                       // 6127
// private                                                                                                             // 6128
TwoFingerSync.prototype.handleMove = function handleMove(event) {                                                      // 6129
    if (!(this.touchAEnabled && this.touchBEnabled)) return;                                                           // 6130
    var prevTimeA = this.timestampA;                                                                                   // 6131
    var prevTimeB = this.timestampB;                                                                                   // 6132
    var diffTime;                                                                                                      // 6133
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6134
        var touch = event.changedTouches[i];                                                                           // 6135
        if (touch.identifier === this.touchAId) {                                                                      // 6136
            this.posA = [touch.pageX, touch.pageY];                                                                    // 6137
            this.timestampA = _now();                                                                                  // 6138
            diffTime = this.timestampA - prevTimeA;                                                                    // 6139
        }                                                                                                              // 6140
        else if (touch.identifier === this.touchBId) {                                                                 // 6141
            this.posB = [touch.pageX, touch.pageY];                                                                    // 6142
            this.timestampB = _now();                                                                                  // 6143
            diffTime = this.timestampB - prevTimeB;                                                                    // 6144
        }                                                                                                              // 6145
    }                                                                                                                  // 6146
    if (diffTime) this._moveUpdate(diffTime);                                                                          // 6147
};                                                                                                                     // 6148
                                                                                                                       // 6149
// private                                                                                                             // 6150
TwoFingerSync.prototype.handleEnd = function handleEnd(event) {                                                        // 6151
    for (var i = 0; i < event.changedTouches.length; i++) {                                                            // 6152
        var touch = event.changedTouches[i];                                                                           // 6153
        if (touch.identifier === this.touchAId || touch.identifier === this.touchBId) {                                // 6154
            if (this.touchAEnabled && this.touchBEnabled) {                                                            // 6155
                this._eventOutput.emit('end', {                                                                        // 6156
                    touches : [this.touchAId, this.touchBId],                                                          // 6157
                    angle   : this._angle                                                                              // 6158
                });                                                                                                    // 6159
            }                                                                                                          // 6160
            this.touchAEnabled = false;                                                                                // 6161
            this.touchAId = 0;                                                                                         // 6162
            this.touchBEnabled = false;                                                                                // 6163
            this.touchBId = 0;                                                                                         // 6164
        }                                                                                                              // 6165
    }                                                                                                                  // 6166
};                                                                                                                     // 6167
                                                                                                                       // 6168
module.exports = TwoFingerSync;                                                                                        // 6169
},{"../core/EventHandler":7}],37:[function(_dereq_,module,exports){                                                    // 6170
module.exports = {                                                                                                     // 6171
  Accumulator: _dereq_('./Accumulator'),                                                                               // 6172
  DesktopEmulationMode: _dereq_('./DesktopEmulationMode'),                                                             // 6173
  FastClick: _dereq_('./FastClick'),                                                                                   // 6174
  GenericSync: _dereq_('./GenericSync'),                                                                               // 6175
  MouseSync: _dereq_('./MouseSync'),                                                                                   // 6176
  PinchSync: _dereq_('./PinchSync'),                                                                                   // 6177
  RotateSync: _dereq_('./RotateSync'),                                                                                 // 6178
  ScaleSync: _dereq_('./ScaleSync'),                                                                                   // 6179
  ScrollSync: _dereq_('./ScrollSync'),                                                                                 // 6180
  SyncUtils: _dereq_('./SyncUtils'),                                                                                   // 6181
  TouchSync: _dereq_('./TouchSync'),                                                                                   // 6182
  TouchTracker: _dereq_('./TouchTracker'),                                                                             // 6183
  TwoFingerSync: _dereq_('./TwoFingerSync')                                                                            // 6184
};                                                                                                                     // 6185
                                                                                                                       // 6186
},{"./Accumulator":24,"./DesktopEmulationMode":25,"./FastClick":26,"./GenericSync":27,"./MouseSync":28,"./PinchSync":29,"./RotateSync":30,"./ScaleSync":31,"./ScrollSync":32,"./SyncUtils":33,"./TouchSync":34,"./TouchTracker":35,"./TwoFingerSync":36}],38:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6188
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6189
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6190
 *                                                                                                                     // 6191
 * Owner: david@famo.us                                                                                                // 6192
 * @license MPL 2.0                                                                                                    // 6193
 * @copyright Famous Industries, Inc. 2014                                                                             // 6194
 */                                                                                                                    // 6195
                                                                                                                       // 6196
var Vector = _dereq_('./Vector');                                                                                      // 6197
                                                                                                                       // 6198
/**                                                                                                                    // 6199
 * A library for using a 3x3 numerical matrix, represented as a two-level array.                                       // 6200
 *                                                                                                                     // 6201
 * @class Matrix                                                                                                       // 6202
 * @constructor                                                                                                        // 6203
 *                                                                                                                     // 6204
 * @param {Array.Array} values array of rows                                                                           // 6205
 */                                                                                                                    // 6206
function Matrix(values) {                                                                                              // 6207
    this.values = values ||                                                                                            // 6208
        [                                                                                                              // 6209
            [1,0,0],                                                                                                   // 6210
            [0,1,0],                                                                                                   // 6211
            [0,0,1]                                                                                                    // 6212
        ];                                                                                                             // 6213
                                                                                                                       // 6214
    return this;                                                                                                       // 6215
}                                                                                                                      // 6216
                                                                                                                       // 6217
var _register = new Matrix();                                                                                          // 6218
var _vectorRegister = new Vector();                                                                                    // 6219
                                                                                                                       // 6220
/**                                                                                                                    // 6221
 * Return the values in the matrix as an array of numerical row arrays                                                 // 6222
 *                                                                                                                     // 6223
 * @method get                                                                                                         // 6224
 *                                                                                                                     // 6225
 * @return {Array.array} matrix values as array of rows.                                                               // 6226
 */                                                                                                                    // 6227
Matrix.prototype.get = function get() {                                                                                // 6228
    return this.values;                                                                                                // 6229
};                                                                                                                     // 6230
                                                                                                                       // 6231
/**                                                                                                                    // 6232
 * Set the nested array of rows in the matrix.                                                                         // 6233
 *                                                                                                                     // 6234
 * @method set                                                                                                         // 6235
 *                                                                                                                     // 6236
 * @param {Array.array} values matrix values as array of rows.                                                         // 6237
 */                                                                                                                    // 6238
Matrix.prototype.set = function set(values) {                                                                          // 6239
    this.values = values;                                                                                              // 6240
};                                                                                                                     // 6241
                                                                                                                       // 6242
/**                                                                                                                    // 6243
 * Take this matrix as A, input vector V as a column vector, and return matrix product (A)(V).                         // 6244
 *   Note: This sets the internal vector register.  Current handles to the vector register                             // 6245
 *   will see values changed.                                                                                          // 6246
 *                                                                                                                     // 6247
 * @method vectorMultiply                                                                                              // 6248
 *                                                                                                                     // 6249
 * @param {Vector} v input vector V                                                                                    // 6250
 * @return {Vector} result of multiplication, as a handle to the internal vector register                              // 6251
 */                                                                                                                    // 6252
Matrix.prototype.vectorMultiply = function vectorMultiply(v) {                                                         // 6253
    var M = this.get();                                                                                                // 6254
    var v0 = v.x;                                                                                                      // 6255
    var v1 = v.y;                                                                                                      // 6256
    var v2 = v.z;                                                                                                      // 6257
                                                                                                                       // 6258
    var M0 = M[0];                                                                                                     // 6259
    var M1 = M[1];                                                                                                     // 6260
    var M2 = M[2];                                                                                                     // 6261
                                                                                                                       // 6262
    var M00 = M0[0];                                                                                                   // 6263
    var M01 = M0[1];                                                                                                   // 6264
    var M02 = M0[2];                                                                                                   // 6265
    var M10 = M1[0];                                                                                                   // 6266
    var M11 = M1[1];                                                                                                   // 6267
    var M12 = M1[2];                                                                                                   // 6268
    var M20 = M2[0];                                                                                                   // 6269
    var M21 = M2[1];                                                                                                   // 6270
    var M22 = M2[2];                                                                                                   // 6271
                                                                                                                       // 6272
    return _vectorRegister.setXYZ(                                                                                     // 6273
        M00*v0 + M01*v1 + M02*v2,                                                                                      // 6274
        M10*v0 + M11*v1 + M12*v2,                                                                                      // 6275
        M20*v0 + M21*v1 + M22*v2                                                                                       // 6276
    );                                                                                                                 // 6277
};                                                                                                                     // 6278
                                                                                                                       // 6279
/**                                                                                                                    // 6280
 * Multiply the provided matrix M2 with this matrix.  Result is (this) * (M2).                                         // 6281
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6282
 *   will see values changed.                                                                                          // 6283
 *                                                                                                                     // 6284
 * @method multiply                                                                                                    // 6285
 *                                                                                                                     // 6286
 * @param {Matrix} M2 input matrix to multiply on the right                                                            // 6287
 * @return {Matrix} result of multiplication, as a handle to the internal register                                     // 6288
 */                                                                                                                    // 6289
Matrix.prototype.multiply = function multiply(M2) {                                                                    // 6290
    var M1 = this.get();                                                                                               // 6291
    var result = [[]];                                                                                                 // 6292
    for (var i = 0; i < 3; i++) {                                                                                      // 6293
        result[i] = [];                                                                                                // 6294
        for (var j = 0; j < 3; j++) {                                                                                  // 6295
            var sum = 0;                                                                                               // 6296
            for (var k = 0; k < 3; k++) {                                                                              // 6297
                sum += M1[i][k] * M2[k][j];                                                                            // 6298
            }                                                                                                          // 6299
            result[i][j] = sum;                                                                                        // 6300
        }                                                                                                              // 6301
    }                                                                                                                  // 6302
    return _register.set(result);                                                                                      // 6303
};                                                                                                                     // 6304
                                                                                                                       // 6305
/**                                                                                                                    // 6306
 * Creates a Matrix which is the transpose of this matrix.                                                             // 6307
 *   Note: This sets the internal matrix register.  Current handles to the register                                    // 6308
 *   will see values changed.                                                                                          // 6309
 *                                                                                                                     // 6310
 * @method transpose                                                                                                   // 6311
 *                                                                                                                     // 6312
 * @return {Matrix} result of transpose, as a handle to the internal register                                          // 6313
 */                                                                                                                    // 6314
Matrix.prototype.transpose = function transpose() {                                                                    // 6315
    var result = [];                                                                                                   // 6316
    var M = this.get();                                                                                                // 6317
    for (var row = 0; row < 3; row++) {                                                                                // 6318
        for (var col = 0; col < 3; col++) {                                                                            // 6319
            result[row][col] = M[col][row];                                                                            // 6320
        }                                                                                                              // 6321
    }                                                                                                                  // 6322
    return _register.set(result);                                                                                      // 6323
};                                                                                                                     // 6324
                                                                                                                       // 6325
/**                                                                                                                    // 6326
 * Clones the matrix                                                                                                   // 6327
 *                                                                                                                     // 6328
 * @method clone                                                                                                       // 6329
 * @return {Matrix} New copy of the original matrix                                                                    // 6330
 */                                                                                                                    // 6331
Matrix.prototype.clone = function clone() {                                                                            // 6332
    var values = this.get();                                                                                           // 6333
    var M = [];                                                                                                        // 6334
    for (var row = 0; row < 3; row++)                                                                                  // 6335
        M[row] = values[row].slice();                                                                                  // 6336
    return new Matrix(M);                                                                                              // 6337
};                                                                                                                     // 6338
                                                                                                                       // 6339
module.exports = Matrix;                                                                                               // 6340
},{"./Vector":42}],39:[function(_dereq_,module,exports){                                                               // 6341
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6342
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6343
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6344
 *                                                                                                                     // 6345
 * Owner: david@famo.us                                                                                                // 6346
 * @license MPL 2.0                                                                                                    // 6347
 * @copyright Famous Industries, Inc. 2014                                                                             // 6348
 */                                                                                                                    // 6349
                                                                                                                       // 6350
var Matrix = _dereq_('./Matrix');                                                                                      // 6351
                                                                                                                       // 6352
/**                                                                                                                    // 6353
 * @class Quaternion                                                                                                   // 6354
 * @constructor                                                                                                        // 6355
 *                                                                                                                     // 6356
 * @param {Number} w                                                                                                   // 6357
 * @param {Number} x                                                                                                   // 6358
 * @param {Number} y                                                                                                   // 6359
 * @param {Number} z                                                                                                   // 6360
 */                                                                                                                    // 6361
function Quaternion(w,x,y,z) {                                                                                         // 6362
    if (arguments.length === 1) this.set(w);                                                                           // 6363
    else {                                                                                                             // 6364
        this.w = (w !== undefined) ? w : 1;  //Angle                                                                   // 6365
        this.x = (x !== undefined) ? x : 0;  //Axis.x                                                                  // 6366
        this.y = (y !== undefined) ? y : 0;  //Axis.y                                                                  // 6367
        this.z = (z !== undefined) ? z : 0;  //Axis.z                                                                  // 6368
    }                                                                                                                  // 6369
    return this;                                                                                                       // 6370
}                                                                                                                      // 6371
                                                                                                                       // 6372
var register = new Quaternion(1,0,0,0);                                                                                // 6373
                                                                                                                       // 6374
/**                                                                                                                    // 6375
 * Doc: TODO                                                                                                           // 6376
 * @method add                                                                                                         // 6377
 * @param {Quaternion} q                                                                                               // 6378
 * @return {Quaternion}                                                                                                // 6379
 */                                                                                                                    // 6380
Quaternion.prototype.add = function add(q) {                                                                           // 6381
    return register.setWXYZ(                                                                                           // 6382
        this.w + q.w,                                                                                                  // 6383
        this.x + q.x,                                                                                                  // 6384
        this.y + q.y,                                                                                                  // 6385
        this.z + q.z                                                                                                   // 6386
    );                                                                                                                 // 6387
};                                                                                                                     // 6388
                                                                                                                       // 6389
/*                                                                                                                     // 6390
 * Docs: TODO                                                                                                          // 6391
 *                                                                                                                     // 6392
 * @method sub                                                                                                         // 6393
 * @param {Quaternion} q                                                                                               // 6394
 * @return {Quaternion}                                                                                                // 6395
 */                                                                                                                    // 6396
Quaternion.prototype.sub = function sub(q) {                                                                           // 6397
    return register.setWXYZ(                                                                                           // 6398
        this.w - q.w,                                                                                                  // 6399
        this.x - q.x,                                                                                                  // 6400
        this.y - q.y,                                                                                                  // 6401
        this.z - q.z                                                                                                   // 6402
    );                                                                                                                 // 6403
};                                                                                                                     // 6404
                                                                                                                       // 6405
/**                                                                                                                    // 6406
 * Doc: TODO                                                                                                           // 6407
 *                                                                                                                     // 6408
 * @method scalarDivide                                                                                                // 6409
 * @param {Number} s                                                                                                   // 6410
 * @return {Quaternion}                                                                                                // 6411
 */                                                                                                                    // 6412
Quaternion.prototype.scalarDivide = function scalarDivide(s) {                                                         // 6413
    return this.scalarMultiply(1/s);                                                                                   // 6414
};                                                                                                                     // 6415
                                                                                                                       // 6416
/*                                                                                                                     // 6417
 * Docs: TODO                                                                                                          // 6418
 *                                                                                                                     // 6419
 * @method scalarMultiply                                                                                              // 6420
 * @param {Number} s                                                                                                   // 6421
 * @return {Quaternion}                                                                                                // 6422
 */                                                                                                                    // 6423
Quaternion.prototype.scalarMultiply = function scalarMultiply(s) {                                                     // 6424
    return register.setWXYZ(                                                                                           // 6425
        this.w * s,                                                                                                    // 6426
        this.x * s,                                                                                                    // 6427
        this.y * s,                                                                                                    // 6428
        this.z * s                                                                                                     // 6429
    );                                                                                                                 // 6430
};                                                                                                                     // 6431
                                                                                                                       // 6432
/*                                                                                                                     // 6433
 * Docs: TODO                                                                                                          // 6434
 *                                                                                                                     // 6435
 * @method multiply                                                                                                    // 6436
 * @param {Quaternion} q                                                                                               // 6437
 * @return {Quaternion}                                                                                                // 6438
 */                                                                                                                    // 6439
Quaternion.prototype.multiply = function multiply(q) {                                                                 // 6440
    //left-handed coordinate system multiplication                                                                     // 6441
    var x1 = this.x;                                                                                                   // 6442
    var y1 = this.y;                                                                                                   // 6443
    var z1 = this.z;                                                                                                   // 6444
    var w1 = this.w;                                                                                                   // 6445
    var x2 = q.x;                                                                                                      // 6446
    var y2 = q.y;                                                                                                      // 6447
    var z2 = q.z;                                                                                                      // 6448
    var w2 = q.w || 0;                                                                                                 // 6449
                                                                                                                       // 6450
    return register.setWXYZ(                                                                                           // 6451
        w1*w2 - x1*x2 - y1*y2 - z1*z2,                                                                                 // 6452
        x1*w2 + x2*w1 + y2*z1 - y1*z2,                                                                                 // 6453
        y1*w2 + y2*w1 + x1*z2 - x2*z1,                                                                                 // 6454
        z1*w2 + z2*w1 + x2*y1 - x1*y2                                                                                  // 6455
    );                                                                                                                 // 6456
};                                                                                                                     // 6457
                                                                                                                       // 6458
var conj = new Quaternion(1,0,0,0);                                                                                    // 6459
                                                                                                                       // 6460
/*                                                                                                                     // 6461
 * Docs: TODO                                                                                                          // 6462
 *                                                                                                                     // 6463
 * @method rotateVector                                                                                                // 6464
 * @param {Vector} v                                                                                                   // 6465
 * @return {Quaternion}                                                                                                // 6466
 */                                                                                                                    // 6467
Quaternion.prototype.rotateVector = function rotateVector(v) {                                                         // 6468
    conj.set(this.conj());                                                                                             // 6469
    return register.set(this.multiply(v).multiply(conj));                                                              // 6470
};                                                                                                                     // 6471
                                                                                                                       // 6472
/*                                                                                                                     // 6473
 * Docs: TODO                                                                                                          // 6474
 *                                                                                                                     // 6475
 * @method inverse                                                                                                     // 6476
 * @return {Quaternion}                                                                                                // 6477
 */                                                                                                                    // 6478
Quaternion.prototype.inverse = function inverse() {                                                                    // 6479
    return register.set(this.conj().scalarDivide(this.normSquared()));                                                 // 6480
};                                                                                                                     // 6481
                                                                                                                       // 6482
/*                                                                                                                     // 6483
 * Docs: TODO                                                                                                          // 6484
 *                                                                                                                     // 6485
 * @method negate                                                                                                      // 6486
 * @return {Quaternion}                                                                                                // 6487
 */                                                                                                                    // 6488
Quaternion.prototype.negate = function negate() {                                                                      // 6489
    return this.scalarMultiply(-1);                                                                                    // 6490
};                                                                                                                     // 6491
                                                                                                                       // 6492
/*                                                                                                                     // 6493
 * Docs: TODO                                                                                                          // 6494
 *                                                                                                                     // 6495
 * @method conj                                                                                                        // 6496
 * @return {Quaternion}                                                                                                // 6497
 */                                                                                                                    // 6498
Quaternion.prototype.conj = function conj() {                                                                          // 6499
    return register.setWXYZ(                                                                                           // 6500
         this.w,                                                                                                       // 6501
        -this.x,                                                                                                       // 6502
        -this.y,                                                                                                       // 6503
        -this.z                                                                                                        // 6504
    );                                                                                                                 // 6505
};                                                                                                                     // 6506
                                                                                                                       // 6507
/*                                                                                                                     // 6508
 * Docs: TODO                                                                                                          // 6509
 *                                                                                                                     // 6510
 * @method normalize                                                                                                   // 6511
 * @param {Number} length                                                                                              // 6512
 * @return {Quaternion}                                                                                                // 6513
 */                                                                                                                    // 6514
Quaternion.prototype.normalize = function normalize(length) {                                                          // 6515
    length = (length === undefined) ? 1 : length;                                                                      // 6516
    return this.scalarDivide(length * this.norm());                                                                    // 6517
};                                                                                                                     // 6518
                                                                                                                       // 6519
/*                                                                                                                     // 6520
 * Docs: TODO                                                                                                          // 6521
 *                                                                                                                     // 6522
 * @method makeFromAngleAndAxis                                                                                        // 6523
 * @param {Number} angle                                                                                               // 6524
 * @param {Vector} v                                                                                                   // 6525
 * @return {Quaternion}                                                                                                // 6526
 */                                                                                                                    // 6527
Quaternion.prototype.makeFromAngleAndAxis = function makeFromAngleAndAxis(angle, v) {                                  // 6528
    //left handed quaternion creation: theta -> -theta                                                                 // 6529
    var n  = v.normalize();                                                                                            // 6530
    var ha = angle*0.5;                                                                                                // 6531
    var s  = -Math.sin(ha);                                                                                            // 6532
    this.x = s*n.x;                                                                                                    // 6533
    this.y = s*n.y;                                                                                                    // 6534
    this.z = s*n.z;                                                                                                    // 6535
    this.w = Math.cos(ha);                                                                                             // 6536
    return this;                                                                                                       // 6537
};                                                                                                                     // 6538
                                                                                                                       // 6539
/*                                                                                                                     // 6540
 * Docs: TODO                                                                                                          // 6541
 *                                                                                                                     // 6542
 * @method setWXYZ                                                                                                     // 6543
 * @param {Number} w                                                                                                   // 6544
 * @param {Number} x                                                                                                   // 6545
 * @param {Number} y                                                                                                   // 6546
 * @param {Number} z                                                                                                   // 6547
 * @return {Quaternion}                                                                                                // 6548
 */                                                                                                                    // 6549
Quaternion.prototype.setWXYZ = function setWXYZ(w,x,y,z) {                                                             // 6550
    register.clear();                                                                                                  // 6551
    this.w = w;                                                                                                        // 6552
    this.x = x;                                                                                                        // 6553
    this.y = y;                                                                                                        // 6554
    this.z = z;                                                                                                        // 6555
    return this;                                                                                                       // 6556
};                                                                                                                     // 6557
                                                                                                                       // 6558
/*                                                                                                                     // 6559
 * Docs: TODO                                                                                                          // 6560
 *                                                                                                                     // 6561
 * @method set                                                                                                         // 6562
 * @param {Array|Quaternion} v                                                                                         // 6563
 * @return {Quaternion}                                                                                                // 6564
 */                                                                                                                    // 6565
Quaternion.prototype.set = function set(v) {                                                                           // 6566
    if (v instanceof Array) {                                                                                          // 6567
        this.w = 0;                                                                                                    // 6568
        this.x = v[0];                                                                                                 // 6569
        this.y = v[1];                                                                                                 // 6570
        this.z = v[2];                                                                                                 // 6571
    }                                                                                                                  // 6572
    else {                                                                                                             // 6573
        this.w = v.w;                                                                                                  // 6574
        this.x = v.x;                                                                                                  // 6575
        this.y = v.y;                                                                                                  // 6576
        this.z = v.z;                                                                                                  // 6577
    }                                                                                                                  // 6578
    if (this !== register) register.clear();                                                                           // 6579
    return this;                                                                                                       // 6580
};                                                                                                                     // 6581
                                                                                                                       // 6582
/**                                                                                                                    // 6583
 * Docs: TODO                                                                                                          // 6584
 *                                                                                                                     // 6585
 * @method put                                                                                                         // 6586
 * @param {Quaternion} q                                                                                               // 6587
 * @return {Quaternion}                                                                                                // 6588
 */                                                                                                                    // 6589
Quaternion.prototype.put = function put(q) {                                                                           // 6590
    q.set(register);                                                                                                   // 6591
};                                                                                                                     // 6592
                                                                                                                       // 6593
/**                                                                                                                    // 6594
 * Doc: TODO                                                                                                           // 6595
 *                                                                                                                     // 6596
 * @method clone                                                                                                       // 6597
 * @return {Quaternion}                                                                                                // 6598
 */                                                                                                                    // 6599
Quaternion.prototype.clone = function clone() {                                                                        // 6600
    return new Quaternion(this);                                                                                       // 6601
};                                                                                                                     // 6602
                                                                                                                       // 6603
/**                                                                                                                    // 6604
 * Doc: TODO                                                                                                           // 6605
 *                                                                                                                     // 6606
 * @method clear                                                                                                       // 6607
 * @return {Quaternion}                                                                                                // 6608
 */                                                                                                                    // 6609
Quaternion.prototype.clear = function clear() {                                                                        // 6610
    this.w = 1;                                                                                                        // 6611
    this.x = 0;                                                                                                        // 6612
    this.y = 0;                                                                                                        // 6613
    this.z = 0;                                                                                                        // 6614
    return this;                                                                                                       // 6615
};                                                                                                                     // 6616
                                                                                                                       // 6617
/**                                                                                                                    // 6618
 * Doc: TODO                                                                                                           // 6619
 *                                                                                                                     // 6620
 * @method isEqual                                                                                                     // 6621
 * @param {Quaternion} q                                                                                               // 6622
 * @return {Boolean}                                                                                                   // 6623
 */                                                                                                                    // 6624
Quaternion.prototype.isEqual = function isEqual(q) {                                                                   // 6625
    return q.w === this.w && q.x === this.x && q.y === this.y && q.z === this.z;                                       // 6626
};                                                                                                                     // 6627
                                                                                                                       // 6628
/**                                                                                                                    // 6629
 * Doc: TODO                                                                                                           // 6630
 *                                                                                                                     // 6631
 * @method dot                                                                                                         // 6632
 * @param {Quaternion} q                                                                                               // 6633
 * @return {Number}                                                                                                    // 6634
 */                                                                                                                    // 6635
Quaternion.prototype.dot = function dot(q) {                                                                           // 6636
    return this.w * q.w + this.x * q.x + this.y * q.y + this.z * q.z;                                                  // 6637
};                                                                                                                     // 6638
                                                                                                                       // 6639
/**                                                                                                                    // 6640
 * Doc: TODO                                                                                                           // 6641
 *                                                                                                                     // 6642
 * @method normSquared                                                                                                 // 6643
 * @return {Number}                                                                                                    // 6644
 */                                                                                                                    // 6645
Quaternion.prototype.normSquared = function normSquared() {                                                            // 6646
    return this.dot(this);                                                                                             // 6647
};                                                                                                                     // 6648
                                                                                                                       // 6649
/**                                                                                                                    // 6650
 * Doc: TODO                                                                                                           // 6651
 *                                                                                                                     // 6652
 * @method norm                                                                                                        // 6653
 * @return {Number}                                                                                                    // 6654
 */                                                                                                                    // 6655
Quaternion.prototype.norm = function norm() {                                                                          // 6656
    return Math.sqrt(this.normSquared());                                                                              // 6657
};                                                                                                                     // 6658
                                                                                                                       // 6659
/**                                                                                                                    // 6660
 * Doc: TODO                                                                                                           // 6661
 *                                                                                                                     // 6662
 * @method isZero                                                                                                      // 6663
 * @return {Boolean}                                                                                                   // 6664
 */                                                                                                                    // 6665
Quaternion.prototype.isZero = function isZero() {                                                                      // 6666
    return !(this.x || this.y || this.z);                                                                              // 6667
};                                                                                                                     // 6668
                                                                                                                       // 6669
/**                                                                                                                    // 6670
 * Doc: TODO                                                                                                           // 6671
 *                                                                                                                     // 6672
 * @method getTransform                                                                                                // 6673
 * @return {Transform}                                                                                                 // 6674
 */                                                                                                                    // 6675
Quaternion.prototype.getTransform = function getTransform() {                                                          // 6676
    var temp = this.normalize(1);                                                                                      // 6677
    var x = temp.x;                                                                                                    // 6678
    var y = temp.y;                                                                                                    // 6679
    var z = temp.z;                                                                                                    // 6680
    var w = temp.w;                                                                                                    // 6681
                                                                                                                       // 6682
    //LHC system flattened to column major = RHC flattened to row major                                                // 6683
    return [                                                                                                           // 6684
        1 - 2*y*y - 2*z*z,                                                                                             // 6685
            2*x*y - 2*z*w,                                                                                             // 6686
            2*x*z + 2*y*w,                                                                                             // 6687
        0,                                                                                                             // 6688
            2*x*y + 2*z*w,                                                                                             // 6689
        1 - 2*x*x - 2*z*z,                                                                                             // 6690
            2*y*z - 2*x*w,                                                                                             // 6691
        0,                                                                                                             // 6692
            2*x*z - 2*y*w,                                                                                             // 6693
            2*y*z + 2*x*w,                                                                                             // 6694
        1 - 2*x*x - 2*y*y,                                                                                             // 6695
        0,                                                                                                             // 6696
        0,                                                                                                             // 6697
        0,                                                                                                             // 6698
        0,                                                                                                             // 6699
        1                                                                                                              // 6700
    ];                                                                                                                 // 6701
};                                                                                                                     // 6702
                                                                                                                       // 6703
var matrixRegister = new Matrix();                                                                                     // 6704
                                                                                                                       // 6705
/**                                                                                                                    // 6706
 * Doc: TODO                                                                                                           // 6707
 *                                                                                                                     // 6708
 * @method getMatrix                                                                                                   // 6709
 * @return {Transform}                                                                                                 // 6710
 */                                                                                                                    // 6711
Quaternion.prototype.getMatrix = function getMatrix() {                                                                // 6712
    var temp = this.normalize(1);                                                                                      // 6713
    var x = temp.x;                                                                                                    // 6714
    var y = temp.y;                                                                                                    // 6715
    var z = temp.z;                                                                                                    // 6716
    var w = temp.w;                                                                                                    // 6717
                                                                                                                       // 6718
    //LHC system flattened to row major                                                                                // 6719
    return matrixRegister.set([                                                                                        // 6720
        [                                                                                                              // 6721
            1 - 2*y*y - 2*z*z,                                                                                         // 6722
                2*x*y + 2*z*w,                                                                                         // 6723
                2*x*z - 2*y*w                                                                                          // 6724
        ],                                                                                                             // 6725
        [                                                                                                              // 6726
                2*x*y - 2*z*w,                                                                                         // 6727
            1 - 2*x*x - 2*z*z,                                                                                         // 6728
                2*y*z + 2*x*w                                                                                          // 6729
        ],                                                                                                             // 6730
        [                                                                                                              // 6731
                2*x*z + 2*y*w,                                                                                         // 6732
                2*y*z - 2*x*w,                                                                                         // 6733
            1 - 2*x*x - 2*y*y                                                                                          // 6734
        ]                                                                                                              // 6735
    ]);                                                                                                                // 6736
};                                                                                                                     // 6737
                                                                                                                       // 6738
var epsilon = 1e-5;                                                                                                    // 6739
                                                                                                                       // 6740
/**                                                                                                                    // 6741
 * Doc: TODO                                                                                                           // 6742
 *                                                                                                                     // 6743
 * @method slerp                                                                                                       // 6744
 * @param {Quaternion} q                                                                                               // 6745
 * @param {Number} t                                                                                                   // 6746
 * @return {Transform}                                                                                                 // 6747
 */                                                                                                                    // 6748
Quaternion.prototype.slerp = function slerp(q, t) {                                                                    // 6749
    var omega;                                                                                                         // 6750
    var cosomega;                                                                                                      // 6751
    var sinomega;                                                                                                      // 6752
    var scaleFrom;                                                                                                     // 6753
    var scaleTo;                                                                                                       // 6754
                                                                                                                       // 6755
    cosomega = this.dot(q);                                                                                            // 6756
    if ((1.0 - cosomega) > epsilon) {                                                                                  // 6757
        omega       = Math.acos(cosomega);                                                                             // 6758
        sinomega    = Math.sin(omega);                                                                                 // 6759
        scaleFrom   = Math.sin((1.0 - t) * omega) / sinomega;                                                          // 6760
        scaleTo     = Math.sin(t * omega) / sinomega;                                                                  // 6761
    }                                                                                                                  // 6762
    else {                                                                                                             // 6763
        scaleFrom   = 1.0 - t;                                                                                         // 6764
        scaleTo     = t;                                                                                               // 6765
    }                                                                                                                  // 6766
    return register.set(this.scalarMultiply(scaleFrom/scaleTo).add(q).multiply(scaleTo));                              // 6767
};                                                                                                                     // 6768
                                                                                                                       // 6769
module.exports = Quaternion;                                                                                           // 6770
},{"./Matrix":38}],40:[function(_dereq_,module,exports){                                                               // 6771
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6772
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6773
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6774
 *                                                                                                                     // 6775
 * Owner: david@famo.us                                                                                                // 6776
 * @license MPL 2.0                                                                                                    // 6777
 * @copyright Famous Industries, Inc. 2014                                                                             // 6778
 */                                                                                                                    // 6779
                                                                                                                       // 6780
                                                                                                                       // 6781
                                                                                                                       // 6782
                                                                                                                       // 6783
var RAND = Math.random;                                                                                                // 6784
                                                                                                                       // 6785
function _randomFloat(min,max) {                                                                                       // 6786
    return min + RAND() * (max - min);                                                                                 // 6787
}                                                                                                                      // 6788
                                                                                                                       // 6789
function _randomInteger(min,max) {                                                                                     // 6790
    return (min + RAND() * (max - min + 1)) >> 0;                                                                      // 6791
}                                                                                                                      // 6792
                                                                                                                       // 6793
/**                                                                                                                    // 6794
 * Very simple uniform random number generator library wrapping Math.random().                                         // 6795
 *                                                                                                                     // 6796
 * @class Random                                                                                                       // 6797
 * @static                                                                                                             // 6798
 */                                                                                                                    // 6799
var Random = {};                                                                                                       // 6800
                                                                                                                       // 6801
/**                                                                                                                    // 6802
 * Get single random integer between min and max (inclusive), or array                                                 // 6803
 *   of size dim if specified.                                                                                         // 6804
 *                                                                                                                     // 6805
 * @method integer                                                                                                     // 6806
 *                                                                                                                     // 6807
 * @param {Number} min lower bound, default 0                                                                          // 6808
 * @param {Number} max upper bound, default 1                                                                          // 6809
 * @param {Number} dim (optional) dimension of output array, if specified                                              // 6810
 * @return {number | array<number>} random integer, or optionally, an array of random integers                         // 6811
 */                                                                                                                    // 6812
Random.integer = function integer(min,max,dim) {                                                                       // 6813
    min = (min !== undefined) ? min : 0;                                                                               // 6814
    max = (max !== undefined) ? max : 1;                                                                               // 6815
    if (dim !== undefined) {                                                                                           // 6816
        var result = [];                                                                                               // 6817
        for (var i = 0; i < dim; i++) result.push(_randomInteger(min,max));                                            // 6818
        return result;                                                                                                 // 6819
    }                                                                                                                  // 6820
    else return _randomInteger(min,max);                                                                               // 6821
};                                                                                                                     // 6822
                                                                                                                       // 6823
/**                                                                                                                    // 6824
 * Get single random float between min and max (inclusive), or array                                                   // 6825
 *   of size dim if specified                                                                                          // 6826
 *                                                                                                                     // 6827
 * @method range                                                                                                       // 6828
 *                                                                                                                     // 6829
 * @param {Number} min lower bound, default 0                                                                          // 6830
 * @param {Number} max upper bound, default 1                                                                          // 6831
 * @param {Number} [dim] dimension of output array, if specified                                                       // 6832
 * @return {Number} random float, or optionally an array                                                               // 6833
 */                                                                                                                    // 6834
Random.range = function range(min,max,dim) {                                                                           // 6835
    min = (min !== undefined) ? min : 0;                                                                               // 6836
    max = (max !== undefined) ? max : 1;                                                                               // 6837
    if (dim !== undefined) {                                                                                           // 6838
        var result = [];                                                                                               // 6839
        for (var i = 0; i < dim; i++) result.push(_randomFloat(min,max));                                              // 6840
        return result;                                                                                                 // 6841
    }                                                                                                                  // 6842
    else return _randomFloat(min,max);                                                                                 // 6843
};                                                                                                                     // 6844
                                                                                                                       // 6845
/**                                                                                                                    // 6846
 * Return random number among the set {-1 ,1}                                                                          // 6847
 *                                                                                                                     // 6848
 * @method sign                                                                                                        // 6849
 *                                                                                                                     // 6850
 * @param {Number} prob probability of returning 1, default 0.5                                                        // 6851
 * @return {Number} random sign (-1 or 1)                                                                              // 6852
 */                                                                                                                    // 6853
Random.sign = function sign(prob) {                                                                                    // 6854
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6855
    return (RAND() < prob) ? 1 : -1;                                                                                   // 6856
};                                                                                                                     // 6857
                                                                                                                       // 6858
/**                                                                                                                    // 6859
 * Return random boolean value, true or false.                                                                         // 6860
 *                                                                                                                     // 6861
 * @method bool                                                                                                        // 6862
 *                                                                                                                     // 6863
 * @param {Number} prob probability of returning true, default 0.5                                                     // 6864
 * @return {Boolean} random boolean                                                                                    // 6865
 */                                                                                                                    // 6866
Random.bool = function bool(prob) {                                                                                    // 6867
    prob = (prob !== undefined) ? prob : 0.5;                                                                          // 6868
    return RAND() < prob;                                                                                              // 6869
};                                                                                                                     // 6870
                                                                                                                       // 6871
module.exports = Random;                                                                                               // 6872
},{}],41:[function(_dereq_,module,exports){                                                                            // 6873
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6874
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6875
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6876
 *                                                                                                                     // 6877
 * Owner: mark@famo.us                                                                                                 // 6878
 * @license MPL 2.0                                                                                                    // 6879
 * @copyright Famous Industries, Inc. 2014                                                                             // 6880
 */                                                                                                                    // 6881
                                                                                                                       // 6882
                                                                                                                       // 6883
                                                                                                                       // 6884
/**                                                                                                                    // 6885
 * A few static methods.                                                                                               // 6886
 *                                                                                                                     // 6887
 * @class Utilities                                                                                                    // 6888
 * @static                                                                                                             // 6889
 */                                                                                                                    // 6890
var Utilities = {};                                                                                                    // 6891
                                                                                                                       // 6892
/**                                                                                                                    // 6893
 * Constrain input to range.                                                                                           // 6894
 *                                                                                                                     // 6895
 * @method clamp                                                                                                       // 6896
 * @param {Number} value input                                                                                         // 6897
 * @param {Array.Number} range [min, max]                                                                              // 6898
 * @static                                                                                                             // 6899
 */                                                                                                                    // 6900
Utilities.clamp = function clamp(value, range) {                                                                       // 6901
    return Math.max(Math.min(value, range[1]), range[0]);                                                              // 6902
};                                                                                                                     // 6903
                                                                                                                       // 6904
/**                                                                                                                    // 6905
 * Euclidean length of numerical array.                                                                                // 6906
 *                                                                                                                     // 6907
 * @method length                                                                                                      // 6908
 * @param {Array.Number} array array of numbers                                                                        // 6909
 * @static                                                                                                             // 6910
 */                                                                                                                    // 6911
Utilities.length = function length(array) {                                                                            // 6912
    var distanceSquared = 0;                                                                                           // 6913
    for (var i = 0; i < array.length; i++) {                                                                           // 6914
        distanceSquared += array[i] * array[i];                                                                        // 6915
    }                                                                                                                  // 6916
    return Math.sqrt(distanceSquared);                                                                                 // 6917
};                                                                                                                     // 6918
                                                                                                                       // 6919
module.exports = Utilities;                                                                                            // 6920
},{}],42:[function(_dereq_,module,exports){                                                                            // 6921
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 6922
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 6923
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 6924
 *                                                                                                                     // 6925
 * Owner: david@famo.us                                                                                                // 6926
 * @license MPL 2.0                                                                                                    // 6927
 * @copyright Famous Industries, Inc. 2014                                                                             // 6928
 */                                                                                                                    // 6929
                                                                                                                       // 6930
                                                                                                                       // 6931
                                                                                                                       // 6932
                                                                                                                       // 6933
/**                                                                                                                    // 6934
 * Three-element floating point vector.                                                                                // 6935
 *                                                                                                                     // 6936
 * @class Vector                                                                                                       // 6937
 * @constructor                                                                                                        // 6938
 *                                                                                                                     // 6939
 * @param {number} x x element value                                                                                   // 6940
 * @param {number} y y element value                                                                                   // 6941
 * @param {number} z z element value                                                                                   // 6942
 */                                                                                                                    // 6943
function Vector(x,y,z) {                                                                                               // 6944
    if (arguments.length === 1 && x !== undefined) this.set(x);                                                        // 6945
    else {                                                                                                             // 6946
        this.x = x || 0;                                                                                               // 6947
        this.y = y || 0;                                                                                               // 6948
        this.z = z || 0;                                                                                               // 6949
    }                                                                                                                  // 6950
    return this;                                                                                                       // 6951
}                                                                                                                      // 6952
                                                                                                                       // 6953
var _register = new Vector(0,0,0);                                                                                     // 6954
                                                                                                                       // 6955
/**                                                                                                                    // 6956
 * Add this element-wise to another Vector, element-wise.                                                              // 6957
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6958
 *                                                                                                                     // 6959
 * @method add                                                                                                         // 6960
 * @param {Vector} v addend                                                                                            // 6961
 * @return {Vector} vector sum                                                                                         // 6962
 */                                                                                                                    // 6963
Vector.prototype.add = function add(v) {                                                                               // 6964
    return _setXYZ.call(_register,                                                                                     // 6965
        this.x + v.x,                                                                                                  // 6966
        this.y + v.y,                                                                                                  // 6967
        this.z + v.z                                                                                                   // 6968
    );                                                                                                                 // 6969
};                                                                                                                     // 6970
                                                                                                                       // 6971
/**                                                                                                                    // 6972
 * Subtract another vector from this vector, element-wise.                                                             // 6973
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6974
 *                                                                                                                     // 6975
 * @method sub                                                                                                         // 6976
 * @param {Vector} v subtrahend                                                                                        // 6977
 * @return {Vector} vector difference                                                                                  // 6978
 */                                                                                                                    // 6979
Vector.prototype.sub = function sub(v) {                                                                               // 6980
    return _setXYZ.call(_register,                                                                                     // 6981
        this.x - v.x,                                                                                                  // 6982
        this.y - v.y,                                                                                                  // 6983
        this.z - v.z                                                                                                   // 6984
    );                                                                                                                 // 6985
};                                                                                                                     // 6986
                                                                                                                       // 6987
/**                                                                                                                    // 6988
 * Scale Vector by floating point r.                                                                                   // 6989
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 6990
 *                                                                                                                     // 6991
 * @method mult                                                                                                        // 6992
 *                                                                                                                     // 6993
 * @param {number} r scalar                                                                                            // 6994
 * @return {Vector} vector result                                                                                      // 6995
 */                                                                                                                    // 6996
Vector.prototype.mult = function mult(r) {                                                                             // 6997
    return _setXYZ.call(_register,                                                                                     // 6998
        r * this.x,                                                                                                    // 6999
        r * this.y,                                                                                                    // 7000
        r * this.z                                                                                                     // 7001
    );                                                                                                                 // 7002
};                                                                                                                     // 7003
                                                                                                                       // 7004
/**                                                                                                                    // 7005
 * Scale Vector by floating point 1/r.                                                                                 // 7006
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7007
 *                                                                                                                     // 7008
 * @method div                                                                                                         // 7009
 *                                                                                                                     // 7010
 * @param {number} r scalar                                                                                            // 7011
 * @return {Vector} vector result                                                                                      // 7012
 */                                                                                                                    // 7013
Vector.prototype.div = function div(r) {                                                                               // 7014
    return this.mult(1 / r);                                                                                           // 7015
};                                                                                                                     // 7016
                                                                                                                       // 7017
/**                                                                                                                    // 7018
 * Given another vector v, return cross product (v)x(this).                                                            // 7019
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7020
 *                                                                                                                     // 7021
 * @method cross                                                                                                       // 7022
 * @param {Vector} v Left Hand Vector                                                                                  // 7023
 * @return {Vector} vector result                                                                                      // 7024
 */                                                                                                                    // 7025
Vector.prototype.cross = function cross(v) {                                                                           // 7026
    var x = this.x;                                                                                                    // 7027
    var y = this.y;                                                                                                    // 7028
    var z = this.z;                                                                                                    // 7029
    var vx = v.x;                                                                                                      // 7030
    var vy = v.y;                                                                                                      // 7031
    var vz = v.z;                                                                                                      // 7032
                                                                                                                       // 7033
    return _setXYZ.call(_register,                                                                                     // 7034
        z * vy - y * vz,                                                                                               // 7035
        x * vz - z * vx,                                                                                               // 7036
        y * vx - x * vy                                                                                                // 7037
    );                                                                                                                 // 7038
};                                                                                                                     // 7039
                                                                                                                       // 7040
/**                                                                                                                    // 7041
 * Component-wise equality test between this and Vector v.                                                             // 7042
 * @method equals                                                                                                      // 7043
 * @param {Vector} v vector to compare                                                                                 // 7044
 * @return {boolean}                                                                                                   // 7045
 */                                                                                                                    // 7046
Vector.prototype.equals = function equals(v) {                                                                         // 7047
    return (v.x === this.x && v.y === this.y && v.z === this.z);                                                       // 7048
};                                                                                                                     // 7049
                                                                                                                       // 7050
/**                                                                                                                    // 7051
 * Rotate clockwise around x-axis by theta radians.                                                                    // 7052
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7053
 * @method rotateX                                                                                                     // 7054
 * @param {number} theta radians                                                                                       // 7055
 * @return {Vector} rotated vector                                                                                     // 7056
 */                                                                                                                    // 7057
Vector.prototype.rotateX = function rotateX(theta) {                                                                   // 7058
    var x = this.x;                                                                                                    // 7059
    var y = this.y;                                                                                                    // 7060
    var z = this.z;                                                                                                    // 7061
                                                                                                                       // 7062
    var cosTheta = Math.cos(theta);                                                                                    // 7063
    var sinTheta = Math.sin(theta);                                                                                    // 7064
                                                                                                                       // 7065
    return _setXYZ.call(_register,                                                                                     // 7066
        x,                                                                                                             // 7067
        y * cosTheta - z * sinTheta,                                                                                   // 7068
        y * sinTheta + z * cosTheta                                                                                    // 7069
    );                                                                                                                 // 7070
};                                                                                                                     // 7071
                                                                                                                       // 7072
/**                                                                                                                    // 7073
 * Rotate clockwise around y-axis by theta radians.                                                                    // 7074
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7075
 * @method rotateY                                                                                                     // 7076
 * @param {number} theta radians                                                                                       // 7077
 * @return {Vector} rotated vector                                                                                     // 7078
 */                                                                                                                    // 7079
Vector.prototype.rotateY = function rotateY(theta) {                                                                   // 7080
    var x = this.x;                                                                                                    // 7081
    var y = this.y;                                                                                                    // 7082
    var z = this.z;                                                                                                    // 7083
                                                                                                                       // 7084
    var cosTheta = Math.cos(theta);                                                                                    // 7085
    var sinTheta = Math.sin(theta);                                                                                    // 7086
                                                                                                                       // 7087
    return _setXYZ.call(_register,                                                                                     // 7088
        z * sinTheta + x * cosTheta,                                                                                   // 7089
        y,                                                                                                             // 7090
        z * cosTheta - x * sinTheta                                                                                    // 7091
    );                                                                                                                 // 7092
};                                                                                                                     // 7093
                                                                                                                       // 7094
/**                                                                                                                    // 7095
 * Rotate clockwise around z-axis by theta radians.                                                                    // 7096
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7097
 * @method rotateZ                                                                                                     // 7098
 * @param {number} theta radians                                                                                       // 7099
 * @return {Vector} rotated vector                                                                                     // 7100
 */                                                                                                                    // 7101
Vector.prototype.rotateZ = function rotateZ(theta) {                                                                   // 7102
    var x = this.x;                                                                                                    // 7103
    var y = this.y;                                                                                                    // 7104
    var z = this.z;                                                                                                    // 7105
                                                                                                                       // 7106
    var cosTheta = Math.cos(theta);                                                                                    // 7107
    var sinTheta = Math.sin(theta);                                                                                    // 7108
                                                                                                                       // 7109
    return _setXYZ.call(_register,                                                                                     // 7110
        x * cosTheta - y * sinTheta,                                                                                   // 7111
        x * sinTheta + y * cosTheta,                                                                                   // 7112
        z                                                                                                              // 7113
    );                                                                                                                 // 7114
};                                                                                                                     // 7115
                                                                                                                       // 7116
/**                                                                                                                    // 7117
 * Return dot product of this with a second Vector                                                                     // 7118
 * @method dot                                                                                                         // 7119
 * @param {Vector} v second vector                                                                                     // 7120
 * @return {number} dot product                                                                                        // 7121
 */                                                                                                                    // 7122
Vector.prototype.dot = function dot(v) {                                                                               // 7123
    return this.x * v.x + this.y * v.y + this.z * v.z;                                                                 // 7124
};                                                                                                                     // 7125
                                                                                                                       // 7126
/**                                                                                                                    // 7127
 * Return squared length of this vector                                                                                // 7128
 * @method normSquared                                                                                                 // 7129
 * @return {number} squared length                                                                                     // 7130
 */                                                                                                                    // 7131
Vector.prototype.normSquared = function normSquared() {                                                                // 7132
    return this.dot(this);                                                                                             // 7133
};                                                                                                                     // 7134
                                                                                                                       // 7135
/**                                                                                                                    // 7136
 * Return length of this vector                                                                                        // 7137
 * @method norm                                                                                                        // 7138
 * @return {number} length                                                                                             // 7139
 */                                                                                                                    // 7140
Vector.prototype.norm = function norm() {                                                                              // 7141
    return Math.sqrt(this.normSquared());                                                                              // 7142
};                                                                                                                     // 7143
                                                                                                                       // 7144
/**                                                                                                                    // 7145
 * Scale Vector to specified length.                                                                                   // 7146
 *   If length is less than internal tolerance, set vector to [length, 0, 0].                                          // 7147
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7148
 * @method normalize                                                                                                   // 7149
 *                                                                                                                     // 7150
 * @param {number} length target length, default 1.0                                                                   // 7151
 * @return {Vector}                                                                                                    // 7152
 */                                                                                                                    // 7153
Vector.prototype.normalize = function normalize(length) {                                                              // 7154
    if (arguments.length === 0) length = 1;                                                                            // 7155
    var norm = this.norm();                                                                                            // 7156
                                                                                                                       // 7157
    if (norm > 1e-7) return _setFromVector.call(_register, this.mult(length / norm));                                  // 7158
    else return _setXYZ.call(_register, length, 0, 0);                                                                 // 7159
};                                                                                                                     // 7160
                                                                                                                       // 7161
/**                                                                                                                    // 7162
 * Make a separate copy of the Vector.                                                                                 // 7163
 *                                                                                                                     // 7164
 * @method clone                                                                                                       // 7165
 *                                                                                                                     // 7166
 * @return {Vector}                                                                                                    // 7167
 */                                                                                                                    // 7168
Vector.prototype.clone = function clone() {                                                                            // 7169
    return new Vector(this);                                                                                           // 7170
};                                                                                                                     // 7171
                                                                                                                       // 7172
/**                                                                                                                    // 7173
 * True if and only if every value is 0 (or falsy)                                                                     // 7174
 *                                                                                                                     // 7175
 * @method isZero                                                                                                      // 7176
 *                                                                                                                     // 7177
 * @return {boolean}                                                                                                   // 7178
 */                                                                                                                    // 7179
Vector.prototype.isZero = function isZero() {                                                                          // 7180
    return !(this.x || this.y || this.z);                                                                              // 7181
};                                                                                                                     // 7182
                                                                                                                       // 7183
function _setXYZ(x,y,z) {                                                                                              // 7184
    this.x = x;                                                                                                        // 7185
    this.y = y;                                                                                                        // 7186
    this.z = z;                                                                                                        // 7187
    return this;                                                                                                       // 7188
}                                                                                                                      // 7189
                                                                                                                       // 7190
function _setFromArray(v) {                                                                                            // 7191
    return _setXYZ.call(this,v[0],v[1],v[2] || 0);                                                                     // 7192
}                                                                                                                      // 7193
                                                                                                                       // 7194
function _setFromVector(v) {                                                                                           // 7195
    return _setXYZ.call(this, v.x, v.y, v.z);                                                                          // 7196
}                                                                                                                      // 7197
                                                                                                                       // 7198
function _setFromNumber(x) {                                                                                           // 7199
    return _setXYZ.call(this,x,0,0);                                                                                   // 7200
}                                                                                                                      // 7201
                                                                                                                       // 7202
/**                                                                                                                    // 7203
 * Set this Vector to the values in the provided Array or Vector.                                                      // 7204
 *                                                                                                                     // 7205
 * @method set                                                                                                         // 7206
 * @param {object} v array, Vector, or number                                                                          // 7207
 * @return {Vector} this                                                                                               // 7208
 */                                                                                                                    // 7209
Vector.prototype.set = function set(v) {                                                                               // 7210
    if (v instanceof Array) return _setFromArray.call(this, v);                                                        // 7211
    if (typeof v === 'number') return _setFromNumber.call(this, v);                                                    // 7212
    return _setFromVector.call(this, v);                                                                               // 7213
};                                                                                                                     // 7214
                                                                                                                       // 7215
Vector.prototype.setXYZ = function(x,y,z) {                                                                            // 7216
    return _setXYZ.apply(this, arguments);                                                                             // 7217
};                                                                                                                     // 7218
                                                                                                                       // 7219
Vector.prototype.set1D = function(x) {                                                                                 // 7220
    return _setFromNumber.call(this, x);                                                                               // 7221
};                                                                                                                     // 7222
                                                                                                                       // 7223
/**                                                                                                                    // 7224
 * Put result of last internal register calculation in specified output vector.                                        // 7225
 *                                                                                                                     // 7226
 * @method put                                                                                                         // 7227
 * @param {Vector} v destination vector                                                                                // 7228
 * @return {Vector} destination vector                                                                                 // 7229
 */                                                                                                                    // 7230
                                                                                                                       // 7231
Vector.prototype.put = function put(v) {                                                                               // 7232
    if (this === _register) _setFromVector.call(v, _register);                                                         // 7233
    else _setFromVector.call(v, this);                                                                                 // 7234
};                                                                                                                     // 7235
                                                                                                                       // 7236
/**                                                                                                                    // 7237
 * Set this vector to [0,0,0]                                                                                          // 7238
 *                                                                                                                     // 7239
 * @method clear                                                                                                       // 7240
 */                                                                                                                    // 7241
Vector.prototype.clear = function clear() {                                                                            // 7242
    return _setXYZ.call(this,0,0,0);                                                                                   // 7243
};                                                                                                                     // 7244
                                                                                                                       // 7245
/**                                                                                                                    // 7246
 * Scale this Vector down to specified "cap" length.                                                                   // 7247
 *   If Vector shorter than cap, or cap is Infinity, do nothing.                                                       // 7248
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7249
 *                                                                                                                     // 7250
 * @method cap                                                                                                         // 7251
 * @return {Vector} capped vector                                                                                      // 7252
 */                                                                                                                    // 7253
Vector.prototype.cap = function cap(cap) {                                                                             // 7254
    if (cap === Infinity) return _setFromVector.call(_register, this);                                                 // 7255
    var norm = this.norm();                                                                                            // 7256
    if (norm > cap) return _setFromVector.call(_register, this.mult(cap / norm));                                      // 7257
    else return _setFromVector.call(_register, this);                                                                  // 7258
};                                                                                                                     // 7259
                                                                                                                       // 7260
/**                                                                                                                    // 7261
 * Return projection of this Vector onto another.                                                                      // 7262
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7263
 *                                                                                                                     // 7264
 * @method project                                                                                                     // 7265
 * @param {Vector} n vector to project upon                                                                            // 7266
 * @return {Vector} projected vector                                                                                   // 7267
 */                                                                                                                    // 7268
Vector.prototype.project = function project(n) {                                                                       // 7269
    return n.mult(this.dot(n));                                                                                        // 7270
};                                                                                                                     // 7271
                                                                                                                       // 7272
/**                                                                                                                    // 7273
 * Reflect this Vector across provided vector.                                                                         // 7274
 *   Note: This sets the internal result register, so other references to that vector will change.                     // 7275
 *                                                                                                                     // 7276
 * @method reflectAcross                                                                                               // 7277
 * @param {Vector} n vector to reflect across                                                                          // 7278
 * @return {Vector} reflected vector                                                                                   // 7279
 */                                                                                                                    // 7280
Vector.prototype.reflectAcross = function reflectAcross(n) {                                                           // 7281
    n.normalize().put(n);                                                                                              // 7282
    return _setFromVector(_register, this.sub(this.project(n).mult(2)));                                               // 7283
};                                                                                                                     // 7284
                                                                                                                       // 7285
/**                                                                                                                    // 7286
 * Convert Vector to three-element array.                                                                              // 7287
 *                                                                                                                     // 7288
 * @method get                                                                                                         // 7289
 * @return {array<number>} three-element array                                                                         // 7290
 */                                                                                                                    // 7291
Vector.prototype.get = function get() {                                                                                // 7292
    return [this.x, this.y, this.z];                                                                                   // 7293
};                                                                                                                     // 7294
                                                                                                                       // 7295
Vector.prototype.get1D = function() {                                                                                  // 7296
    return this.x;                                                                                                     // 7297
};                                                                                                                     // 7298
                                                                                                                       // 7299
module.exports = Vector;                                                                                               // 7300
},{}],43:[function(_dereq_,module,exports){                                                                            // 7301
module.exports = {                                                                                                     // 7302
  Matrix: _dereq_('./Matrix'),                                                                                         // 7303
  Quaternion: _dereq_('./Quaternion'),                                                                                 // 7304
  Random: _dereq_('./Random'),                                                                                         // 7305
  Utilities: _dereq_('./Utilities'),                                                                                   // 7306
  Vector: _dereq_('./Vector')                                                                                          // 7307
};                                                                                                                     // 7308
                                                                                                                       // 7309
},{"./Matrix":38,"./Quaternion":39,"./Random":40,"./Utilities":41,"./Vector":42}],44:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7311
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7312
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7313
 *                                                                                                                     // 7314
 * Owner: david@famo.us                                                                                                // 7315
 * @license MPL 2.0                                                                                                    // 7316
 * @copyright Famous Industries, Inc. 2014                                                                             // 7317
 */                                                                                                                    // 7318
                                                                                                                       // 7319
var Transform = _dereq_('../core/Transform');                                                                          // 7320
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7321
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 7322
var Utilities = _dereq_('../math/Utilities');                                                                          // 7323
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 7324
var MouseSync = _dereq_('../inputs/MouseSync');                                                                        // 7325
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 7326
GenericSync.register({'mouse': MouseSync, 'touch': TouchSync});                                                        // 7327
                                                                                                                       // 7328
/**                                                                                                                    // 7329
 * Makes added render nodes responsive to drag beahvior.                                                               // 7330
 *   Emits events 'start', 'update', 'end'.                                                                            // 7331
 * @class Draggable                                                                                                    // 7332
 * @constructor                                                                                                        // 7333
 * @param {Object} [options] options configuration object.                                                             // 7334
 * @param {Number} [options.snapX] grid width for snapping during drag                                                 // 7335
 * @param {Number} [options.snapY] grid height for snapping during drag                                                // 7336
 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag              // 7337
 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag              // 7338
 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion      // 7339
 * @param {Number} [options.projection] User should set to Draggable._direction.x or                                   // 7340
 *    Draggable._direction.y to constrain to one axis.                                                                 // 7341
 *                                                                                                                     // 7342
 */                                                                                                                    // 7343
function Draggable(options) {                                                                                          // 7344
    this.options = Object.create(Draggable.DEFAULT_OPTIONS);                                                           // 7345
    if (options) this.setOptions(options);                                                                             // 7346
                                                                                                                       // 7347
    this._positionState = new Transitionable([0,0]);                                                                   // 7348
    this._differential  = [0,0];                                                                                       // 7349
    this._active = true;                                                                                               // 7350
                                                                                                                       // 7351
    this.sync = new GenericSync(['mouse', 'touch'], {scale : this.options.scale});                                     // 7352
    this.eventOutput = new EventHandler();                                                                             // 7353
    EventHandler.setInputHandler(this,  this.sync);                                                                    // 7354
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 7355
                                                                                                                       // 7356
    _bindEvents.call(this);                                                                                            // 7357
}                                                                                                                      // 7358
                                                                                                                       // 7359
//binary representation of directions for bitwise operations                                                           // 7360
var _direction = {                                                                                                     // 7361
    x : 0x01,         //001                                                                                            // 7362
    y : 0x02          //010                                                                                            // 7363
};                                                                                                                     // 7364
                                                                                                                       // 7365
Draggable.DIRECTION_X = _direction.x;                                                                                  // 7366
Draggable.DIRECTION_Y = _direction.y;                                                                                  // 7367
                                                                                                                       // 7368
var _clamp = Utilities.clamp;                                                                                          // 7369
                                                                                                                       // 7370
Draggable.DEFAULT_OPTIONS = {                                                                                          // 7371
    projection  : _direction.x | _direction.y,                                                                         // 7372
    scale       : 1,                                                                                                   // 7373
    xRange      : null,                                                                                                // 7374
    yRange      : null,                                                                                                // 7375
    snapX       : 0,                                                                                                   // 7376
    snapY       : 0,                                                                                                   // 7377
    transition  : {duration : 0}                                                                                       // 7378
};                                                                                                                     // 7379
                                                                                                                       // 7380
function _mapDifferential(differential) {                                                                              // 7381
    var opts        = this.options;                                                                                    // 7382
    var projection  = opts.projection;                                                                                 // 7383
    var snapX       = opts.snapX;                                                                                      // 7384
    var snapY       = opts.snapY;                                                                                      // 7385
                                                                                                                       // 7386
    //axes                                                                                                             // 7387
    var tx = (projection & _direction.x) ? differential[0] : 0;                                                        // 7388
    var ty = (projection & _direction.y) ? differential[1] : 0;                                                        // 7389
                                                                                                                       // 7390
    //snapping                                                                                                         // 7391
    if (snapX > 0) tx -= tx % snapX;                                                                                   // 7392
    if (snapY > 0) ty -= ty % snapY;                                                                                   // 7393
                                                                                                                       // 7394
    return [tx, ty];                                                                                                   // 7395
}                                                                                                                      // 7396
                                                                                                                       // 7397
function _handleStart() {                                                                                              // 7398
    if (!this._active) return;                                                                                         // 7399
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7400
    this.eventOutput.emit('start', {position : this.getPosition()});                                                   // 7401
}                                                                                                                      // 7402
                                                                                                                       // 7403
function _handleMove(event) {                                                                                          // 7404
    if (!this._active) return;                                                                                         // 7405
                                                                                                                       // 7406
    var options = this.options;                                                                                        // 7407
    this._differential = event.position;                                                                               // 7408
    var newDifferential = _mapDifferential.call(this, this._differential);                                             // 7409
                                                                                                                       // 7410
    //buffer the differential if snapping is set                                                                       // 7411
    this._differential[0] -= newDifferential[0];                                                                       // 7412
    this._differential[1] -= newDifferential[1];                                                                       // 7413
                                                                                                                       // 7414
    var pos = this.getPosition();                                                                                      // 7415
                                                                                                                       // 7416
    //modify position, retain reference                                                                                // 7417
    pos[0] += newDifferential[0];                                                                                      // 7418
    pos[1] += newDifferential[1];                                                                                      // 7419
                                                                                                                       // 7420
    //handle bounding box                                                                                              // 7421
    if (options.xRange){                                                                                               // 7422
        var xRange = [options.xRange[0] + 0.5 * options.snapX, options.xRange[1] - 0.5 * options.snapX];               // 7423
        pos[0] = _clamp(pos[0], xRange);                                                                               // 7424
    }                                                                                                                  // 7425
                                                                                                                       // 7426
    if (options.yRange){                                                                                               // 7427
        var yRange = [options.yRange[0] + 0.5 * options.snapY, options.yRange[1] - 0.5 * options.snapY];               // 7428
        pos[1] = _clamp(pos[1], yRange);                                                                               // 7429
    }                                                                                                                  // 7430
                                                                                                                       // 7431
    this.eventOutput.emit('update', {position : pos});                                                                 // 7432
}                                                                                                                      // 7433
                                                                                                                       // 7434
function _handleEnd() {                                                                                                // 7435
    if (!this._active) return;                                                                                         // 7436
    this.eventOutput.emit('end', {position : this.getPosition()});                                                     // 7437
}                                                                                                                      // 7438
                                                                                                                       // 7439
function _bindEvents() {                                                                                               // 7440
    this.sync.on('start', _handleStart.bind(this));                                                                    // 7441
    this.sync.on('update', _handleMove.bind(this));                                                                    // 7442
    this.sync.on('end', _handleEnd.bind(this));                                                                        // 7443
}                                                                                                                      // 7444
                                                                                                                       // 7445
/**                                                                                                                    // 7446
 * Set internal options, overriding any default options                                                                // 7447
 *                                                                                                                     // 7448
 * @method setOptions                                                                                                  // 7449
 *                                                                                                                     // 7450
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7451
 */                                                                                                                    // 7452
Draggable.prototype.setOptions = function setOptions(options) {                                                        // 7453
    var currentOptions = this.options;                                                                                 // 7454
    if (options.projection !== undefined) {                                                                            // 7455
        var proj = options.projection;                                                                                 // 7456
        this.options.projection = 0;                                                                                   // 7457
        ['x', 'y'].forEach(function(val) {                                                                             // 7458
            if (proj.indexOf(val) !== -1) currentOptions.projection |= _direction[val];                                // 7459
        });                                                                                                            // 7460
    }                                                                                                                  // 7461
    if (options.scale  !== undefined) {                                                                                // 7462
        currentOptions.scale  = options.scale;                                                                         // 7463
        this.sync.setOptions({                                                                                         // 7464
            scale: options.scale                                                                                       // 7465
        });                                                                                                            // 7466
    }                                                                                                                  // 7467
    if (options.xRange !== undefined) currentOptions.xRange = options.xRange;                                          // 7468
    if (options.yRange !== undefined) currentOptions.yRange = options.yRange;                                          // 7469
    if (options.snapX  !== undefined) currentOptions.snapX  = options.snapX;                                           // 7470
    if (options.snapY  !== undefined) currentOptions.snapY  = options.snapY;                                           // 7471
};                                                                                                                     // 7472
                                                                                                                       // 7473
/**                                                                                                                    // 7474
 * Get current delta in position from where this draggable started.                                                    // 7475
 *                                                                                                                     // 7476
 * @method getPosition                                                                                                 // 7477
 *                                                                                                                     // 7478
 * @return {array<number>} [x, y] position delta from start.                                                           // 7479
 */                                                                                                                    // 7480
Draggable.prototype.getPosition = function getPosition() {                                                             // 7481
    return this._positionState.get();                                                                                  // 7482
};                                                                                                                     // 7483
                                                                                                                       // 7484
/**                                                                                                                    // 7485
 * Transition the element to the desired relative position via provided transition.                                    // 7486
 *  For example, calling this with [0,0] will not change the position.                                                 // 7487
 *  Callback will be executed on completion.                                                                           // 7488
 *                                                                                                                     // 7489
 * @method setRelativePosition                                                                                         // 7490
 *                                                                                                                     // 7491
 * @param {array<number>} position end state to which we interpolate                                                   // 7492
 * @param {transition} transition transition object specifying how object moves to new position                        // 7493
 * @param {function} callback zero-argument function to call on observed completion                                    // 7494
 */                                                                                                                    // 7495
Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {               // 7496
    var currPos = this.getPosition();                                                                                  // 7497
    var relativePosition = [currPos[0] + position[0], currPos[1] + position[1]];                                       // 7498
    this.setPosition(relativePosition, transition, callback);                                                          // 7499
};                                                                                                                     // 7500
                                                                                                                       // 7501
/**                                                                                                                    // 7502
 * Transition the element to the desired absolute position via provided transition.                                    // 7503
 *  Callback will be executed on completion.                                                                           // 7504
 *                                                                                                                     // 7505
 * @method setPosition                                                                                                 // 7506
 *                                                                                                                     // 7507
 * @param {array<number>} position end state to which we interpolate                                                   // 7508
 * @param {transition} transition transition object specifying how object moves to new position                        // 7509
 * @param {function} callback zero-argument function to call on observed completion                                    // 7510
 */                                                                                                                    // 7511
Draggable.prototype.setPosition = function setPosition(position, transition, callback) {                               // 7512
    if (this._positionState.isActive()) this._positionState.halt();                                                    // 7513
    this._positionState.set(position, transition, callback);                                                           // 7514
};                                                                                                                     // 7515
                                                                                                                       // 7516
/**                                                                                                                    // 7517
 * Set this draggable to respond to user input.                                                                        // 7518
 *                                                                                                                     // 7519
 * @method activate                                                                                                    // 7520
 *                                                                                                                     // 7521
 */                                                                                                                    // 7522
Draggable.prototype.activate = function activate() {                                                                   // 7523
    this._active = true;                                                                                               // 7524
};                                                                                                                     // 7525
                                                                                                                       // 7526
/**                                                                                                                    // 7527
 * Set this draggable to ignore user input.                                                                            // 7528
 *                                                                                                                     // 7529
 * @method deactivate                                                                                                  // 7530
 *                                                                                                                     // 7531
 */                                                                                                                    // 7532
Draggable.prototype.deactivate = function deactivate() {                                                               // 7533
    this._active = false;                                                                                              // 7534
};                                                                                                                     // 7535
                                                                                                                       // 7536
/**                                                                                                                    // 7537
 * Switch the input response stage between active and inactive.                                                        // 7538
 *                                                                                                                     // 7539
 * @method toggle                                                                                                      // 7540
 *                                                                                                                     // 7541
 */                                                                                                                    // 7542
Draggable.prototype.toggle = function toggle() {                                                                       // 7543
    this._active = !this._active;                                                                                      // 7544
};                                                                                                                     // 7545
                                                                                                                       // 7546
/**                                                                                                                    // 7547
 * Return render spec for this Modifier, applying to the provided                                                      // 7548
 *    target component.  This is similar to render() for Surfaces.                                                     // 7549
 *                                                                                                                     // 7550
 * @private                                                                                                            // 7551
 * @method modify                                                                                                      // 7552
 *                                                                                                                     // 7553
 * @param {Object} target (already rendered) render spec to                                                            // 7554
 *    which to apply the transform.                                                                                    // 7555
 * @return {Object} render spec for this Modifier, including the                                                       // 7556
 *    provided target                                                                                                  // 7557
 */                                                                                                                    // 7558
Draggable.prototype.modify = function modify(target) {                                                                 // 7559
    var pos = this.getPosition();                                                                                      // 7560
    return {                                                                                                           // 7561
        transform: Transform.translate(pos[0], pos[1]),                                                                // 7562
        target: target                                                                                                 // 7563
    };                                                                                                                 // 7564
};                                                                                                                     // 7565
                                                                                                                       // 7566
module.exports = Draggable;                                                                                            // 7567
},{"../core/EventHandler":7,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":34,"../math/Utilities":41,"../transitions/Transitionable":89}],45:[function(_dereq_,module,exports){
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7569
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 7570
                                                                                                                       // 7571
/**                                                                                                                    // 7572
 * Modifier that allows you to fade the opacity of affected renderables in and out.                                    // 7573
 * @class Fader                                                                                                        // 7574
 * @constructor                                                                                                        // 7575
 * @param {Object} [options] options configuration object.                                                             // 7576
 * @param {Boolean} [options.cull=false] Stops returning affected renderables up the tree when they're fully faded when true.
 * @param {Transition} [options.transition=true] The main transition for showing and hiding.                           // 7578
 * @param {Transition} [options.pulseInTransition=true] Controls the transition to a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7580
 * @param {Transition} [options.pulseOutTransition=true]Controls the transition back from a pulsed state when the Fader instance's pulse
 * method is called.                                                                                                   // 7582
 *                                                                                                                     // 7583
 */                                                                                                                    // 7584
function Fader(options, startState) {                                                                                  // 7585
    this.options = Object.create(Fader.DEFAULT_OPTIONS);                                                               // 7586
    this._optionsManager = new OptionsManager(this.options);                                                           // 7587
                                                                                                                       // 7588
    if (options) this.setOptions(options);                                                                             // 7589
                                                                                                                       // 7590
    if (!startState) startState = 0;                                                                                   // 7591
    this.transitionHelper = new Transitionable(startState);                                                            // 7592
}                                                                                                                      // 7593
                                                                                                                       // 7594
Fader.DEFAULT_OPTIONS = {                                                                                              // 7595
    cull: false,                                                                                                       // 7596
    transition: true,                                                                                                  // 7597
    pulseInTransition: true,                                                                                           // 7598
    pulseOutTransition: true                                                                                           // 7599
};                                                                                                                     // 7600
                                                                                                                       // 7601
/**                                                                                                                    // 7602
 * Set internal options, overriding any default options                                                                // 7603
 *                                                                                                                     // 7604
 * @method setOptions                                                                                                  // 7605
 *                                                                                                                     // 7606
 * @param {Object} [options] overrides of default options.  See constructor.                                           // 7607
 */                                                                                                                    // 7608
Fader.prototype.setOptions = function setOptions(options) {                                                            // 7609
    return this._optionsManager.setOptions(options);                                                                   // 7610
};                                                                                                                     // 7611
                                                                                                                       // 7612
/**                                                                                                                    // 7613
 * Fully displays the Fader instance's associated renderables.                                                         // 7614
 *                                                                                                                     // 7615
 * @method show                                                                                                        // 7616
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7617
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully shown state.            // 7618
 */                                                                                                                    // 7619
Fader.prototype.show = function show(transition, callback) {                                                           // 7620
    transition = transition || this.options.transition;                                                                // 7621
    this.set(1, transition, callback);                                                                                 // 7622
};                                                                                                                     // 7623
                                                                                                                       // 7624
/**                                                                                                                    // 7625
 * Fully fades the Fader instance's associated renderables.                                                            // 7626
 *                                                                                                                     // 7627
 * @method hide                                                                                                        // 7628
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7629
 * @param {Function} [callback] A callback that executes once you've transitioned to the fully faded state.            // 7630
 */                                                                                                                    // 7631
Fader.prototype.hide = function hide(transition, callback) {                                                           // 7632
    transition = transition || this.options.transition;                                                                // 7633
    this.set(0, transition, callback);                                                                                 // 7634
};                                                                                                                     // 7635
                                                                                                                       // 7636
/**                                                                                                                    // 7637
 * Manually sets the opacity state of the fader to the passed-in one. Executes with an optional                        // 7638
 * transition and callback.                                                                                            // 7639
 *                                                                                                                     // 7640
 * @method set                                                                                                         // 7641
 * @param {Number} state A number from zero to one: the amount of opacity you want to set to.                          // 7642
 * @param {Transition} [transition] The transition that coordinates setting to the new state.                          // 7643
 * @param {Function} [callback] A callback that executes once you've finished executing the pulse.                     // 7644
 */                                                                                                                    // 7645
Fader.prototype.set = function set(state, transition, callback) {                                                      // 7646
    this.halt();                                                                                                       // 7647
    this.transitionHelper.set(state, transition, callback);                                                            // 7648
};                                                                                                                     // 7649
                                                                                                                       // 7650
/**                                                                                                                    // 7651
 * Halt the transition                                                                                                 // 7652
 *                                                                                                                     // 7653
 * @method halt                                                                                                        // 7654
 */                                                                                                                    // 7655
Fader.prototype.halt = function halt() {                                                                               // 7656
    this.transitionHelper.halt();                                                                                      // 7657
};                                                                                                                     // 7658
                                                                                                                       // 7659
/**                                                                                                                    // 7660
 * Tells you if your Fader instance is above its visibility threshold.                                                 // 7661
 *                                                                                                                     // 7662
 * @method isVisible                                                                                                   // 7663
 * @return {Boolean} Whether or not your Fader instance is visible.                                                    // 7664
 */                                                                                                                    // 7665
Fader.prototype.isVisible = function isVisible() {                                                                     // 7666
    return (this.transitionHelper.get() > 0);                                                                          // 7667
};                                                                                                                     // 7668
                                                                                                                       // 7669
/**                                                                                                                    // 7670
 * Return render spec for this Modifier, applying to the provided                                                      // 7671
 *    target component.  This is similar to render() for Surfaces.                                                     // 7672
 *                                                                                                                     // 7673
 * @private                                                                                                            // 7674
 * @method modify                                                                                                      // 7675
 *                                                                                                                     // 7676
 * @param {Object} target (already rendered) render spec to                                                            // 7677
 *    which to apply the transform.                                                                                    // 7678
 * @return {Object} render spec for this Modifier, including the                                                       // 7679
 *    provided target                                                                                                  // 7680
 */                                                                                                                    // 7681
Fader.prototype.modify = function modify(target) {                                                                     // 7682
    var currOpacity = this.transitionHelper.get();                                                                     // 7683
    if (this.options.cull && !currOpacity) return undefined;                                                           // 7684
    else return {opacity: currOpacity, target: target};                                                                // 7685
};                                                                                                                     // 7686
                                                                                                                       // 7687
module.exports = Fader;                                                                                                // 7688
},{"../core/OptionsManager":10,"../transitions/Transitionable":89}],46:[function(_dereq_,module,exports){              // 7689
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7690
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7691
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7692
 *                                                                                                                     // 7693
 * Owner: david@famo.us                                                                                                // 7694
 * @license MPL 2.0                                                                                                    // 7695
 * @copyright Famous Industries, Inc. 2014                                                                             // 7696
 */                                                                                                                    // 7697
                                                                                                                       // 7698
                                                                                                                       // 7699
                                                                                                                       // 7700
                                                                                                                       // 7701
/**                                                                                                                    // 7702
 * A class to add and remove a chain of modifiers                                                                      // 7703
 *   at a single point in the render tree                                                                              // 7704
 *                                                                                                                     // 7705
 * @class ModifierChain                                                                                                // 7706
 * @constructor                                                                                                        // 7707
 */                                                                                                                    // 7708
function ModifierChain() {                                                                                             // 7709
    this._chain = [];                                                                                                  // 7710
    if (arguments.length) this.addModifier.apply(this, arguments);                                                     // 7711
}                                                                                                                      // 7712
                                                                                                                       // 7713
/**                                                                                                                    // 7714
 * Add a modifier, or comma separated modifiers, to the modifier chain.                                                // 7715
 *                                                                                                                     // 7716
 * @method addModifier                                                                                                 // 7717
 *                                                                                                                     // 7718
 * @param {...Modifier*} varargs args list of Modifiers                                                                // 7719
 */                                                                                                                    // 7720
ModifierChain.prototype.addModifier = function addModifier(varargs) {                                                  // 7721
    Array.prototype.push.apply(this._chain, arguments);                                                                // 7722
};                                                                                                                     // 7723
                                                                                                                       // 7724
/**                                                                                                                    // 7725
 * Remove a modifier from the modifier chain.                                                                          // 7726
 *                                                                                                                     // 7727
 * @method removeModifier                                                                                              // 7728
 *                                                                                                                     // 7729
 * @param {Modifier} modifier                                                                                          // 7730
 */                                                                                                                    // 7731
ModifierChain.prototype.removeModifier = function removeModifier(modifier) {                                           // 7732
    var index = this._chain.indexOf(modifier);                                                                         // 7733
    if (index < 0) return;                                                                                             // 7734
    this._chain.splice(index, 1);                                                                                      // 7735
};                                                                                                                     // 7736
                                                                                                                       // 7737
/**                                                                                                                    // 7738
 * Return render spec for this Modifier, applying to the provided                                                      // 7739
 *    target component.  This is similar to render() for Surfaces.                                                     // 7740
 *                                                                                                                     // 7741
 * @private                                                                                                            // 7742
 * @method modify                                                                                                      // 7743
 *                                                                                                                     // 7744
 * @param {Object} input (already rendered) render spec to                                                             // 7745
 *    which to apply the transform.                                                                                    // 7746
 * @return {Object} render spec for this Modifier, including the                                                       // 7747
 *    provided target                                                                                                  // 7748
 */                                                                                                                    // 7749
ModifierChain.prototype.modify = function modify(input) {                                                              // 7750
    var chain  = this._chain;                                                                                          // 7751
    var result = input;                                                                                                // 7752
    for (var i = 0; i < chain.length; i++) {                                                                           // 7753
        result = chain[i].modify(result);                                                                              // 7754
    }                                                                                                                  // 7755
    return result;                                                                                                     // 7756
};                                                                                                                     // 7757
                                                                                                                       // 7758
module.exports = ModifierChain;                                                                                        // 7759
},{}],47:[function(_dereq_,module,exports){                                                                            // 7760
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 7761
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 7762
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 7763
 *                                                                                                                     // 7764
 * Owner: mark@famo.us                                                                                                 // 7765
 * @license MPL 2.0                                                                                                    // 7766
 * @copyright Famous Industries, Inc. 2014                                                                             // 7767
 */                                                                                                                    // 7768
                                                                                                                       // 7769
var Modifier = _dereq_('../core/Modifier');                                                                            // 7770
var Transform = _dereq_('../core/Transform');                                                                          // 7771
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 7772
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 7773
                                                                                                                       // 7774
/**                                                                                                                    // 7775
 *  A collection of visual changes to be                                                                               // 7776
 *    applied to another renderable component, strongly coupled with the state that defines                            // 7777
 *    those changes. This collection includes a                                                                        // 7778
 *    transform matrix, an opacity constant, a size, an origin specifier, and an alignment specifier.                  // 7779
 *    StateModifier objects can be added to any RenderNode or object                                                   // 7780
 *    capable of displaying renderables.  The StateModifier's children and descendants                                 // 7781
 *    are transformed by the amounts specified in the modifier's properties.                                           // 7782
 *                                                                                                                     // 7783
 * @class StateModifier                                                                                                // 7784
 * @constructor                                                                                                        // 7785
 * @param {Object} [options] overrides of default options                                                              // 7786
 * @param {Transform} [options.transform] affine transformation matrix                                                 // 7787
 * @param {Number} [options.opacity]                                                                                   // 7788
 * @param {Array.Number} [options.origin] origin adjustment                                                            // 7789
 * @param {Array.Number} [options.align] align adjustment                                                              // 7790
 * @param {Array.Number} [options.size] size to apply to descendants                                                   // 7791
 * @param {Array.Number} [options.propportions] proportions to apply to descendants                                    // 7792
 */                                                                                                                    // 7793
function StateModifier(options) {                                                                                      // 7794
    this._transformState = new TransitionableTransform(Transform.identity);                                            // 7795
    this._opacityState = new Transitionable(1);                                                                        // 7796
    this._originState = new Transitionable([0, 0]);                                                                    // 7797
    this._alignState = new Transitionable([0, 0]);                                                                     // 7798
    this._sizeState = new Transitionable([0, 0]);                                                                      // 7799
    this._proportionsState = new Transitionable([0, 0]);                                                               // 7800
                                                                                                                       // 7801
    this._modifier = new Modifier({                                                                                    // 7802
        transform: this._transformState,                                                                               // 7803
        opacity: this._opacityState,                                                                                   // 7804
        origin: null,                                                                                                  // 7805
        align: null,                                                                                                   // 7806
        size: null,                                                                                                    // 7807
        proportions: null                                                                                              // 7808
    });                                                                                                                // 7809
                                                                                                                       // 7810
    this._hasOrigin = false;                                                                                           // 7811
    this._hasAlign = false;                                                                                            // 7812
    this._hasSize = false;                                                                                             // 7813
    this._hasProportions = false;                                                                                      // 7814
                                                                                                                       // 7815
    if (options) {                                                                                                     // 7816
        if (options.transform) this.setTransform(options.transform);                                                   // 7817
        if (options.opacity !== undefined) this.setOpacity(options.opacity);                                           // 7818
        if (options.origin) this.setOrigin(options.origin);                                                            // 7819
        if (options.align) this.setAlign(options.align);                                                               // 7820
        if (options.size) this.setSize(options.size);                                                                  // 7821
        if (options.proportions) this.setProportions(options.proportions);                                             // 7822
    }                                                                                                                  // 7823
}                                                                                                                      // 7824
                                                                                                                       // 7825
/**                                                                                                                    // 7826
 * Set the transform matrix of this modifier, either statically or                                                     // 7827
 *   through a provided Transitionable.                                                                                // 7828
 *                                                                                                                     // 7829
 * @method setTransform                                                                                                // 7830
 *                                                                                                                     // 7831
 * @param {Transform} transform Transform to transition to.                                                            // 7832
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7833
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7834
 *    instantaneous.                                                                                                   // 7835
 * @param {Function} [callback] callback to call after transition completes                                            // 7836
 * @return {StateModifier} this                                                                                        // 7837
 */                                                                                                                    // 7838
StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {                        // 7839
    this._transformState.set(transform, transition, callback);                                                         // 7840
    return this;                                                                                                       // 7841
};                                                                                                                     // 7842
                                                                                                                       // 7843
/**                                                                                                                    // 7844
 * Set the opacity of this modifier, either statically or                                                              // 7845
 *   through a provided Transitionable.                                                                                // 7846
 *                                                                                                                     // 7847
 * @method setOpacity                                                                                                  // 7848
 *                                                                                                                     // 7849
 * @param {Number} opacity Opacity value to transition to.                                                             // 7850
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7851
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7852
 *    instantaneous.                                                                                                   // 7853
 * @param {Function} callback callback to call after transition completes                                              // 7854
 * @return {StateModifier} this                                                                                        // 7855
 */                                                                                                                    // 7856
StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {                              // 7857
    this._opacityState.set(opacity, transition, callback);                                                             // 7858
    return this;                                                                                                       // 7859
};                                                                                                                     // 7860
                                                                                                                       // 7861
/**                                                                                                                    // 7862
 * Set the origin of this modifier, either statically or                                                               // 7863
 *   through a provided Transitionable.                                                                                // 7864
 *                                                                                                                     // 7865
 * @method setOrigin                                                                                                   // 7866
 *                                                                                                                     // 7867
 * @param {Array.Number} origin two element array with values between 0 and 1.                                         // 7868
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7869
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7870
 *    instantaneous.                                                                                                   // 7871
 * @param {Function} callback callback to call after transition completes                                              // 7872
 * @return {StateModifier} this                                                                                        // 7873
 */                                                                                                                    // 7874
StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {                                 // 7875
    if (origin === null) {                                                                                             // 7876
        if (this._hasOrigin) {                                                                                         // 7877
            this._modifier.originFrom(null);                                                                           // 7878
            this._hasOrigin = false;                                                                                   // 7879
        }                                                                                                              // 7880
        return this;                                                                                                   // 7881
    }                                                                                                                  // 7882
    else if (!this._hasOrigin) {                                                                                       // 7883
        this._hasOrigin = true;                                                                                        // 7884
        this._modifier.originFrom(this._originState);                                                                  // 7885
    }                                                                                                                  // 7886
    this._originState.set(origin, transition, callback);                                                               // 7887
    return this;                                                                                                       // 7888
};                                                                                                                     // 7889
                                                                                                                       // 7890
/**                                                                                                                    // 7891
 * Set the alignment of this modifier, either statically or                                                            // 7892
 *   through a provided Transitionable.                                                                                // 7893
 *                                                                                                                     // 7894
 * @method setAlign                                                                                                    // 7895
 *                                                                                                                     // 7896
 * @param {Array.Number} align two element array with values between 0 and 1.                                          // 7897
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7898
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7899
 *    instantaneous.                                                                                                   // 7900
 * @param {Function} callback callback to call after transition completes                                              // 7901
 * @return {StateModifier} this                                                                                        // 7902
 */                                                                                                                    // 7903
StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {                                   // 7904
    if (align === null) {                                                                                              // 7905
        if (this._hasAlign) {                                                                                          // 7906
            this._modifier.alignFrom(null);                                                                            // 7907
            this._hasAlign = false;                                                                                    // 7908
        }                                                                                                              // 7909
        return this;                                                                                                   // 7910
    }                                                                                                                  // 7911
    else if (!this._hasAlign) {                                                                                        // 7912
        this._hasAlign = true;                                                                                         // 7913
        this._modifier.alignFrom(this._alignState);                                                                    // 7914
    }                                                                                                                  // 7915
    this._alignState.set(align, transition, callback);                                                                 // 7916
    return this;                                                                                                       // 7917
};                                                                                                                     // 7918
                                                                                                                       // 7919
/**                                                                                                                    // 7920
 * Set the size of this modifier, either statically or                                                                 // 7921
 *   through a provided Transitionable.                                                                                // 7922
 *                                                                                                                     // 7923
 * @method setSize                                                                                                     // 7924
 *                                                                                                                     // 7925
 * @param {Array.Number} size two element array of [width, height]                                                     // 7926
 * @param {Transitionable} transition object of type {duration: number, curve:                                         // 7927
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 7928
 *    instantaneous.                                                                                                   // 7929
 * @param {Function} callback callback to call after transition completes                                              // 7930
 * @return {StateModifier} this                                                                                        // 7931
 */                                                                                                                    // 7932
StateModifier.prototype.setSize = function setSize(size, transition, callback) {                                       // 7933
    if (size === null) {                                                                                               // 7934
        if (this._hasSize) {                                                                                           // 7935
            this._modifier.sizeFrom(null);                                                                             // 7936
            this._hasSize = false;                                                                                     // 7937
        }                                                                                                              // 7938
        return this;                                                                                                   // 7939
    }                                                                                                                  // 7940
    else if (!this._hasSize) {                                                                                         // 7941
        this._hasSize = true;                                                                                          // 7942
        this._modifier.sizeFrom(this._sizeState);                                                                      // 7943
    }                                                                                                                  // 7944
    this._sizeState.set(size, transition, callback);                                                                   // 7945
    return this;                                                                                                       // 7946
};                                                                                                                     // 7947
                                                                                                                       // 7948
/**                                                                                                                    // 7949
 * Set the proportions of this modifier, either statically or                                                          // 7950
 *   through a provided Transitionable.                                                                                // 7951
 *                                                                                                                     // 7952
 * @method setProportions                                                                                              // 7953
 *                                                                                                                     // 7954
 * @param {Array.Number} proportions two element array with values between 0 and 1.                                    // 7955
 * @param {Transitionable} transition Valid transitionable object                                                      // 7956
 * @param {Function} callback callback to call after transition completes                                              // 7957
 * @return {StateModifier} this                                                                                        // 7958
 */                                                                                                                    // 7959
StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {                         // 7960
    if (proportions === null) {                                                                                        // 7961
        if (this._hasProportions) {                                                                                    // 7962
            this._modifier.proportionsFrom(null);                                                                      // 7963
            this._hasProportions = false;                                                                              // 7964
        }                                                                                                              // 7965
        return this;                                                                                                   // 7966
    }                                                                                                                  // 7967
    else if (!this._hasProportions) {                                                                                  // 7968
        this._hasProportions = true;                                                                                   // 7969
        this._modifier.proportionsFrom(this._proportionsState);                                                        // 7970
    }                                                                                                                  // 7971
    this._proportionsState.set(proportions, transition, callback);                                                     // 7972
    return this;                                                                                                       // 7973
};                                                                                                                     // 7974
                                                                                                                       // 7975
/**                                                                                                                    // 7976
 * Stop the transition.                                                                                                // 7977
 *                                                                                                                     // 7978
 * @method halt                                                                                                        // 7979
 */                                                                                                                    // 7980
StateModifier.prototype.halt = function halt() {                                                                       // 7981
    this._transformState.halt();                                                                                       // 7982
    this._opacityState.halt();                                                                                         // 7983
    this._originState.halt();                                                                                          // 7984
    this._alignState.halt();                                                                                           // 7985
    this._sizeState.halt();                                                                                            // 7986
    this._proportionsState.halt();                                                                                     // 7987
};                                                                                                                     // 7988
                                                                                                                       // 7989
/**                                                                                                                    // 7990
 * Get the current state of the transform matrix component.                                                            // 7991
 *                                                                                                                     // 7992
 * @method getTransform                                                                                                // 7993
 * @return {Object} transform provider object                                                                          // 7994
 */                                                                                                                    // 7995
StateModifier.prototype.getTransform = function getTransform() {                                                       // 7996
    return this._transformState.get();                                                                                 // 7997
};                                                                                                                     // 7998
                                                                                                                       // 7999
/**                                                                                                                    // 8000
 * Get the destination state of the transform component.                                                               // 8001
 *                                                                                                                     // 8002
 * @method getFinalTransform                                                                                           // 8003
 * @return {Transform} transform matrix                                                                                // 8004
 */                                                                                                                    // 8005
StateModifier.prototype.getFinalTransform = function getFinalTransform() {                                             // 8006
    return this._transformState.getFinal();                                                                            // 8007
};                                                                                                                     // 8008
                                                                                                                       // 8009
/**                                                                                                                    // 8010
 * Get the current state of the opacity component.                                                                     // 8011
 *                                                                                                                     // 8012
 * @method getOpacity                                                                                                  // 8013
 * @return {Object} opacity provider object                                                                            // 8014
 */                                                                                                                    // 8015
StateModifier.prototype.getOpacity = function getOpacity() {                                                           // 8016
    return this._opacityState.get();                                                                                   // 8017
};                                                                                                                     // 8018
                                                                                                                       // 8019
/**                                                                                                                    // 8020
 * Get the current state of the origin component.                                                                      // 8021
 *                                                                                                                     // 8022
 * @method getOrigin                                                                                                   // 8023
 * @return {Object} origin provider object                                                                             // 8024
 */                                                                                                                    // 8025
StateModifier.prototype.getOrigin = function getOrigin() {                                                             // 8026
    return this._hasOrigin ? this._originState.get() : null;                                                           // 8027
};                                                                                                                     // 8028
                                                                                                                       // 8029
/**                                                                                                                    // 8030
 * Get the current state of the align component.                                                                       // 8031
 *                                                                                                                     // 8032
 * @method getAlign                                                                                                    // 8033
 * @return {Object} align provider object                                                                              // 8034
 */                                                                                                                    // 8035
StateModifier.prototype.getAlign = function getAlign() {                                                               // 8036
    return this._hasAlign ? this._alignState.get() : null;                                                             // 8037
};                                                                                                                     // 8038
                                                                                                                       // 8039
/**                                                                                                                    // 8040
 * Get the current state of the size component.                                                                        // 8041
 *                                                                                                                     // 8042
 * @method getSize                                                                                                     // 8043
 * @return {Object} size provider object                                                                               // 8044
 */                                                                                                                    // 8045
StateModifier.prototype.getSize = function getSize() {                                                                 // 8046
    return this._hasSize ? this._sizeState.get() : null;                                                               // 8047
};                                                                                                                     // 8048
                                                                                                                       // 8049
/**                                                                                                                    // 8050
 * Get the current state of the propportions component.                                                                // 8051
 *                                                                                                                     // 8052
 * @method getProportions                                                                                              // 8053
 * @return {Object} size provider object                                                                               // 8054
 */                                                                                                                    // 8055
StateModifier.prototype.getProportions = function getProportions() {                                                   // 8056
    return this._hasProportions ? this._proportionsState.get() : null;                                                 // 8057
};                                                                                                                     // 8058
                                                                                                                       // 8059
/**                                                                                                                    // 8060
 * Return render spec for this StateModifier, applying to the provided                                                 // 8061
 *    target component.  This is similar to render() for Surfaces.                                                     // 8062
 *                                                                                                                     // 8063
 * @private                                                                                                            // 8064
 * @method modify                                                                                                      // 8065
 *                                                                                                                     // 8066
 * @param {Object} target (already rendered) render spec to                                                            // 8067
 *    which to apply the transform.                                                                                    // 8068
 * @return {Object} render spec for this StateModifier, including the                                                  // 8069
 *    provided target                                                                                                  // 8070
 */                                                                                                                    // 8071
StateModifier.prototype.modify = function modify(target) {                                                             // 8072
    return this._modifier.modify(target);                                                                              // 8073
};                                                                                                                     // 8074
                                                                                                                       // 8075
module.exports = StateModifier;                                                                                        // 8076
},{"../core/Modifier":9,"../core/Transform":15,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90}],48:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 8078
  Draggable: _dereq_('./Draggable'),                                                                                   // 8079
  Fader: _dereq_('./Fader'),                                                                                           // 8080
  ModifierChain: _dereq_('./ModifierChain'),                                                                           // 8081
  StateModifier: _dereq_('./StateModifier')                                                                            // 8082
};                                                                                                                     // 8083
                                                                                                                       // 8084
},{"./Draggable":44,"./Fader":45,"./ModifierChain":46,"./StateModifier":47}],49:[function(_dereq_,module,exports){     // 8085
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8086
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8087
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8088
 *                                                                                                                     // 8089
 * @license MPL 2.0                                                                                                    // 8090
 * @copyright Famous Industries, Inc. 2014                                                                             // 8091
 */                                                                                                                    // 8092
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 8093
                                                                                                                       // 8094
/**                                                                                                                    // 8095
 * The Physics Engine is responsible for mediating bodies with their                                                   // 8096
 *   interaction with forces and constraints (agents). Specifically, it                                                // 8097
 *   is responsible for:                                                                                               // 8098
 *                                                                                                                     // 8099
 *   - adding and removing bodies                                                                                      // 8100
 *   - updating a body's state over time                                                                               // 8101
 *   - attaching and detaching agents                                                                                  // 8102
 *   - sleeping upon equillibrium and waking upon excitation                                                           // 8103
 *                                                                                                                     // 8104
 * @class PhysicsEngine                                                                                                // 8105
 * @constructor                                                                                                        // 8106
 * @param options {Object} options                                                                                     // 8107
 */                                                                                                                    // 8108
function PhysicsEngine(options) {                                                                                      // 8109
    this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);                                                       // 8110
    if (options) this.setOptions(options);                                                                             // 8111
                                                                                                                       // 8112
    this._particles      = [];   //list of managed particles                                                           // 8113
    this._bodies         = [];   //list of managed bodies                                                              // 8114
    this._agentData      = {};   //hash of managed agent data                                                          // 8115
    this._forces         = [];   //list of Ids of agents that are forces                                               // 8116
    this._constraints    = [];   //list of Ids of agents that are constraints                                          // 8117
                                                                                                                       // 8118
    this._buffer         = 0.0;                                                                                        // 8119
    this._prevTime       = now();                                                                                      // 8120
    this._isSleeping     = false;                                                                                      // 8121
    this._eventHandler   = null;                                                                                       // 8122
    this._currAgentId    = 0;                                                                                          // 8123
    this._hasBodies      = false;                                                                                      // 8124
    this._eventHandler   = null;                                                                                       // 8125
}                                                                                                                      // 8126
                                                                                                                       // 8127
/** const */                                                                                                           // 8128
var TIMESTEP = 17;                                                                                                     // 8129
var MIN_TIME_STEP = 1000 / 120;                                                                                        // 8130
var MAX_TIME_STEP = 17;                                                                                                // 8131
                                                                                                                       // 8132
var now = Date.now;                                                                                                    // 8133
                                                                                                                       // 8134
// Catalogue of outputted events                                                                                       // 8135
var _events = {                                                                                                        // 8136
    start : 'start',                                                                                                   // 8137
    update : 'update',                                                                                                 // 8138
    end : 'end'                                                                                                        // 8139
};                                                                                                                     // 8140
                                                                                                                       // 8141
/**                                                                                                                    // 8142
 * @property PhysicsEngine.DEFAULT_OPTIONS                                                                             // 8143
 * @type Object                                                                                                        // 8144
 * @protected                                                                                                          // 8145
 * @static                                                                                                             // 8146
 */                                                                                                                    // 8147
PhysicsEngine.DEFAULT_OPTIONS = {                                                                                      // 8148
                                                                                                                       // 8149
    /**                                                                                                                // 8150
     * The number of iterations the engine takes to resolve constraints                                                // 8151
     * @attribute constraintSteps                                                                                      // 8152
     * @type Number                                                                                                    // 8153
     */                                                                                                                // 8154
    constraintSteps : 1,                                                                                               // 8155
                                                                                                                       // 8156
    /**                                                                                                                // 8157
     * The energy threshold required for the Physics Engine to update                                                  // 8158
     * @attribute sleepTolerance                                                                                       // 8159
     * @type Number                                                                                                    // 8160
     */                                                                                                                // 8161
    sleepTolerance : 1e-7,                                                                                             // 8162
                                                                                                                       // 8163
    /**                                                                                                                // 8164
     * The maximum velocity magnitude of a physics body                                                                // 8165
     *      Range : [0, Infinity]                                                                                      // 8166
     * @attribute velocityCap                                                                                          // 8167
     * @type Number                                                                                                    // 8168
     */                                                                                                                // 8169
    velocityCap : undefined,                                                                                           // 8170
                                                                                                                       // 8171
    /**                                                                                                                // 8172
     * The maximum angular velocity magnitude of a physics body                                                        // 8173
     *      Range : [0, Infinity]                                                                                      // 8174
     * @attribute angularVelocityCap                                                                                   // 8175
     * @type Number                                                                                                    // 8176
     */                                                                                                                // 8177
    angularVelocityCap : undefined                                                                                     // 8178
};                                                                                                                     // 8179
                                                                                                                       // 8180
/**                                                                                                                    // 8181
 * Options setter                                                                                                      // 8182
 *                                                                                                                     // 8183
 * @method setOptions                                                                                                  // 8184
 * @param opts {Object}                                                                                                // 8185
 */                                                                                                                    // 8186
PhysicsEngine.prototype.setOptions = function setOptions(opts) {                                                       // 8187
    for (var key in opts) if (this.options[key]) this.options[key] = opts[key];                                        // 8188
};                                                                                                                     // 8189
                                                                                                                       // 8190
/**                                                                                                                    // 8191
 * Method to add a physics body to the engine. Necessary to update the                                                 // 8192
 *   body over time.                                                                                                   // 8193
 *                                                                                                                     // 8194
 * @method addBody                                                                                                     // 8195
 * @param body {Body}                                                                                                  // 8196
 * @return body {Body}                                                                                                 // 8197
 */                                                                                                                    // 8198
PhysicsEngine.prototype.addBody = function addBody(body) {                                                             // 8199
    body._engine = this;                                                                                               // 8200
    if (body.isBody) {                                                                                                 // 8201
        this._bodies.push(body);                                                                                       // 8202
        this._hasBodies = true;                                                                                        // 8203
    }                                                                                                                  // 8204
    else this._particles.push(body);                                                                                   // 8205
    body.on('start', this.wake.bind(this));                                                                            // 8206
    return body;                                                                                                       // 8207
};                                                                                                                     // 8208
                                                                                                                       // 8209
/**                                                                                                                    // 8210
 * Remove a body from the engine. Detaches body from all forces and                                                    // 8211
 *   constraints.                                                                                                      // 8212
 *                                                                                                                     // 8213
 * TODO: Fix for in loop                                                                                               // 8214
 *                                                                                                                     // 8215
 * @method removeBody                                                                                                  // 8216
 * @param body {Body}                                                                                                  // 8217
 */                                                                                                                    // 8218
PhysicsEngine.prototype.removeBody = function removeBody(body) {                                                       // 8219
    var array = (body.isBody) ? this._bodies : this._particles;                                                        // 8220
    var index = array.indexOf(body);                                                                                   // 8221
    if (index > -1) {                                                                                                  // 8222
        for (var agentKey in this._agentData) {                                                                        // 8223
            if (this._agentData.hasOwnProperty(agentKey)) {                                                            // 8224
                this.detachFrom(this._agentData[agentKey].id, body);                                                   // 8225
            }                                                                                                          // 8226
        }                                                                                                              // 8227
        array.splice(index,1);                                                                                         // 8228
    }                                                                                                                  // 8229
    if (this.getBodies().length === 0) this._hasBodies = false;                                                        // 8230
};                                                                                                                     // 8231
                                                                                                                       // 8232
function _mapAgentArray(agent) {                                                                                       // 8233
    if (agent.applyForce)      return this._forces;                                                                    // 8234
    if (agent.applyConstraint) return this._constraints;                                                               // 8235
}                                                                                                                      // 8236
                                                                                                                       // 8237
function _attachOne(agent, targets, source) {                                                                          // 8238
    if (targets === undefined) targets = this.getParticlesAndBodies();                                                 // 8239
    if (!(targets instanceof Array)) targets = [targets];                                                              // 8240
                                                                                                                       // 8241
    agent.on('change', this.wake.bind(this));                                                                          // 8242
                                                                                                                       // 8243
    this._agentData[this._currAgentId] = {                                                                             // 8244
        agent   : agent,                                                                                               // 8245
        id      : this._currAgentId,                                                                                   // 8246
        targets : targets,                                                                                             // 8247
        source  : source                                                                                               // 8248
    };                                                                                                                 // 8249
                                                                                                                       // 8250
    _mapAgentArray.call(this, agent).push(this._currAgentId);                                                          // 8251
    return this._currAgentId++;                                                                                        // 8252
}                                                                                                                      // 8253
                                                                                                                       // 8254
/**                                                                                                                    // 8255
 * Attaches a force or constraint to a Body. Returns an AgentId of the                                                 // 8256
 *   attached agent which can be used to detach the agent.                                                             // 8257
 *                                                                                                                     // 8258
 * @method attach                                                                                                      // 8259
 * @param agents {Agent|Array.Agent} A force, constraint, or array of them.                                            // 8260
 * @param [targets=All] {Body|Array.Body} The Body or Bodies affected by the agent                                     // 8261
 * @param [source] {Body} The source of the agent                                                                      // 8262
 * @return AgentId {Number}                                                                                            // 8263
 */                                                                                                                    // 8264
PhysicsEngine.prototype.attach = function attach(agents, targets, source) {                                            // 8265
    this.wake();                                                                                                       // 8266
                                                                                                                       // 8267
    if (agents instanceof Array) {                                                                                     // 8268
        var agentIDs = [];                                                                                             // 8269
        for (var i = 0; i < agents.length; i++)                                                                        // 8270
            agentIDs[i] = _attachOne.call(this, agents[i], targets, source);                                           // 8271
        return agentIDs;                                                                                               // 8272
    }                                                                                                                  // 8273
    else return _attachOne.call(this, agents, targets, source);                                                        // 8274
};                                                                                                                     // 8275
                                                                                                                       // 8276
/**                                                                                                                    // 8277
 * Append a body to the targets of a previously defined physics agent.                                                 // 8278
 *                                                                                                                     // 8279
 * @method attachTo                                                                                                    // 8280
 * @param agentID {AgentId} The agentId of a previously defined agent                                                  // 8281
 * @param target {Body} The Body affected by the agent                                                                 // 8282
 */                                                                                                                    // 8283
PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {                                                // 8284
    _getAgentData.call(this, agentID).targets.push(target);                                                            // 8285
};                                                                                                                     // 8286
                                                                                                                       // 8287
/**                                                                                                                    // 8288
 * Undoes PhysicsEngine.attach. Removes an agent and its associated                                                    // 8289
 *   effect on its affected Bodies.                                                                                    // 8290
 *                                                                                                                     // 8291
 * @method detach                                                                                                      // 8292
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8293
 */                                                                                                                    // 8294
PhysicsEngine.prototype.detach = function detach(id) {                                                                 // 8295
    // detach from forces/constraints array                                                                            // 8296
    var agent = this.getAgent(id);                                                                                     // 8297
    var agentArray = _mapAgentArray.call(this, agent);                                                                 // 8298
    var index = agentArray.indexOf(id);                                                                                // 8299
    agentArray.splice(index,1);                                                                                        // 8300
                                                                                                                       // 8301
    // detach agents array                                                                                             // 8302
    delete this._agentData[id];                                                                                        // 8303
};                                                                                                                     // 8304
                                                                                                                       // 8305
/**                                                                                                                    // 8306
 * Remove a single Body from a previously defined agent.                                                               // 8307
 *                                                                                                                     // 8308
 * @method detach                                                                                                      // 8309
 * @param id {AgentId} The agentId of a previously defined agent                                                       // 8310
 * @param target {Body} The body to remove from the agent                                                              // 8311
 */                                                                                                                    // 8312
PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {                                                 // 8313
    var boundAgent = _getAgentData.call(this, id);                                                                     // 8314
    if (boundAgent.source === target) this.detach(id);                                                                 // 8315
    else {                                                                                                             // 8316
        var targets = boundAgent.targets;                                                                              // 8317
        var index = targets.indexOf(target);                                                                           // 8318
        if (index > -1) targets.splice(index,1);                                                                       // 8319
    }                                                                                                                  // 8320
};                                                                                                                     // 8321
                                                                                                                       // 8322
/**                                                                                                                    // 8323
 * A convenience method to give the Physics Engine a clean slate of                                                    // 8324
 * agents. Preserves all added Body objects.                                                                           // 8325
 *                                                                                                                     // 8326
 * @method detachAll                                                                                                   // 8327
 */                                                                                                                    // 8328
PhysicsEngine.prototype.detachAll = function detachAll() {                                                             // 8329
    this._agentData     = {};                                                                                          // 8330
    this._forces        = [];                                                                                          // 8331
    this._constraints   = [];                                                                                          // 8332
    this._currAgentId   = 0;                                                                                           // 8333
};                                                                                                                     // 8334
                                                                                                                       // 8335
function _getAgentData(id) {                                                                                           // 8336
    return this._agentData[id];                                                                                        // 8337
}                                                                                                                      // 8338
                                                                                                                       // 8339
/**                                                                                                                    // 8340
 * Returns the corresponding agent given its agentId.                                                                  // 8341
 *                                                                                                                     // 8342
 * @method getAgent                                                                                                    // 8343
 * @param id {AgentId}                                                                                                 // 8344
 */                                                                                                                    // 8345
PhysicsEngine.prototype.getAgent = function getAgent(id) {                                                             // 8346
    return _getAgentData.call(this, id).agent;                                                                         // 8347
};                                                                                                                     // 8348
                                                                                                                       // 8349
/**                                                                                                                    // 8350
 * Returns all particles that are currently managed by the Physics Engine.                                             // 8351
 *                                                                                                                     // 8352
 * @method getParticles                                                                                                // 8353
 * @return particles {Array.Particles}                                                                                 // 8354
 */                                                                                                                    // 8355
PhysicsEngine.prototype.getParticles = function getParticles() {                                                       // 8356
    return this._particles;                                                                                            // 8357
};                                                                                                                     // 8358
                                                                                                                       // 8359
/**                                                                                                                    // 8360
 * Returns all bodies, except particles, that are currently managed by the Physics Engine.                             // 8361
 *                                                                                                                     // 8362
 * @method getBodies                                                                                                   // 8363
 * @return bodies {Array.Bodies}                                                                                       // 8364
 */                                                                                                                    // 8365
PhysicsEngine.prototype.getBodies = function getBodies() {                                                             // 8366
    return this._bodies;                                                                                               // 8367
};                                                                                                                     // 8368
                                                                                                                       // 8369
/**                                                                                                                    // 8370
 * Returns all bodies that are currently managed by the Physics Engine.                                                // 8371
 *                                                                                                                     // 8372
 * @method getBodies                                                                                                   // 8373
 * @return bodies {Array.Bodies}                                                                                       // 8374
 */                                                                                                                    // 8375
PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {                                     // 8376
    return this.getParticles().concat(this.getBodies());                                                               // 8377
};                                                                                                                     // 8378
                                                                                                                       // 8379
/**                                                                                                                    // 8380
 * Iterates over every Particle and applies a function whose first                                                     // 8381
 *   argument is the Particle                                                                                          // 8382
 *                                                                                                                     // 8383
 * @method forEachParticle                                                                                             // 8384
 * @param fn {Function} Function to iterate over                                                                       // 8385
 * @param [dt] {Number} Delta time                                                                                     // 8386
 */                                                                                                                    // 8387
PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {                                           // 8388
    var particles = this.getParticles();                                                                               // 8389
    for (var index = 0, len = particles.length; index < len; index++)                                                  // 8390
        fn.call(this, particles[index], dt);                                                                           // 8391
};                                                                                                                     // 8392
                                                                                                                       // 8393
/**                                                                                                                    // 8394
 * Iterates over every Body that isn't a Particle and applies                                                          // 8395
 *   a function whose first argument is the Body                                                                       // 8396
 *                                                                                                                     // 8397
 * @method forEachBody                                                                                                 // 8398
 * @param fn {Function} Function to iterate over                                                                       // 8399
 * @param [dt] {Number} Delta time                                                                                     // 8400
 */                                                                                                                    // 8401
PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {                                                   // 8402
    if (!this._hasBodies) return;                                                                                      // 8403
    var bodies = this.getBodies();                                                                                     // 8404
    for (var index = 0, len = bodies.length; index < len; index++)                                                     // 8405
        fn.call(this, bodies[index], dt);                                                                              // 8406
};                                                                                                                     // 8407
                                                                                                                       // 8408
/**                                                                                                                    // 8409
 * Iterates over every Body and applies a function whose first                                                         // 8410
 *   argument is the Body                                                                                              // 8411
 *                                                                                                                     // 8412
 * @method forEach                                                                                                     // 8413
 * @param fn {Function} Function to iterate over                                                                       // 8414
 * @param [dt] {Number} Delta time                                                                                     // 8415
 */                                                                                                                    // 8416
PhysicsEngine.prototype.forEach = function forEach(fn, dt) {                                                           // 8417
    this.forEachParticle(fn, dt);                                                                                      // 8418
    this.forEachBody(fn, dt);                                                                                          // 8419
};                                                                                                                     // 8420
                                                                                                                       // 8421
function _updateForce(index) {                                                                                         // 8422
    var boundAgent = _getAgentData.call(this, this._forces[index]);                                                    // 8423
    boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);                                                // 8424
}                                                                                                                      // 8425
                                                                                                                       // 8426
function _updateForces() {                                                                                             // 8427
    for (var index = this._forces.length - 1; index > -1; index--)                                                     // 8428
        _updateForce.call(this, index);                                                                                // 8429
}                                                                                                                      // 8430
                                                                                                                       // 8431
function _updateConstraint(index, dt) {                                                                                // 8432
    var boundAgent = this._agentData[this._constraints[index]];                                                        // 8433
    return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);                                // 8434
}                                                                                                                      // 8435
                                                                                                                       // 8436
function _updateConstraints(dt) {                                                                                      // 8437
    var iteration = 0;                                                                                                 // 8438
    while (iteration < this.options.constraintSteps) {                                                                 // 8439
        for (var index = this._constraints.length - 1; index > -1; index--)                                            // 8440
            _updateConstraint.call(this, index, dt);                                                                   // 8441
        iteration++;                                                                                                   // 8442
    }                                                                                                                  // 8443
}                                                                                                                      // 8444
                                                                                                                       // 8445
function _updateVelocities(body, dt) {                                                                                 // 8446
    body.integrateVelocity(dt);                                                                                        // 8447
    if (this.options.velocityCap)                                                                                      // 8448
        body.velocity.cap(this.options.velocityCap).put(body.velocity);                                                // 8449
}                                                                                                                      // 8450
                                                                                                                       // 8451
function _updateAngularVelocities(body, dt) {                                                                          // 8452
    body.integrateAngularMomentum(dt);                                                                                 // 8453
    body.updateAngularVelocity();                                                                                      // 8454
    if (this.options.angularVelocityCap)                                                                               // 8455
        body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);                           // 8456
}                                                                                                                      // 8457
                                                                                                                       // 8458
function _updateOrientations(body, dt) {                                                                               // 8459
    body.integrateOrientation(dt);                                                                                     // 8460
}                                                                                                                      // 8461
                                                                                                                       // 8462
function _updatePositions(body, dt) {                                                                                  // 8463
    body.integratePosition(dt);                                                                                        // 8464
    body.emit(_events.update, body);                                                                                   // 8465
}                                                                                                                      // 8466
                                                                                                                       // 8467
function _integrate(dt) {                                                                                              // 8468
    _updateForces.call(this, dt);                                                                                      // 8469
    this.forEach(_updateVelocities, dt);                                                                               // 8470
    this.forEachBody(_updateAngularVelocities, dt);                                                                    // 8471
    _updateConstraints.call(this, dt);                                                                                 // 8472
    this.forEachBody(_updateOrientations, dt);                                                                         // 8473
    this.forEach(_updatePositions, dt);                                                                                // 8474
}                                                                                                                      // 8475
                                                                                                                       // 8476
function _getParticlesEnergy() {                                                                                       // 8477
    var energy = 0.0;                                                                                                  // 8478
    var particleEnergy = 0.0;                                                                                          // 8479
    this.forEach(function(particle) {                                                                                  // 8480
        particleEnergy = particle.getEnergy();                                                                         // 8481
        energy += particleEnergy;                                                                                      // 8482
    });                                                                                                                // 8483
    return energy;                                                                                                     // 8484
}                                                                                                                      // 8485
                                                                                                                       // 8486
function _getAgentsEnergy() {                                                                                          // 8487
    var energy = 0;                                                                                                    // 8488
    for (var id in this._agentData)                                                                                    // 8489
        energy += this.getAgentEnergy(id);                                                                             // 8490
    return energy;                                                                                                     // 8491
}                                                                                                                      // 8492
                                                                                                                       // 8493
/**                                                                                                                    // 8494
 * Calculates the potential energy of an agent, like a spring, by its Id                                               // 8495
 *                                                                                                                     // 8496
 * @method getAgentEnergy                                                                                              // 8497
 * @param agentId {Number} The attached agent Id                                                                       // 8498
 * @return energy {Number}                                                                                             // 8499
 */                                                                                                                    // 8500
PhysicsEngine.prototype.getAgentEnergy = function(agentId) {                                                           // 8501
    var agentData = _getAgentData.call(this, agentId);                                                                 // 8502
    return agentData.agent.getEnergy(agentData.targets, agentData.source);                                             // 8503
};                                                                                                                     // 8504
                                                                                                                       // 8505
/**                                                                                                                    // 8506
 * Calculates the kinetic energy of all Body objects and potential energy                                              // 8507
 *   of all attached agents.                                                                                           // 8508
 *                                                                                                                     // 8509
 * TODO: implement.                                                                                                    // 8510
 * @method getEnergy                                                                                                   // 8511
 * @return energy {Number}                                                                                             // 8512
 */                                                                                                                    // 8513
PhysicsEngine.prototype.getEnergy = function getEnergy() {                                                             // 8514
    return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);                                               // 8515
};                                                                                                                     // 8516
                                                                                                                       // 8517
/**                                                                                                                    // 8518
 * Updates all Body objects managed by the physics engine over the                                                     // 8519
 *   time duration since the last time step was called.                                                                // 8520
 *                                                                                                                     // 8521
 * @method step                                                                                                        // 8522
 */                                                                                                                    // 8523
PhysicsEngine.prototype.step = function step() {                                                                       // 8524
    if (this.isSleeping()) return;                                                                                     // 8525
                                                                                                                       // 8526
    //set current frame's time                                                                                         // 8527
    var currTime = now();                                                                                              // 8528
                                                                                                                       // 8529
    //milliseconds elapsed since last frame                                                                            // 8530
    var dtFrame = currTime - this._prevTime;                                                                           // 8531
                                                                                                                       // 8532
    this._prevTime = currTime;                                                                                         // 8533
                                                                                                                       // 8534
    if (dtFrame < MIN_TIME_STEP) return;                                                                               // 8535
    if (dtFrame > MAX_TIME_STEP) dtFrame = MAX_TIME_STEP;                                                              // 8536
                                                                                                                       // 8537
    //robust integration                                                                                               // 8538
//        this._buffer += dtFrame;                                                                                     // 8539
//        while (this._buffer > this._timestep){                                                                       // 8540
//            _integrate.call(this, this._timestep);                                                                   // 8541
//            this._buffer -= this._timestep;                                                                          // 8542
//        };                                                                                                           // 8543
//        _integrate.call(this, this._buffer);                                                                         // 8544
//        this._buffer = 0.0;                                                                                          // 8545
                                                                                                                       // 8546
    _integrate.call(this, TIMESTEP);                                                                                   // 8547
                                                                                                                       // 8548
    this.emit(_events.update, this);                                                                                   // 8549
                                                                                                                       // 8550
    if (this.getEnergy() < this.options.sleepTolerance) this.sleep();                                                  // 8551
};                                                                                                                     // 8552
                                                                                                                       // 8553
/**                                                                                                                    // 8554
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8555
 *                                                                                                                     // 8556
 * @method isSleeping                                                                                                  // 8557
 * @return {Boolean}                                                                                                   // 8558
 */                                                                                                                    // 8559
PhysicsEngine.prototype.isSleeping = function isSleeping() {                                                           // 8560
    return this._isSleeping;                                                                                           // 8561
};                                                                                                                     // 8562
                                                                                                                       // 8563
/**                                                                                                                    // 8564
 * Tells whether the Physics Engine is sleeping or awake.                                                              // 8565
 *                                                                                                                     // 8566
 * @method isActive                                                                                                    // 8567
 * @return {Boolean}                                                                                                   // 8568
 */                                                                                                                    // 8569
PhysicsEngine.prototype.isActive = function isSleeping() {                                                             // 8570
    return !this._isSleeping;                                                                                          // 8571
};                                                                                                                     // 8572
                                                                                                                       // 8573
/**                                                                                                                    // 8574
 * Stops the Physics Engine update loop. Emits an 'end' event.                                                         // 8575
 *                                                                                                                     // 8576
 * @method sleep                                                                                                       // 8577
 */                                                                                                                    // 8578
PhysicsEngine.prototype.sleep = function sleep() {                                                                     // 8579
    if (this._isSleeping) return;                                                                                      // 8580
    this.forEach(function(body) {                                                                                      // 8581
        body.sleep();                                                                                                  // 8582
    });                                                                                                                // 8583
    this.emit(_events.end, this);                                                                                      // 8584
    this._isSleeping = true;                                                                                           // 8585
};                                                                                                                     // 8586
                                                                                                                       // 8587
/**                                                                                                                    // 8588
 * Restarts the Physics Engine update loop. Emits an 'start' event.                                                    // 8589
 *                                                                                                                     // 8590
 * @method wake                                                                                                        // 8591
 */                                                                                                                    // 8592
PhysicsEngine.prototype.wake = function wake() {                                                                       // 8593
    if (!this._isSleeping) return;                                                                                     // 8594
    this._prevTime = now();                                                                                            // 8595
    this.emit(_events.start, this);                                                                                    // 8596
    this._isSleeping = false;                                                                                          // 8597
};                                                                                                                     // 8598
                                                                                                                       // 8599
PhysicsEngine.prototype.emit = function emit(type, data) {                                                             // 8600
    if (this._eventHandler === null) return;                                                                           // 8601
    this._eventHandler.emit(type, data);                                                                               // 8602
};                                                                                                                     // 8603
                                                                                                                       // 8604
PhysicsEngine.prototype.on = function on(event, fn) {                                                                  // 8605
    if (this._eventHandler === null) this._eventHandler = new EventHandler();                                          // 8606
    this._eventHandler.on(event, fn);                                                                                  // 8607
};                                                                                                                     // 8608
                                                                                                                       // 8609
module.exports = PhysicsEngine;                                                                                        // 8610
},{"../core/EventHandler":7}],50:[function(_dereq_,module,exports){                                                    // 8611
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8612
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8613
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8614
 *                                                                                                                     // 8615
 * Owner: david@famo.us                                                                                                // 8616
 * @license MPL 2.0                                                                                                    // 8617
 * @copyright Famous Industries, Inc. 2014                                                                             // 8618
 */                                                                                                                    // 8619
                                                                                                                       // 8620
var Particle = _dereq_('./Particle');                                                                                  // 8621
var Transform = _dereq_('../../core/Transform');                                                                       // 8622
var Vector = _dereq_('../../math/Vector');                                                                             // 8623
var Quaternion = _dereq_('../../math/Quaternion');                                                                     // 8624
var Matrix = _dereq_('../../math/Matrix');                                                                             // 8625
var Integrator = _dereq_('../integrators/SymplecticEuler');                                                            // 8626
                                                                                                                       // 8627
/**                                                                                                                    // 8628
 * A unit controlled by the physics engine which extends the zero-dimensional                                          // 8629
 *   Particle to include geometry. In addition to maintaining the state                                                // 8630
 *   of a Particle its state includes orientation, angular velocity                                                    // 8631
 *   and angular momentum and responds to torque forces.                                                               // 8632
 *                                                                                                                     // 8633
 * @class Body                                                                                                         // 8634
 * @extends Particle                                                                                                   // 8635
 * @constructor                                                                                                        // 8636
 */                                                                                                                    // 8637
function Body(options) {                                                                                               // 8638
    Particle.call(this, options);                                                                                      // 8639
    options = options || {};                                                                                           // 8640
                                                                                                                       // 8641
    this.orientation     = new Quaternion();                                                                           // 8642
    this.angularVelocity = new Vector();                                                                               // 8643
    this.angularMomentum = new Vector();                                                                               // 8644
    this.torque          = new Vector();                                                                               // 8645
                                                                                                                       // 8646
    if (options.orientation)     this.orientation.set(options.orientation);                                            // 8647
    if (options.angularVelocity) this.angularVelocity.set(options.angularVelocity);                                    // 8648
    if (options.angularMomentum) this.angularMomentum.set(options.angularMomentum);                                    // 8649
    if (options.torque)          this.torque.set(options.torque);                                                      // 8650
                                                                                                                       // 8651
    this.angularVelocity.w = 0;        //quaternify the angular velocity                                               // 8652
    this.setMomentsOfInertia();                                                                                        // 8653
                                                                                                                       // 8654
    // registers                                                                                                       // 8655
    this.pWorld = new Vector();        //placeholder for world space position                                          // 8656
}                                                                                                                      // 8657
                                                                                                                       // 8658
Body.DEFAULT_OPTIONS = Particle.DEFAULT_OPTIONS;                                                                       // 8659
Body.DEFAULT_OPTIONS.orientation = [0, 0, 0, 1];                                                                       // 8660
Body.DEFAULT_OPTIONS.angularVelocity = [0, 0, 0];                                                                      // 8661
                                                                                                                       // 8662
Body.prototype = Object.create(Particle.prototype);                                                                    // 8663
Body.prototype.constructor = Body;                                                                                     // 8664
                                                                                                                       // 8665
Body.prototype.isBody = true;                                                                                          // 8666
                                                                                                                       // 8667
Body.prototype.setMass = function setMass() {                                                                          // 8668
    Particle.prototype.setMass.apply(this, arguments);                                                                 // 8669
    this.setMomentsOfInertia();                                                                                        // 8670
};                                                                                                                     // 8671
                                                                                                                       // 8672
/**                                                                                                                    // 8673
 * Setter for moment of inertia, which is necessary to give proper                                                     // 8674
 *   angular inertia depending on the geometry of the body.                                                            // 8675
 *                                                                                                                     // 8676
 * @method setMomentsOfInertia                                                                                         // 8677
 */                                                                                                                    // 8678
Body.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                  // 8679
    this.inertia = new Matrix();                                                                                       // 8680
    this.inverseInertia = new Matrix();                                                                                // 8681
};                                                                                                                     // 8682
                                                                                                                       // 8683
/**                                                                                                                    // 8684
 * Update the angular velocity from the angular momentum state.                                                        // 8685
 *                                                                                                                     // 8686
 * @method updateAngularVelocity                                                                                       // 8687
 */                                                                                                                    // 8688
Body.prototype.updateAngularVelocity = function updateAngularVelocity() {                                              // 8689
    this.angularVelocity.set(this.inverseInertia.vectorMultiply(this.angularMomentum));                                // 8690
};                                                                                                                     // 8691
                                                                                                                       // 8692
/**                                                                                                                    // 8693
 * Determine world coordinates from the local coordinate system. Useful                                                // 8694
 *   if the Body has rotated in space.                                                                                 // 8695
 *                                                                                                                     // 8696
 * @method toWorldCoordinates                                                                                          // 8697
 * @param localPosition {Vector} local coordinate vector                                                               // 8698
 * @return global coordinate vector {Vector}                                                                           // 8699
 */                                                                                                                    // 8700
Body.prototype.toWorldCoordinates = function toWorldCoordinates(localPosition) {                                       // 8701
    return this.pWorld.set(this.orientation.rotateVector(localPosition));                                              // 8702
};                                                                                                                     // 8703
                                                                                                                       // 8704
/**                                                                                                                    // 8705
 * Calculates the kinetic and intertial energy of a body.                                                              // 8706
 *                                                                                                                     // 8707
 * @method getEnergy                                                                                                   // 8708
 * @return energy {Number}                                                                                             // 8709
 */                                                                                                                    // 8710
Body.prototype.getEnergy = function getEnergy() {                                                                      // 8711
    return Particle.prototype.getEnergy.call(this)                                                                     // 8712
        + 0.5 * this.inertia.vectorMultiply(this.angularVelocity).dot(this.angularVelocity);                           // 8713
};                                                                                                                     // 8714
                                                                                                                       // 8715
/**                                                                                                                    // 8716
 * Extends Particle.reset to reset orientation, angular velocity                                                       // 8717
 *   and angular momentum.                                                                                             // 8718
 *                                                                                                                     // 8719
 * @method reset                                                                                                       // 8720
 * @param [p] {Array|Vector} position                                                                                  // 8721
 * @param [v] {Array|Vector} velocity                                                                                  // 8722
 * @param [q] {Array|Quaternion} orientation                                                                           // 8723
 * @param [L] {Array|Vector} angular momentum                                                                          // 8724
 */                                                                                                                    // 8725
Body.prototype.reset = function reset(p, v, q, L) {                                                                    // 8726
    Particle.prototype.reset.call(this, p, v);                                                                         // 8727
    this.angularVelocity.clear();                                                                                      // 8728
    this.setOrientation(q || [1,0,0,0]);                                                                               // 8729
    this.setAngularMomentum(L || [0,0,0]);                                                                             // 8730
};                                                                                                                     // 8731
                                                                                                                       // 8732
/**                                                                                                                    // 8733
 * Setter for orientation                                                                                              // 8734
 *                                                                                                                     // 8735
 * @method setOrientation                                                                                              // 8736
 * @param q {Array|Quaternion} orientation                                                                             // 8737
 */                                                                                                                    // 8738
Body.prototype.setOrientation = function setOrientation(q) {                                                           // 8739
    this.orientation.set(q);                                                                                           // 8740
};                                                                                                                     // 8741
                                                                                                                       // 8742
/**                                                                                                                    // 8743
 * Setter for angular velocity                                                                                         // 8744
 *                                                                                                                     // 8745
 * @method setAngularVelocity                                                                                          // 8746
 * @param w {Array|Vector} angular velocity                                                                            // 8747
 */                                                                                                                    // 8748
Body.prototype.setAngularVelocity = function setAngularVelocity(w) {                                                   // 8749
    this.wake();                                                                                                       // 8750
    this.angularVelocity.set(w);                                                                                       // 8751
};                                                                                                                     // 8752
                                                                                                                       // 8753
/**                                                                                                                    // 8754
 * Setter for angular momentum                                                                                         // 8755
 *                                                                                                                     // 8756
 * @method setAngularMomentum                                                                                          // 8757
 * @param L {Array|Vector} angular momentum                                                                            // 8758
 */                                                                                                                    // 8759
Body.prototype.setAngularMomentum = function setAngularMomentum(L) {                                                   // 8760
    this.wake();                                                                                                       // 8761
    this.angularMomentum.set(L);                                                                                       // 8762
};                                                                                                                     // 8763
                                                                                                                       // 8764
/**                                                                                                                    // 8765
 * Extends Particle.applyForce with an optional argument                                                               // 8766
 *   to apply the force at an off-centered location, resulting in a torque.                                            // 8767
 *                                                                                                                     // 8768
 * @method applyForce                                                                                                  // 8769
 * @param force {Vector} force                                                                                         // 8770
 * @param [location] {Vector} off-center location on the body                                                          // 8771
 */                                                                                                                    // 8772
Body.prototype.applyForce = function applyForce(force, location) {                                                     // 8773
    Particle.prototype.applyForce.call(this, force);                                                                   // 8774
    if (location !== undefined) this.applyTorque(location.cross(force));                                               // 8775
};                                                                                                                     // 8776
                                                                                                                       // 8777
/**                                                                                                                    // 8778
 * Applied a torque force to a body, inducing a rotation.                                                              // 8779
 *                                                                                                                     // 8780
 * @method applyTorque                                                                                                 // 8781
 * @param torque {Vector} torque                                                                                       // 8782
 */                                                                                                                    // 8783
Body.prototype.applyTorque = function applyTorque(torque) {                                                            // 8784
    this.wake();                                                                                                       // 8785
    this.torque.set(this.torque.add(torque));                                                                          // 8786
};                                                                                                                     // 8787
                                                                                                                       // 8788
/**                                                                                                                    // 8789
 * Extends Particle.getTransform to include a rotational component                                                     // 8790
 *   derived from the particle's orientation.                                                                          // 8791
 *                                                                                                                     // 8792
 * @method getTransform                                                                                                // 8793
 * @return transform {Transform}                                                                                       // 8794
 */                                                                                                                    // 8795
Body.prototype.getTransform = function getTransform() {                                                                // 8796
    return Transform.thenMove(                                                                                         // 8797
        this.orientation.getTransform(),                                                                               // 8798
        Transform.getTranslate(Particle.prototype.getTransform.call(this))                                             // 8799
    );                                                                                                                 // 8800
};                                                                                                                     // 8801
                                                                                                                       // 8802
/**                                                                                                                    // 8803
 * Extends Particle._integrate to also update the rotational states                                                    // 8804
 *   of the body.                                                                                                      // 8805
 *                                                                                                                     // 8806
 * @method getTransform                                                                                                // 8807
 * @protected                                                                                                          // 8808
 * @param dt {Number} delta time                                                                                       // 8809
 */                                                                                                                    // 8810
Body.prototype._integrate = function _integrate(dt) {                                                                  // 8811
    Particle.prototype._integrate.call(this, dt);                                                                      // 8812
    this.integrateAngularMomentum(dt);                                                                                 // 8813
    this.updateAngularVelocity(dt);                                                                                    // 8814
    this.integrateOrientation(dt);                                                                                     // 8815
};                                                                                                                     // 8816
                                                                                                                       // 8817
/**                                                                                                                    // 8818
 * Updates the angular momentum via the its integrator.                                                                // 8819
 *                                                                                                                     // 8820
 * @method integrateAngularMomentum                                                                                    // 8821
 * @param dt {Number} delta time                                                                                       // 8822
 */                                                                                                                    // 8823
Body.prototype.integrateAngularMomentum = function integrateAngularMomentum(dt) {                                      // 8824
    Integrator.integrateAngularMomentum(this, dt);                                                                     // 8825
};                                                                                                                     // 8826
                                                                                                                       // 8827
/**                                                                                                                    // 8828
 * Updates the orientation via the its integrator.                                                                     // 8829
 *                                                                                                                     // 8830
 * @method integrateOrientation                                                                                        // 8831
 * @param dt {Number} delta time                                                                                       // 8832
 */                                                                                                                    // 8833
Body.prototype.integrateOrientation = function integrateOrientation(dt) {                                              // 8834
    Integrator.integrateOrientation(this, dt);                                                                         // 8835
};                                                                                                                     // 8836
                                                                                                                       // 8837
module.exports = Body;                                                                                                 // 8838
},{"../../core/Transform":15,"../../math/Matrix":38,"../../math/Quaternion":39,"../../math/Vector":42,"../integrators/SymplecticEuler":73,"./Particle":52}],51:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8840
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8841
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8842
 *                                                                                                                     // 8843
 * Owner: david@famo.us                                                                                                // 8844
 * @license MPL 2.0                                                                                                    // 8845
 * @copyright Famous Industries, Inc. 2014                                                                             // 8846
 */                                                                                                                    // 8847
                                                                                                                       // 8848
var Body = _dereq_('./Body');                                                                                          // 8849
var Matrix = _dereq_('../../math/Matrix');                                                                             // 8850
                                                                                                                       // 8851
/**                                                                                                                    // 8852
 * Implements a circle, or spherical, geometry for a Body with                                                         // 8853
 * radius.                                                                                                             // 8854
 *                                                                                                                     // 8855
 * @class Circle                                                                                                       // 8856
 * @extends Body                                                                                                       // 8857
 * @constructor                                                                                                        // 8858
 */                                                                                                                    // 8859
function Circle(options) {                                                                                             // 8860
    options = options || {};                                                                                           // 8861
    this.setRadius(options.radius || 0);                                                                               // 8862
    Body.call(this, options);                                                                                          // 8863
}                                                                                                                      // 8864
                                                                                                                       // 8865
Circle.prototype = Object.create(Body.prototype);                                                                      // 8866
Circle.prototype.constructor = Circle;                                                                                 // 8867
                                                                                                                       // 8868
/**                                                                                                                    // 8869
 * Basic setter for radius.                                                                                            // 8870
 * @method setRadius                                                                                                   // 8871
 * @param r {Number} radius                                                                                            // 8872
 */                                                                                                                    // 8873
Circle.prototype.setRadius = function setRadius(r) {                                                                   // 8874
    this.radius = r;                                                                                                   // 8875
    this.size = [2*this.radius, 2*this.radius];                                                                        // 8876
    this.setMomentsOfInertia();                                                                                        // 8877
};                                                                                                                     // 8878
                                                                                                                       // 8879
Circle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                                // 8880
    var m = this.mass;                                                                                                 // 8881
    var r = this.radius;                                                                                               // 8882
                                                                                                                       // 8883
    this.inertia = new Matrix([                                                                                        // 8884
        [0.25 * m * r * r, 0, 0],                                                                                      // 8885
        [0, 0.25 * m * r * r, 0],                                                                                      // 8886
        [0, 0, 0.5 * m * r * r]                                                                                        // 8887
    ]);                                                                                                                // 8888
                                                                                                                       // 8889
    this.inverseInertia = new Matrix([                                                                                 // 8890
        [4 / (m * r * r), 0, 0],                                                                                       // 8891
        [0, 4 / (m * r * r), 0],                                                                                       // 8892
        [0, 0, 2 / (m * r * r)]                                                                                        // 8893
    ]);                                                                                                                // 8894
};                                                                                                                     // 8895
                                                                                                                       // 8896
module.exports = Circle;                                                                                               // 8897
},{"../../math/Matrix":38,"./Body":50}],52:[function(_dereq_,module,exports){                                          // 8898
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 8899
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 8900
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 8901
 *                                                                                                                     // 8902
 * Owner: david@famo.us                                                                                                // 8903
 * @license MPL 2.0                                                                                                    // 8904
 * @copyright Famous Industries, Inc. 2014                                                                             // 8905
 */                                                                                                                    // 8906
                                                                                                                       // 8907
var Vector = _dereq_('../../math/Vector');                                                                             // 8908
var Transform = _dereq_('../../core/Transform');                                                                       // 8909
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 8910
var Integrator = _dereq_('../integrators/SymplecticEuler');                                                            // 8911
                                                                                                                       // 8912
/**                                                                                                                    // 8913
 * A point body that is controlled by the Physics Engine. A particle has                                               // 8914
 *   position and velocity states that are updated by the Physics Engine.                                              // 8915
 *   Ultimately, a particle is a special type of modifier, and can be added to                                         // 8916
 *   the Famo.us Scene Graph like any other modifier.                                                                  // 8917
 *                                                                                                                     // 8918
 * @class Particle                                                                                                     // 8919
 * @uses EventHandler                                                                                                  // 8920
 * @extensionfor Body                                                                                                  // 8921
 *                                                                                                                     // 8922
 * @param [options] {Options}           An object of configurable options.                                             // 8923
 * @param [options.position] {Array}    The position of the particle.                                                  // 8924
 * @param [options.velocity] {Array}    The velocity of the particle.                                                  // 8925
 * @param [options.mass] {Number}       The mass of the particle.                                                      // 8926
 */                                                                                                                    // 8927
 function Particle(options) {                                                                                          // 8928
    options = options || {};                                                                                           // 8929
    var defaults = Particle.DEFAULT_OPTIONS;                                                                           // 8930
                                                                                                                       // 8931
    // registers                                                                                                       // 8932
    this.position = new Vector();                                                                                      // 8933
    this.velocity = new Vector();                                                                                      // 8934
    this.force = new Vector();                                                                                         // 8935
                                                                                                                       // 8936
    // state variables                                                                                                 // 8937
    this._engine = null;                                                                                               // 8938
    this._isSleeping = true;                                                                                           // 8939
    this._eventOutput = null;                                                                                          // 8940
                                                                                                                       // 8941
    // set scalars                                                                                                     // 8942
    this.mass = (options.mass !== undefined)                                                                           // 8943
        ? options.mass                                                                                                 // 8944
        : defaults.mass;                                                                                               // 8945
                                                                                                                       // 8946
    this.inverseMass = 1 / this.mass;                                                                                  // 8947
                                                                                                                       // 8948
    // set vectors                                                                                                     // 8949
    this.setPosition(options.position || defaults.position);                                                           // 8950
    this.setVelocity(options.velocity || defaults.velocity);                                                           // 8951
    this.force.set(options.force || [0,0,0]);                                                                          // 8952
                                                                                                                       // 8953
    this.transform = Transform.identity.slice();                                                                       // 8954
                                                                                                                       // 8955
    // cached _spec                                                                                                    // 8956
    this._spec = {                                                                                                     // 8957
        size : [true, true],                                                                                           // 8958
        target : {                                                                                                     // 8959
            transform : this.transform,                                                                                // 8960
            origin : [0.5, 0.5],                                                                                       // 8961
            target : null                                                                                              // 8962
        }                                                                                                              // 8963
    };                                                                                                                 // 8964
}                                                                                                                      // 8965
                                                                                                                       // 8966
Particle.DEFAULT_OPTIONS = {                                                                                           // 8967
    position : [0, 0, 0],                                                                                              // 8968
    velocity : [0, 0, 0],                                                                                              // 8969
    mass : 1                                                                                                           // 8970
};                                                                                                                     // 8971
                                                                                                                       // 8972
//Catalogue of outputted events                                                                                        // 8973
var _events = {                                                                                                        // 8974
    start : 'start',                                                                                                   // 8975
    update : 'update',                                                                                                 // 8976
    end : 'end'                                                                                                        // 8977
};                                                                                                                     // 8978
                                                                                                                       // 8979
// Cached timing function                                                                                              // 8980
var now = Date.now;                                                                                                    // 8981
                                                                                                                       // 8982
/**                                                                                                                    // 8983
 * @attribute isBody                                                                                                   // 8984
 * @type Boolean                                                                                                       // 8985
 * @static                                                                                                             // 8986
 */                                                                                                                    // 8987
Particle.prototype.isBody = false;                                                                                     // 8988
                                                                                                                       // 8989
/**                                                                                                                    // 8990
 * Determines if particle is active                                                                                    // 8991
 *                                                                                                                     // 8992
 * @method isActive                                                                                                    // 8993
 * @return {Boolean}                                                                                                   // 8994
 */                                                                                                                    // 8995
Particle.prototype.isActive = function isActive() {                                                                    // 8996
    return !this._isSleeping;                                                                                          // 8997
};                                                                                                                     // 8998
                                                                                                                       // 8999
/**                                                                                                                    // 9000
 * Stops the particle from updating                                                                                    // 9001
 *                                                                                                                     // 9002
 * @method sleep                                                                                                       // 9003
 */                                                                                                                    // 9004
Particle.prototype.sleep = function sleep() {                                                                          // 9005
    if (this._isSleeping) return;                                                                                      // 9006
    this.emit(_events.end, this);                                                                                      // 9007
    this._isSleeping = true;                                                                                           // 9008
};                                                                                                                     // 9009
                                                                                                                       // 9010
/**                                                                                                                    // 9011
 * Starts the particle update                                                                                          // 9012
 *                                                                                                                     // 9013
 * @method wake                                                                                                        // 9014
 */                                                                                                                    // 9015
Particle.prototype.wake = function wake() {                                                                            // 9016
    if (!this._isSleeping) return;                                                                                     // 9017
    this.emit(_events.start, this);                                                                                    // 9018
    this._isSleeping = false;                                                                                          // 9019
    this._prevTime = now();                                                                                            // 9020
    if (this._engine) this._engine.wake();                                                                             // 9021
};                                                                                                                     // 9022
                                                                                                                       // 9023
/**                                                                                                                    // 9024
 * Basic setter for position                                                                                           // 9025
 *                                                                                                                     // 9026
 * @method setPosition                                                                                                 // 9027
 * @param position {Array|Vector}                                                                                      // 9028
 */                                                                                                                    // 9029
Particle.prototype.setPosition = function setPosition(position) {                                                      // 9030
    this.position.set(position);                                                                                       // 9031
};                                                                                                                     // 9032
                                                                                                                       // 9033
/**                                                                                                                    // 9034
 * 1-dimensional setter for position                                                                                   // 9035
 *                                                                                                                     // 9036
 * @method setPosition1D                                                                                               // 9037
 * @param x {Number}                                                                                                   // 9038
 */                                                                                                                    // 9039
Particle.prototype.setPosition1D = function setPosition1D(x) {                                                         // 9040
    this.position.x = x;                                                                                               // 9041
};                                                                                                                     // 9042
                                                                                                                       // 9043
/**                                                                                                                    // 9044
 * Basic getter function for position                                                                                  // 9045
 *                                                                                                                     // 9046
 * @method getPosition                                                                                                 // 9047
 * @return position {Array}                                                                                            // 9048
 */                                                                                                                    // 9049
Particle.prototype.getPosition = function getPosition() {                                                              // 9050
    this._engine.step();                                                                                               // 9051
    return this.position.get();                                                                                        // 9052
};                                                                                                                     // 9053
                                                                                                                       // 9054
/**                                                                                                                    // 9055
 * 1-dimensional getter for position                                                                                   // 9056
 *                                                                                                                     // 9057
 * @method getPosition1D                                                                                               // 9058
 * @return value {Number}                                                                                              // 9059
 */                                                                                                                    // 9060
Particle.prototype.getPosition1D = function getPosition1D() {                                                          // 9061
    this._engine.step();                                                                                               // 9062
    return this.position.x;                                                                                            // 9063
};                                                                                                                     // 9064
                                                                                                                       // 9065
/**                                                                                                                    // 9066
 * Basic setter function for velocity Vector                                                                           // 9067
 *                                                                                                                     // 9068
 * @method setVelocity                                                                                                 // 9069
 * @function                                                                                                           // 9070
 */                                                                                                                    // 9071
Particle.prototype.setVelocity = function setVelocity(velocity) {                                                      // 9072
    this.velocity.set(velocity);                                                                                       // 9073
    if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0))                                                // 9074
        this.wake();                                                                                                   // 9075
};                                                                                                                     // 9076
                                                                                                                       // 9077
/**                                                                                                                    // 9078
 * 1-dimensional setter for velocity                                                                                   // 9079
 *                                                                                                                     // 9080
 * @method setVelocity1D                                                                                               // 9081
 * @param x {Number}                                                                                                   // 9082
 */                                                                                                                    // 9083
Particle.prototype.setVelocity1D = function setVelocity1D(x) {                                                         // 9084
    this.velocity.x = x;                                                                                               // 9085
    if (x !== 0) this.wake();                                                                                          // 9086
};                                                                                                                     // 9087
                                                                                                                       // 9088
/**                                                                                                                    // 9089
 * Basic getter function for velocity Vector                                                                           // 9090
 *                                                                                                                     // 9091
 * @method getVelocity                                                                                                 // 9092
 * @return velocity {Array}                                                                                            // 9093
 */                                                                                                                    // 9094
Particle.prototype.getVelocity = function getVelocity() {                                                              // 9095
    return this.velocity.get();                                                                                        // 9096
};                                                                                                                     // 9097
                                                                                                                       // 9098
/**                                                                                                                    // 9099
 * Basic setter function for force Vector                                                                              // 9100
 *                                                                                                                     // 9101
 * @method setForce                                                                                                    // 9102
 * @return force {Array}                                                                                               // 9103
 */                                                                                                                    // 9104
Particle.prototype.setForce = function setForce(force) {                                                               // 9105
    this.force.set(force);                                                                                             // 9106
    this.wake();                                                                                                       // 9107
};                                                                                                                     // 9108
                                                                                                                       // 9109
/**                                                                                                                    // 9110
 * 1-dimensional getter for velocity                                                                                   // 9111
 *                                                                                                                     // 9112
 * @method getVelocity1D                                                                                               // 9113
 * @return velocity {Number}                                                                                           // 9114
 */                                                                                                                    // 9115
Particle.prototype.getVelocity1D = function getVelocity1D() {                                                          // 9116
    return this.velocity.x;                                                                                            // 9117
};                                                                                                                     // 9118
                                                                                                                       // 9119
/**                                                                                                                    // 9120
 * Basic setter function for mass quantity                                                                             // 9121
 *                                                                                                                     // 9122
 * @method setMass                                                                                                     // 9123
 * @param mass {Number} mass                                                                                           // 9124
 */                                                                                                                    // 9125
Particle.prototype.setMass = function setMass(mass) {                                                                  // 9126
    this.mass = mass;                                                                                                  // 9127
    this.inverseMass = 1 / mass;                                                                                       // 9128
};                                                                                                                     // 9129
                                                                                                                       // 9130
/**                                                                                                                    // 9131
 * Basic getter function for mass quantity                                                                             // 9132
 *                                                                                                                     // 9133
 * @method getMass                                                                                                     // 9134
 * @return mass {Number}                                                                                               // 9135
 */                                                                                                                    // 9136
Particle.prototype.getMass = function getMass() {                                                                      // 9137
    return this.mass;                                                                                                  // 9138
};                                                                                                                     // 9139
                                                                                                                       // 9140
/**                                                                                                                    // 9141
 * Reset position and velocity                                                                                         // 9142
 *                                                                                                                     // 9143
 * @method reset                                                                                                       // 9144
 * @param position {Array|Vector}                                                                                      // 9145
 * @param velocity {Array|Vector}                                                                                      // 9146
 */                                                                                                                    // 9147
Particle.prototype.reset = function reset(position, velocity) {                                                        // 9148
    this.setPosition(position || [0,0,0]);                                                                             // 9149
    this.setVelocity(velocity || [0,0,0]);                                                                             // 9150
};                                                                                                                     // 9151
                                                                                                                       // 9152
/**                                                                                                                    // 9153
 * Add force vector to existing internal force Vector                                                                  // 9154
 *                                                                                                                     // 9155
 * @method applyForce                                                                                                  // 9156
 * @param force {Vector}                                                                                               // 9157
 */                                                                                                                    // 9158
Particle.prototype.applyForce = function applyForce(force) {                                                           // 9159
    if (force.isZero()) return;                                                                                        // 9160
    this.force.add(force).put(this.force);                                                                             // 9161
    this.wake();                                                                                                       // 9162
};                                                                                                                     // 9163
                                                                                                                       // 9164
/**                                                                                                                    // 9165
 * Add impulse (change in velocity) Vector to this Vector's velocity.                                                  // 9166
 *                                                                                                                     // 9167
 * @method applyImpulse                                                                                                // 9168
 * @param impulse {Vector}                                                                                             // 9169
 */                                                                                                                    // 9170
Particle.prototype.applyImpulse = function applyImpulse(impulse) {                                                     // 9171
    if (impulse.isZero()) return;                                                                                      // 9172
    var velocity = this.velocity;                                                                                      // 9173
    velocity.add(impulse.mult(this.inverseMass)).put(velocity);                                                        // 9174
};                                                                                                                     // 9175
                                                                                                                       // 9176
/**                                                                                                                    // 9177
 * Update a particle's velocity from its force accumulator                                                             // 9178
 *                                                                                                                     // 9179
 * @method integrateVelocity                                                                                           // 9180
 * @param dt {Number} Time differential                                                                                // 9181
 */                                                                                                                    // 9182
Particle.prototype.integrateVelocity = function integrateVelocity(dt) {                                                // 9183
    Integrator.integrateVelocity(this, dt);                                                                            // 9184
};                                                                                                                     // 9185
                                                                                                                       // 9186
/**                                                                                                                    // 9187
 * Update a particle's position from its velocity                                                                      // 9188
 *                                                                                                                     // 9189
 * @method integratePosition                                                                                           // 9190
 * @param dt {Number} Time differential                                                                                // 9191
 */                                                                                                                    // 9192
Particle.prototype.integratePosition = function integratePosition(dt) {                                                // 9193
    Integrator.integratePosition(this, dt);                                                                            // 9194
};                                                                                                                     // 9195
                                                                                                                       // 9196
/**                                                                                                                    // 9197
 * Update the position and velocity of the particle                                                                    // 9198
 *                                                                                                                     // 9199
 * @method _integrate                                                                                                  // 9200
 * @protected                                                                                                          // 9201
 * @param dt {Number} Time differential                                                                                // 9202
 */                                                                                                                    // 9203
Particle.prototype._integrate = function _integrate(dt) {                                                              // 9204
    this.integrateVelocity(dt);                                                                                        // 9205
    this.integratePosition(dt);                                                                                        // 9206
};                                                                                                                     // 9207
                                                                                                                       // 9208
/**                                                                                                                    // 9209
 * Get kinetic energy of the particle.                                                                                 // 9210
 *                                                                                                                     // 9211
 * @method getEnergy                                                                                                   // 9212
 * @function                                                                                                           // 9213
 */                                                                                                                    // 9214
Particle.prototype.getEnergy = function getEnergy() {                                                                  // 9215
    return 0.5 * this.mass * this.velocity.normSquared();                                                              // 9216
};                                                                                                                     // 9217
                                                                                                                       // 9218
/**                                                                                                                    // 9219
 * Generate transform from the current position state                                                                  // 9220
 *                                                                                                                     // 9221
 * @method getTransform                                                                                                // 9222
 * @return Transform {Transform}                                                                                       // 9223
 */                                                                                                                    // 9224
Particle.prototype.getTransform = function getTransform() {                                                            // 9225
    this._engine.step();                                                                                               // 9226
                                                                                                                       // 9227
    var position = this.position;                                                                                      // 9228
    var transform = this.transform;                                                                                    // 9229
                                                                                                                       // 9230
    transform[12] = position.x;                                                                                        // 9231
    transform[13] = position.y;                                                                                        // 9232
    transform[14] = position.z;                                                                                        // 9233
    return transform;                                                                                                  // 9234
};                                                                                                                     // 9235
                                                                                                                       // 9236
/**                                                                                                                    // 9237
 * The modify interface of a Modifier                                                                                  // 9238
 *                                                                                                                     // 9239
 * @method modify                                                                                                      // 9240
 * @param target {Spec}                                                                                                // 9241
 * @return Spec {Spec}                                                                                                 // 9242
 */                                                                                                                    // 9243
Particle.prototype.modify = function modify(target) {                                                                  // 9244
    var _spec = this._spec.target;                                                                                     // 9245
    _spec.transform = this.getTransform();                                                                             // 9246
    _spec.target = target;                                                                                             // 9247
    return this._spec;                                                                                                 // 9248
};                                                                                                                     // 9249
                                                                                                                       // 9250
// private                                                                                                             // 9251
function _createEventOutput() {                                                                                        // 9252
    this._eventOutput = new EventHandler();                                                                            // 9253
    this._eventOutput.bindThis(this);                                                                                  // 9254
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9255
}                                                                                                                      // 9256
                                                                                                                       // 9257
Particle.prototype.emit = function emit(type, data) {                                                                  // 9258
    if (!this._eventOutput) return;                                                                                    // 9259
    this._eventOutput.emit(type, data);                                                                                // 9260
};                                                                                                                     // 9261
                                                                                                                       // 9262
Particle.prototype.on = function on() {                                                                                // 9263
    _createEventOutput.call(this);                                                                                     // 9264
    return this.on.apply(this, arguments);                                                                             // 9265
};                                                                                                                     // 9266
                                                                                                                       // 9267
Particle.prototype.removeListener = function removeListener() {                                                        // 9268
    _createEventOutput.call(this);                                                                                     // 9269
    return this.removeListener.apply(this, arguments);                                                                 // 9270
};                                                                                                                     // 9271
                                                                                                                       // 9272
Particle.prototype.pipe = function pipe() {                                                                            // 9273
    _createEventOutput.call(this);                                                                                     // 9274
    return this.pipe.apply(this, arguments);                                                                           // 9275
};                                                                                                                     // 9276
                                                                                                                       // 9277
Particle.prototype.unpipe = function unpipe() {                                                                        // 9278
    _createEventOutput.call(this);                                                                                     // 9279
    return this.unpipe.apply(this, arguments);                                                                         // 9280
};                                                                                                                     // 9281
                                                                                                                       // 9282
module.exports = Particle;                                                                                             // 9283
},{"../../core/EventHandler":7,"../../core/Transform":15,"../../math/Vector":42,"../integrators/SymplecticEuler":73}],53:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9285
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9286
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9287
 *                                                                                                                     // 9288
 * Owner: david@famo.us                                                                                                // 9289
 * @license MPL 2.0                                                                                                    // 9290
 * @copyright Famous Industries, Inc. 2014                                                                             // 9291
 */                                                                                                                    // 9292
                                                                                                                       // 9293
var Body = _dereq_('./Body');                                                                                          // 9294
var Matrix = _dereq_('../../math/Matrix');                                                                             // 9295
                                                                                                                       // 9296
/**                                                                                                                    // 9297
 * Implements a rectangular geometry for an Body with                                                                  // 9298
 * size = [width, height].                                                                                             // 9299
 *                                                                                                                     // 9300
 * @class Rectangle                                                                                                    // 9301
 * @extends Body                                                                                                       // 9302
 * @constructor                                                                                                        // 9303
 */                                                                                                                    // 9304
function Rectangle(options) {                                                                                          // 9305
    options = options || {};                                                                                           // 9306
    this.size = options.size || [0,0];                                                                                 // 9307
    Body.call(this, options);                                                                                          // 9308
}                                                                                                                      // 9309
                                                                                                                       // 9310
Rectangle.prototype = Object.create(Body.prototype);                                                                   // 9311
Rectangle.prototype.constructor = Rectangle;                                                                           // 9312
                                                                                                                       // 9313
/**                                                                                                                    // 9314
 * Basic setter for size.                                                                                              // 9315
 * @method setSize                                                                                                     // 9316
 * @param size {Array} size = [width, height]                                                                          // 9317
 */                                                                                                                    // 9318
Rectangle.prototype.setSize = function setSize(size) {                                                                 // 9319
    this.size = size;                                                                                                  // 9320
    this.setMomentsOfInertia();                                                                                        // 9321
};                                                                                                                     // 9322
                                                                                                                       // 9323
Rectangle.prototype.setMomentsOfInertia = function setMomentsOfInertia() {                                             // 9324
    var m = this.mass;                                                                                                 // 9325
    var w = this.size[0];                                                                                              // 9326
    var h = this.size[1];                                                                                              // 9327
                                                                                                                       // 9328
    this.inertia = new Matrix([                                                                                        // 9329
        [m * h * h / 12, 0, 0],                                                                                        // 9330
        [0, m * w * w / 12, 0],                                                                                        // 9331
        [0, 0, m * (w * w + h * h) / 12]                                                                               // 9332
    ]);                                                                                                                // 9333
                                                                                                                       // 9334
    this.inverseInertia = new Matrix([                                                                                 // 9335
        [12 / (m * h * h), 0, 0],                                                                                      // 9336
        [0, 12 / (m * w * w), 0],                                                                                      // 9337
        [0, 0, 12 / (m * (w * w + h * h))]                                                                             // 9338
    ]);                                                                                                                // 9339
};                                                                                                                     // 9340
                                                                                                                       // 9341
module.exports = Rectangle;                                                                                            // 9342
},{"../../math/Matrix":38,"./Body":50}],54:[function(_dereq_,module,exports){                                          // 9343
module.exports = {                                                                                                     // 9344
  Body: _dereq_('./Body'),                                                                                             // 9345
  Circle: _dereq_('./Circle'),                                                                                         // 9346
  Particle: _dereq_('./Particle'),                                                                                     // 9347
  Rectangle: _dereq_('./Rectangle')                                                                                    // 9348
};                                                                                                                     // 9349
                                                                                                                       // 9350
},{"./Body":50,"./Circle":51,"./Particle":52,"./Rectangle":53}],55:[function(_dereq_,module,exports){                  // 9351
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9352
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9353
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9354
 *                                                                                                                     // 9355
 * Owner: david@famo.us                                                                                                // 9356
 * @license MPL 2.0                                                                                                    // 9357
 * @copyright Famous Industries, Inc. 2014                                                                             // 9358
 */                                                                                                                    // 9359
                                                                                                                       // 9360
var Constraint = _dereq_('./Constraint');                                                                              // 9361
var Vector = _dereq_('../../math/Vector');                                                                             // 9362
                                                                                                                       // 9363
/**                                                                                                                    // 9364
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9365
 *                                                                                                                     // 9366
 *  @class Collision                                                                                                   // 9367
 *  @constructor                                                                                                       // 9368
 *  @extends Constraint                                                                                                // 9369
 *  @param {Options} [options] An object of configurable options.                                                      // 9370
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) Range : [0, 1] // 9371
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers           // 9373
 *                                                                                                                     // 9374
 */                                                                                                                    // 9375
function Collision(options) {                                                                                          // 9376
    this.options = Object.create(Collision.DEFAULT_OPTIONS);                                                           // 9377
    if (options) this.setOptions(options);                                                                             // 9378
                                                                                                                       // 9379
    //registers                                                                                                        // 9380
    this.normal   = new Vector();                                                                                      // 9381
    this.pDiff    = new Vector();                                                                                      // 9382
    this.vDiff    = new Vector();                                                                                      // 9383
    this.impulse1 = new Vector();                                                                                      // 9384
    this.impulse2 = new Vector();                                                                                      // 9385
                                                                                                                       // 9386
    Constraint.call(this);                                                                                             // 9387
}                                                                                                                      // 9388
                                                                                                                       // 9389
Collision.prototype = Object.create(Constraint.prototype);                                                             // 9390
Collision.prototype.constructor = Collision;                                                                           // 9391
                                                                                                                       // 9392
Collision.DEFAULT_OPTIONS = {                                                                                          // 9393
    restitution : 0.5,                                                                                                 // 9394
    drift : 0.5,                                                                                                       // 9395
    slop : 0                                                                                                           // 9396
};                                                                                                                     // 9397
                                                                                                                       // 9398
function _normalVelocity(particle1, particle2) {                                                                       // 9399
    return particle1.velocity.dot(particle2.velocity);                                                                 // 9400
}                                                                                                                      // 9401
                                                                                                                       // 9402
/*                                                                                                                     // 9403
 * Setter for options.                                                                                                 // 9404
 *                                                                                                                     // 9405
 * @method setOptions                                                                                                  // 9406
 * @param options {Objects}                                                                                            // 9407
 */                                                                                                                    // 9408
Collision.prototype.setOptions = function setOptions(options) {                                                        // 9409
    for (var key in options) this.options[key] = options[key];                                                         // 9410
};                                                                                                                     // 9411
                                                                                                                       // 9412
/**                                                                                                                    // 9413
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9414
 *                                                                                                                     // 9415
 * @method applyConstraint                                                                                             // 9416
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9417
 * @param source {Body}         The source of the constraint                                                           // 9418
 * @param dt {Number}           Delta time                                                                             // 9419
 */                                                                                                                    // 9420
Collision.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                  // 9421
    if (source === undefined) return;                                                                                  // 9422
                                                                                                                       // 9423
    var v1 = source.velocity;                                                                                          // 9424
    var p1 = source.position;                                                                                          // 9425
    var w1 = source.inverseMass;                                                                                       // 9426
    var r1 = source.radius;                                                                                            // 9427
                                                                                                                       // 9428
    var options = this.options;                                                                                        // 9429
    var drift = options.drift;                                                                                         // 9430
    var slop = -options.slop;                                                                                          // 9431
    var restitution = options.restitution;                                                                             // 9432
                                                                                                                       // 9433
    var n     = this.normal;                                                                                           // 9434
    var pDiff = this.pDiff;                                                                                            // 9435
    var vDiff = this.vDiff;                                                                                            // 9436
    var impulse1 = this.impulse1;                                                                                      // 9437
    var impulse2 = this.impulse2;                                                                                      // 9438
                                                                                                                       // 9439
    for (var i = 0; i < targets.length; i++) {                                                                         // 9440
        var target = targets[i];                                                                                       // 9441
                                                                                                                       // 9442
        if (target === source) continue;                                                                               // 9443
                                                                                                                       // 9444
        var v2 = target.velocity;                                                                                      // 9445
        var p2 = target.position;                                                                                      // 9446
        var w2 = target.inverseMass;                                                                                   // 9447
        var r2 = target.radius;                                                                                        // 9448
                                                                                                                       // 9449
        pDiff.set(p2.sub(p1));                                                                                         // 9450
        vDiff.set(v2.sub(v1));                                                                                         // 9451
                                                                                                                       // 9452
        var dist    = pDiff.norm();                                                                                    // 9453
        var overlap = dist - (r1 + r2);                                                                                // 9454
        var effMass = 1/(w1 + w2);                                                                                     // 9455
        var gamma   = 0;                                                                                               // 9456
                                                                                                                       // 9457
        if (overlap < 0) {                                                                                             // 9458
                                                                                                                       // 9459
            n.set(pDiff.normalize());                                                                                  // 9460
                                                                                                                       // 9461
            if (this._eventOutput) {                                                                                   // 9462
                var collisionData = {                                                                                  // 9463
                    target  : target,                                                                                  // 9464
                    source  : source,                                                                                  // 9465
                    overlap : overlap,                                                                                 // 9466
                    normal  : n                                                                                        // 9467
                };                                                                                                     // 9468
                                                                                                                       // 9469
                this._eventOutput.emit('preCollision', collisionData);                                                 // 9470
                this._eventOutput.emit('collision', collisionData);                                                    // 9471
            }                                                                                                          // 9472
                                                                                                                       // 9473
            var lambda = (overlap <= slop)                                                                             // 9474
                ? ((1 + restitution) * n.dot(vDiff) + drift/dt * (overlap - slop)) / (gamma + dt/effMass)              // 9475
                : ((1 + restitution) * n.dot(vDiff)) / (gamma + dt/effMass);                                           // 9476
                                                                                                                       // 9477
            n.mult(dt*lambda).put(impulse1);                                                                           // 9478
            impulse1.mult(-1).put(impulse2);                                                                           // 9479
                                                                                                                       // 9480
            source.applyImpulse(impulse1);                                                                             // 9481
            target.applyImpulse(impulse2);                                                                             // 9482
                                                                                                                       // 9483
            //source.setPosition(p1.add(n.mult(overlap/2)));                                                           // 9484
            //target.setPosition(p2.sub(n.mult(overlap/2)));                                                           // 9485
                                                                                                                       // 9486
            if (this._eventOutput) this._eventOutput.emit('postCollision', collisionData);                             // 9487
                                                                                                                       // 9488
        }                                                                                                              // 9489
    }                                                                                                                  // 9490
};                                                                                                                     // 9491
                                                                                                                       // 9492
module.exports = Collision;                                                                                            // 9493
},{"../../math/Vector":42,"./Constraint":56}],56:[function(_dereq_,module,exports){                                    // 9494
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9495
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9496
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9497
 *                                                                                                                     // 9498
 * Owner: david@famo.us                                                                                                // 9499
 * @license MPL 2.0                                                                                                    // 9500
 * @copyright Famous Industries, Inc. 2014                                                                             // 9501
 */                                                                                                                    // 9502
                                                                                                                       // 9503
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 9504
                                                                                                                       // 9505
/**                                                                                                                    // 9506
 *  Allows for two circular bodies to collide and bounce off each other.                                               // 9507
 *                                                                                                                     // 9508
 *  @class Constraint                                                                                                  // 9509
 *  @constructor                                                                                                       // 9510
 *  @uses EventHandler                                                                                                 // 9511
 *  @param options {Object}                                                                                            // 9512
 */                                                                                                                    // 9513
function Constraint() {                                                                                                // 9514
    this.options = this.options || {};                                                                                 // 9515
    this._eventOutput = new EventHandler();                                                                            // 9516
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 9517
}                                                                                                                      // 9518
                                                                                                                       // 9519
/*                                                                                                                     // 9520
 * Setter for options.                                                                                                 // 9521
 *                                                                                                                     // 9522
 * @method setOptions                                                                                                  // 9523
 * @param options {Objects}                                                                                            // 9524
 */                                                                                                                    // 9525
Constraint.prototype.setOptions = function setOptions(options) {                                                       // 9526
    this._eventOutput.emit('change', options);                                                                         // 9527
};                                                                                                                     // 9528
                                                                                                                       // 9529
/**                                                                                                                    // 9530
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9531
 *                                                                                                                     // 9532
 * @method applyConstraint                                                                                             // 9533
 */                                                                                                                    // 9534
Constraint.prototype.applyConstraint = function applyConstraint() {};                                                  // 9535
                                                                                                                       // 9536
/**                                                                                                                    // 9537
 * Getter for energy                                                                                                   // 9538
 *                                                                                                                     // 9539
 * @method getEnergy                                                                                                   // 9540
 * @return energy {Number}                                                                                             // 9541
 */                                                                                                                    // 9542
Constraint.prototype.getEnergy = function getEnergy() {                                                                // 9543
    return 0.0;                                                                                                        // 9544
};                                                                                                                     // 9545
                                                                                                                       // 9546
module.exports = Constraint;                                                                                           // 9547
},{"../../core/EventHandler":7}],57:[function(_dereq_,module,exports){                                                 // 9548
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9549
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9550
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9551
 *                                                                                                                     // 9552
 * Owner: david@famo.us                                                                                                // 9553
 * @license MPL 2.0                                                                                                    // 9554
 * @copyright Famous Industries, Inc. 2014                                                                             // 9555
 */                                                                                                                    // 9556
                                                                                                                       // 9557
var Constraint = _dereq_('./Constraint');                                                                              // 9558
var Vector = _dereq_('../../math/Vector');                                                                             // 9559
                                                                                                                       // 9560
/**                                                                                                                    // 9561
 *  A constraint that keeps a physics body on a given implicit curve                                                   // 9562
 *    regardless of other physical forces are applied to it.                                                           // 9563
 *                                                                                                                     // 9564
 *    A curve constraint is two surface constraints in disguise, as a curve is                                         // 9565
 *    the intersection of two surfaces, and is essentially constrained to both                                         // 9566
 *                                                                                                                     // 9567
 *  @class Curve                                                                                                       // 9568
 *  @constructor                                                                                                       // 9569
 *  @extends Constraint                                                                                                // 9570
 *  @param {Options} [options] An object of configurable options.                                                      // 9571
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y - r*r } corresponds to a circle of radius r pixels
 *  @param {Function} [options.plane] An implicitly defined second surface that the body is constrained to             // 9573
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated                          // 9574
 *  @param {Number} [options.number] The damping-like reaction when the constraint is violated                         // 9575
 */                                                                                                                    // 9576
function Curve(options) {                                                                                              // 9577
    this.options = Object.create(Curve.DEFAULT_OPTIONS);                                                               // 9578
    if (options) this.setOptions(options);                                                                             // 9579
                                                                                                                       // 9580
    //registers                                                                                                        // 9581
    this.J = new Vector();                                                                                             // 9582
    this.impulse = new Vector();                                                                                       // 9583
                                                                                                                       // 9584
    Constraint.call(this);                                                                                             // 9585
}                                                                                                                      // 9586
                                                                                                                       // 9587
Curve.prototype = Object.create(Constraint.prototype);                                                                 // 9588
Curve.prototype.constructor = Curve;                                                                                   // 9589
                                                                                                                       // 9590
/** @const */ var epsilon = 1e-7;                                                                                      // 9591
/** @const */ var pi = Math.PI;                                                                                        // 9592
                                                                                                                       // 9593
Curve.DEFAULT_OPTIONS = {                                                                                              // 9594
    equation  : function(x,y,z) {                                                                                      // 9595
        return 0;                                                                                                      // 9596
    },                                                                                                                 // 9597
    plane : function(x,y,z) {                                                                                          // 9598
        return z;                                                                                                      // 9599
    },                                                                                                                 // 9600
    period : 0,                                                                                                        // 9601
    dampingRatio : 0                                                                                                   // 9602
};                                                                                                                     // 9603
                                                                                                                       // 9604
/**                                                                                                                    // 9605
 * Basic options setter                                                                                                // 9606
 *                                                                                                                     // 9607
 * @method setOptions                                                                                                  // 9608
 * @param options {Objects}                                                                                            // 9609
 */                                                                                                                    // 9610
Curve.prototype.setOptions = function setOptions(options) {                                                            // 9611
    for (var key in options) this.options[key] = options[key];                                                         // 9612
};                                                                                                                     // 9613
                                                                                                                       // 9614
/**                                                                                                                    // 9615
 * Adds a curve impulse to a physics body.                                                                             // 9616
 *                                                                                                                     // 9617
 * @method applyConstraint                                                                                             // 9618
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 9619
 * @param source {Body} Not applicable                                                                                 // 9620
 * @param dt {Number} Delta time                                                                                       // 9621
 */                                                                                                                    // 9622
Curve.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 9623
    var options = this.options;                                                                                        // 9624
    var impulse = this.impulse;                                                                                        // 9625
    var J = this.J;                                                                                                    // 9626
                                                                                                                       // 9627
    var f = options.equation;                                                                                          // 9628
    var g = options.plane;                                                                                             // 9629
    var dampingRatio = options.dampingRatio;                                                                           // 9630
    var period = options.period;                                                                                       // 9631
                                                                                                                       // 9632
    for (var i = 0; i < targets.length; i++) {                                                                         // 9633
        var body = targets[i];                                                                                         // 9634
                                                                                                                       // 9635
        var v = body.velocity;                                                                                         // 9636
        var p = body.position;                                                                                         // 9637
        var m = body.mass;                                                                                             // 9638
                                                                                                                       // 9639
        var gamma;                                                                                                     // 9640
        var beta;                                                                                                      // 9641
                                                                                                                       // 9642
        if (period === 0) {                                                                                            // 9643
            gamma = 0;                                                                                                 // 9644
            beta = 1;                                                                                                  // 9645
        }                                                                                                              // 9646
        else {                                                                                                         // 9647
            var c = 4 * m * pi * dampingRatio / period;                                                                // 9648
            var k = 4 * m * pi * pi / (period * period);                                                               // 9649
                                                                                                                       // 9650
            gamma = 1 / (c + dt*k);                                                                                    // 9651
            beta  = dt*k / (c + dt*k);                                                                                 // 9652
        }                                                                                                              // 9653
                                                                                                                       // 9654
        var x = p.x;                                                                                                   // 9655
        var y = p.y;                                                                                                   // 9656
        var z = p.z;                                                                                                   // 9657
                                                                                                                       // 9658
        var f0  = f(x, y, z);                                                                                          // 9659
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 9660
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 9661
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 9662
                                                                                                                       // 9663
        var g0  = g(x, y, z);                                                                                          // 9664
        var dgx = (g(x + epsilon, y, z) - g0) / epsilon;                                                               // 9665
        var dgy = (g(x, y + epsilon, z) - g0) / epsilon;                                                               // 9666
        var dgz = (g(x, y, z + epsilon) - g0) / epsilon;                                                               // 9667
                                                                                                                       // 9668
        J.setXYZ(dfx + dgx, dfy + dgy, dfz + dgz);                                                                     // 9669
                                                                                                                       // 9670
        var antiDrift = beta/dt * (f0 + g0);                                                                           // 9671
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 9672
                                                                                                                       // 9673
        impulse.set(J.mult(dt*lambda));                                                                                // 9674
        body.applyImpulse(impulse);                                                                                    // 9675
    }                                                                                                                  // 9676
};                                                                                                                     // 9677
                                                                                                                       // 9678
module.exports = Curve;                                                                                                // 9679
},{"../../math/Vector":42,"./Constraint":56}],58:[function(_dereq_,module,exports){                                    // 9680
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9681
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9682
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9683
 *                                                                                                                     // 9684
 * Owner: david@famo.us                                                                                                // 9685
 * @license MPL 2.0                                                                                                    // 9686
 * @copyright Famous Industries, Inc. 2014                                                                             // 9687
 */                                                                                                                    // 9688
                                                                                                                       // 9689
var Constraint = _dereq_('./Constraint');                                                                              // 9690
var Vector = _dereq_('../../math/Vector');                                                                             // 9691
                                                                                                                       // 9692
/**                                                                                                                    // 9693
 *  A constraint that keeps a physics body a given distance away from a given                                          // 9694
 *  anchor, or another attached body.                                                                                  // 9695
 *                                                                                                                     // 9696
 *                                                                                                                     // 9697
 *  @class Distance                                                                                                    // 9698
 *  @constructor                                                                                                       // 9699
 *  @extends Constraint                                                                                                // 9700
 *  @param {Options} [options] An object of configurable options.                                                      // 9701
 *  @param {Array} [options.anchor] The location of the anchor                                                         // 9702
 *  @param {Number} [options.length] The amount of distance from the anchor the constraint should enforce              // 9703
 *  @param {Number} [options.minLength] The minimum distance before the constraint is activated. Use this property for a "rope" effect.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is broken.                           // 9705
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is broken.                    // 9706
 *                                                                                                                     // 9707
 */                                                                                                                    // 9708
function Distance(options) {                                                                                           // 9709
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9710
    if (options) this.setOptions(options);                                                                             // 9711
                                                                                                                       // 9712
    //registers                                                                                                        // 9713
    this.impulse  = new Vector();                                                                                      // 9714
    this.normal   = new Vector();                                                                                      // 9715
    this.diffP    = new Vector();                                                                                      // 9716
    this.diffV    = new Vector();                                                                                      // 9717
                                                                                                                       // 9718
    Constraint.call(this);                                                                                             // 9719
}                                                                                                                      // 9720
                                                                                                                       // 9721
Distance.prototype = Object.create(Constraint.prototype);                                                              // 9722
Distance.prototype.constructor = Distance;                                                                             // 9723
                                                                                                                       // 9724
Distance.DEFAULT_OPTIONS = {                                                                                           // 9725
    anchor : null,                                                                                                     // 9726
    length : 0,                                                                                                        // 9727
    minLength : 0,                                                                                                     // 9728
    period : 0,                                                                                                        // 9729
    dampingRatio : 0                                                                                                   // 9730
};                                                                                                                     // 9731
                                                                                                                       // 9732
/** @const */ var pi = Math.PI;                                                                                        // 9733
                                                                                                                       // 9734
/**                                                                                                                    // 9735
 * Basic options setter                                                                                                // 9736
 *                                                                                                                     // 9737
 * @method setOptions                                                                                                  // 9738
 * @param options {Objects}                                                                                            // 9739
 */                                                                                                                    // 9740
Distance.prototype.setOptions = function setOptions(options) {                                                         // 9741
    if (options.anchor) {                                                                                              // 9742
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9743
        if (options.anchor   instanceof Vector)  this.options.anchor = options.anchor;                                 // 9744
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9745
    }                                                                                                                  // 9746
    if (options.length !== undefined) this.options.length = options.length;                                            // 9747
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9748
    if (options.period !== undefined) this.options.period = options.period;                                            // 9749
    if (options.minLength !== undefined) this.options.minLength = options.minLength;                                   // 9750
};                                                                                                                     // 9751
                                                                                                                       // 9752
function _calcError(impulse, body) {                                                                                   // 9753
    return body.mass * impulse.norm();                                                                                 // 9754
}                                                                                                                      // 9755
                                                                                                                       // 9756
/**                                                                                                                    // 9757
 * Set the anchor position                                                                                             // 9758
 *                                                                                                                     // 9759
 * @method setOptions                                                                                                  // 9760
 * @param anchor {Array}                                                                                               // 9761
 */                                                                                                                    // 9762
Distance.prototype.setAnchor = function setAnchor(anchor) {                                                            // 9763
    if (!this.options.anchor) this.options.anchor = new Vector();                                                      // 9764
    this.options.anchor.set(anchor);                                                                                   // 9765
};                                                                                                                     // 9766
                                                                                                                       // 9767
/**                                                                                                                    // 9768
 * Adds an impulse to a physics body's velocity due to the constraint                                                  // 9769
 *                                                                                                                     // 9770
 * @method applyConstraint                                                                                             // 9771
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9772
 * @param source {Body}         The source of the constraint                                                           // 9773
 * @param dt {Number}           Delta time                                                                             // 9774
 */                                                                                                                    // 9775
Distance.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                   // 9776
    var n        = this.normal;                                                                                        // 9777
    var diffP    = this.diffP;                                                                                         // 9778
    var diffV    = this.diffV;                                                                                         // 9779
    var impulse  = this.impulse;                                                                                       // 9780
    var options  = this.options;                                                                                       // 9781
                                                                                                                       // 9782
    var dampingRatio = options.dampingRatio;                                                                           // 9783
    var period       = options.period;                                                                                 // 9784
    var minLength    = options.minLength;                                                                              // 9785
                                                                                                                       // 9786
    var p2;                                                                                                            // 9787
    var w2;                                                                                                            // 9788
                                                                                                                       // 9789
    if (source) {                                                                                                      // 9790
        var v2 = source.velocity;                                                                                      // 9791
        p2 = source.position;                                                                                          // 9792
        w2 = source.inverseMass;                                                                                       // 9793
    }                                                                                                                  // 9794
    else {                                                                                                             // 9795
        p2 = this.options.anchor;                                                                                      // 9796
        w2 = 0;                                                                                                        // 9797
    }                                                                                                                  // 9798
                                                                                                                       // 9799
    var length = this.options.length;                                                                                  // 9800
                                                                                                                       // 9801
    for (var i = 0; i < targets.length; i++) {                                                                         // 9802
        var body = targets[i];                                                                                         // 9803
                                                                                                                       // 9804
        var v1 = body.velocity;                                                                                        // 9805
        var p1 = body.position;                                                                                        // 9806
        var w1 = body.inverseMass;                                                                                     // 9807
                                                                                                                       // 9808
        diffP.set(p1.sub(p2));                                                                                         // 9809
        n.set(diffP.normalize());                                                                                      // 9810
                                                                                                                       // 9811
        var dist = diffP.norm() - length;                                                                              // 9812
                                                                                                                       // 9813
        //rope effect                                                                                                  // 9814
        if (Math.abs(dist) < minLength) return;                                                                        // 9815
                                                                                                                       // 9816
        if (source) diffV.set(v1.sub(v2));                                                                             // 9817
        else diffV.set(v1);                                                                                            // 9818
                                                                                                                       // 9819
        var effMass = 1 / (w1 + w2);                                                                                   // 9820
        var gamma;                                                                                                     // 9821
        var beta;                                                                                                      // 9822
                                                                                                                       // 9823
        if (period === 0) {                                                                                            // 9824
            gamma = 0;                                                                                                 // 9825
            beta  = 1;                                                                                                 // 9826
        }                                                                                                              // 9827
        else {                                                                                                         // 9828
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9829
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9830
                                                                                                                       // 9831
            gamma = 1 / (c + dt*k);                                                                                    // 9832
            beta  = dt*k / (c + dt*k);                                                                                 // 9833
        }                                                                                                              // 9834
                                                                                                                       // 9835
        var antiDrift = beta/dt * dist;                                                                                // 9836
        var lambda    = -(n.dot(diffV) + antiDrift) / (gamma + dt/effMass);                                            // 9837
                                                                                                                       // 9838
        impulse.set(n.mult(dt*lambda));                                                                                // 9839
        body.applyImpulse(impulse);                                                                                    // 9840
                                                                                                                       // 9841
        if (source) source.applyImpulse(impulse.mult(-1));                                                             // 9842
    }                                                                                                                  // 9843
};                                                                                                                     // 9844
                                                                                                                       // 9845
module.exports = Distance;                                                                                             // 9846
},{"../../math/Vector":42,"./Constraint":56}],59:[function(_dereq_,module,exports){                                    // 9847
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 9848
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 9849
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 9850
 *                                                                                                                     // 9851
 * Owner: david@famo.us                                                                                                // 9852
 * @license MPL 2.0                                                                                                    // 9853
 * @copyright Famous Industries, Inc. 2014                                                                             // 9854
 */                                                                                                                    // 9855
                                                                                                                       // 9856
var Constraint = _dereq_('./Constraint');                                                                              // 9857
var Vector = _dereq_('../../math/Vector');                                                                             // 9858
                                                                                                                       // 9859
/**                                                                                                                    // 9860
 *  A spring constraint is like a spring force, except that it is always                                               // 9861
 *    numerically stable (even for low periods), at the expense of introducing                                         // 9862
 *    damping (even with dampingRatio set to 0).                                                                       // 9863
 *                                                                                                                     // 9864
 *    Use this if you need fast spring-like behavior, e.g., snapping                                                   // 9865
 *                                                                                                                     // 9866
 *  @class Snap                                                                                                        // 9867
 *  @constructor                                                                                                       // 9868
 *  @extends Constraint                                                                                                // 9869
 *  @param {Options} [options] An object of configurable options.                                                      // 9870
 *  @param {Number} [options.period] The amount of time in milliseconds taken for one complete oscillation when there is no damping. Range : [150, Infinity]
 *  @param {Number} [options.dampingRatio] Additional damping of the spring. Range : [0, 1]. At 0 this spring will still be damped, at 1 the spring will be critically damped (the spring will never oscillate)
 *  @param {Number} [options.length] The rest length of the spring. Range: [0, Infinity].                              // 9873
 *  @param {Array} [options.anchor] The location of the spring's anchor, if not another physics body.                  // 9874
 *                                                                                                                     // 9875
 */                                                                                                                    // 9876
function Snap(options) {                                                                                               // 9877
    Constraint.call(this);                                                                                             // 9878
                                                                                                                       // 9879
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 9880
    if (options) this.setOptions(options);                                                                             // 9881
                                                                                                                       // 9882
    //registers                                                                                                        // 9883
    this.pDiff  = new Vector();                                                                                        // 9884
    this.vDiff  = new Vector();                                                                                        // 9885
    this.impulse1 = new Vector();                                                                                      // 9886
    this.impulse2 = new Vector();                                                                                      // 9887
}                                                                                                                      // 9888
                                                                                                                       // 9889
Snap.prototype = Object.create(Constraint.prototype);                                                                  // 9890
Snap.prototype.constructor = Snap;                                                                                     // 9891
                                                                                                                       // 9892
Snap.DEFAULT_OPTIONS = {                                                                                               // 9893
    period : 300,                                                                                                      // 9894
    dampingRatio : 0.1,                                                                                                // 9895
    length : 0,                                                                                                        // 9896
    anchor : undefined                                                                                                 // 9897
};                                                                                                                     // 9898
                                                                                                                       // 9899
/** const */ var pi = Math.PI;                                                                                         // 9900
                                                                                                                       // 9901
/**                                                                                                                    // 9902
 * Basic options setter                                                                                                // 9903
 *                                                                                                                     // 9904
 * @method setOptions                                                                                                  // 9905
 * @param options {Objects} options                                                                                    // 9906
 */                                                                                                                    // 9907
Snap.prototype.setOptions = function setOptions(options) {                                                             // 9908
    if (options.anchor !== undefined) {                                                                                // 9909
        if (options.anchor   instanceof Vector) this.options.anchor = options.anchor;                                  // 9910
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 9911
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 9912
    }                                                                                                                  // 9913
    if (options.length !== undefined) this.options.length = options.length;                                            // 9914
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 9915
    if (options.period !== undefined) this.options.period = options.period;                                            // 9916
    Constraint.prototype.setOptions.call(this, options);                                                               // 9917
};                                                                                                                     // 9918
                                                                                                                       // 9919
/**                                                                                                                    // 9920
 * Calculates energy of spring                                                                                         // 9921
 *                                                                                                                     // 9922
 * @method getEnergy                                                                                                   // 9923
 * @param targets {Body} target physics body                                                                           // 9924
 * @param source {Body} source physics body                                                                            // 9925
 * @return energy {Number}                                                                                             // 9926
 */                                                                                                                    // 9927
Snap.prototype.getEnergy = function getEnergy(targets, source) {                                                       // 9928
    var options     = this.options;                                                                                    // 9929
    var restLength  = options.length;                                                                                  // 9930
    var anchor      = options.anchor || source.position;                                                               // 9931
    var strength    = Math.pow(2 * pi / options.period, 2);                                                            // 9932
                                                                                                                       // 9933
    var energy = 0.0;                                                                                                  // 9934
    for (var i = 0; i < targets.length; i++){                                                                          // 9935
        var target = targets[i];                                                                                       // 9936
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 9937
        energy += 0.5 * strength * dist * dist;                                                                        // 9938
    }                                                                                                                  // 9939
    return energy;                                                                                                     // 9940
};                                                                                                                     // 9941
                                                                                                                       // 9942
/**                                                                                                                    // 9943
 * Adds a spring impulse to a physics body's velocity due to the constraint                                            // 9944
 *                                                                                                                     // 9945
 * @method applyConstraint                                                                                             // 9946
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 9947
 * @param source {Body}         The source of the constraint                                                           // 9948
 * @param dt {Number}           Delta time                                                                             // 9949
 */                                                                                                                    // 9950
Snap.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 9951
    var options      = this.options;                                                                                   // 9952
    var pDiff        = this.pDiff;                                                                                     // 9953
    var vDiff        = this.vDiff;                                                                                     // 9954
    var impulse1     = this.impulse1;                                                                                  // 9955
    var impulse2     = this.impulse2;                                                                                  // 9956
    var length       = options.length;                                                                                 // 9957
    var anchor       = options.anchor || source.position;                                                              // 9958
    var period       = options.period;                                                                                 // 9959
    var dampingRatio = options.dampingRatio;                                                                           // 9960
                                                                                                                       // 9961
    for (var i = 0; i < targets.length ; i++) {                                                                        // 9962
        var target = targets[i];                                                                                       // 9963
                                                                                                                       // 9964
        var p1 = target.position;                                                                                      // 9965
        var v1 = target.velocity;                                                                                      // 9966
        var m1 = target.mass;                                                                                          // 9967
        var w1 = target.inverseMass;                                                                                   // 9968
                                                                                                                       // 9969
        pDiff.set(p1.sub(anchor));                                                                                     // 9970
        var dist = pDiff.norm() - length;                                                                              // 9971
        var effMass;                                                                                                   // 9972
                                                                                                                       // 9973
        if (source) {                                                                                                  // 9974
            var w2 = source.inverseMass;                                                                               // 9975
            var v2 = source.velocity;                                                                                  // 9976
            vDiff.set(v1.sub(v2));                                                                                     // 9977
            effMass = 1 / (w1 + w2);                                                                                   // 9978
        }                                                                                                              // 9979
        else {                                                                                                         // 9980
            vDiff.set(v1);                                                                                             // 9981
            effMass = m1;                                                                                              // 9982
        }                                                                                                              // 9983
                                                                                                                       // 9984
        var gamma;                                                                                                     // 9985
        var beta;                                                                                                      // 9986
                                                                                                                       // 9987
        if (this.options.period === 0) {                                                                               // 9988
            gamma = 0;                                                                                                 // 9989
            beta = 1;                                                                                                  // 9990
        }                                                                                                              // 9991
        else {                                                                                                         // 9992
            var k = 4 * effMass * pi * pi / (period * period);                                                         // 9993
            var c = 4 * effMass * pi * dampingRatio / period;                                                          // 9994
                                                                                                                       // 9995
            beta  = dt * k / (c + dt * k);                                                                             // 9996
            gamma = 1 / (c + dt*k);                                                                                    // 9997
        }                                                                                                              // 9998
                                                                                                                       // 9999
        var antiDrift = beta/dt * dist;                                                                                // 10000
        pDiff.normalize(-antiDrift)                                                                                    // 10001
            .sub(vDiff)                                                                                                // 10002
            .mult(dt / (gamma + dt/effMass))                                                                           // 10003
            .put(impulse1);                                                                                            // 10004
                                                                                                                       // 10005
        // var n = new Vector();                                                                                       // 10006
        // n.set(pDiff.normalize());                                                                                   // 10007
        // var lambda = -(n.dot(vDiff) + antiDrift) / (gamma + dt/effMass);                                            // 10008
        // impulse2.set(n.mult(dt*lambda));                                                                            // 10009
                                                                                                                       // 10010
        target.applyImpulse(impulse1);                                                                                 // 10011
                                                                                                                       // 10012
        if (source) {                                                                                                  // 10013
            impulse1.mult(-1).put(impulse2);                                                                           // 10014
            source.applyImpulse(impulse2);                                                                             // 10015
        }                                                                                                              // 10016
    }                                                                                                                  // 10017
};                                                                                                                     // 10018
                                                                                                                       // 10019
module.exports = Snap;                                                                                                 // 10020
},{"../../math/Vector":42,"./Constraint":56}],60:[function(_dereq_,module,exports){                                    // 10021
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10022
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10023
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10024
 *                                                                                                                     // 10025
 * Owner: david@famo.us                                                                                                // 10026
 * @license MPL 2.0                                                                                                    // 10027
 * @copyright Famous Industries, Inc. 2014                                                                             // 10028
 */                                                                                                                    // 10029
                                                                                                                       // 10030
var Constraint = _dereq_('./Constraint');                                                                              // 10031
var Vector = _dereq_('../../math/Vector');                                                                             // 10032
                                                                                                                       // 10033
/**                                                                                                                    // 10034
 *  A constraint that keeps a physics body on a given implicit surface                                                 // 10035
 *    regardless of other physical forces are applied to it.                                                           // 10036
 *                                                                                                                     // 10037
 *  @class Surface                                                                                                     // 10038
 *  @constructor                                                                                                       // 10039
 *  @extends Constraint                                                                                                // 10040
 *  @param {Options} [options] An object of configurable options.                                                      // 10041
 *  @param {Function} [options.equation] An implicitly defined surface f(x,y,z) = 0 that body is constrained to e.g. function(x,y,z) { x*x + y*y + z*z - r*r } corresponds to a sphere of radius r pixels.
 *  @param {Number} [options.period] The spring-like reaction when the constraint is violated.                         // 10043
 *  @param {Number} [options.dampingRatio] The damping-like reaction when the constraint is violated.                  // 10044
 */                                                                                                                    // 10045
function Surface(options) {                                                                                            // 10046
    this.options = Object.create(Surface.DEFAULT_OPTIONS);                                                             // 10047
    if (options) this.setOptions(options);                                                                             // 10048
                                                                                                                       // 10049
    this.J = new Vector();                                                                                             // 10050
    this.impulse  = new Vector();                                                                                      // 10051
                                                                                                                       // 10052
    Constraint.call(this);                                                                                             // 10053
}                                                                                                                      // 10054
                                                                                                                       // 10055
Surface.prototype = Object.create(Constraint.prototype);                                                               // 10056
Surface.prototype.constructor = Surface;                                                                               // 10057
                                                                                                                       // 10058
Surface.DEFAULT_OPTIONS = {                                                                                            // 10059
    equation : undefined,                                                                                              // 10060
    period : 0,                                                                                                        // 10061
    dampingRatio : 0                                                                                                   // 10062
};                                                                                                                     // 10063
                                                                                                                       // 10064
/** @const */ var epsilon = 1e-7;                                                                                      // 10065
/** @const */ var pi = Math.PI;                                                                                        // 10066
                                                                                                                       // 10067
/**                                                                                                                    // 10068
 * Basic options setter                                                                                                // 10069
 *                                                                                                                     // 10070
 * @method setOptions                                                                                                  // 10071
 * @param options {Objects}                                                                                            // 10072
 */                                                                                                                    // 10073
Surface.prototype.setOptions = function setOptions(options) {                                                          // 10074
    for (var key in options) this.options[key] = options[key];                                                         // 10075
};                                                                                                                     // 10076
                                                                                                                       // 10077
/**                                                                                                                    // 10078
 * Adds a surface impulse to a physics body.                                                                           // 10079
 *                                                                                                                     // 10080
 * @method applyConstraint                                                                                             // 10081
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 10082
 * @param source {Body} Not applicable                                                                                 // 10083
 * @param dt {Number} Delta time                                                                                       // 10084
 */                                                                                                                    // 10085
Surface.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                    // 10086
    var impulse = this.impulse;                                                                                        // 10087
    var J       = this.J;                                                                                              // 10088
    var options = this.options;                                                                                        // 10089
                                                                                                                       // 10090
    var f = options.equation;                                                                                          // 10091
    var dampingRatio = options.dampingRatio;                                                                           // 10092
    var period = options.period;                                                                                       // 10093
                                                                                                                       // 10094
    for (var i = 0; i < targets.length; i++) {                                                                         // 10095
        var particle = targets[i];                                                                                     // 10096
                                                                                                                       // 10097
        var v = particle.velocity;                                                                                     // 10098
        var p = particle.position;                                                                                     // 10099
        var m = particle.mass;                                                                                         // 10100
                                                                                                                       // 10101
        var gamma;                                                                                                     // 10102
        var beta;                                                                                                      // 10103
                                                                                                                       // 10104
        if (period === 0) {                                                                                            // 10105
            gamma = 0;                                                                                                 // 10106
            beta = 1;                                                                                                  // 10107
        }                                                                                                              // 10108
        else {                                                                                                         // 10109
            var c = 4 * m * pi * dampingRatio / period;                                                                // 10110
            var k = 4 * m * pi * pi / (period * period);                                                               // 10111
                                                                                                                       // 10112
            gamma = 1 / (c + dt*k);                                                                                    // 10113
            beta  = dt*k / (c + dt*k);                                                                                 // 10114
        }                                                                                                              // 10115
                                                                                                                       // 10116
        var x = p.x;                                                                                                   // 10117
        var y = p.y;                                                                                                   // 10118
        var z = p.z;                                                                                                   // 10119
                                                                                                                       // 10120
        var f0  = f(x, y, z);                                                                                          // 10121
        var dfx = (f(x + epsilon, p, p) - f0) / epsilon;                                                               // 10122
        var dfy = (f(x, y + epsilon, p) - f0) / epsilon;                                                               // 10123
        var dfz = (f(x, y, p + epsilon) - f0) / epsilon;                                                               // 10124
        J.setXYZ(dfx, dfy, dfz);                                                                                       // 10125
                                                                                                                       // 10126
        var antiDrift = beta/dt * f0;                                                                                  // 10127
        var lambda = -(J.dot(v) + antiDrift) / (gamma + dt * J.normSquared() / m);                                     // 10128
                                                                                                                       // 10129
        impulse.set(J.mult(dt*lambda));                                                                                // 10130
        particle.applyImpulse(impulse);                                                                                // 10131
    }                                                                                                                  // 10132
};                                                                                                                     // 10133
                                                                                                                       // 10134
module.exports = Surface;                                                                                              // 10135
},{"../../math/Vector":42,"./Constraint":56}],61:[function(_dereq_,module,exports){                                    // 10136
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10137
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10138
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10139
 *                                                                                                                     // 10140
 * Owner: david@famo.us                                                                                                // 10141
 * @license MPL 2.0                                                                                                    // 10142
 * @copyright Famous Industries, Inc. 2014                                                                             // 10143
 */                                                                                                                    // 10144
                                                                                                                       // 10145
var Constraint = _dereq_('./Constraint');                                                                              // 10146
var Vector = _dereq_('../../math/Vector');                                                                             // 10147
                                                                                                                       // 10148
/**                                                                                                                    // 10149
 *  A wall describes an infinite two-dimensional plane that physics bodies                                             // 10150
 *    can collide with. To define a wall, you must give it a distance (from                                            // 10151
 *    the center of the physics engine's origin, and a normal defining the plane                                       // 10152
 *    of the wall.                                                                                                     // 10153
 *                                                                                                                     // 10154
 *    (wall)                                                                                                           // 10155
 *      |                                                                                                              // 10156
 *      | (normal)     (origin)                                                                                        // 10157
 *      | --->            *                                                                                            // 10158
 *      |                                                                                                              // 10159
 *      |    (distance)                                                                                                // 10160
 *      ...................                                                                                            // 10161
 *            (100px)                                                                                                  // 10162
 *                                                                                                                     // 10163
 *      e.g., Wall({normal : [1,0,0], distance : 100})                                                                 // 10164
 *      would be a wall 100 pixels to the left, whose normal points right                                              // 10165
 *                                                                                                                     // 10166
 *  @class Wall                                                                                                        // 10167
 *  @constructor                                                                                                       // 10168
 *  @extends Constraint                                                                                                // 10169
 *  @param {Options} [options] An object of configurable options.                                                      // 10170
 *  @param {Number} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic). Range : [0, 1]
 *  @param {Number} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Number} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.          // 10173
 *  @param {Array} [options.normal] The normal direction to the wall.                                                  // 10174
 *  @param {Number} [options.distance] The distance from the origin that the wall is placed.                           // 10175
 *  @param {onContact} [options.onContact] How to handle collision against the wall.                                   // 10176
 *                                                                                                                     // 10177
 */                                                                                                                    // 10178
function Wall(options) {                                                                                               // 10179
    this.options = Object.create(Wall.DEFAULT_OPTIONS);                                                                // 10180
    if (options) this.setOptions(options);                                                                             // 10181
                                                                                                                       // 10182
    //registers                                                                                                        // 10183
    this.diff = new Vector();                                                                                          // 10184
    this.impulse = new Vector();                                                                                       // 10185
                                                                                                                       // 10186
    Constraint.call(this);                                                                                             // 10187
}                                                                                                                      // 10188
                                                                                                                       // 10189
Wall.prototype = Object.create(Constraint.prototype);                                                                  // 10190
Wall.prototype.constructor = Wall;                                                                                     // 10191
                                                                                                                       // 10192
/**                                                                                                                    // 10193
 * @property Wall.ON_CONTACT                                                                                           // 10194
 * @type Object                                                                                                        // 10195
 * @protected                                                                                                          // 10196
 * @static                                                                                                             // 10197
 */                                                                                                                    // 10198
Wall.ON_CONTACT = {                                                                                                    // 10199
                                                                                                                       // 10200
    /**                                                                                                                // 10201
     * Physical bodies bounce off the wall                                                                             // 10202
     * @attribute REFLECT                                                                                              // 10203
     */                                                                                                                // 10204
    REFLECT : 0,                                                                                                       // 10205
                                                                                                                       // 10206
    /**                                                                                                                // 10207
     * Physical bodies are unaffected. Usecase is to fire events on contact.                                           // 10208
     * @attribute SILENT                                                                                               // 10209
     */                                                                                                                // 10210
    SILENT : 1                                                                                                         // 10211
};                                                                                                                     // 10212
                                                                                                                       // 10213
Wall.DEFAULT_OPTIONS = {                                                                                               // 10214
    restitution : 0.5,                                                                                                 // 10215
    drift : 0.5,                                                                                                       // 10216
    slop : 0,                                                                                                          // 10217
    normal : [1, 0, 0],                                                                                                // 10218
    distance : 0,                                                                                                      // 10219
    onContact : Wall.ON_CONTACT.REFLECT                                                                                // 10220
};                                                                                                                     // 10221
                                                                                                                       // 10222
/*                                                                                                                     // 10223
 * Setter for options.                                                                                                 // 10224
 *                                                                                                                     // 10225
 * @method setOptions                                                                                                  // 10226
 * @param options {Objects}                                                                                            // 10227
 */                                                                                                                    // 10228
Wall.prototype.setOptions = function setOptions(options) {                                                             // 10229
    if (options.normal !== undefined) {                                                                                // 10230
        if (options.normal instanceof Vector) this.options.normal = options.normal.clone();                            // 10231
        if (options.normal instanceof Array)  this.options.normal = new Vector(options.normal);                        // 10232
    }                                                                                                                  // 10233
    if (options.restitution !== undefined) this.options.restitution = options.restitution;                             // 10234
    if (options.drift !== undefined) this.options.drift = options.drift;                                               // 10235
    if (options.slop !== undefined) this.options.slop = options.slop;                                                  // 10236
    if (options.distance !== undefined) this.options.distance = options.distance;                                      // 10237
    if (options.onContact !== undefined) this.options.onContact = options.onContact;                                   // 10238
};                                                                                                                     // 10239
                                                                                                                       // 10240
function _getNormalVelocity(n, v) {                                                                                    // 10241
    return v.dot(n);                                                                                                   // 10242
}                                                                                                                      // 10243
                                                                                                                       // 10244
function _getDistanceFromOrigin(p) {                                                                                   // 10245
    var n = this.options.normal;                                                                                       // 10246
    var d = this.options.distance;                                                                                     // 10247
    return p.dot(n) + d;                                                                                               // 10248
}                                                                                                                      // 10249
                                                                                                                       // 10250
function _onEnter(particle, overlap, dt) {                                                                             // 10251
    var p = particle.position;                                                                                         // 10252
    var v = particle.velocity;                                                                                         // 10253
    var m = particle.mass;                                                                                             // 10254
    var n = this.options.normal;                                                                                       // 10255
    var action = this.options.onContact;                                                                               // 10256
    var restitution = this.options.restitution;                                                                        // 10257
    var impulse = this.impulse;                                                                                        // 10258
                                                                                                                       // 10259
    var drift = this.options.drift;                                                                                    // 10260
    var slop = -this.options.slop;                                                                                     // 10261
    var gamma = 0;                                                                                                     // 10262
                                                                                                                       // 10263
    if (this._eventOutput) {                                                                                           // 10264
        var data = {particle : particle, wall : this, overlap : overlap, normal : n};                                  // 10265
        this._eventOutput.emit('preCollision', data);                                                                  // 10266
        this._eventOutput.emit('collision', data);                                                                     // 10267
    }                                                                                                                  // 10268
                                                                                                                       // 10269
    switch (action) {                                                                                                  // 10270
        case Wall.ON_CONTACT.REFLECT:                                                                                  // 10271
            var lambda = (overlap < slop)                                                                              // 10272
                ? -((1 + restitution) * n.dot(v) + drift / dt * (overlap - slop)) / (m * dt + gamma)                   // 10273
                : -((1 + restitution) * n.dot(v)) / (m * dt + gamma);                                                  // 10274
                                                                                                                       // 10275
            impulse.set(n.mult(dt * lambda));                                                                          // 10276
            particle.applyImpulse(impulse);                                                                            // 10277
            particle.setPosition(p.add(n.mult(-overlap)));                                                             // 10278
            break;                                                                                                     // 10279
    }                                                                                                                  // 10280
                                                                                                                       // 10281
    if (this._eventOutput) this._eventOutput.emit('postCollision', data);                                              // 10282
}                                                                                                                      // 10283
                                                                                                                       // 10284
function _onExit(particle, overlap, dt) {                                                                              // 10285
    var action = this.options.onContact;                                                                               // 10286
    var p = particle.position;                                                                                         // 10287
    var n = this.options.normal;                                                                                       // 10288
                                                                                                                       // 10289
    if (action === Wall.ON_CONTACT.REFLECT) {                                                                          // 10290
        particle.setPosition(p.add(n.mult(-overlap)));                                                                 // 10291
    }                                                                                                                  // 10292
}                                                                                                                      // 10293
                                                                                                                       // 10294
/**                                                                                                                    // 10295
 * Adds an impulse to a physics body's velocity due to the wall constraint                                             // 10296
 *                                                                                                                     // 10297
 * @method applyConstraint                                                                                             // 10298
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10299
 * @param source {Body}         The source of the constraint                                                           // 10300
 * @param dt {Number}           Delta time                                                                             // 10301
 */                                                                                                                    // 10302
Wall.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                       // 10303
    var n = this.options.normal;                                                                                       // 10304
                                                                                                                       // 10305
    for (var i = 0; i < targets.length; i++) {                                                                         // 10306
        var particle = targets[i];                                                                                     // 10307
        var p = particle.position;                                                                                     // 10308
        var v = particle.velocity;                                                                                     // 10309
        var r = particle.radius || 0;                                                                                  // 10310
                                                                                                                       // 10311
        var overlap = _getDistanceFromOrigin.call(this, p.add(n.mult(-r)));                                            // 10312
        var nv = _getNormalVelocity.call(this, n, v);                                                                  // 10313
                                                                                                                       // 10314
        if (overlap <= 0) {                                                                                            // 10315
            if (nv < 0) _onEnter.call(this, particle, overlap, dt);                                                    // 10316
            else _onExit.call(this, particle, overlap, dt);                                                            // 10317
        }                                                                                                              // 10318
    }                                                                                                                  // 10319
};                                                                                                                     // 10320
                                                                                                                       // 10321
module.exports = Wall;                                                                                                 // 10322
},{"../../math/Vector":42,"./Constraint":56}],62:[function(_dereq_,module,exports){                                    // 10323
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10324
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10325
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10326
 *                                                                                                                     // 10327
 * Owner: david@famo.us                                                                                                // 10328
 * @license MPL 2.0                                                                                                    // 10329
 * @copyright Famous Industries, Inc. 2014                                                                             // 10330
 */                                                                                                                    // 10331
                                                                                                                       // 10332
var Constraint = _dereq_('./Constraint');                                                                              // 10333
var Wall = _dereq_('./Wall');                                                                                          // 10334
var Vector = _dereq_('../../math/Vector');                                                                             // 10335
                                                                                                                       // 10336
/**                                                                                                                    // 10337
 *  Walls combines one or more Wall primitives and exposes a simple API to                                             // 10338
 *  interact with several walls at once. A common use case would be to set up                                          // 10339
 *  a bounding box for a physics body, that would collide with each side.                                              // 10340
 *                                                                                                                     // 10341
 *  @class Walls                                                                                                       // 10342
 *  @constructor                                                                                                       // 10343
 *  @extends Constraint                                                                                                // 10344
 *  @uses Wall                                                                                                         // 10345
 *  @param {Options} [options] An object of configurable options.                                                      // 10346
 *  @param {Array} [options.sides] An array of sides e.g., [Walls.LEFT, Walls.TOP]                                     // 10347
 *  @param {Array} [options.size] The size of the bounding box of the walls.                                           // 10348
 *  @param {Array} [options.origin] The center of the wall relative to the size.                                       // 10349
 *  @param {Array} [options.drift] Baumgarte stabilization parameter. Makes constraints "loosely" (0) or "tightly" (1) enforced. Range : [0, 1]
 *  @param {Array} [options.slop] Amount of penetration in pixels to ignore before collision event triggers.           // 10351
 *  @param {Array} [options.restitution] The energy ratio lost in a collision (0 = stick, 1 = elastic) The energy ratio lost in a collision (0 = stick, 1 = elastic)
 *  @param {Array} [options.onContact] How to handle collision against the wall.                                       // 10353
 */                                                                                                                    // 10354
function Walls(options) {                                                                                              // 10355
    this.options = Object.create(Walls.DEFAULT_OPTIONS);                                                               // 10356
    if (options) this.setOptions(options);                                                                             // 10357
    _createComponents.call(this, options.sides || this.options.sides);                                                 // 10358
                                                                                                                       // 10359
    Constraint.call(this);                                                                                             // 10360
}                                                                                                                      // 10361
                                                                                                                       // 10362
Walls.prototype = Object.create(Constraint.prototype);                                                                 // 10363
Walls.prototype.constructor = Walls;                                                                                   // 10364
/**                                                                                                                    // 10365
 * @property Walls.ON_CONTACT                                                                                          // 10366
 * @type Object                                                                                                        // 10367
 * @extends Wall.ON_CONTACT                                                                                            // 10368
 * @static                                                                                                             // 10369
 */                                                                                                                    // 10370
Walls.ON_CONTACT = Wall.ON_CONTACT;                                                                                    // 10371
                                                                                                                       // 10372
/**                                                                                                                    // 10373
 * An enumeration of common types of walls                                                                             // 10374
 *    LEFT, RIGHT, TOP, BOTTOM, FRONT, BACK                                                                            // 10375
 *    TWO_DIMENSIONAL, THREE_DIMENSIONAL                                                                               // 10376
 *                                                                                                                     // 10377
 * @property Walls.SIDES                                                                                               // 10378
 * @type Object                                                                                                        // 10379
 * @final                                                                                                              // 10380
 * @static                                                                                                             // 10381
 */                                                                                                                    // 10382
Walls.SIDES = {                                                                                                        // 10383
    LEFT   : 0,                                                                                                        // 10384
    RIGHT  : 1,                                                                                                        // 10385
    TOP    : 2,                                                                                                        // 10386
    BOTTOM : 3,                                                                                                        // 10387
    FRONT  : 4,                                                                                                        // 10388
    BACK   : 5,                                                                                                        // 10389
    TWO_DIMENSIONAL : [0, 1, 2, 3],                                                                                    // 10390
    THREE_DIMENSIONAL : [0, 1, 2, 3, 4, 5]                                                                             // 10391
};                                                                                                                     // 10392
                                                                                                                       // 10393
Walls.DEFAULT_OPTIONS = {                                                                                              // 10394
    sides : Walls.SIDES.TWO_DIMENSIONAL,                                                                               // 10395
    size : [window.innerWidth, window.innerHeight, 0],                                                                 // 10396
    origin : [.5, .5, .5],                                                                                             // 10397
    drift : 0.5,                                                                                                       // 10398
    slop : 0,                                                                                                          // 10399
    restitution : 0.5,                                                                                                 // 10400
    onContact : Walls.ON_CONTACT.REFLECT                                                                               // 10401
};                                                                                                                     // 10402
                                                                                                                       // 10403
var _SIDE_NORMALS = {                                                                                                  // 10404
    0 : new Vector(1, 0, 0),                                                                                           // 10405
    1 : new Vector(-1, 0, 0),                                                                                          // 10406
    2 : new Vector(0, 1, 0),                                                                                           // 10407
    3 : new Vector(0,-1, 0),                                                                                           // 10408
    4 : new Vector(0, 0, 1),                                                                                           // 10409
    5 : new Vector(0, 0,-1)                                                                                            // 10410
};                                                                                                                     // 10411
                                                                                                                       // 10412
function _getDistance(side, size, origin) {                                                                            // 10413
    var distance;                                                                                                      // 10414
    var SIDES = Walls.SIDES;                                                                                           // 10415
    switch (parseInt(side)) {                                                                                          // 10416
        case SIDES.LEFT:                                                                                               // 10417
            distance = size[0] * origin[0];                                                                            // 10418
            break;                                                                                                     // 10419
        case SIDES.TOP:                                                                                                // 10420
            distance = size[1] * origin[1];                                                                            // 10421
            break;                                                                                                     // 10422
        case SIDES.FRONT:                                                                                              // 10423
            distance = size[2] * origin[2];                                                                            // 10424
            break;                                                                                                     // 10425
        case SIDES.RIGHT:                                                                                              // 10426
            distance = size[0] * (1 - origin[0]);                                                                      // 10427
            break;                                                                                                     // 10428
        case SIDES.BOTTOM:                                                                                             // 10429
            distance = size[1] * (1 - origin[1]);                                                                      // 10430
            break;                                                                                                     // 10431
        case SIDES.BACK:                                                                                               // 10432
            distance = size[2] * (1 - origin[2]);                                                                      // 10433
            break;                                                                                                     // 10434
    }                                                                                                                  // 10435
    return distance;                                                                                                   // 10436
}                                                                                                                      // 10437
                                                                                                                       // 10438
/*                                                                                                                     // 10439
 * Setter for options.                                                                                                 // 10440
 *                                                                                                                     // 10441
 * @method setOptions                                                                                                  // 10442
 * @param options {Objects}                                                                                            // 10443
 */                                                                                                                    // 10444
Walls.prototype.setOptions = function setOptions(options) {                                                            // 10445
    var resizeFlag = false;                                                                                            // 10446
    if (options.restitution !== undefined) _setOptionsForEach.call(this, {restitution : options.restitution});         // 10447
    if (options.drift !== undefined) _setOptionsForEach.call(this, {drift : options.drift});                           // 10448
    if (options.slop !== undefined) _setOptionsForEach.call(this, {slop : options.slop});                              // 10449
    if (options.onContact !== undefined) _setOptionsForEach.call(this, {onContact : options.onContact});               // 10450
    if (options.size !== undefined) resizeFlag = true;                                                                 // 10451
    if (options.sides !== undefined) this.options.sides = options.sides;                                               // 10452
    if (options.origin !== undefined) resizeFlag = true;                                                               // 10453
    if (resizeFlag) this.setSize(options.size, options.origin);                                                        // 10454
};                                                                                                                     // 10455
                                                                                                                       // 10456
function _createComponents(sides) {                                                                                    // 10457
    this.components = {};                                                                                              // 10458
    var components = this.components;                                                                                  // 10459
                                                                                                                       // 10460
    for (var i = 0; i < sides.length; i++) {                                                                           // 10461
        var side = sides[i];                                                                                           // 10462
        components[i] = new Wall({                                                                                     // 10463
            normal   : _SIDE_NORMALS[side].clone(),                                                                    // 10464
            distance : _getDistance(side, this.options.size, this.options.origin)                                      // 10465
        });                                                                                                            // 10466
    }                                                                                                                  // 10467
}                                                                                                                      // 10468
                                                                                                                       // 10469
/*                                                                                                                     // 10470
 * Setter for size.                                                                                                    // 10471
 *                                                                                                                     // 10472
 * @method setOptions                                                                                                  // 10473
 * @param options {Objects}                                                                                            // 10474
 */                                                                                                                    // 10475
Walls.prototype.setSize = function setSize(size, origin) {                                                             // 10476
    origin = origin || this.options.origin;                                                                            // 10477
    if (origin.length < 3) origin[2] = 0.5;                                                                            // 10478
                                                                                                                       // 10479
    this.forEach(function(wall, side) {                                                                                // 10480
        var d = _getDistance(side, size, origin);                                                                      // 10481
        wall.setOptions({distance : d});                                                                               // 10482
    });                                                                                                                // 10483
                                                                                                                       // 10484
    this.options.size   = size;                                                                                        // 10485
    this.options.origin = origin;                                                                                      // 10486
};                                                                                                                     // 10487
                                                                                                                       // 10488
function _setOptionsForEach(options) {                                                                                 // 10489
    this.forEach(function(wall) {                                                                                      // 10490
        wall.setOptions(options);                                                                                      // 10491
    });                                                                                                                // 10492
    for (var key in options) this.options[key] = options[key];                                                         // 10493
}                                                                                                                      // 10494
                                                                                                                       // 10495
/**                                                                                                                    // 10496
 * Adds an impulse to a physics body's velocity due to the walls constraint                                            // 10497
 *                                                                                                                     // 10498
 * @method applyConstraint                                                                                             // 10499
 * @param targets {Array.Body}  Array of bodies to apply the constraint to                                             // 10500
 * @param source {Body}         The source of the constraint                                                           // 10501
 * @param dt {Number}           Delta time                                                                             // 10502
 */                                                                                                                    // 10503
Walls.prototype.applyConstraint = function applyConstraint(targets, source, dt) {                                      // 10504
    this.forEach(function(wall) {                                                                                      // 10505
        wall.applyConstraint(targets, source, dt);                                                                     // 10506
    });                                                                                                                // 10507
};                                                                                                                     // 10508
                                                                                                                       // 10509
/**                                                                                                                    // 10510
 * Apply a method to each wall making up the walls                                                                     // 10511
 *                                                                                                                     // 10512
 * @method applyConstraint                                                                                             // 10513
 * @param fn {Function}  Function that takes in a wall as its first parameter                                          // 10514
 */                                                                                                                    // 10515
Walls.prototype.forEach = function forEach(fn) {                                                                       // 10516
    var sides = this.options.sides;                                                                                    // 10517
    for (var key in this.sides) fn(sides[key], key);                                                                   // 10518
};                                                                                                                     // 10519
                                                                                                                       // 10520
/**                                                                                                                    // 10521
 * Rotates the walls by an angle in the XY-plane                                                                       // 10522
 *                                                                                                                     // 10523
 * @method applyConstraint                                                                                             // 10524
 * @param angle {Function}                                                                                             // 10525
 */                                                                                                                    // 10526
Walls.prototype.rotateZ = function rotateZ(angle) {                                                                    // 10527
    this.forEach(function(wall) {                                                                                      // 10528
        var n = wall.options.normal;                                                                                   // 10529
        n.rotateZ(angle).put(n);                                                                                       // 10530
    });                                                                                                                // 10531
};                                                                                                                     // 10532
                                                                                                                       // 10533
/**                                                                                                                    // 10534
 * Rotates the walls by an angle in the YZ-plane                                                                       // 10535
 *                                                                                                                     // 10536
 * @method applyConstraint                                                                                             // 10537
 * @param angle {Function}                                                                                             // 10538
 */                                                                                                                    // 10539
Walls.prototype.rotateX = function rotateX(angle) {                                                                    // 10540
    this.forEach(function(wall) {                                                                                      // 10541
        var n = wall.options.normal;                                                                                   // 10542
        n.rotateX(angle).put(n);                                                                                       // 10543
    });                                                                                                                // 10544
};                                                                                                                     // 10545
                                                                                                                       // 10546
/**                                                                                                                    // 10547
 * Rotates the walls by an angle in the XZ-plane                                                                       // 10548
 *                                                                                                                     // 10549
 * @method applyConstraint                                                                                             // 10550
 * @param angle {Function}                                                                                             // 10551
 */                                                                                                                    // 10552
Walls.prototype.rotateY = function rotateY(angle) {                                                                    // 10553
    this.forEach(function(wall) {                                                                                      // 10554
        var n = wall.options.normal;                                                                                   // 10555
        n.rotateY(angle).put(n);                                                                                       // 10556
    });                                                                                                                // 10557
};                                                                                                                     // 10558
                                                                                                                       // 10559
/**                                                                                                                    // 10560
 * Resets the walls to their starting oritentation                                                                     // 10561
 */                                                                                                                    // 10562
Walls.prototype.reset = function reset() {                                                                             // 10563
    var sides = this.options.sides;                                                                                    // 10564
    for (var i in sides) {                                                                                             // 10565
        var component = this.components[i];                                                                            // 10566
        component.options.normal.set(_SIDE_NORMALS[i]);                                                                // 10567
    }                                                                                                                  // 10568
};                                                                                                                     // 10569
                                                                                                                       // 10570
module.exports = Walls;                                                                                                // 10571
},{"../../math/Vector":42,"./Constraint":56,"./Wall":61}],63:[function(_dereq_,module,exports){                        // 10572
module.exports = {                                                                                                     // 10573
  Collision: _dereq_('./Collision'),                                                                                   // 10574
  Constraint: _dereq_('./Constraint'),                                                                                 // 10575
  Curve: _dereq_('./Curve'),                                                                                           // 10576
  Distance: _dereq_('./Distance'),                                                                                     // 10577
  Snap: _dereq_('./Snap'),                                                                                             // 10578
  Surface: _dereq_('./Surface'),                                                                                       // 10579
  Wall: _dereq_('./Wall'),                                                                                             // 10580
  Walls: _dereq_('./Walls')                                                                                            // 10581
};                                                                                                                     // 10582
                                                                                                                       // 10583
},{"./Collision":55,"./Constraint":56,"./Curve":57,"./Distance":58,"./Snap":59,"./Surface":60,"./Wall":61,"./Walls":62}],64:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10585
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10586
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10587
 *                                                                                                                     // 10588
 * Owner: david@famo.us                                                                                                // 10589
 * @license MPL 2.0                                                                                                    // 10590
 * @copyright Famous Industries, Inc. 2014                                                                             // 10591
 */                                                                                                                    // 10592
                                                                                                                       // 10593
var Force = _dereq_('./Force');                                                                                        // 10594
                                                                                                                       // 10595
/**                                                                                                                    // 10596
 * Drag is a force that opposes velocity. Attach it to the physics engine                                              // 10597
 * to slow down a physics body in motion.                                                                              // 10598
 *                                                                                                                     // 10599
 * @class Drag                                                                                                         // 10600
 * @constructor                                                                                                        // 10601
 * @extends Force                                                                                                      // 10602
 * @param {Object} options options to set on drag                                                                      // 10603
 */                                                                                                                    // 10604
function Drag(options) {                                                                                               // 10605
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 10606
    if (options) this.setOptions(options);                                                                             // 10607
                                                                                                                       // 10608
    Force.call(this);                                                                                                  // 10609
}                                                                                                                      // 10610
                                                                                                                       // 10611
Drag.prototype = Object.create(Force.prototype);                                                                       // 10612
Drag.prototype.constructor = Drag;                                                                                     // 10613
                                                                                                                       // 10614
/**                                                                                                                    // 10615
 * @property Drag.FORCE_FUNCTIONS                                                                                      // 10616
 * @type Object                                                                                                        // 10617
 * @protected                                                                                                          // 10618
 * @static                                                                                                             // 10619
 */                                                                                                                    // 10620
Drag.FORCE_FUNCTIONS = {                                                                                               // 10621
                                                                                                                       // 10622
    /**                                                                                                                // 10623
     * A drag force proportional to the velocity                                                                       // 10624
     * @attribute LINEAR                                                                                               // 10625
     * @type Function                                                                                                  // 10626
     * @param {Vector} velocity                                                                                        // 10627
     * @return {Vector} drag force                                                                                     // 10628
     */                                                                                                                // 10629
    LINEAR : function(velocity) {                                                                                      // 10630
        return velocity;                                                                                               // 10631
    },                                                                                                                 // 10632
                                                                                                                       // 10633
    /**                                                                                                                // 10634
     * A drag force proportional to the square of the velocity                                                         // 10635
     * @attribute QUADRATIC                                                                                            // 10636
     * @type Function                                                                                                  // 10637
     * @param {Vector} velocity                                                                                        // 10638
     * @return {Vector} drag force                                                                                     // 10639
     */                                                                                                                // 10640
    QUADRATIC : function(velocity) {                                                                                   // 10641
        return velocity.mult(velocity.norm());                                                                         // 10642
    }                                                                                                                  // 10643
};                                                                                                                     // 10644
                                                                                                                       // 10645
/**                                                                                                                    // 10646
 * @property Drag.DEFAULT_OPTIONS                                                                                      // 10647
 * @type Object                                                                                                        // 10648
 * @protected                                                                                                          // 10649
 * @static                                                                                                             // 10650
 */                                                                                                                    // 10651
Drag.DEFAULT_OPTIONS = {                                                                                               // 10652
                                                                                                                       // 10653
    /**                                                                                                                // 10654
     * The strength of the force                                                                                       // 10655
     *    Range : [0, 0.1]                                                                                             // 10656
     * @attribute strength                                                                                             // 10657
     * @type Number                                                                                                    // 10658
     * @default 0.01                                                                                                   // 10659
     */                                                                                                                // 10660
    strength : 0.01,                                                                                                   // 10661
                                                                                                                       // 10662
    /**                                                                                                                // 10663
     * The type of opposing force                                                                                      // 10664
     * @attribute forceFunction                                                                                        // 10665
     * @type Function                                                                                                  // 10666
     */                                                                                                                // 10667
    forceFunction : Drag.FORCE_FUNCTIONS.LINEAR                                                                        // 10668
};                                                                                                                     // 10669
                                                                                                                       // 10670
/**                                                                                                                    // 10671
 * Adds a drag force to a physics body's force accumulator.                                                            // 10672
 *                                                                                                                     // 10673
 * @method applyForce                                                                                                  // 10674
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 10675
 */                                                                                                                    // 10676
Drag.prototype.applyForce = function applyForce(targets) {                                                             // 10677
    var strength        = this.options.strength;                                                                       // 10678
    var forceFunction   = this.options.forceFunction;                                                                  // 10679
    var force           = this.force;                                                                                  // 10680
    var index;                                                                                                         // 10681
    var particle;                                                                                                      // 10682
                                                                                                                       // 10683
    for (index = 0; index < targets.length; index++) {                                                                 // 10684
        particle = targets[index];                                                                                     // 10685
        forceFunction(particle.velocity).mult(-strength).put(force);                                                   // 10686
        particle.applyForce(force);                                                                                    // 10687
    }                                                                                                                  // 10688
};                                                                                                                     // 10689
                                                                                                                       // 10690
/**                                                                                                                    // 10691
 * Basic options setter                                                                                                // 10692
 *                                                                                                                     // 10693
 * @method setOptions                                                                                                  // 10694
 * @param {Objects} options                                                                                            // 10695
 */                                                                                                                    // 10696
Drag.prototype.setOptions = function setOptions(options) {                                                             // 10697
    for (var key in options) this.options[key] = options[key];                                                         // 10698
};                                                                                                                     // 10699
                                                                                                                       // 10700
module.exports = Drag;                                                                                                 // 10701
},{"./Force":65}],65:[function(_dereq_,module,exports){                                                                // 10702
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10703
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10704
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10705
 *                                                                                                                     // 10706
 * Owner: david@famo.us                                                                                                // 10707
 * @license MPL 2.0                                                                                                    // 10708
 * @copyright Famous Industries, Inc. 2014                                                                             // 10709
 */                                                                                                                    // 10710
                                                                                                                       // 10711
var Vector = _dereq_('../../math/Vector');                                                                             // 10712
var EventHandler = _dereq_('../../core/EventHandler');                                                                 // 10713
                                                                                                                       // 10714
/**                                                                                                                    // 10715
 * Force base class.                                                                                                   // 10716
 *                                                                                                                     // 10717
 * @class Force                                                                                                        // 10718
 * @uses EventHandler                                                                                                  // 10719
 * @constructor                                                                                                        // 10720
 */                                                                                                                    // 10721
function Force(force) {                                                                                                // 10722
    this.force = new Vector(force);                                                                                    // 10723
    this._eventOutput = new EventHandler();                                                                            // 10724
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 10725
}                                                                                                                      // 10726
                                                                                                                       // 10727
/**                                                                                                                    // 10728
 * Basic setter for options                                                                                            // 10729
 *                                                                                                                     // 10730
 * @method setOptions                                                                                                  // 10731
 * @param options {Objects}                                                                                            // 10732
 */                                                                                                                    // 10733
Force.prototype.setOptions = function setOptions(options) {                                                            // 10734
    this._eventOutput.emit('change', options);                                                                         // 10735
};                                                                                                                     // 10736
                                                                                                                       // 10737
/**                                                                                                                    // 10738
 * Adds a force to a physics body's force accumulator.                                                                 // 10739
 *                                                                                                                     // 10740
 * @method applyForce                                                                                                  // 10741
 * @param targets {Array.Body} Array of bodies to apply a force to.                                                    // 10742
 */                                                                                                                    // 10743
Force.prototype.applyForce = function applyForce(targets) {                                                            // 10744
    var length = targets.length;                                                                                       // 10745
    while (length--) {                                                                                                 // 10746
        targets[length].applyForce(this.force);                                                                        // 10747
    }                                                                                                                  // 10748
};                                                                                                                     // 10749
                                                                                                                       // 10750
/**                                                                                                                    // 10751
 * Getter for a force's potential energy.                                                                              // 10752
 *                                                                                                                     // 10753
 * @method getEnergy                                                                                                   // 10754
 * @return energy {Number}                                                                                             // 10755
 */                                                                                                                    // 10756
Force.prototype.getEnergy = function getEnergy() {                                                                     // 10757
    return 0.0;                                                                                                        // 10758
};                                                                                                                     // 10759
                                                                                                                       // 10760
module.exports = Force;                                                                                                // 10761
},{"../../core/EventHandler":7,"../../math/Vector":42}],66:[function(_dereq_,module,exports){                          // 10762
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10763
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10764
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10765
 *                                                                                                                     // 10766
 * Owner: david@famo.us                                                                                                // 10767
 * @license MPL 2.0                                                                                                    // 10768
 * @copyright Famous Industries, Inc. 2014                                                                             // 10769
 */                                                                                                                    // 10770
                                                                                                                       // 10771
var Force = _dereq_('./Force');                                                                                        // 10772
var Vector = _dereq_('../../math/Vector');                                                                             // 10773
                                                                                                                       // 10774
/**                                                                                                                    // 10775
 *  Repulsion is a force that repels (attracts) bodies away (towards)                                                  // 10776
 *    each other. A repulsion of negative strength is attractive.                                                      // 10777
 *                                                                                                                     // 10778
 *  @class Repulsion                                                                                                   // 10779
 *  @constructor                                                                                                       // 10780
 *  @extends Force                                                                                                     // 10781
 *  @param {Object} options overwrites default options                                                                 // 10782
 */                                                                                                                    // 10783
function Repulsion(options) {                                                                                          // 10784
    this.options = Object.create(Repulsion.DEFAULT_OPTIONS);                                                           // 10785
    if (options) this.setOptions(options);                                                                             // 10786
                                                                                                                       // 10787
    //registers                                                                                                        // 10788
    this.disp  = new Vector();                                                                                         // 10789
                                                                                                                       // 10790
    Force.call(this);                                                                                                  // 10791
}                                                                                                                      // 10792
                                                                                                                       // 10793
Repulsion.prototype = Object.create(Force.prototype);                                                                  // 10794
Repulsion.prototype.constructor = Repulsion;                                                                           // 10795
/**                                                                                                                    // 10796
 * @property Repulsion.DECAY_FUNCTIONS                                                                                 // 10797
 * @type Object                                                                                                        // 10798
 * @protected                                                                                                          // 10799
 * @static                                                                                                             // 10800
 */                                                                                                                    // 10801
Repulsion.DECAY_FUNCTIONS = {                                                                                          // 10802
                                                                                                                       // 10803
    /**                                                                                                                // 10804
     * A linear decay function                                                                                         // 10805
     * @attribute LINEAR                                                                                               // 10806
     * @type Function                                                                                                  // 10807
     * @param {Number} r distance from the source body                                                                 // 10808
     * @param {Number} cutoff the effective radius of influence                                                        // 10809
     */                                                                                                                // 10810
    LINEAR : function(r, cutoff) {                                                                                     // 10811
        return Math.max(1 - (1 / cutoff) * r, 0);                                                                      // 10812
    },                                                                                                                 // 10813
                                                                                                                       // 10814
    /**                                                                                                                // 10815
     * A Morse potential decay function (http://en.wikipedia.org/wiki/Morse_potential)                                 // 10816
     * @attribute MORSE                                                                                                // 10817
     * @type Function                                                                                                  // 10818
     * @param {Number} r distance from the source body                                                                 // 10819
     * @param {Number} cutoff the minimum radius of influence                                                          // 10820
     */                                                                                                                // 10821
    MORSE : function(r, cutoff) {                                                                                      // 10822
        var r0 = (cutoff === 0) ? 100 : cutoff;                                                                        // 10823
        var rShifted = r + r0 * (1 - Math.log(2)); //shift by x-intercept                                              // 10824
        return Math.max(1 - Math.pow(1 - Math.exp(rShifted/r0 - 1), 2), 0);                                            // 10825
    },                                                                                                                 // 10826
                                                                                                                       // 10827
    /**                                                                                                                // 10828
     * An inverse distance decay function                                                                              // 10829
     * @attribute INVERSE                                                                                              // 10830
     * @type Function                                                                                                  // 10831
     * @param {Number} r distance from the source body                                                                 // 10832
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10833
     */                                                                                                                // 10834
    INVERSE : function(r, cutoff) {                                                                                    // 10835
        return 1 / (1 - cutoff + r);                                                                                   // 10836
    },                                                                                                                 // 10837
                                                                                                                       // 10838
    /**                                                                                                                // 10839
     * An inverse squared distance decay function                                                                      // 10840
     * @attribute GRAVITY                                                                                              // 10841
     * @type Function                                                                                                  // 10842
     * @param {Number} r distance from the source body                                                                 // 10843
     * @param {Number} cutoff a distance shift to avoid singularities                                                  // 10844
     */                                                                                                                // 10845
    GRAVITY : function(r, cutoff) {                                                                                    // 10846
        return 1 / (1 - cutoff + r*r);                                                                                 // 10847
    }                                                                                                                  // 10848
};                                                                                                                     // 10849
                                                                                                                       // 10850
/**                                                                                                                    // 10851
 * @property Repulsion.DEFAULT_OPTIONS                                                                                 // 10852
 * @type Object                                                                                                        // 10853
 * @protected                                                                                                          // 10854
 * @static                                                                                                             // 10855
 */                                                                                                                    // 10856
Repulsion.DEFAULT_OPTIONS = {                                                                                          // 10857
                                                                                                                       // 10858
    /**                                                                                                                // 10859
     * The strength of the force                                                                                       // 10860
     *    Range : [0, 100]                                                                                             // 10861
     * @attribute strength                                                                                             // 10862
     * @type Number                                                                                                    // 10863
     * @default 1                                                                                                      // 10864
     */                                                                                                                // 10865
    strength : 1,                                                                                                      // 10866
                                                                                                                       // 10867
    /**                                                                                                                // 10868
     * The location of the force, if not another physics body                                                          // 10869
     *                                                                                                                 // 10870
     * @attribute anchor                                                                                               // 10871
     * @type Number                                                                                                    // 10872
     * @default 0.01                                                                                                   // 10873
     * @optional                                                                                                       // 10874
     */                                                                                                                // 10875
    anchor : undefined,                                                                                                // 10876
                                                                                                                       // 10877
    /**                                                                                                                // 10878
     * The range of the repulsive force                                                                                // 10879
     * @attribute radii                                                                                                // 10880
     * @type Array                                                                                                     // 10881
     * @default [0, Infinity]                                                                                          // 10882
     */                                                                                                                // 10883
    range : [0, Infinity],                                                                                             // 10884
                                                                                                                       // 10885
    /**                                                                                                                // 10886
     * A normalization for the force to avoid singularities at the origin                                              // 10887
     * @attribute cutoff                                                                                               // 10888
     * @type Number                                                                                                    // 10889
     * @default 0                                                                                                      // 10890
     */                                                                                                                // 10891
    cutoff : 0,                                                                                                        // 10892
                                                                                                                       // 10893
    /**                                                                                                                // 10894
     * The maximum magnitude of the force                                                                              // 10895
     *    Range : [0, Infinity]                                                                                        // 10896
     * @attribute cap                                                                                                  // 10897
     * @type Number                                                                                                    // 10898
     * @default Infinity                                                                                               // 10899
     */                                                                                                                // 10900
    cap : Infinity,                                                                                                    // 10901
                                                                                                                       // 10902
    /**                                                                                                                // 10903
     * The type of decay the repulsive force should have                                                               // 10904
     * @attribute decayFunction                                                                                        // 10905
     * @type Function                                                                                                  // 10906
     */                                                                                                                // 10907
    decayFunction : Repulsion.DECAY_FUNCTIONS.GRAVITY                                                                  // 10908
};                                                                                                                     // 10909
                                                                                                                       // 10910
/*                                                                                                                     // 10911
 * Setter for options.                                                                                                 // 10912
 *                                                                                                                     // 10913
 * @method setOptions                                                                                                  // 10914
 * @param {Objects} options                                                                                            // 10915
 */                                                                                                                    // 10916
Repulsion.prototype.setOptions = function setOptions(options) {                                                        // 10917
    if (options.anchor !== undefined) {                                                                                // 10918
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 10919
        if (options.anchor   instanceof Array)  this.options.anchor = new Vector(options.anchor);                      // 10920
        delete options.anchor;                                                                                         // 10921
    }                                                                                                                  // 10922
    for (var key in options) this.options[key] = options[key];                                                         // 10923
};                                                                                                                     // 10924
                                                                                                                       // 10925
/**                                                                                                                    // 10926
 * Adds a drag force to a physics body's force accumulator.                                                            // 10927
 *                                                                                                                     // 10928
 * @method applyForce                                                                                                  // 10929
 * @param targets {Array.Body}  Array of bodies to apply force to.                                                     // 10930
 * @param source {Body}         The source of the force                                                                // 10931
 */                                                                                                                    // 10932
Repulsion.prototype.applyForce = function applyForce(targets, source) {                                                // 10933
    var options     = this.options;                                                                                    // 10934
    var force       = this.force;                                                                                      // 10935
    var disp        = this.disp;                                                                                       // 10936
                                                                                                                       // 10937
    var strength    = options.strength;                                                                                // 10938
    var anchor      = options.anchor || source.position;                                                               // 10939
    var cap         = options.cap;                                                                                     // 10940
    var cutoff      = options.cutoff;                                                                                  // 10941
    var rMin        = options.range[0];                                                                                // 10942
    var rMax        = options.range[1];                                                                                // 10943
    var decayFn     = options.decayFunction;                                                                           // 10944
                                                                                                                       // 10945
    if (strength === 0) return;                                                                                        // 10946
                                                                                                                       // 10947
    var length = targets.length;                                                                                       // 10948
    var particle;                                                                                                      // 10949
    var m1;                                                                                                            // 10950
    var p1;                                                                                                            // 10951
    var r;                                                                                                             // 10952
                                                                                                                       // 10953
    while (length--) {                                                                                                 // 10954
        particle = targets[length];                                                                                    // 10955
                                                                                                                       // 10956
        if (particle === source) continue;                                                                             // 10957
                                                                                                                       // 10958
        m1 = particle.mass;                                                                                            // 10959
        p1 = particle.position;                                                                                        // 10960
                                                                                                                       // 10961
        disp.set(p1.sub(anchor));                                                                                      // 10962
        r = disp.norm();                                                                                               // 10963
                                                                                                                       // 10964
        if (r < rMax && r > rMin) {                                                                                    // 10965
            force.set(disp.normalize(strength * m1 * decayFn(r, cutoff)).cap(cap));                                    // 10966
            particle.applyForce(force);                                                                                // 10967
        }                                                                                                              // 10968
    }                                                                                                                  // 10969
                                                                                                                       // 10970
};                                                                                                                     // 10971
                                                                                                                       // 10972
module.exports = Repulsion;                                                                                            // 10973
},{"../../math/Vector":42,"./Force":65}],67:[function(_dereq_,module,exports){                                         // 10974
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 10975
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 10976
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 10977
 *                                                                                                                     // 10978
 * Owner: david@famo.us                                                                                                // 10979
 * @license MPL 2.0                                                                                                    // 10980
 * @copyright Famous Industries, Inc. 2014                                                                             // 10981
 */                                                                                                                    // 10982
                                                                                                                       // 10983
var Drag = _dereq_('./Drag');                                                                                          // 10984
                                                                                                                       // 10985
/**                                                                                                                    // 10986
 * Rotational drag is a force that opposes angular velocity.                                                           // 10987
 *   Attach it to a physics body to slow down its rotation.                                                            // 10988
 *                                                                                                                     // 10989
 * @class RotationalDrag                                                                                               // 10990
 * @constructor                                                                                                        // 10991
 * @extends Force                                                                                                      // 10992
 * @param {Object} options options to set on drag                                                                      // 10993
 */                                                                                                                    // 10994
function RotationalDrag(options) {                                                                                     // 10995
    Drag.call(this, options);                                                                                          // 10996
}                                                                                                                      // 10997
                                                                                                                       // 10998
RotationalDrag.prototype = Object.create(Drag.prototype);                                                              // 10999
RotationalDrag.prototype.constructor = RotationalDrag;                                                                 // 11000
                                                                                                                       // 11001
RotationalDrag.DEFAULT_OPTIONS = Drag.DEFAULT_OPTIONS;                                                                 // 11002
RotationalDrag.FORCE_FUNCTIONS = Drag.FORCE_FUNCTIONS;                                                                 // 11003
                                                                                                                       // 11004
/**                                                                                                                    // 11005
 * @property Repulsion.FORCE_FUNCTIONS                                                                                 // 11006
 * @type Object                                                                                                        // 11007
 * @protected                                                                                                          // 11008
 * @static                                                                                                             // 11009
 */                                                                                                                    // 11010
RotationalDrag.FORCE_FUNCTIONS = {                                                                                     // 11011
                                                                                                                       // 11012
    /**                                                                                                                // 11013
     * A drag force proprtional to the angular velocity                                                                // 11014
     * @attribute LINEAR                                                                                               // 11015
     * @type Function                                                                                                  // 11016
     * @param {Vector} angularVelocity                                                                                 // 11017
     * @return {Vector} drag force                                                                                     // 11018
     */                                                                                                                // 11019
    LINEAR : function(angularVelocity) {                                                                               // 11020
        return angularVelocity;                                                                                        // 11021
    },                                                                                                                 // 11022
                                                                                                                       // 11023
    /**                                                                                                                // 11024
     * A drag force proprtional to the square of the angular velocity                                                  // 11025
     * @attribute QUADRATIC                                                                                            // 11026
     * @type Function                                                                                                  // 11027
     * @param {Vector} angularVelocity                                                                                 // 11028
     * @return {Vector} drag force                                                                                     // 11029
     */                                                                                                                // 11030
    QUADRATIC : function(angularVelocity) {                                                                            // 11031
        return angularVelocity.mult(angularVelocity.norm());                                                           // 11032
    }                                                                                                                  // 11033
};                                                                                                                     // 11034
                                                                                                                       // 11035
/**                                                                                                                    // 11036
 * Adds a rotational drag force to a physics body's torque accumulator.                                                // 11037
 *                                                                                                                     // 11038
 * @method applyForce                                                                                                  // 11039
 * @param targets {Array.Body} Array of bodies to apply drag force to.                                                 // 11040
 */                                                                                                                    // 11041
RotationalDrag.prototype.applyForce = function applyForce(targets) {                                                   // 11042
    var strength       = this.options.strength;                                                                        // 11043
    var forceFunction  = this.options.forceFunction;                                                                   // 11044
    var force          = this.force;                                                                                   // 11045
                                                                                                                       // 11046
    //TODO: rotational drag as function of inertia                                                                     // 11047
                                                                                                                       // 11048
    var index;                                                                                                         // 11049
    var particle;                                                                                                      // 11050
                                                                                                                       // 11051
    for (index = 0; index < targets.length; index++) {                                                                 // 11052
        particle = targets[index];                                                                                     // 11053
        forceFunction(particle.angularVelocity).mult(-100*strength).put(force);                                        // 11054
        particle.applyTorque(force);                                                                                   // 11055
    }                                                                                                                  // 11056
};                                                                                                                     // 11057
                                                                                                                       // 11058
/*                                                                                                                     // 11059
 * Setter for options.                                                                                                 // 11060
 *                                                                                                                     // 11061
 * @method setOptions                                                                                                  // 11062
 * @param {Objects} options                                                                                            // 11063
 */                                                                                                                    // 11064
RotationalDrag.prototype.setOptions = function setOptions(options) {                                                   // 11065
    for (var key in options) this.options[key] = options[key];                                                         // 11066
};                                                                                                                     // 11067
                                                                                                                       // 11068
module.exports = RotationalDrag;                                                                                       // 11069
},{"./Drag":64}],68:[function(_dereq_,module,exports){                                                                 // 11070
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11071
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11072
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11073
 *                                                                                                                     // 11074
 * Owner: david@famo.us                                                                                                // 11075
 * @license MPL 2.0                                                                                                    // 11076
 * @copyright Famous Industries, Inc. 2014                                                                             // 11077
 */                                                                                                                    // 11078
                                                                                                                       // 11079
//TODO: test inheritance                                                                                               // 11080
var Force = _dereq_('./Force');                                                                                        // 11081
var Spring = _dereq_('./Spring');                                                                                      // 11082
var Quaternion = _dereq_('../../math/Quaternion');                                                                     // 11083
                                                                                                                       // 11084
/**                                                                                                                    // 11085
 *  A force that rotates a physics body back to target Euler angles.                                                   // 11086
 *  Just as a spring translates a body to a particular X, Y, Z, location,                                              // 11087
 *  a rotational spring rotates a body to a particular X, Y, Z Euler angle.                                            // 11088
 *      Note: there is no physical agent that does this in the "real world"                                            // 11089
 *                                                                                                                     // 11090
 *  @class RotationalSpring                                                                                            // 11091
 *  @constructor                                                                                                       // 11092
 *  @extends Spring                                                                                                    // 11093
 *  @param {Object} options options to set on drag                                                                     // 11094
 */                                                                                                                    // 11095
function RotationalSpring(options) {                                                                                   // 11096
    Spring.call(this, options);                                                                                        // 11097
}                                                                                                                      // 11098
                                                                                                                       // 11099
RotationalSpring.prototype = Object.create(Spring.prototype);                                                          // 11100
RotationalSpring.prototype.constructor = RotationalSpring;                                                             // 11101
                                                                                                                       // 11102
RotationalSpring.DEFAULT_OPTIONS = Spring.DEFAULT_OPTIONS;                                                             // 11103
RotationalSpring.FORCE_FUNCTIONS = Spring.FORCE_FUNCTIONS;                                                             // 11104
                                                                                                                       // 11105
/** @const */                                                                                                          // 11106
var pi = Math.PI;                                                                                                      // 11107
                                                                                                                       // 11108
function _calcStiffness() {                                                                                            // 11109
    var options = this.options;                                                                                        // 11110
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 11111
}                                                                                                                      // 11112
                                                                                                                       // 11113
function _calcDamping() {                                                                                              // 11114
    var options = this.options;                                                                                        // 11115
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 11116
}                                                                                                                      // 11117
                                                                                                                       // 11118
function _init() {                                                                                                     // 11119
    _calcStiffness.call(this);                                                                                         // 11120
    _calcDamping.call(this);                                                                                           // 11121
}                                                                                                                      // 11122
                                                                                                                       // 11123
RotationalSpring.prototype.setOptions = function setOptions(options) {                                                 // 11124
    // TODO fix no-console error                                                                                       // 11125
    /* eslint no-console: 0 */                                                                                         // 11126
                                                                                                                       // 11127
    if (options.anchor !== undefined) {                                                                                // 11128
        if (options.anchor instanceof Quaternion) this.options.anchor = options.anchor;                                // 11129
        if (options.anchor  instanceof Array) this.options.anchor = new Quaternion(options.anchor);                    // 11130
    }                                                                                                                  // 11131
                                                                                                                       // 11132
    if (options.period !== undefined){                                                                                 // 11133
        this.options.period = options.period;                                                                          // 11134
    }                                                                                                                  // 11135
                                                                                                                       // 11136
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11137
    if (options.length !== undefined) this.options.length = options.length;                                            // 11138
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11139
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11140
                                                                                                                       // 11141
    _init.call(this);                                                                                                  // 11142
    Force.prototype.setOptions.call(this, options);                                                                    // 11143
};                                                                                                                     // 11144
                                                                                                                       // 11145
/**                                                                                                                    // 11146
 * Adds a torque force to a physics body's torque accumulator.                                                         // 11147
 *                                                                                                                     // 11148
 * @method applyForce                                                                                                  // 11149
 * @param targets {Array.Body} Array of bodies to apply torque to.                                                     // 11150
 */                                                                                                                    // 11151
RotationalSpring.prototype.applyForce = function applyForce(targets) {                                                 // 11152
    var force = this.force;                                                                                            // 11153
    var options = this.options;                                                                                        // 11154
    var disp = this.disp;                                                                                              // 11155
                                                                                                                       // 11156
    var stiffness = options.stiffness;                                                                                 // 11157
    var damping = options.damping;                                                                                     // 11158
    var restLength = options.length;                                                                                   // 11159
    var anchor = options.anchor;                                                                                       // 11160
    var forceFunction = options.forceFunction;                                                                         // 11161
    var maxLength = options.maxLength;                                                                                 // 11162
                                                                                                                       // 11163
    var i;                                                                                                             // 11164
    var target;                                                                                                        // 11165
    var dist;                                                                                                          // 11166
    var m;                                                                                                             // 11167
                                                                                                                       // 11168
    for (i = 0; i < targets.length; i++) {                                                                             // 11169
        target = targets[i];                                                                                           // 11170
                                                                                                                       // 11171
        disp.set(anchor.sub(target.orientation));                                                                      // 11172
        dist = disp.norm() - restLength;                                                                               // 11173
                                                                                                                       // 11174
        if (dist === 0) return;                                                                                        // 11175
                                                                                                                       // 11176
        //if dampingRatio specified, then override strength and damping                                                // 11177
        m      = target.mass;                                                                                          // 11178
        stiffness *= m;                                                                                                // 11179
        damping   *= m;                                                                                                // 11180
                                                                                                                       // 11181
        force.set(disp.normalize(stiffness * forceFunction(dist, maxLength)));                                         // 11182
                                                                                                                       // 11183
        if (damping) force.add(target.angularVelocity.mult(-damping)).put(force);                                      // 11184
                                                                                                                       // 11185
        target.applyTorque(force);                                                                                     // 11186
    }                                                                                                                  // 11187
};                                                                                                                     // 11188
                                                                                                                       // 11189
/**                                                                                                                    // 11190
 * Calculates the potential energy of the rotational spring.                                                           // 11191
 *                                                                                                                     // 11192
 * @method getEnergy                                                                                                   // 11193
 * @param [targets] target The physics body attached to the spring                                                     // 11194
 */                                                                                                                    // 11195
RotationalSpring.prototype.getEnergy = function getEnergy(targets) {                                                   // 11196
    var options     = this.options;                                                                                    // 11197
    var restLength  = options.length;                                                                                  // 11198
    var anchor      = options.anchor;                                                                                  // 11199
    var strength    = options.stiffness;                                                                               // 11200
                                                                                                                       // 11201
    var energy = 0.0;                                                                                                  // 11202
    for (var i = 0; i < targets.length; i++) {                                                                         // 11203
        var target = targets[i];                                                                                       // 11204
        var dist = anchor.sub(target.orientation).norm() - restLength;                                                 // 11205
        energy += 0.5 * strength * dist * dist;                                                                        // 11206
    }                                                                                                                  // 11207
    return energy;                                                                                                     // 11208
};                                                                                                                     // 11209
                                                                                                                       // 11210
module.exports = RotationalSpring;                                                                                     // 11211
},{"../../math/Quaternion":39,"./Force":65,"./Spring":69}],69:[function(_dereq_,module,exports){                       // 11212
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11213
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11214
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11215
 *                                                                                                                     // 11216
 * Owner: david@famo.us                                                                                                // 11217
 * @license MPL 2.0                                                                                                    // 11218
 * @copyright Famous Industries, Inc. 2014                                                                             // 11219
 */                                                                                                                    // 11220
                                                                                                                       // 11221
/*global console */                                                                                                    // 11222
                                                                                                                       // 11223
var Force = _dereq_('./Force');                                                                                        // 11224
var Vector = _dereq_('../../math/Vector');                                                                             // 11225
                                                                                                                       // 11226
/**                                                                                                                    // 11227
 *  A force that moves a physics body to a location with a spring motion.                                              // 11228
 *    The body can be moved to another physics body, or an anchor point.                                               // 11229
 *                                                                                                                     // 11230
 *  @class Spring                                                                                                      // 11231
 *  @constructor                                                                                                       // 11232
 *  @extends Force                                                                                                     // 11233
 *  @param {Object} options options to set on drag                                                                     // 11234
 */                                                                                                                    // 11235
function Spring(options) {                                                                                             // 11236
    Force.call(this);                                                                                                  // 11237
                                                                                                                       // 11238
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 11239
    if (options) this.setOptions(options);                                                                             // 11240
                                                                                                                       // 11241
    //registers                                                                                                        // 11242
    this.disp = new Vector(0,0,0);                                                                                     // 11243
                                                                                                                       // 11244
    _init.call(this);                                                                                                  // 11245
}                                                                                                                      // 11246
                                                                                                                       // 11247
Spring.prototype = Object.create(Force.prototype);                                                                     // 11248
Spring.prototype.constructor = Spring;                                                                                 // 11249
                                                                                                                       // 11250
/** @const */                                                                                                          // 11251
var pi = Math.PI;                                                                                                      // 11252
var MIN_PERIOD = 150;                                                                                                  // 11253
                                                                                                                       // 11254
/**                                                                                                                    // 11255
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11256
 * @type Object                                                                                                        // 11257
 * @protected                                                                                                          // 11258
 * @static                                                                                                             // 11259
 */                                                                                                                    // 11260
Spring.FORCE_FUNCTIONS = {                                                                                             // 11261
                                                                                                                       // 11262
    /**                                                                                                                // 11263
     * A FENE (Finitely Extensible Nonlinear Elastic) spring force                                                     // 11264
     *      see: http://en.wikipedia.org/wiki/FENE                                                                     // 11265
     * @attribute FENE                                                                                                 // 11266
     * @type Function                                                                                                  // 11267
     * @param {Number} dist current distance target is from source body                                                // 11268
     * @param {Number} rMax maximum range of influence                                                                 // 11269
     * @return {Number} unscaled force                                                                                 // 11270
     */                                                                                                                // 11271
    FENE : function(dist, rMax) {                                                                                      // 11272
        var rMaxSmall = rMax * .99;                                                                                    // 11273
        var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);                                                       // 11274
        return r / (1 - r * r/(rMax * rMax));                                                                          // 11275
    },                                                                                                                 // 11276
                                                                                                                       // 11277
    /**                                                                                                                // 11278
     * A Hookean spring force, linear in the displacement                                                              // 11279
     *      see: http://en.wikipedia.org/wiki/Hooke's_law                                                              // 11280
     * @attribute FENE                                                                                                 // 11281
     * @type Function                                                                                                  // 11282
     * @param {Number} dist current distance target is from source body                                                // 11283
     * @return {Number} unscaled force                                                                                 // 11284
     */                                                                                                                // 11285
    HOOK : function(dist) {                                                                                            // 11286
        return dist;                                                                                                   // 11287
    }                                                                                                                  // 11288
};                                                                                                                     // 11289
                                                                                                                       // 11290
/**                                                                                                                    // 11291
 * @property Spring.DEFAULT_OPTIONS                                                                                    // 11292
 * @type Object                                                                                                        // 11293
 * @protected                                                                                                          // 11294
 * @static                                                                                                             // 11295
 */                                                                                                                    // 11296
Spring.DEFAULT_OPTIONS = {                                                                                             // 11297
                                                                                                                       // 11298
    /**                                                                                                                // 11299
     * The amount of time in milliseconds taken for one complete oscillation                                           // 11300
     * when there is no damping                                                                                        // 11301
     *    Range : [150, Infinity]                                                                                      // 11302
     * @attribute period                                                                                               // 11303
     * @type Number                                                                                                    // 11304
     * @default 300                                                                                                    // 11305
     */                                                                                                                // 11306
    period : 300,                                                                                                      // 11307
                                                                                                                       // 11308
    /**                                                                                                                // 11309
     * The damping of the spring.                                                                                      // 11310
     *    Range : [0, 1]                                                                                               // 11311
     *    0 = no damping, and the spring will oscillate forever                                                        // 11312
     *    1 = critically damped (the spring will never oscillate)                                                      // 11313
     * @attribute dampingRatio                                                                                         // 11314
     * @type Number                                                                                                    // 11315
     * @default 0.1                                                                                                    // 11316
     */                                                                                                                // 11317
    dampingRatio : 0.1,                                                                                                // 11318
                                                                                                                       // 11319
    /**                                                                                                                // 11320
     * The rest length of the spring                                                                                   // 11321
     *    Range : [0, Infinity]                                                                                        // 11322
     * @attribute length                                                                                               // 11323
     * @type Number                                                                                                    // 11324
     * @default 0                                                                                                      // 11325
     */                                                                                                                // 11326
    length : 0,                                                                                                        // 11327
                                                                                                                       // 11328
    /**                                                                                                                // 11329
     * The maximum length of the spring (for a FENE spring)                                                            // 11330
     *    Range : [0, Infinity]                                                                                        // 11331
     * @attribute length                                                                                               // 11332
     * @type Number                                                                                                    // 11333
     * @default Infinity                                                                                               // 11334
     */                                                                                                                // 11335
    maxLength : Infinity,                                                                                              // 11336
                                                                                                                       // 11337
    /**                                                                                                                // 11338
     * The location of the spring's anchor, if not another physics body                                                // 11339
     *                                                                                                                 // 11340
     * @attribute anchor                                                                                               // 11341
     * @type Array                                                                                                     // 11342
     * @optional                                                                                                       // 11343
     */                                                                                                                // 11344
    anchor : undefined,                                                                                                // 11345
                                                                                                                       // 11346
    /**                                                                                                                // 11347
     * The type of spring force                                                                                        // 11348
     * @attribute forceFunction                                                                                        // 11349
     * @type Function                                                                                                  // 11350
     */                                                                                                                // 11351
    forceFunction : Spring.FORCE_FUNCTIONS.HOOK                                                                        // 11352
};                                                                                                                     // 11353
                                                                                                                       // 11354
function _calcStiffness() {                                                                                            // 11355
    var options = this.options;                                                                                        // 11356
    options.stiffness = Math.pow(2 * pi / options.period, 2);                                                          // 11357
}                                                                                                                      // 11358
                                                                                                                       // 11359
function _calcDamping() {                                                                                              // 11360
    var options = this.options;                                                                                        // 11361
    options.damping = 4 * pi * options.dampingRatio / options.period;                                                  // 11362
}                                                                                                                      // 11363
                                                                                                                       // 11364
function _init() {                                                                                                     // 11365
    _calcStiffness.call(this);                                                                                         // 11366
    _calcDamping.call(this);                                                                                           // 11367
}                                                                                                                      // 11368
                                                                                                                       // 11369
/**                                                                                                                    // 11370
 * Basic options setter                                                                                                // 11371
 *                                                                                                                     // 11372
 * @method setOptions                                                                                                  // 11373
 * @param options {Object}                                                                                             // 11374
 */                                                                                                                    // 11375
Spring.prototype.setOptions = function setOptions(options) {                                                           // 11376
    // TODO fix no-console error                                                                                       // 11377
    /* eslint no-console: 0 */                                                                                         // 11378
                                                                                                                       // 11379
    if (options.anchor !== undefined) {                                                                                // 11380
        if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;                  // 11381
        if (options.anchor instanceof Vector) this.options.anchor = options.anchor;                                    // 11382
        if (options.anchor instanceof Array)  this.options.anchor = new Vector(options.anchor);                        // 11383
    }                                                                                                                  // 11384
                                                                                                                       // 11385
    if (options.period !== undefined){                                                                                 // 11386
        if (options.period < MIN_PERIOD) {                                                                             // 11387
            options.period = MIN_PERIOD;                                                                               // 11388
            console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
        }                                                                                                              // 11390
        this.options.period = options.period;                                                                          // 11391
    }                                                                                                                  // 11392
                                                                                                                       // 11393
    if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;                          // 11394
    if (options.length !== undefined) this.options.length = options.length;                                            // 11395
    if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;                       // 11396
    if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;                                   // 11397
                                                                                                                       // 11398
    _init.call(this);                                                                                                  // 11399
    Force.prototype.setOptions.call(this, options);                                                                    // 11400
};                                                                                                                     // 11401
                                                                                                                       // 11402
/**                                                                                                                    // 11403
 * Adds a spring force to a physics body's force accumulator.                                                          // 11404
 *                                                                                                                     // 11405
 * @method applyForce                                                                                                  // 11406
 * @param targets {Array.Body} Array of bodies to apply force to.                                                      // 11407
 */                                                                                                                    // 11408
Spring.prototype.applyForce = function applyForce(targets, source) {                                                   // 11409
    var force = this.force;                                                                                            // 11410
    var disp = this.disp;                                                                                              // 11411
    var options = this.options;                                                                                        // 11412
                                                                                                                       // 11413
    var stiffness = options.stiffness;                                                                                 // 11414
    var damping = options.damping;                                                                                     // 11415
    var restLength = options.length;                                                                                   // 11416
    var maxLength = options.maxLength;                                                                                 // 11417
    var anchor = options.anchor || source.position;                                                                    // 11418
    var forceFunction = options.forceFunction;                                                                         // 11419
                                                                                                                       // 11420
    var i;                                                                                                             // 11421
    var target;                                                                                                        // 11422
    var p2;                                                                                                            // 11423
    var v2;                                                                                                            // 11424
    var dist;                                                                                                          // 11425
    var m;                                                                                                             // 11426
                                                                                                                       // 11427
    for (i = 0; i < targets.length; i++) {                                                                             // 11428
        target = targets[i];                                                                                           // 11429
        p2 = target.position;                                                                                          // 11430
        v2 = target.velocity;                                                                                          // 11431
                                                                                                                       // 11432
        anchor.sub(p2).put(disp);                                                                                      // 11433
        dist = disp.norm() - restLength;                                                                               // 11434
                                                                                                                       // 11435
        if (dist === 0) return;                                                                                        // 11436
                                                                                                                       // 11437
        //if dampingRatio specified, then override strength and damping                                                // 11438
        m      = target.mass;                                                                                          // 11439
        stiffness *= m;                                                                                                // 11440
        damping   *= m;                                                                                                // 11441
                                                                                                                       // 11442
        disp.normalize(stiffness * forceFunction(dist, maxLength))                                                     // 11443
            .put(force);                                                                                               // 11444
                                                                                                                       // 11445
        if (damping)                                                                                                   // 11446
            if (source) force.add(v2.sub(source.velocity).mult(-damping)).put(force);                                  // 11447
            else force.add(v2.mult(-damping)).put(force);                                                              // 11448
                                                                                                                       // 11449
        target.applyForce(force);                                                                                      // 11450
        if (source) source.applyForce(force.mult(-1));                                                                 // 11451
    }                                                                                                                  // 11452
};                                                                                                                     // 11453
                                                                                                                       // 11454
/**                                                                                                                    // 11455
 * Calculates the potential energy of the spring.                                                                      // 11456
 *                                                                                                                     // 11457
 * @method getEnergy                                                                                                   // 11458
 * @param [targets] target  The physics body attached to the spring                                                    // 11459
 * @return {source}         The potential energy of the spring                                                         // 11460
 */                                                                                                                    // 11461
Spring.prototype.getEnergy = function getEnergy(targets, source) {                                                     // 11462
    var options     = this.options;                                                                                    // 11463
    var restLength  = options.length;                                                                                  // 11464
    var anchor      = (source) ? source.position : options.anchor;                                                     // 11465
    var strength    = options.stiffness;                                                                               // 11466
                                                                                                                       // 11467
    var energy = 0.0;                                                                                                  // 11468
    for (var i = 0; i < targets.length; i++){                                                                          // 11469
        var target = targets[i];                                                                                       // 11470
        var dist = anchor.sub(target.position).norm() - restLength;                                                    // 11471
        energy += 0.5 * strength * dist * dist;                                                                        // 11472
    }                                                                                                                  // 11473
    return energy;                                                                                                     // 11474
};                                                                                                                     // 11475
                                                                                                                       // 11476
module.exports = Spring;                                                                                               // 11477
},{"../../math/Vector":42,"./Force":65}],70:[function(_dereq_,module,exports){                                         // 11478
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11479
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11480
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11481
 *                                                                                                                     // 11482
 * Owner: david@famo.us                                                                                                // 11483
 * @license MPL 2.0                                                                                                    // 11484
 * @copyright Famous Industries, Inc. 2014                                                                             // 11485
 */                                                                                                                    // 11486
                                                                                                                       // 11487
var Force = _dereq_('./Force');                                                                                        // 11488
var Vector = _dereq_('../../math/Vector');                                                                             // 11489
                                                                                                                       // 11490
/**                                                                                                                    // 11491
 *  A force that moves a physics body to a location with a spring motion.                                              // 11492
 *    The body can be moved to another physics body, or an anchor point.                                               // 11493
 *                                                                                                                     // 11494
 *  @class VectorField                                                                                                 // 11495
 *  @constructor                                                                                                       // 11496
 *  @extends Force                                                                                                     // 11497
 *  @param {Object} options options to set on drag                                                                     // 11498
 */                                                                                                                    // 11499
function VectorField(options) {                                                                                        // 11500
    Force.call(this);                                                                                                  // 11501
                                                                                                                       // 11502
    this.options = Object.create(VectorField.DEFAULT_OPTIONS);                                                         // 11503
    if (options) this.setOptions(options);                                                                             // 11504
                                                                                                                       // 11505
    //registers                                                                                                        // 11506
    this.evaluation = new Vector();                                                                                    // 11507
}                                                                                                                      // 11508
                                                                                                                       // 11509
VectorField.prototype = Object.create(Force.prototype);                                                                // 11510
VectorField.prototype.constructor = VectorField;                                                                       // 11511
                                                                                                                       // 11512
/**                                                                                                                    // 11513
 * @property Spring.FORCE_FUNCTIONS                                                                                    // 11514
 * @type Object                                                                                                        // 11515
 * @protected                                                                                                          // 11516
 * @static                                                                                                             // 11517
 */                                                                                                                    // 11518
VectorField.FIELDS = {                                                                                                 // 11519
    /**                                                                                                                // 11520
     * Constant force, e.g., gravity                                                                                   // 11521
     * @attribute CONSTANT                                                                                             // 11522
     * @type Function                                                                                                  // 11523
     * @param v {Vector}        Current position of physics body                                                       // 11524
     * @param options {Object}  The direction of the force                                                             // 11525
     *      Pass a {direction : Vector} into the VectorField options                                                   // 11526
     * @return {Number} unscaled force                                                                                 // 11527
     */                                                                                                                // 11528
    CONSTANT : function(v, options) {                                                                                  // 11529
        options.direction.put(this.evaluation);                                                                        // 11530
    },                                                                                                                 // 11531
                                                                                                                       // 11532
    /**                                                                                                                // 11533
     * Linear force                                                                                                    // 11534
     * @attribute LINEAR                                                                                               // 11535
     * @type Function                                                                                                  // 11536
     * @param v {Vector} Current position of physics body                                                              // 11537
     * @return {Vector} unscaled force                                                                                 // 11538
     */                                                                                                                // 11539
    LINEAR : function(v) {                                                                                             // 11540
        v.put(this.evaluation);                                                                                        // 11541
    },                                                                                                                 // 11542
                                                                                                                       // 11543
    /**                                                                                                                // 11544
     * Radial force, e.g., Hookean spring                                                                              // 11545
     * @attribute RADIAL                                                                                               // 11546
     * @type Function                                                                                                  // 11547
     * @param v {Vector} Current position of physics body                                                              // 11548
     * @return {Vector} unscaled force                                                                                 // 11549
     */                                                                                                                // 11550
    RADIAL : function(v) {                                                                                             // 11551
        v.mult(-1).put(this.evaluation);                                                                               // 11552
    },                                                                                                                 // 11553
                                                                                                                       // 11554
    /**                                                                                                                // 11555
     * Point attractor force, e.g., Hookean spring with an anchor                                                      // 11556
     * @attribute POINT_ATTRACTOR                                                                                      // 11557
     * @type Function                                                                                                  // 11558
     * @param v {Vector}        Current position of physics body                                                       // 11559
     * @param options {Object}  And object with the position of the attractor                                          // 11560
     *      Pass a {position : Vector} into the VectorField options                                                    // 11561
     * @return {Vector} unscaled force                                                                                 // 11562
     */                                                                                                                // 11563
    POINT_ATTRACTOR : function(v, options) {                                                                           // 11564
        options.position.sub(v).put(this.evaluation);                                                                  // 11565
    }                                                                                                                  // 11566
};                                                                                                                     // 11567
                                                                                                                       // 11568
/**                                                                                                                    // 11569
 * @property VectorField.DEFAULT_OPTIONS                                                                               // 11570
 * @type Object                                                                                                        // 11571
 * @protected                                                                                                          // 11572
 * @static                                                                                                             // 11573
 */                                                                                                                    // 11574
VectorField.DEFAULT_OPTIONS = {                                                                                        // 11575
                                                                                                                       // 11576
    /**                                                                                                                // 11577
     * The strength of the force                                                                                       // 11578
     *    Range : [0, 10]                                                                                              // 11579
     * @attribute strength                                                                                             // 11580
     * @type Number                                                                                                    // 11581
     * @default .01                                                                                                    // 11582
     */                                                                                                                // 11583
    strength : .01,                                                                                                    // 11584
                                                                                                                       // 11585
    /**                                                                                                                // 11586
     * Type of vectorfield                                                                                             // 11587
     *    Range : [0, 100]                                                                                             // 11588
     * @attribute field                                                                                                // 11589
     * @type Function                                                                                                  // 11590
     */                                                                                                                // 11591
    field : VectorField.FIELDS.CONSTANT                                                                                // 11592
};                                                                                                                     // 11593
                                                                                                                       // 11594
/**                                                                                                                    // 11595
 * Basic options setter                                                                                                // 11596
 *                                                                                                                     // 11597
 * @method setOptions                                                                                                  // 11598
 * @param {Objects} options                                                                                            // 11599
 */                                                                                                                    // 11600
VectorField.prototype.setOptions = function setOptions(options) {                                                      // 11601
    if (options.strength !== undefined) this.options.strength = options.strength;                                      // 11602
    if (options.direction !== undefined) this.options.direction = options.direction;                                   // 11603
    if (options.field !== undefined) {                                                                                 // 11604
        this.options.field = options.field;                                                                            // 11605
        _setFieldOptions.call(this, this.options.field);                                                               // 11606
    }                                                                                                                  // 11607
};                                                                                                                     // 11608
                                                                                                                       // 11609
function _setFieldOptions(field) {                                                                                     // 11610
    var FIELDS = VectorField.FIELDS;                                                                                   // 11611
                                                                                                                       // 11612
    switch (field) {                                                                                                   // 11613
        case FIELDS.CONSTANT:                                                                                          // 11614
            if (!this.options.direction) this.options.direction = new Vector(0,1,0);                                   // 11615
            else if (this.options.direction instanceof Array) this.options.direction = new Vector(this.options.direction);
            break;                                                                                                     // 11617
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11618
            if (!this.options.position) this.options.position = new Vector(0,0,0);                                     // 11619
            else if (this.options.position instanceof Array) this.options.position = new Vector(this.options.position);
            break;                                                                                                     // 11621
    }                                                                                                                  // 11622
}                                                                                                                      // 11623
                                                                                                                       // 11624
/**                                                                                                                    // 11625
 * Adds the VectorField's force to a physics body's force accumulator.                                                 // 11626
 *                                                                                                                     // 11627
 * @method applyForce                                                                                                  // 11628
 * @param targets {Array.body} Array of bodies to apply force to.                                                      // 11629
 */                                                                                                                    // 11630
VectorField.prototype.applyForce = function applyForce(targets) {                                                      // 11631
    var force = this.force;                                                                                            // 11632
    var strength = this.options.strength;                                                                              // 11633
    var field = this.options.field;                                                                                    // 11634
                                                                                                                       // 11635
    var i;                                                                                                             // 11636
    var target;                                                                                                        // 11637
                                                                                                                       // 11638
    for (i = 0; i < targets.length; i++) {                                                                             // 11639
        target = targets[i];                                                                                           // 11640
        field.call(this, target.position, this.options);                                                               // 11641
        this.evaluation.mult(target.mass * strength).put(force);                                                       // 11642
        target.applyForce(force);                                                                                      // 11643
    }                                                                                                                  // 11644
};                                                                                                                     // 11645
                                                                                                                       // 11646
VectorField.prototype.getEnergy = function getEnergy(targets) {                                                        // 11647
    var field = this.options.field;                                                                                    // 11648
    var FIELDS = VectorField.FIELDS;                                                                                   // 11649
                                                                                                                       // 11650
    var energy = 0;                                                                                                    // 11651
                                                                                                                       // 11652
    var i;                                                                                                             // 11653
    var target;                                                                                                        // 11654
    switch (field) {                                                                                                   // 11655
        case FIELDS.CONSTANT:                                                                                          // 11656
            energy = targets.length * this.options.direction.norm();                                                   // 11657
            break;                                                                                                     // 11658
        case FIELDS.RADIAL:                                                                                            // 11659
            for (i = 0; i < targets.length; i++){                                                                      // 11660
                target = targets[i];                                                                                   // 11661
                energy += target.position.norm();                                                                      // 11662
            }                                                                                                          // 11663
            break;                                                                                                     // 11664
        case FIELDS.POINT_ATTRACTOR:                                                                                   // 11665
            for (i = 0; i < targets.length; i++){                                                                      // 11666
                target = targets[i];                                                                                   // 11667
                energy += target.position.sub(this.options.position).norm();                                           // 11668
            }                                                                                                          // 11669
            break;                                                                                                     // 11670
    }                                                                                                                  // 11671
    energy *= this.options.strength;                                                                                   // 11672
    return energy;                                                                                                     // 11673
};                                                                                                                     // 11674
                                                                                                                       // 11675
module.exports = VectorField;                                                                                          // 11676
},{"../../math/Vector":42,"./Force":65}],71:[function(_dereq_,module,exports){                                         // 11677
module.exports = {                                                                                                     // 11678
  Drag: _dereq_('./Drag'),                                                                                             // 11679
  Force: _dereq_('./Force'),                                                                                           // 11680
  Repulsion: _dereq_('./Repulsion'),                                                                                   // 11681
  RotationalDrag: _dereq_('./RotationalDrag'),                                                                         // 11682
  RotationalSpring: _dereq_('./RotationalSpring'),                                                                     // 11683
  Spring: _dereq_('./Spring'),                                                                                         // 11684
  VectorField: _dereq_('./VectorField')                                                                                // 11685
};                                                                                                                     // 11686
                                                                                                                       // 11687
},{"./Drag":64,"./Force":65,"./Repulsion":66,"./RotationalDrag":67,"./RotationalSpring":68,"./Spring":69,"./VectorField":70}],72:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 11689
  PhysicsEngine: _dereq_('./PhysicsEngine'),                                                                           // 11690
  bodies: _dereq_('./bodies'),                                                                                         // 11691
  constraints: _dereq_('./constraints'),                                                                               // 11692
  forces: _dereq_('./forces'),                                                                                         // 11693
  integrators: _dereq_('./integrators')                                                                                // 11694
};                                                                                                                     // 11695
                                                                                                                       // 11696
},{"./PhysicsEngine":49,"./bodies":54,"./constraints":63,"./forces":71,"./integrators":74}],73:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11698
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11699
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11700
 *                                                                                                                     // 11701
 * Owner: david@famo.us                                                                                                // 11702
 * @license MPL 2.0                                                                                                    // 11703
 * @copyright Famous Industries, Inc. 2014                                                                             // 11704
 */                                                                                                                    // 11705
                                                                                                                       // 11706
                                                                                                                       // 11707
                                                                                                                       // 11708
                                                                                                                       // 11709
/**                                                                                                                    // 11710
 * Ordinary Differential Equation (ODE) Integrator.                                                                    // 11711
 * Manages updating a physics body's state over time.                                                                  // 11712
 *                                                                                                                     // 11713
 *  p = position, v = velocity, m = mass, f = force, dt = change in time                                               // 11714
 *                                                                                                                     // 11715
 *      v <- v + dt * f / m                                                                                            // 11716
 *      p <- p + dt * v                                                                                                // 11717
 *                                                                                                                     // 11718
 *  q = orientation, w = angular velocity, L = angular momentum                                                        // 11719
 *                                                                                                                     // 11720
 *      L <- L + dt * t                                                                                                // 11721
 *      q <- q + dt/2 * q * w                                                                                          // 11722
 *                                                                                                                     // 11723
 * @class SymplecticEuler                                                                                              // 11724
 * @constructor                                                                                                        // 11725
 * @param {Object} options Options to set                                                                              // 11726
 */                                                                                                                    // 11727
var SymplecticEuler = {};                                                                                              // 11728
                                                                                                                       // 11729
/*                                                                                                                     // 11730
 * Updates the velocity of a physics body from its accumulated force.                                                  // 11731
 *      v <- v + dt * f / m                                                                                            // 11732
 *                                                                                                                     // 11733
 * @method integrateVelocity                                                                                           // 11734
 * @param {Body} physics body                                                                                          // 11735
 * @param {Number} dt delta time                                                                                       // 11736
 */                                                                                                                    // 11737
SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {                                             // 11738
    var v = body.velocity;                                                                                             // 11739
    var w = body.inverseMass;                                                                                          // 11740
    var f = body.force;                                                                                                // 11741
                                                                                                                       // 11742
    if (f.isZero()) return;                                                                                            // 11743
                                                                                                                       // 11744
    v.add(f.mult(dt * w)).put(v);                                                                                      // 11745
    f.clear();                                                                                                         // 11746
};                                                                                                                     // 11747
                                                                                                                       // 11748
/*                                                                                                                     // 11749
 * Updates the position of a physics body from its velocity.                                                           // 11750
 *      p <- p + dt * v                                                                                                // 11751
 *                                                                                                                     // 11752
 * @method integratePosition                                                                                           // 11753
 * @param {Body} physics body                                                                                          // 11754
 * @param {Number} dt delta time                                                                                       // 11755
 */                                                                                                                    // 11756
SymplecticEuler.integratePosition = function integratePosition(body, dt) {                                             // 11757
    var p = body.position;                                                                                             // 11758
    var v = body.velocity;                                                                                             // 11759
                                                                                                                       // 11760
    p.add(v.mult(dt)).put(p);                                                                                          // 11761
};                                                                                                                     // 11762
                                                                                                                       // 11763
/*                                                                                                                     // 11764
 * Updates the angular momentum of a physics body from its accumuled torque.                                           // 11765
 *      L <- L + dt * t                                                                                                // 11766
 *                                                                                                                     // 11767
 * @method integrateAngularMomentum                                                                                    // 11768
 * @param {Body} physics body (except a particle)                                                                      // 11769
 * @param {Number} dt delta time                                                                                       // 11770
 */                                                                                                                    // 11771
SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {                               // 11772
    var L = body.angularMomentum;                                                                                      // 11773
    var t = body.torque;                                                                                               // 11774
                                                                                                                       // 11775
    if (t.isZero()) return;                                                                                            // 11776
                                                                                                                       // 11777
    L.add(t.mult(dt)).put(L);                                                                                          // 11778
    t.clear();                                                                                                         // 11779
};                                                                                                                     // 11780
                                                                                                                       // 11781
/*                                                                                                                     // 11782
 * Updates the orientation of a physics body from its angular velocity.                                                // 11783
 *      q <- q + dt/2 * q * w                                                                                          // 11784
 *                                                                                                                     // 11785
 * @method integrateOrientation                                                                                        // 11786
 * @param {Body} physics body (except a particle)                                                                      // 11787
 * @param {Number} dt delta time                                                                                       // 11788
 */                                                                                                                    // 11789
SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {                                       // 11790
    var q = body.orientation;                                                                                          // 11791
    var w = body.angularVelocity;                                                                                      // 11792
                                                                                                                       // 11793
    if (w.isZero()) return;                                                                                            // 11794
    q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);                                                              // 11795
//        q.normalize.put(q);                                                                                          // 11796
};                                                                                                                     // 11797
                                                                                                                       // 11798
module.exports = SymplecticEuler;                                                                                      // 11799
},{}],74:[function(_dereq_,module,exports){                                                                            // 11800
module.exports = {                                                                                                     // 11801
  SymplecticEuler: _dereq_('./SymplecticEuler')                                                                        // 11802
};                                                                                                                     // 11803
                                                                                                                       // 11804
},{"./SymplecticEuler":73}],75:[function(_dereq_,module,exports){                                                      // 11805
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11806
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11807
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11808
 *                                                                                                                     // 11809
 * Owner: mark@famo.us                                                                                                 // 11810
 * @license MPL 2.0                                                                                                    // 11811
 * @copyright Famous Industries, Inc. 2014                                                                             // 11812
 */                                                                                                                    // 11813
                                                                                                                       // 11814
var Surface = _dereq_('../core/Surface');                                                                              // 11815
                                                                                                                       // 11816
/**                                                                                                                    // 11817
 * A surface containing an HTML5 Canvas element.                                                                       // 11818
 *   This extends the Surface class.                                                                                   // 11819
 *                                                                                                                     // 11820
 * @class CanvasSurface                                                                                                // 11821
 * @extends Surface                                                                                                    // 11822
 * @constructor                                                                                                        // 11823
 * @param {Object} [options] overrides of default options                                                              // 11824
 * @param {Array.Number} [options.canvasSize] [width, height] for document element                                     // 11825
 */                                                                                                                    // 11826
function CanvasSurface(options) {                                                                                      // 11827
    if (options && options.canvasSize) this._canvasSize = options.canvasSize;                                          // 11828
    Surface.apply(this, arguments);                                                                                    // 11829
    if (!this._canvasSize) this._canvasSize = this.getSize();                                                          // 11830
    this._backBuffer = document.createElement('canvas');                                                               // 11831
    if (this._canvasSize) {                                                                                            // 11832
        this._backBuffer.width = this._canvasSize[0];                                                                  // 11833
        this._backBuffer.height = this._canvasSize[1];                                                                 // 11834
    }                                                                                                                  // 11835
    this._contextId = undefined;                                                                                       // 11836
}                                                                                                                      // 11837
                                                                                                                       // 11838
CanvasSurface.prototype = Object.create(Surface.prototype);                                                            // 11839
CanvasSurface.prototype.constructor = CanvasSurface;                                                                   // 11840
CanvasSurface.prototype.elementType = 'canvas';                                                                        // 11841
CanvasSurface.prototype.elementClass = 'famous-surface';                                                               // 11842
                                                                                                                       // 11843
/**                                                                                                                    // 11844
 * Set inner document content.  Note that this is a noop for CanvasSurface.                                            // 11845
 *                                                                                                                     // 11846
 * @method setContent                                                                                                  // 11847
 *                                                                                                                     // 11848
 */                                                                                                                    // 11849
CanvasSurface.prototype.setContent = function setContent() {};                                                         // 11850
                                                                                                                       // 11851
/**                                                                                                                    // 11852
 * Place the document element this component manages into the document.                                                // 11853
 *    This will draw the content to the document.                                                                      // 11854
 *                                                                                                                     // 11855
 * @private                                                                                                            // 11856
 * @method deploy                                                                                                      // 11857
 * @param {Node} target document parent of this container                                                              // 11858
 */                                                                                                                    // 11859
CanvasSurface.prototype.deploy = function deploy(target) {                                                             // 11860
    if (this._canvasSize) {                                                                                            // 11861
        target.width = this._canvasSize[0];                                                                            // 11862
        target.height = this._canvasSize[1];                                                                           // 11863
    }                                                                                                                  // 11864
    if (this._contextId === '2d') {                                                                                    // 11865
        target.getContext(this._contextId).drawImage(this._backBuffer, 0, 0);                                          // 11866
        this._backBuffer.width = 0;                                                                                    // 11867
        this._backBuffer.height = 0;                                                                                   // 11868
    }                                                                                                                  // 11869
};                                                                                                                     // 11870
                                                                                                                       // 11871
/**                                                                                                                    // 11872
 * Remove this component and contained content from the document                                                       // 11873
 *                                                                                                                     // 11874
 * @private                                                                                                            // 11875
 * @method recall                                                                                                      // 11876
 *                                                                                                                     // 11877
 * @param {Node} target node to which the component was deployed                                                       // 11878
 */                                                                                                                    // 11879
CanvasSurface.prototype.recall = function recall(target) {                                                             // 11880
    var size = this.getSize();                                                                                         // 11881
                                                                                                                       // 11882
    this._backBuffer.width = target.width;                                                                             // 11883
    this._backBuffer.height = target.height;                                                                           // 11884
                                                                                                                       // 11885
    if (this._contextId === '2d') {                                                                                    // 11886
        this._backBuffer.getContext(this._contextId).drawImage(target, 0, 0);                                          // 11887
        target.width = 0;                                                                                              // 11888
        target.height = 0;                                                                                             // 11889
    }                                                                                                                  // 11890
};                                                                                                                     // 11891
                                                                                                                       // 11892
/**                                                                                                                    // 11893
 * Returns the canvas element's context                                                                                // 11894
 *                                                                                                                     // 11895
 * @method getContext                                                                                                  // 11896
 * @param {string} contextId context identifier                                                                        // 11897
 */                                                                                                                    // 11898
CanvasSurface.prototype.getContext = function getContext(contextId) {                                                  // 11899
    this._contextId = contextId;                                                                                       // 11900
    return this._currentTarget ? this._currentTarget.getContext(contextId) : this._backBuffer.getContext(contextId);   // 11901
};                                                                                                                     // 11902
                                                                                                                       // 11903
/**                                                                                                                    // 11904
 *  Set the size of the surface and canvas element.                                                                    // 11905
 *                                                                                                                     // 11906
 *  @method setSize                                                                                                    // 11907
 *  @param {Array.number} size [width, height] of surface                                                              // 11908
 *  @param {Array.number} canvasSize [width, height] of canvas surface                                                 // 11909
 */                                                                                                                    // 11910
CanvasSurface.prototype.setSize = function setSize(size, canvasSize) {                                                 // 11911
    Surface.prototype.setSize.apply(this, arguments);                                                                  // 11912
    if (canvasSize) this._canvasSize = [canvasSize[0], canvasSize[1]];                                                 // 11913
    if (this._currentTarget) {                                                                                         // 11914
        this._currentTarget.width = this._canvasSize[0];                                                               // 11915
        this._currentTarget.height = this._canvasSize[1];                                                              // 11916
    }                                                                                                                  // 11917
};                                                                                                                     // 11918
                                                                                                                       // 11919
module.exports = CanvasSurface;                                                                                        // 11920
},{"../core/Surface":14}],76:[function(_dereq_,module,exports){                                                        // 11921
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 11922
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 11923
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 11924
 *                                                                                                                     // 11925
 * Owner: mark@famo.us                                                                                                 // 11926
 * @license MPL 2.0                                                                                                    // 11927
 * @copyright Famous Industries, Inc. 2014                                                                             // 11928
 */                                                                                                                    // 11929
                                                                                                                       // 11930
var Surface = _dereq_('../core/Surface');                                                                              // 11931
var Context = _dereq_('../core/Context');                                                                              // 11932
                                                                                                                       // 11933
/**                                                                                                                    // 11934
 * ContainerSurface is an object designed to contain surfaces and                                                      // 11935
 *   set properties to be applied to all of them at once.                                                              // 11936
 *   This extends the Surface class.                                                                                   // 11937
 *   A container surface will enforce these properties on the                                                          // 11938
 *   surfaces it contains:                                                                                             // 11939
 *                                                                                                                     // 11940
 *   size (clips contained surfaces to its own width and height);                                                      // 11941
 *                                                                                                                     // 11942
 *   origin;                                                                                                           // 11943
 *                                                                                                                     // 11944
 *   its own opacity and transform, which will be automatically                                                        // 11945
 *   applied to  all Surfaces contained directly and indirectly.                                                       // 11946
 *                                                                                                                     // 11947
 * @class ContainerSurface                                                                                             // 11948
 * @extends Surface                                                                                                    // 11949
 * @constructor                                                                                                        // 11950
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 11951
 * @param {Array.string} [options.classes] CSS classes to set on all inner content                                     // 11952
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 11953
 * @param {string} [options.content] inner (HTML) content of surface (should not be used)                              // 11954
 */                                                                                                                    // 11955
function ContainerSurface(options) {                                                                                   // 11956
    Surface.call(this, options);                                                                                       // 11957
    this._container = document.createElement('div');                                                                   // 11958
    this._container.classList.add('famous-group');                                                                     // 11959
    this._container.classList.add('famous-container-group');                                                           // 11960
    this._shouldRecalculateSize = false;                                                                               // 11961
    this.context = new Context(this._container);                                                                       // 11962
    this.setContent(this._container);                                                                                  // 11963
}                                                                                                                      // 11964
                                                                                                                       // 11965
ContainerSurface.prototype = Object.create(Surface.prototype);                                                         // 11966
ContainerSurface.prototype.constructor = ContainerSurface;                                                             // 11967
ContainerSurface.prototype.elementType = 'div';                                                                        // 11968
ContainerSurface.prototype.elementClass = 'famous-surface';                                                            // 11969
                                                                                                                       // 11970
/**                                                                                                                    // 11971
 * Add renderables to this object's render tree                                                                        // 11972
 *                                                                                                                     // 11973
 * @method add                                                                                                         // 11974
 *                                                                                                                     // 11975
 * @param {Object} obj renderable object                                                                               // 11976
 * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode                                   // 11977
 */                                                                                                                    // 11978
ContainerSurface.prototype.add = function add() {                                                                      // 11979
    return this.context.add.apply(this.context, arguments);                                                            // 11980
};                                                                                                                     // 11981
                                                                                                                       // 11982
/**                                                                                                                    // 11983
 * Return spec for this surface.  Note: Can result in a size recalculation.                                            // 11984
 *                                                                                                                     // 11985
 * @private                                                                                                            // 11986
 * @method render                                                                                                      // 11987
 *                                                                                                                     // 11988
 * @return {Object} render spec for this surface (spec id)                                                             // 11989
 */                                                                                                                    // 11990
ContainerSurface.prototype.render = function render() {                                                                // 11991
    if (this._sizeDirty) this._shouldRecalculateSize = true;                                                           // 11992
    return Surface.prototype.render.apply(this, arguments);                                                            // 11993
};                                                                                                                     // 11994
                                                                                                                       // 11995
/**                                                                                                                    // 11996
 * Place the document element this component manages into the document.                                                // 11997
 *                                                                                                                     // 11998
 * @private                                                                                                            // 11999
 * @method deploy                                                                                                      // 12000
 * @param {Node} target document parent of this container                                                              // 12001
 */                                                                                                                    // 12002
ContainerSurface.prototype.deploy = function deploy() {                                                                // 12003
    this._shouldRecalculateSize = true;                                                                                // 12004
    return Surface.prototype.deploy.apply(this, arguments);                                                            // 12005
};                                                                                                                     // 12006
                                                                                                                       // 12007
/**                                                                                                                    // 12008
 * Apply changes from this component to the corresponding document element.                                            // 12009
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 12010
 * and matrix transforms.                                                                                              // 12011
 *                                                                                                                     // 12012
 * @private                                                                                                            // 12013
 * @method commit                                                                                                      // 12014
 * @param {Context} context commit context                                                                             // 12015
 * @param {Transform} transform unused TODO                                                                            // 12016
 * @param {Number} opacity  unused TODO                                                                                // 12017
 * @param {Array.Number} origin unused TODO                                                                            // 12018
 * @param {Array.Number} size unused TODO                                                                              // 12019
 * @return {undefined} TODO returns an undefined value                                                                 // 12020
 */                                                                                                                    // 12021
ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {                       // 12022
    var previousSize = this._size ? [this._size[0], this._size[1]] : null;                                             // 12023
    var result = Surface.prototype.commit.apply(this, arguments);                                                      // 12024
    if (this._shouldRecalculateSize || (previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1]))) {
        this.context.setSize();                                                                                        // 12026
        this._shouldRecalculateSize = false;                                                                           // 12027
    }                                                                                                                  // 12028
    this.context.update();                                                                                             // 12029
    return result;                                                                                                     // 12030
};                                                                                                                     // 12031
                                                                                                                       // 12032
module.exports = ContainerSurface;                                                                                     // 12033
},{"../core/Context":1,"../core/Surface":14}],77:[function(_dereq_,module,exports){                                    // 12034
var ContainerSurface = _dereq_('./ContainerSurface');                                                                  // 12035
                                                                                                                       // 12036
function FormContainerSurface(options) {                                                                               // 12037
    if (options) this._method = options.method || '';                                                                  // 12038
    ContainerSurface.apply(this, arguments);                                                                           // 12039
}                                                                                                                      // 12040
                                                                                                                       // 12041
FormContainerSurface.prototype = Object.create(ContainerSurface.prototype);                                            // 12042
FormContainerSurface.prototype.constructor = FormContainerSurface;                                                     // 12043
                                                                                                                       // 12044
FormContainerSurface.prototype.elementType = 'form';                                                                   // 12045
                                                                                                                       // 12046
FormContainerSurface.prototype.deploy = function deploy(target) {                                                      // 12047
    if (this._method) target.method = this._method;                                                                    // 12048
    return ContainerSurface.prototype.deploy.apply(this, arguments);                                                   // 12049
};                                                                                                                     // 12050
                                                                                                                       // 12051
module.exports = FormContainerSurface;                                                                                 // 12052
},{"./ContainerSurface":76}],78:[function(_dereq_,module,exports){                                                     // 12053
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12054
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12055
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12056
 *                                                                                                                     // 12057
 * Owner: mark@famo.us                                                                                                 // 12058
 * @license MPL 2.0                                                                                                    // 12059
 * @copyright Famous Industries, Inc. 2014                                                                             // 12060
 */                                                                                                                    // 12061
                                                                                                                       // 12062
var Surface = _dereq_('../core/Surface');                                                                              // 12063
                                                                                                                       // 12064
/**                                                                                                                    // 12065
 * A surface containing image content.                                                                                 // 12066
 *   This extends the Surface class.                                                                                   // 12067
 *                                                                                                                     // 12068
 * @class ImageSurface                                                                                                 // 12069
 *                                                                                                                     // 12070
 * @extends Surface                                                                                                    // 12071
 * @constructor                                                                                                        // 12072
 * @param {Object} [options] overrides of default options                                                              // 12073
 */                                                                                                                    // 12074
function ImageSurface(options) {                                                                                       // 12075
    this._imageUrl = undefined;                                                                                        // 12076
    Surface.apply(this, arguments);                                                                                    // 12077
}                                                                                                                      // 12078
                                                                                                                       // 12079
var urlCache = [];                                                                                                     // 12080
var countCache = [];                                                                                                   // 12081
var nodeCache = [];                                                                                                    // 12082
var cacheEnabled = true;                                                                                               // 12083
                                                                                                                       // 12084
ImageSurface.enableCache = function enableCache() {                                                                    // 12085
    cacheEnabled = true;                                                                                               // 12086
};                                                                                                                     // 12087
                                                                                                                       // 12088
ImageSurface.disableCache = function disableCache() {                                                                  // 12089
    cacheEnabled = false;                                                                                              // 12090
};                                                                                                                     // 12091
                                                                                                                       // 12092
ImageSurface.clearCache = function clearCache() {                                                                      // 12093
    urlCache = [];                                                                                                     // 12094
    countCache = [];                                                                                                   // 12095
    nodeCache = [];                                                                                                    // 12096
};                                                                                                                     // 12097
                                                                                                                       // 12098
ImageSurface.getCache = function getCache() {                                                                          // 12099
    return {                                                                                                           // 12100
        urlCache: urlCache,                                                                                            // 12101
        countCache: countCache,                                                                                        // 12102
        nodeCache: countCache                                                                                          // 12103
    };                                                                                                                 // 12104
};                                                                                                                     // 12105
                                                                                                                       // 12106
ImageSurface.prototype = Object.create(Surface.prototype);                                                             // 12107
ImageSurface.prototype.constructor = ImageSurface;                                                                     // 12108
ImageSurface.prototype.elementType = 'img';                                                                            // 12109
ImageSurface.prototype.elementClass = 'famous-surface';                                                                // 12110
                                                                                                                       // 12111
/**                                                                                                                    // 12112
 * Set content URL.  This will cause a re-rendering.                                                                   // 12113
 * @method setContent                                                                                                  // 12114
 * @param {string} imageUrl                                                                                            // 12115
 */                                                                                                                    // 12116
ImageSurface.prototype.setContent = function setContent(imageUrl) {                                                    // 12117
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 12118
    if (urlIndex !== -1) {                                                                                             // 12119
        if (countCache[urlIndex] === 1) {                                                                              // 12120
            urlCache.splice(urlIndex, 1);                                                                              // 12121
            countCache.splice(urlIndex, 1);                                                                            // 12122
            nodeCache.splice(urlIndex, 1);                                                                             // 12123
        } else {                                                                                                       // 12124
            countCache[urlIndex]--;                                                                                    // 12125
        }                                                                                                              // 12126
    }                                                                                                                  // 12127
                                                                                                                       // 12128
    urlIndex = urlCache.indexOf(imageUrl);                                                                             // 12129
    if (urlIndex === -1) {                                                                                             // 12130
        urlCache.push(imageUrl);                                                                                       // 12131
        countCache.push(1);                                                                                            // 12132
    }                                                                                                                  // 12133
    else {                                                                                                             // 12134
        countCache[urlIndex]++;                                                                                        // 12135
    }                                                                                                                  // 12136
                                                                                                                       // 12137
    this._imageUrl = imageUrl;                                                                                         // 12138
    this._contentDirty = true;                                                                                         // 12139
};                                                                                                                     // 12140
                                                                                                                       // 12141
/**                                                                                                                    // 12142
 * Place the document element that this component manages into the document.                                           // 12143
 *                                                                                                                     // 12144
 * @private                                                                                                            // 12145
 * @method deploy                                                                                                      // 12146
 * @param {Node} target document parent of this container                                                              // 12147
 */                                                                                                                    // 12148
ImageSurface.prototype.deploy = function deploy(target) {                                                              // 12149
    var urlIndex = urlCache.indexOf(this._imageUrl);                                                                   // 12150
    if (nodeCache[urlIndex] === undefined && cacheEnabled) {                                                           // 12151
        var img = new Image();                                                                                         // 12152
        img.src = this._imageUrl || '';                                                                                // 12153
        nodeCache[urlIndex] = img;                                                                                     // 12154
    }                                                                                                                  // 12155
                                                                                                                       // 12156
    target.src = this._imageUrl || '';                                                                                 // 12157
};                                                                                                                     // 12158
                                                                                                                       // 12159
/**                                                                                                                    // 12160
 * Remove this component and contained content from the document                                                       // 12161
 *                                                                                                                     // 12162
 * @private                                                                                                            // 12163
 * @method recall                                                                                                      // 12164
 *                                                                                                                     // 12165
 * @param {Node} target node to which the component was deployed                                                       // 12166
 */                                                                                                                    // 12167
ImageSurface.prototype.recall = function recall(target) {                                                              // 12168
    target.src = '';                                                                                                   // 12169
};                                                                                                                     // 12170
                                                                                                                       // 12171
module.exports = ImageSurface;                                                                                         // 12172
},{"../core/Surface":14}],79:[function(_dereq_,module,exports){                                                        // 12173
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12174
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12175
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12176
 *                                                                                                                     // 12177
 * Owner: mark@famo.us                                                                                                 // 12178
 * @license MPL 2.0                                                                                                    // 12179
 * @copyright Famous Industries, Inc. 2014                                                                             // 12180
 */                                                                                                                    // 12181
                                                                                                                       // 12182
var Surface = _dereq_('../core/Surface');                                                                              // 12183
                                                                                                                       // 12184
/**                                                                                                                    // 12185
 * A Famo.us surface in the form of an HTML input element.                                                             // 12186
 *   This extends the Surface class.                                                                                   // 12187
 *                                                                                                                     // 12188
 * @class InputSurface                                                                                                 // 12189
 * @extends Surface                                                                                                    // 12190
 * @constructor                                                                                                        // 12191
 * @param {Object} [options] overrides of default options                                                              // 12192
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an <input> element // 12193
 * @param {string} [options.type] specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)   // 12194
 * @param {string} [options.value] value of text                                                                       // 12195
 */                                                                                                                    // 12196
function InputSurface(options) {                                                                                       // 12197
    this._placeholder = options.placeholder || '';                                                                     // 12198
    this._value       = options.value || '';                                                                           // 12199
    this._type        = options.type || 'text';                                                                        // 12200
    this._name        = options.name || '';                                                                            // 12201
                                                                                                                       // 12202
    Surface.apply(this, arguments);                                                                                    // 12203
                                                                                                                       // 12204
    this.on('click', this.focus.bind(this));                                                                           // 12205
    window.addEventListener('click', function(event) {                                                                 // 12206
        if (event.target !== this._currentTarget) this.blur();                                                         // 12207
    }.bind(this));                                                                                                     // 12208
}                                                                                                                      // 12209
InputSurface.prototype = Object.create(Surface.prototype);                                                             // 12210
InputSurface.prototype.constructor = InputSurface;                                                                     // 12211
                                                                                                                       // 12212
InputSurface.prototype.elementType = 'input';                                                                          // 12213
InputSurface.prototype.elementClass = 'famous-surface';                                                                // 12214
                                                                                                                       // 12215
/**                                                                                                                    // 12216
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12217
 *                                                                                                                     // 12218
 * @method setPlaceholder                                                                                              // 12219
 * @param {string} str Value to set the placeholder to.                                                                // 12220
 * @return {InputSurface} this, allowing method chaining.                                                              // 12221
 */                                                                                                                    // 12222
InputSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                                 // 12223
    this._placeholder = str;                                                                                           // 12224
    this._contentDirty = true;                                                                                         // 12225
    return this;                                                                                                       // 12226
};                                                                                                                     // 12227
                                                                                                                       // 12228
/**                                                                                                                    // 12229
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12230
 *                                                                                                                     // 12231
 * @method focus                                                                                                       // 12232
 * @return {InputSurface} this, allowing method chaining.                                                              // 12233
 */                                                                                                                    // 12234
InputSurface.prototype.focus = function focus() {                                                                      // 12235
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12236
    return this;                                                                                                       // 12237
};                                                                                                                     // 12238
                                                                                                                       // 12239
/**                                                                                                                    // 12240
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12241
 *                                                                                                                     // 12242
 * @method blur                                                                                                        // 12243
 * @return {InputSurface} this, allowing method chaining.                                                              // 12244
 */                                                                                                                    // 12245
InputSurface.prototype.blur = function blur() {                                                                        // 12246
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12247
    return this;                                                                                                       // 12248
};                                                                                                                     // 12249
                                                                                                                       // 12250
/**                                                                                                                    // 12251
 * Set the placeholder conent.                                                                                         // 12252
 *   Note: Triggers a repaint next tick.                                                                               // 12253
 *                                                                                                                     // 12254
 * @method setValue                                                                                                    // 12255
 * @param {string} str Value to set the main input value to.                                                           // 12256
 * @return {InputSurface} this, allowing method chaining.                                                              // 12257
 */                                                                                                                    // 12258
InputSurface.prototype.setValue = function setValue(str) {                                                             // 12259
    this._value = str;                                                                                                 // 12260
    this._contentDirty = true;                                                                                         // 12261
    return this;                                                                                                       // 12262
};                                                                                                                     // 12263
                                                                                                                       // 12264
/**                                                                                                                    // 12265
 * Set the type of element to display conent.                                                                          // 12266
 *   Note: Triggers a repaint next tick.                                                                               // 12267
 *                                                                                                                     // 12268
 * @method setType                                                                                                     // 12269
 * @param {string} str type of the input surface (e.g. 'button', 'text')                                               // 12270
 * @return {InputSurface} this, allowing method chaining.                                                              // 12271
 */                                                                                                                    // 12272
InputSurface.prototype.setType = function setType(str) {                                                               // 12273
    this._type = str;                                                                                                  // 12274
    this._contentDirty = true;                                                                                         // 12275
    return this;                                                                                                       // 12276
};                                                                                                                     // 12277
                                                                                                                       // 12278
/**                                                                                                                    // 12279
 * Get the value of the inner content of the element (e.g. the entered text)                                           // 12280
 *                                                                                                                     // 12281
 * @method getValue                                                                                                    // 12282
 * @return {string} value of element                                                                                   // 12283
 */                                                                                                                    // 12284
InputSurface.prototype.getValue = function getValue() {                                                                // 12285
    if (this._currentTarget) {                                                                                         // 12286
        return this._currentTarget.value;                                                                              // 12287
    }                                                                                                                  // 12288
    else {                                                                                                             // 12289
        return this._value;                                                                                            // 12290
    }                                                                                                                  // 12291
};                                                                                                                     // 12292
                                                                                                                       // 12293
/**                                                                                                                    // 12294
 * Set the name attribute of the element.                                                                              // 12295
 *   Note: Triggers a repaint next tick.                                                                               // 12296
 *                                                                                                                     // 12297
 * @method setName                                                                                                     // 12298
 * @param {string} str element name                                                                                    // 12299
 * @return {InputSurface} this, allowing method chaining.                                                              // 12300
 */                                                                                                                    // 12301
InputSurface.prototype.setName = function setName(str) {                                                               // 12302
    this._name = str;                                                                                                  // 12303
    this._contentDirty = true;                                                                                         // 12304
    return this;                                                                                                       // 12305
};                                                                                                                     // 12306
                                                                                                                       // 12307
/**                                                                                                                    // 12308
 * Get the name attribute of the element.                                                                              // 12309
 *                                                                                                                     // 12310
 * @method getName                                                                                                     // 12311
 * @return {string} name of element                                                                                    // 12312
 */                                                                                                                    // 12313
InputSurface.prototype.getName = function getName() {                                                                  // 12314
    return this._name;                                                                                                 // 12315
};                                                                                                                     // 12316
                                                                                                                       // 12317
/**                                                                                                                    // 12318
 * Place the document element this component manages into the document.                                                // 12319
 *                                                                                                                     // 12320
 * @private                                                                                                            // 12321
 * @method deploy                                                                                                      // 12322
 * @param {Node} target document parent of this container                                                              // 12323
 */                                                                                                                    // 12324
InputSurface.prototype.deploy = function deploy(target) {                                                              // 12325
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12326
    target.value = this._value;                                                                                        // 12327
    target.type = this._type;                                                                                          // 12328
    target.name = this._name;                                                                                          // 12329
};                                                                                                                     // 12330
                                                                                                                       // 12331
module.exports = InputSurface;                                                                                         // 12332
},{"../core/Surface":14}],80:[function(_dereq_,module,exports){                                                        // 12333
var InputSurface = _dereq_('./InputSurface');                                                                          // 12334
                                                                                                                       // 12335
function SubmitInputSurface(options) {                                                                                 // 12336
    InputSurface.apply(this, arguments);                                                                               // 12337
    this._type = 'submit';                                                                                             // 12338
    if (options && options.onClick) this.setOnClick(options.onClick);                                                  // 12339
}                                                                                                                      // 12340
                                                                                                                       // 12341
SubmitInputSurface.prototype = Object.create(InputSurface.prototype);                                                  // 12342
SubmitInputSurface.prototype.constructor = SubmitInputSurface;                                                         // 12343
                                                                                                                       // 12344
SubmitInputSurface.prototype.setOnClick = function(onClick) {                                                          // 12345
    this.onClick = onClick;                                                                                            // 12346
};                                                                                                                     // 12347
                                                                                                                       // 12348
SubmitInputSurface.prototype.deploy = function deploy(target) {                                                        // 12349
    if (this.onclick) target.onClick = this.onClick;                                                                   // 12350
    InputSurface.prototype.deploy.apply(this, arguments);                                                              // 12351
};                                                                                                                     // 12352
                                                                                                                       // 12353
module.exports = SubmitInputSurface;                                                                                   // 12354
},{"./InputSurface":79}],81:[function(_dereq_,module,exports){                                                         // 12355
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12356
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12357
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12358
 *                                                                                                                     // 12359
 * Owner: mark@famo.us                                                                                                 // 12360
 * @license MPL 2.0                                                                                                    // 12361
 * @copyright Famous Industries, Inc. 2014                                                                             // 12362
 */                                                                                                                    // 12363
                                                                                                                       // 12364
var Surface = _dereq_('../core/Surface');                                                                              // 12365
                                                                                                                       // 12366
/**                                                                                                                    // 12367
 * A Famo.us surface in the form of an HTML textarea element.                                                          // 12368
 *   This extends the Surface class.                                                                                   // 12369
 *                                                                                                                     // 12370
 * @class TextareaSurface                                                                                              // 12371
 * @extends Surface                                                                                                    // 12372
 * @constructor                                                                                                        // 12373
 * @param {Object} [options] overrides of default options                                                              // 12374
 * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an textarea element
 * @param {string} [options.value] value of text                                                                       // 12376
 * @param {string} [options.name] specifies the name of textarea                                                       // 12377
 * @param {string} [options.wrap] specify 'hard' or 'soft' wrap for textarea                                           // 12378
 * @param {number} [options.cols] number of columns in textarea                                                        // 12379
 * @param {number} [options.rows] number of rows in textarea                                                           // 12380
 */                                                                                                                    // 12381
function TextareaSurface(options) {                                                                                    // 12382
    this._placeholder = options.placeholder || '';                                                                     // 12383
    this._value       = options.value || '';                                                                           // 12384
    this._name        = options.name || '';                                                                            // 12385
    this._wrap        = options.wrap || '';                                                                            // 12386
    this._cols        = options.cols || '';                                                                            // 12387
    this._rows        = options.rows || '';                                                                            // 12388
                                                                                                                       // 12389
    Surface.apply(this, arguments);                                                                                    // 12390
    this.on('click', this.focus.bind(this));                                                                           // 12391
}                                                                                                                      // 12392
TextareaSurface.prototype = Object.create(Surface.prototype);                                                          // 12393
TextareaSurface.prototype.constructor = TextareaSurface;                                                               // 12394
                                                                                                                       // 12395
TextareaSurface.prototype.elementType = 'textarea';                                                                    // 12396
TextareaSurface.prototype.elementClass = 'famous-surface';                                                             // 12397
                                                                                                                       // 12398
/**                                                                                                                    // 12399
 * Set placeholder text.  Note: Triggers a repaint.                                                                    // 12400
 *                                                                                                                     // 12401
 * @method setPlaceholder                                                                                              // 12402
 * @param {string} str Value to set the placeholder to.                                                                // 12403
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12404
 */                                                                                                                    // 12405
TextareaSurface.prototype.setPlaceholder = function setPlaceholder(str) {                                              // 12406
    this._placeholder = str;                                                                                           // 12407
    this._contentDirty = true;                                                                                         // 12408
    return this;                                                                                                       // 12409
};                                                                                                                     // 12410
                                                                                                                       // 12411
/**                                                                                                                    // 12412
 * Focus on the current input, pulling up the keyboard on mobile.                                                      // 12413
 *                                                                                                                     // 12414
 * @method focus                                                                                                       // 12415
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12416
 */                                                                                                                    // 12417
TextareaSurface.prototype.focus = function focus() {                                                                   // 12418
    if (this._currentTarget) this._currentTarget.focus();                                                              // 12419
    return this;                                                                                                       // 12420
};                                                                                                                     // 12421
                                                                                                                       // 12422
/**                                                                                                                    // 12423
 * Blur the current input, hiding the keyboard on mobile.                                                              // 12424
 *                                                                                                                     // 12425
 * @method focus                                                                                                       // 12426
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12427
 */                                                                                                                    // 12428
TextareaSurface.prototype.blur = function blur() {                                                                     // 12429
    if (this._currentTarget) this._currentTarget.blur();                                                               // 12430
    return this;                                                                                                       // 12431
};                                                                                                                     // 12432
                                                                                                                       // 12433
/**                                                                                                                    // 12434
 * Set the value of textarea.                                                                                          // 12435
 *   Note: Triggers a repaint next tick.                                                                               // 12436
 *                                                                                                                     // 12437
 * @method setValue                                                                                                    // 12438
 * @param {string} str Value to set the main textarea value to.                                                        // 12439
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12440
 */                                                                                                                    // 12441
TextareaSurface.prototype.setValue = function setValue(str) {                                                          // 12442
    this._value = str;                                                                                                 // 12443
    this._contentDirty = true;                                                                                         // 12444
    return this;                                                                                                       // 12445
};                                                                                                                     // 12446
                                                                                                                       // 12447
/**                                                                                                                    // 12448
 * Get the value of the inner content of the textarea (e.g. the entered text)                                          // 12449
 *                                                                                                                     // 12450
 * @method getValue                                                                                                    // 12451
 * @return {string} value of element                                                                                   // 12452
 */                                                                                                                    // 12453
TextareaSurface.prototype.getValue = function getValue() {                                                             // 12454
    if (this._currentTarget) {                                                                                         // 12455
        return this._currentTarget.value;                                                                              // 12456
    }                                                                                                                  // 12457
    else {                                                                                                             // 12458
        return this._value;                                                                                            // 12459
    }                                                                                                                  // 12460
};                                                                                                                     // 12461
                                                                                                                       // 12462
/**                                                                                                                    // 12463
 * Set the name attribute of the element.                                                                              // 12464
 *   Note: Triggers a repaint next tick.                                                                               // 12465
 *                                                                                                                     // 12466
 * @method setName                                                                                                     // 12467
 * @param {string} str element name                                                                                    // 12468
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12469
 */                                                                                                                    // 12470
TextareaSurface.prototype.setName = function setName(str) {                                                            // 12471
    this._name = str;                                                                                                  // 12472
    this._contentDirty = true;                                                                                         // 12473
    return this;                                                                                                       // 12474
};                                                                                                                     // 12475
                                                                                                                       // 12476
/**                                                                                                                    // 12477
 * Get the name attribute of the element.                                                                              // 12478
 *                                                                                                                     // 12479
 * @method getName                                                                                                     // 12480
 * @return {string} name of element                                                                                    // 12481
 */                                                                                                                    // 12482
TextareaSurface.prototype.getName = function getName() {                                                               // 12483
    return this._name;                                                                                                 // 12484
};                                                                                                                     // 12485
                                                                                                                       // 12486
/**                                                                                                                    // 12487
 * Set the wrap of textarea.                                                                                           // 12488
 *   Note: Triggers a repaint next tick.                                                                               // 12489
 *                                                                                                                     // 12490
 * @method setWrap                                                                                                     // 12491
 * @param {string} str wrap of the textarea surface (e.g. 'soft', 'hard')                                              // 12492
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12493
 */                                                                                                                    // 12494
TextareaSurface.prototype.setWrap = function setWrap(str) {                                                            // 12495
    this._wrap = str;                                                                                                  // 12496
    this._contentDirty = true;                                                                                         // 12497
    return this;                                                                                                       // 12498
};                                                                                                                     // 12499
                                                                                                                       // 12500
/**                                                                                                                    // 12501
 * Set the number of columns visible in the textarea.                                                                  // 12502
 *   Note: Overridden by surface size; set width to true. (eg. size: [true, *])                                        // 12503
 *         Triggers a repaint next tick.                                                                               // 12504
 *                                                                                                                     // 12505
 * @method setColumns                                                                                                  // 12506
 * @param {number} num columns in textarea surface                                                                     // 12507
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12508
 */                                                                                                                    // 12509
TextareaSurface.prototype.setColumns = function setColumns(num) {                                                      // 12510
    this._cols = num;                                                                                                  // 12511
    this._contentDirty = true;                                                                                         // 12512
    return this;                                                                                                       // 12513
};                                                                                                                     // 12514
                                                                                                                       // 12515
/**                                                                                                                    // 12516
 * Set the number of rows visible in the textarea.                                                                     // 12517
 *   Note: Overridden by surface size; set height to true. (eg. size: [*, true])                                       // 12518
 *         Triggers a repaint next tick.                                                                               // 12519
 *                                                                                                                     // 12520
 * @method setRows                                                                                                     // 12521
 * @param {number} num rows in textarea surface                                                                        // 12522
 * @return {TextareaSurface} this, allowing method chaining.                                                           // 12523
 */                                                                                                                    // 12524
TextareaSurface.prototype.setRows = function setRows(num) {                                                            // 12525
    this._rows = num;                                                                                                  // 12526
    this._contentDirty = true;                                                                                         // 12527
    return this;                                                                                                       // 12528
};                                                                                                                     // 12529
                                                                                                                       // 12530
/**                                                                                                                    // 12531
 * Place the document element this component manages into the document.                                                // 12532
 *                                                                                                                     // 12533
 * @private                                                                                                            // 12534
 * @method deploy                                                                                                      // 12535
 * @param {Node} target document parent of this container                                                              // 12536
 */                                                                                                                    // 12537
TextareaSurface.prototype.deploy = function deploy(target) {                                                           // 12538
    if (this._placeholder !== '') target.placeholder = this._placeholder;                                              // 12539
    if (this._value !== '') target.value = this._value;                                                                // 12540
    if (this._name !== '') target.name = this._name;                                                                   // 12541
    if (this._wrap !== '') target.wrap = this._wrap;                                                                   // 12542
    if (this._cols !== '') target.cols = this._cols;                                                                   // 12543
    if (this._rows !== '') target.rows = this._rows;                                                                   // 12544
};                                                                                                                     // 12545
                                                                                                                       // 12546
module.exports = TextareaSurface;                                                                                      // 12547
},{"../core/Surface":14}],82:[function(_dereq_,module,exports){                                                        // 12548
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12549
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12550
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12551
 *                                                                                                                     // 12552
 * Owner: mark@famo.us                                                                                                 // 12553
 * @license MPL 2.0                                                                                                    // 12554
 * @copyright Famous Industries, Inc. 2014                                                                             // 12555
 */                                                                                                                    // 12556
                                                                                                                       // 12557
var Surface = _dereq_('../core/Surface');                                                                              // 12558
                                                                                                                       // 12559
/**                                                                                                                    // 12560
 * Creates a famous surface containing video content. Currently adding                                                 // 12561
 *   controls and manipulating the video are not supported through the                                                 // 12562
 *   surface interface, but can be accomplished via standard JavaScript                                                // 12563
 *   manipulation of the video DOM element.                                                                            // 12564
 *   This extends the Surface class.                                                                                   // 12565
 *                                                                                                                     // 12566
 * @class VideoSurface                                                                                                 // 12567
 * @extends Surface                                                                                                    // 12568
 * @constructor                                                                                                        // 12569
 * @param {Object} [options] default option overrides                                                                  // 12570
 * @param {Array.Number} [options.size] [width, height] in pixels                                                      // 12571
 * @param {Array.string} [options.classes] CSS classes to set on inner content                                         // 12572
 * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div                       // 12573
 * @param {String} [options.src] videoUrl URL                                                                          // 12574
 * @param {boolean} [options.autoplay] autoplay                                                                        // 12575
 */                                                                                                                    // 12576
function VideoSurface(options) {                                                                                       // 12577
    Surface.apply(this, arguments);                                                                                    // 12578
    this._videoUrl = undefined;                                                                                        // 12579
    this.options = Object.create(VideoSurface.DEFAULT_OPTIONS);                                                        // 12580
    if (options) this.setOptions(options);                                                                             // 12581
}                                                                                                                      // 12582
                                                                                                                       // 12583
VideoSurface.prototype = Object.create(Surface.prototype);                                                             // 12584
VideoSurface.prototype.constructor = VideoSurface;                                                                     // 12585
                                                                                                                       // 12586
VideoSurface.DEFAULT_OPTIONS = {                                                                                       // 12587
    autoplay: false                                                                                                    // 12588
};                                                                                                                     // 12589
                                                                                                                       // 12590
VideoSurface.prototype.elementType = 'video';                                                                          // 12591
VideoSurface.prototype.elementClass = 'famous-surface';                                                                // 12592
                                                                                                                       // 12593
/**                                                                                                                    // 12594
 * Set internal options, overriding any default options                                                                // 12595
 *                                                                                                                     // 12596
 * @method setOptions                                                                                                  // 12597
 *                                                                                                                     // 12598
 * @param {Object} [options] overrides of default options                                                              // 12599
 * @param {Boolean} [options.autoplay] HTML autoplay                                                                   // 12600
 */                                                                                                                    // 12601
VideoSurface.prototype.setOptions = function setOptions(options) {                                                     // 12602
    if (options.size) this.setSize(options.size);                                                                      // 12603
    if (options.classes) this.setClasses(options.classes);                                                             // 12604
    if (options.properties) this.setProperties(options.properties);                                                    // 12605
    if (options.autoplay) this.options.autoplay = options.autoplay;                                                    // 12606
    if (options.src) {                                                                                                 // 12607
        this._videoUrl = options.src;                                                                                  // 12608
        this._contentDirty = true;                                                                                     // 12609
    }                                                                                                                  // 12610
};                                                                                                                     // 12611
                                                                                                                       // 12612
/**                                                                                                                    // 12613
 * Set url of the video.                                                                                               // 12614
 *                                                                                                                     // 12615
 * @method setContent                                                                                                  // 12616
 * @param {string} videoUrl URL                                                                                        // 12617
 */                                                                                                                    // 12618
VideoSurface.prototype.setContent = function setContent(videoUrl) {                                                    // 12619
    this._videoUrl = videoUrl;                                                                                         // 12620
    this._contentDirty = true;                                                                                         // 12621
};                                                                                                                     // 12622
                                                                                                                       // 12623
/**                                                                                                                    // 12624
 * Place the document element this component manages into the document.                                                // 12625
 *   Note: In the case of VideoSurface, simply changes the options on the target.                                      // 12626
 *                                                                                                                     // 12627
 * @private                                                                                                            // 12628
 * @method deploy                                                                                                      // 12629
 * @param {Node} target document parent of this container                                                              // 12630
 */                                                                                                                    // 12631
VideoSurface.prototype.deploy = function deploy(target) {                                                              // 12632
    target.src = this._videoUrl;                                                                                       // 12633
    target.autoplay = this.options.autoplay;                                                                           // 12634
};                                                                                                                     // 12635
                                                                                                                       // 12636
/**                                                                                                                    // 12637
 * Remove this component and contained content from the document.                                                      // 12638
 *   Note: This doesn't actually remove the <video> element from the                                                   // 12639
 *   document.                                                                                                         // 12640
 * @private                                                                                                            // 12641
 * @method recall                                                                                                      // 12642
 *                                                                                                                     // 12643
 * @param {Node} target node to which the component was deployed                                                       // 12644
 */                                                                                                                    // 12645
VideoSurface.prototype.recall = function recall(target) {                                                              // 12646
    target.src = '';                                                                                                   // 12647
};                                                                                                                     // 12648
                                                                                                                       // 12649
module.exports = VideoSurface;                                                                                         // 12650
},{"../core/Surface":14}],83:[function(_dereq_,module,exports){                                                        // 12651
module.exports = {                                                                                                     // 12652
  CanvasSurface: _dereq_('./CanvasSurface'),                                                                           // 12653
  ContainerSurface: _dereq_('./ContainerSurface'),                                                                     // 12654
  FormContainerSurface: _dereq_('./FormContainerSurface'),                                                             // 12655
  ImageSurface: _dereq_('./ImageSurface'),                                                                             // 12656
  InputSurface: _dereq_('./InputSurface'),                                                                             // 12657
  SubmitInputSurface: _dereq_('./SubmitInputSurface'),                                                                 // 12658
  TextareaSurface: _dereq_('./TextareaSurface'),                                                                       // 12659
  VideoSurface: _dereq_('./VideoSurface')                                                                              // 12660
};                                                                                                                     // 12661
                                                                                                                       // 12662
},{"./CanvasSurface":75,"./ContainerSurface":76,"./FormContainerSurface":77,"./ImageSurface":78,"./InputSurface":79,"./SubmitInputSurface":80,"./TextareaSurface":81,"./VideoSurface":82}],84:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12664
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12665
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12666
 *                                                                                                                     // 12667
 * Owner: david@famo.us                                                                                                // 12668
 * @license MPL 2.0                                                                                                    // 12669
 * @copyright Famous Industries, Inc. 2014                                                                             // 12670
 */                                                                                                                    // 12671
                                                                                                                       // 12672
                                                                                                                       // 12673
                                                                                                                       // 12674
/**                                                                                                                    // 12675
 * A simple in-memory object cache.  Used as a helper for Views with                                                   // 12676
 * provider functions.                                                                                                 // 12677
 * @class CachedMap                                                                                                    // 12678
 * @constructor                                                                                                        // 12679
 */                                                                                                                    // 12680
function CachedMap(mappingFunction) {                                                                                  // 12681
    this._map = mappingFunction || null;                                                                               // 12682
    this._cachedOutput = null;                                                                                         // 12683
    this._cachedInput = Number.NaN; //never valid as input                                                             // 12684
}                                                                                                                      // 12685
                                                                                                                       // 12686
/**                                                                                                                    // 12687
 * Creates a mapping function with a cache.                                                                            // 12688
 * This is the main entry point for this object.                                                                       // 12689
 * @static                                                                                                             // 12690
 * @method create                                                                                                      // 12691
 * @param {function} mappingFunction mapping                                                                           // 12692
 * @return {function} memorized mapping function                                                                       // 12693
 */                                                                                                                    // 12694
CachedMap.create = function create(mappingFunction) {                                                                  // 12695
    var instance = new CachedMap(mappingFunction);                                                                     // 12696
    return instance.get.bind(instance);                                                                                // 12697
};                                                                                                                     // 12698
                                                                                                                       // 12699
/**                                                                                                                    // 12700
 * Retrieve items from cache or from mapping function.                                                                 // 12701
 *                                                                                                                     // 12702
 * @method get                                                                                                         // 12703
 * @param {Object} input input key                                                                                     // 12704
 */                                                                                                                    // 12705
CachedMap.prototype.get = function get(input) {                                                                        // 12706
    if (input !== this._cachedInput) {                                                                                 // 12707
        this._cachedInput = input;                                                                                     // 12708
        this._cachedOutput = this._map(input);                                                                         // 12709
    }                                                                                                                  // 12710
    return this._cachedOutput;                                                                                         // 12711
};                                                                                                                     // 12712
                                                                                                                       // 12713
module.exports = CachedMap;                                                                                            // 12714
},{}],85:[function(_dereq_,module,exports){                                                                            // 12715
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 12716
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 12717
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 12718
 *                                                                                                                     // 12719
 * Owner: david@famo.us                                                                                                // 12720
 * @license MPL 2.0                                                                                                    // 12721
 * @copyright Famous Industries, Inc. 2014                                                                             // 12722
 */                                                                                                                    // 12723
                                                                                                                       // 12724
                                                                                                                       // 12725
                                                                                                                       // 12726
                                                                                                                       // 12727
/**                                                                                                                    // 12728
 * A library of curves which map an animation explicitly as a function of time.                                        // 12729
 *                                                                                                                     // 12730
 * @class Easing                                                                                                       // 12731
 */                                                                                                                    // 12732
var Easing = {                                                                                                         // 12733
                                                                                                                       // 12734
    /**                                                                                                                // 12735
     * @property inQuad                                                                                                // 12736
     * @static                                                                                                         // 12737
     */                                                                                                                // 12738
    inQuad: function(t) {                                                                                              // 12739
        return t*t;                                                                                                    // 12740
    },                                                                                                                 // 12741
                                                                                                                       // 12742
    /**                                                                                                                // 12743
     * @property outQuad                                                                                               // 12744
     * @static                                                                                                         // 12745
     */                                                                                                                // 12746
    outQuad: function(t) {                                                                                             // 12747
        return -(t-=1)*t+1;                                                                                            // 12748
    },                                                                                                                 // 12749
                                                                                                                       // 12750
    /**                                                                                                                // 12751
     * @property inOutQuad                                                                                             // 12752
     * @static                                                                                                         // 12753
     */                                                                                                                // 12754
    inOutQuad: function(t) {                                                                                           // 12755
        if ((t/=.5) < 1) return .5*t*t;                                                                                // 12756
        return -.5*((--t)*(t-2) - 1);                                                                                  // 12757
    },                                                                                                                 // 12758
                                                                                                                       // 12759
    /**                                                                                                                // 12760
     * @property inCubic                                                                                               // 12761
     * @static                                                                                                         // 12762
     */                                                                                                                // 12763
    inCubic: function(t) {                                                                                             // 12764
        return t*t*t;                                                                                                  // 12765
    },                                                                                                                 // 12766
                                                                                                                       // 12767
    /**                                                                                                                // 12768
     * @property outCubic                                                                                              // 12769
     * @static                                                                                                         // 12770
     */                                                                                                                // 12771
    outCubic: function(t) {                                                                                            // 12772
        return ((--t)*t*t + 1);                                                                                        // 12773
    },                                                                                                                 // 12774
                                                                                                                       // 12775
    /**                                                                                                                // 12776
     * @property inOutCubic                                                                                            // 12777
     * @static                                                                                                         // 12778
     */                                                                                                                // 12779
    inOutCubic: function(t) {                                                                                          // 12780
        if ((t/=.5) < 1) return .5*t*t*t;                                                                              // 12781
        return .5*((t-=2)*t*t + 2);                                                                                    // 12782
    },                                                                                                                 // 12783
                                                                                                                       // 12784
    /**                                                                                                                // 12785
     * @property inQuart                                                                                               // 12786
     * @static                                                                                                         // 12787
     */                                                                                                                // 12788
    inQuart: function(t) {                                                                                             // 12789
        return t*t*t*t;                                                                                                // 12790
    },                                                                                                                 // 12791
                                                                                                                       // 12792
    /**                                                                                                                // 12793
     * @property outQuart                                                                                              // 12794
     * @static                                                                                                         // 12795
     */                                                                                                                // 12796
    outQuart: function(t) {                                                                                            // 12797
        return -((--t)*t*t*t - 1);                                                                                     // 12798
    },                                                                                                                 // 12799
                                                                                                                       // 12800
    /**                                                                                                                // 12801
     * @property inOutQuart                                                                                            // 12802
     * @static                                                                                                         // 12803
     */                                                                                                                // 12804
    inOutQuart: function(t) {                                                                                          // 12805
        if ((t/=.5) < 1) return .5*t*t*t*t;                                                                            // 12806
        return -.5 * ((t-=2)*t*t*t - 2);                                                                               // 12807
    },                                                                                                                 // 12808
                                                                                                                       // 12809
    /**                                                                                                                // 12810
     * @property inQuint                                                                                               // 12811
     * @static                                                                                                         // 12812
     */                                                                                                                // 12813
    inQuint: function(t) {                                                                                             // 12814
        return t*t*t*t*t;                                                                                              // 12815
    },                                                                                                                 // 12816
                                                                                                                       // 12817
    /**                                                                                                                // 12818
     * @property outQuint                                                                                              // 12819
     * @static                                                                                                         // 12820
     */                                                                                                                // 12821
    outQuint: function(t) {                                                                                            // 12822
        return ((--t)*t*t*t*t + 1);                                                                                    // 12823
    },                                                                                                                 // 12824
                                                                                                                       // 12825
    /**                                                                                                                // 12826
     * @property inOutQuint                                                                                            // 12827
     * @static                                                                                                         // 12828
     */                                                                                                                // 12829
    inOutQuint: function(t) {                                                                                          // 12830
        if ((t/=.5) < 1) return .5*t*t*t*t*t;                                                                          // 12831
        return .5*((t-=2)*t*t*t*t + 2);                                                                                // 12832
    },                                                                                                                 // 12833
                                                                                                                       // 12834
    /**                                                                                                                // 12835
     * @property inSine                                                                                                // 12836
     * @static                                                                                                         // 12837
     */                                                                                                                // 12838
    inSine: function(t) {                                                                                              // 12839
        return -1.0*Math.cos(t * (Math.PI/2)) + 1.0;                                                                   // 12840
    },                                                                                                                 // 12841
                                                                                                                       // 12842
    /**                                                                                                                // 12843
     * @property outSine                                                                                               // 12844
     * @static                                                                                                         // 12845
     */                                                                                                                // 12846
    outSine: function(t) {                                                                                             // 12847
        return Math.sin(t * (Math.PI/2));                                                                              // 12848
    },                                                                                                                 // 12849
                                                                                                                       // 12850
    /**                                                                                                                // 12851
     * @property inOutSine                                                                                             // 12852
     * @static                                                                                                         // 12853
     */                                                                                                                // 12854
    inOutSine: function(t) {                                                                                           // 12855
        return -.5*(Math.cos(Math.PI*t) - 1);                                                                          // 12856
    },                                                                                                                 // 12857
                                                                                                                       // 12858
    /**                                                                                                                // 12859
     * @property inExpo                                                                                                // 12860
     * @static                                                                                                         // 12861
     */                                                                                                                // 12862
    inExpo: function(t) {                                                                                              // 12863
        return (t===0) ? 0.0 : Math.pow(2, 10 * (t - 1));                                                              // 12864
    },                                                                                                                 // 12865
                                                                                                                       // 12866
    /**                                                                                                                // 12867
     * @property outExpo                                                                                               // 12868
     * @static                                                                                                         // 12869
     */                                                                                                                // 12870
    outExpo: function(t) {                                                                                             // 12871
        return (t===1.0) ? 1.0 : (-Math.pow(2, -10 * t) + 1);                                                          // 12872
    },                                                                                                                 // 12873
                                                                                                                       // 12874
    /**                                                                                                                // 12875
     * @property inOutExpo                                                                                             // 12876
     * @static                                                                                                         // 12877
     */                                                                                                                // 12878
    inOutExpo: function(t) {                                                                                           // 12879
        if (t===0) return 0.0;                                                                                         // 12880
        if (t===1.0) return 1.0;                                                                                       // 12881
        if ((t/=.5) < 1) return .5 * Math.pow(2, 10 * (t - 1));                                                        // 12882
        return .5 * (-Math.pow(2, -10 * --t) + 2);                                                                     // 12883
    },                                                                                                                 // 12884
                                                                                                                       // 12885
    /**                                                                                                                // 12886
     * @property inCirc                                                                                                // 12887
     * @static                                                                                                         // 12888
     */                                                                                                                // 12889
    inCirc: function(t) {                                                                                              // 12890
        return -(Math.sqrt(1 - t*t) - 1);                                                                              // 12891
    },                                                                                                                 // 12892
                                                                                                                       // 12893
    /**                                                                                                                // 12894
     * @property outCirc                                                                                               // 12895
     * @static                                                                                                         // 12896
     */                                                                                                                // 12897
    outCirc: function(t) {                                                                                             // 12898
        return Math.sqrt(1 - (--t)*t);                                                                                 // 12899
    },                                                                                                                 // 12900
                                                                                                                       // 12901
    /**                                                                                                                // 12902
     * @property inOutCirc                                                                                             // 12903
     * @static                                                                                                         // 12904
     */                                                                                                                // 12905
    inOutCirc: function(t) {                                                                                           // 12906
        if ((t/=.5) < 1) return -.5 * (Math.sqrt(1 - t*t) - 1);                                                        // 12907
        return .5 * (Math.sqrt(1 - (t-=2)*t) + 1);                                                                     // 12908
    },                                                                                                                 // 12909
                                                                                                                       // 12910
    /**                                                                                                                // 12911
     * @property inElastic                                                                                             // 12912
     * @static                                                                                                         // 12913
     */                                                                                                                // 12914
    inElastic: function(t) {                                                                                           // 12915
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12916
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12917
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12918
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/ p));                                            // 12919
    },                                                                                                                 // 12920
                                                                                                                       // 12921
    /**                                                                                                                // 12922
     * @property outElastic                                                                                            // 12923
     * @static                                                                                                         // 12924
     */                                                                                                                // 12925
    outElastic: function(t) {                                                                                          // 12926
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12927
        if (t===0) return 0.0;  if (t===1) return 1.0;  if (!p) p=.3;                                                  // 12928
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12929
        return a*Math.pow(2,-10*t) * Math.sin((t-s)*(2*Math.PI)/p) + 1.0;                                              // 12930
    },                                                                                                                 // 12931
                                                                                                                       // 12932
    /**                                                                                                                // 12933
     * @property inOutElastic                                                                                          // 12934
     * @static                                                                                                         // 12935
     */                                                                                                                // 12936
    inOutElastic: function(t) {                                                                                        // 12937
        var s=1.70158;var p=0;var a=1.0;                                                                               // 12938
        if (t===0) return 0.0;  if ((t/=.5)===2) return 1.0;  if (!p) p=(.3*1.5);                                      // 12939
        s = p/(2*Math.PI) * Math.asin(1.0/a);                                                                          // 12940
        if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p));                               // 12941
        return a*Math.pow(2,-10*(t-=1)) * Math.sin((t-s)*(2*Math.PI)/p)*.5 + 1.0;                                      // 12942
    },                                                                                                                 // 12943
                                                                                                                       // 12944
    /**                                                                                                                // 12945
     * @property inBack                                                                                                // 12946
     * @static                                                                                                         // 12947
     */                                                                                                                // 12948
    inBack: function(t, s) {                                                                                           // 12949
        if (s === undefined) s = 1.70158;                                                                              // 12950
        return t*t*((s+1)*t - s);                                                                                      // 12951
    },                                                                                                                 // 12952
                                                                                                                       // 12953
    /**                                                                                                                // 12954
     * @property outBack                                                                                               // 12955
     * @static                                                                                                         // 12956
     */                                                                                                                // 12957
    outBack: function(t, s) {                                                                                          // 12958
        if (s === undefined) s = 1.70158;                                                                              // 12959
        return ((--t)*t*((s+1)*t + s) + 1);                                                                            // 12960
    },                                                                                                                 // 12961
                                                                                                                       // 12962
    /**                                                                                                                // 12963
     * @property inOutBack                                                                                             // 12964
     * @static                                                                                                         // 12965
     */                                                                                                                // 12966
    inOutBack: function(t, s) {                                                                                        // 12967
        if (s === undefined) s = 1.70158;                                                                              // 12968
        if ((t/=.5) < 1) return .5*(t*t*(((s*=(1.525))+1)*t - s));                                                     // 12969
        return .5*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2);                                                             // 12970
    },                                                                                                                 // 12971
                                                                                                                       // 12972
    /**                                                                                                                // 12973
     * @property inBounce                                                                                              // 12974
     * @static                                                                                                         // 12975
     */                                                                                                                // 12976
    inBounce: function(t) {                                                                                            // 12977
        return 1.0 - Easing.outBounce(1.0-t);                                                                          // 12978
    },                                                                                                                 // 12979
                                                                                                                       // 12980
    /**                                                                                                                // 12981
     * @property outBounce                                                                                             // 12982
     * @static                                                                                                         // 12983
     */                                                                                                                // 12984
    outBounce: function(t) {                                                                                           // 12985
        if (t < (1/2.75)) {                                                                                            // 12986
            return (7.5625*t*t);                                                                                       // 12987
        } else if (t < (2/2.75)) {                                                                                     // 12988
            return (7.5625*(t-=(1.5/2.75))*t + .75);                                                                   // 12989
        } else if (t < (2.5/2.75)) {                                                                                   // 12990
            return (7.5625*(t-=(2.25/2.75))*t + .9375);                                                                // 12991
        } else {                                                                                                       // 12992
            return (7.5625*(t-=(2.625/2.75))*t + .984375);                                                             // 12993
        }                                                                                                              // 12994
    },                                                                                                                 // 12995
                                                                                                                       // 12996
    /**                                                                                                                // 12997
     * @property inOutBounce                                                                                           // 12998
     * @static                                                                                                         // 12999
     */                                                                                                                // 13000
    inOutBounce: function(t) {                                                                                         // 13001
        if (t < .5) return Easing.inBounce(t*2) * .5;                                                                  // 13002
        return Easing.outBounce(t*2-1.0) * .5 + .5;                                                                    // 13003
    }                                                                                                                  // 13004
};                                                                                                                     // 13005
                                                                                                                       // 13006
module.exports = Easing;                                                                                               // 13007
},{}],86:[function(_dereq_,module,exports){                                                                            // 13008
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13009
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13010
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13011
 *                                                                                                                     // 13012
 * Owner: david@famo.us                                                                                                // 13013
 * @license MPL 2.0                                                                                                    // 13014
 * @copyright Famous Industries, Inc. 2014                                                                             // 13015
 */                                                                                                                    // 13016
                                                                                                                       // 13017
var Utility = _dereq_('../utilities/Utility');                                                                         // 13018
                                                                                                                       // 13019
/**                                                                                                                    // 13020
 * Transition meta-method to support transitioning multiple                                                            // 13021
 *   values with scalar-only methods.                                                                                  // 13022
 *                                                                                                                     // 13023
 *                                                                                                                     // 13024
 * @class MultipleTransition                                                                                           // 13025
 * @constructor                                                                                                        // 13026
 *                                                                                                                     // 13027
 * @param {Object} method Transionable class to multiplex                                                              // 13028
 */                                                                                                                    // 13029
function MultipleTransition(method) {                                                                                  // 13030
    this.method = method;                                                                                              // 13031
    this._instances = [];                                                                                              // 13032
    this.state = [];                                                                                                   // 13033
}                                                                                                                      // 13034
                                                                                                                       // 13035
MultipleTransition.SUPPORTS_MULTIPLE = true;                                                                           // 13036
                                                                                                                       // 13037
/**                                                                                                                    // 13038
 * Get the state of each transition.                                                                                   // 13039
 *                                                                                                                     // 13040
 * @method get                                                                                                         // 13041
 *                                                                                                                     // 13042
 * @return state {Number|Array} state array                                                                            // 13043
 */                                                                                                                    // 13044
MultipleTransition.prototype.get = function get() {                                                                    // 13045
    for (var i = 0; i < this._instances.length; i++) {                                                                 // 13046
        this.state[i] = this._instances[i].get();                                                                      // 13047
    }                                                                                                                  // 13048
    return this.state;                                                                                                 // 13049
};                                                                                                                     // 13050
                                                                                                                       // 13051
/**                                                                                                                    // 13052
 * Set the end states with a shared transition, with optional callback.                                                // 13053
 *                                                                                                                     // 13054
 * @method set                                                                                                         // 13055
 *                                                                                                                     // 13056
 * @param {Number|Array} endState Final State.  Use a multi-element argument for multiple transitions.                 // 13057
 * @param {Object} transition Transition definition, shared among all instances                                        // 13058
 * @param {Function} callback called when all endStates have been reached.                                             // 13059
 */                                                                                                                    // 13060
MultipleTransition.prototype.set = function set(endState, transition, callback) {                                      // 13061
    var _allCallback = Utility.after(endState.length, callback);                                                       // 13062
    for (var i = 0; i < endState.length; i++) {                                                                        // 13063
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 13064
        this._instances[i].set(endState[i], transition, _allCallback);                                                 // 13065
    }                                                                                                                  // 13066
};                                                                                                                     // 13067
                                                                                                                       // 13068
/**                                                                                                                    // 13069
 * Reset all transitions to start state.                                                                               // 13070
 *                                                                                                                     // 13071
 * @method reset                                                                                                       // 13072
 *                                                                                                                     // 13073
 * @param  {Number|Array} startState Start state                                                                       // 13074
 */                                                                                                                    // 13075
MultipleTransition.prototype.reset = function reset(startState) {                                                      // 13076
    for (var i = 0; i < startState.length; i++) {                                                                      // 13077
        if (!this._instances[i]) this._instances[i] = new (this.method)();                                             // 13078
        this._instances[i].reset(startState[i]);                                                                       // 13079
    }                                                                                                                  // 13080
};                                                                                                                     // 13081
                                                                                                                       // 13082
module.exports = MultipleTransition;                                                                                   // 13083
},{"../utilities/Utility":96}],87:[function(_dereq_,module,exports){                                                   // 13084
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13085
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13086
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13087
 *                                                                                                                     // 13088
 * Owner: david@famo.us                                                                                                // 13089
 * @license MPL 2.0                                                                                                    // 13090
 * @copyright Famous Industries, Inc. 2014                                                                             // 13091
 */                                                                                                                    // 13092
                                                                                                                       // 13093
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 13094
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 13095
var Spring = _dereq_('../physics/constraints/Snap');                                                                   // 13096
var Vector = _dereq_('../math/Vector');                                                                                // 13097
                                                                                                                       // 13098
/**                                                                                                                    // 13099
 * SnapTransition is a method of transitioning between two values (numbers,                                            // 13100
 * or arrays of numbers). It is similar to SpringTransition except                                                     // 13101
 * the transition can be much faster and always has a damping effect.                                                  // 13102
 *                                                                                                                     // 13103
 * @class SnapTransition                                                                                               // 13104
 * @constructor                                                                                                        // 13105
 *                                                                                                                     // 13106
 * @param [state=0] {Number|Array} Initial state                                                                       // 13107
 */                                                                                                                    // 13108
function SnapTransition(state) {                                                                                       // 13109
    state = state || 0;                                                                                                // 13110
                                                                                                                       // 13111
    this.endState  = new Vector(state);                                                                                // 13112
    this.initState = new Vector();                                                                                     // 13113
                                                                                                                       // 13114
    this._dimensions       = 1;                                                                                        // 13115
    this._restTolerance    = 1e-10;                                                                                    // 13116
    this._absRestTolerance = this._restTolerance;                                                                      // 13117
    this._callback         = undefined;                                                                                // 13118
                                                                                                                       // 13119
    this.PE       = new PE();                                                                                          // 13120
    this.particle = new Particle();                                                                                    // 13121
    this.spring   = new Spring({anchor : this.endState});                                                              // 13122
                                                                                                                       // 13123
    this.PE.addBody(this.particle);                                                                                    // 13124
    this.PE.attach(this.spring, this.particle);                                                                        // 13125
}                                                                                                                      // 13126
                                                                                                                       // 13127
SnapTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 13128
                                                                                                                       // 13129
/**                                                                                                                    // 13130
 * @property SnapTransition.DEFAULT_OPTIONS                                                                            // 13131
 * @type Object                                                                                                        // 13132
 * @protected                                                                                                          // 13133
 * @static                                                                                                             // 13134
 */                                                                                                                    // 13135
SnapTransition.DEFAULT_OPTIONS = {                                                                                     // 13136
                                                                                                                       // 13137
    /**                                                                                                                // 13138
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13139
     * when there is no damping                                                                                        // 13140
     *    Range : [0, Infinity]                                                                                        // 13141
     *                                                                                                                 // 13142
     * @attribute period                                                                                               // 13143
     * @type Number                                                                                                    // 13144
     * @default 100                                                                                                    // 13145
     */                                                                                                                // 13146
    period : 100,                                                                                                      // 13147
                                                                                                                       // 13148
    /**                                                                                                                // 13149
     * The damping of the snap.                                                                                        // 13150
     *    Range : [0, 1]                                                                                               // 13151
     *                                                                                                                 // 13152
     * @attribute dampingRatio                                                                                         // 13153
     * @type Number                                                                                                    // 13154
     * @default 0.2                                                                                                    // 13155
     */                                                                                                                // 13156
    dampingRatio : 0.2,                                                                                                // 13157
                                                                                                                       // 13158
    /**                                                                                                                // 13159
     * The initial velocity of the transition.                                                                         // 13160
     *                                                                                                                 // 13161
     * @attribute velocity                                                                                             // 13162
     * @type Number|Array                                                                                              // 13163
     * @default 0                                                                                                      // 13164
     */                                                                                                                // 13165
    velocity : 0                                                                                                       // 13166
};                                                                                                                     // 13167
                                                                                                                       // 13168
function _getEnergy() {                                                                                                // 13169
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13170
}                                                                                                                      // 13171
                                                                                                                       // 13172
function _setAbsoluteRestTolerance() {                                                                                 // 13173
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13174
    this._absRestTolerance = (distance === 0)                                                                          // 13175
        ? this._restTolerance                                                                                          // 13176
        : this._restTolerance * distance;                                                                              // 13177
}                                                                                                                      // 13178
                                                                                                                       // 13179
function _setTarget(target) {                                                                                          // 13180
    this.endState.set(target);                                                                                         // 13181
    _setAbsoluteRestTolerance.call(this);                                                                              // 13182
}                                                                                                                      // 13183
                                                                                                                       // 13184
function _wake() {                                                                                                     // 13185
    this.PE.wake();                                                                                                    // 13186
}                                                                                                                      // 13187
                                                                                                                       // 13188
function _sleep() {                                                                                                    // 13189
    this.PE.sleep();                                                                                                   // 13190
}                                                                                                                      // 13191
                                                                                                                       // 13192
function _setParticlePosition(p) {                                                                                     // 13193
    this.particle.position.set(p);                                                                                     // 13194
}                                                                                                                      // 13195
                                                                                                                       // 13196
function _setParticleVelocity(v) {                                                                                     // 13197
    this.particle.velocity.set(v);                                                                                     // 13198
}                                                                                                                      // 13199
                                                                                                                       // 13200
function _getParticlePosition() {                                                                                      // 13201
    return (this._dimensions === 0)                                                                                    // 13202
        ? this.particle.getPosition1D()                                                                                // 13203
        : this.particle.getPosition();                                                                                 // 13204
}                                                                                                                      // 13205
                                                                                                                       // 13206
function _getParticleVelocity() {                                                                                      // 13207
    return (this._dimensions === 0)                                                                                    // 13208
        ? this.particle.getVelocity1D()                                                                                // 13209
        : this.particle.getVelocity();                                                                                 // 13210
}                                                                                                                      // 13211
                                                                                                                       // 13212
function _setCallback(callback) {                                                                                      // 13213
    this._callback = callback;                                                                                         // 13214
}                                                                                                                      // 13215
                                                                                                                       // 13216
function _setupDefinition(definition) {                                                                                // 13217
    var defaults = SnapTransition.DEFAULT_OPTIONS;                                                                     // 13218
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13219
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13220
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13221
                                                                                                                       // 13222
    //setup spring                                                                                                     // 13223
    this.spring.setOptions({                                                                                           // 13224
        period       : definition.period,                                                                              // 13225
        dampingRatio : definition.dampingRatio                                                                         // 13226
    });                                                                                                                // 13227
                                                                                                                       // 13228
    //setup particle                                                                                                   // 13229
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13230
}                                                                                                                      // 13231
                                                                                                                       // 13232
function _update() {                                                                                                   // 13233
    if (this.PE.isSleeping()) {                                                                                        // 13234
        if (this._callback) {                                                                                          // 13235
            var cb = this._callback;                                                                                   // 13236
            this._callback = undefined;                                                                                // 13237
            cb();                                                                                                      // 13238
        }                                                                                                              // 13239
        return;                                                                                                        // 13240
    }                                                                                                                  // 13241
                                                                                                                       // 13242
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13243
        _setParticlePosition.call(this, this.endState);                                                                // 13244
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13245
        _sleep.call(this);                                                                                             // 13246
    }                                                                                                                  // 13247
}                                                                                                                      // 13248
                                                                                                                       // 13249
/**                                                                                                                    // 13250
 * Resets the state and velocity                                                                                       // 13251
 *                                                                                                                     // 13252
 * @method reset                                                                                                       // 13253
 *                                                                                                                     // 13254
 * @param state {Number|Array}      State                                                                              // 13255
 * @param [velocity] {Number|Array} Velocity                                                                           // 13256
 */                                                                                                                    // 13257
SnapTransition.prototype.reset = function reset(state, velocity) {                                                     // 13258
    this._dimensions = (state instanceof Array)                                                                        // 13259
        ? state.length                                                                                                 // 13260
        : 0;                                                                                                           // 13261
                                                                                                                       // 13262
    this.initState.set(state);                                                                                         // 13263
    _setParticlePosition.call(this, state);                                                                            // 13264
    _setTarget.call(this, state);                                                                                      // 13265
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 13266
    _setCallback.call(this, undefined);                                                                                // 13267
};                                                                                                                     // 13268
                                                                                                                       // 13269
/**                                                                                                                    // 13270
 * Getter for velocity                                                                                                 // 13271
 *                                                                                                                     // 13272
 * @method getVelocity                                                                                                 // 13273
 *                                                                                                                     // 13274
 * @return velocity {Number|Array}                                                                                     // 13275
 */                                                                                                                    // 13276
SnapTransition.prototype.getVelocity = function getVelocity() {                                                        // 13277
    return _getParticleVelocity.call(this);                                                                            // 13278
};                                                                                                                     // 13279
                                                                                                                       // 13280
/**                                                                                                                    // 13281
 * Setter for velocity                                                                                                 // 13282
 *                                                                                                                     // 13283
 * @method setVelocity                                                                                                 // 13284
 *                                                                                                                     // 13285
 * @return velocity {Number|Array}                                                                                     // 13286
 */                                                                                                                    // 13287
SnapTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 13288
    this.call(this, _setParticleVelocity(velocity));                                                                   // 13289
};                                                                                                                     // 13290
                                                                                                                       // 13291
/**                                                                                                                    // 13292
 * Detects whether a transition is in progress                                                                         // 13293
 *                                                                                                                     // 13294
 * @method isActive                                                                                                    // 13295
 *                                                                                                                     // 13296
 * @return {Boolean}                                                                                                   // 13297
 */                                                                                                                    // 13298
SnapTransition.prototype.isActive = function isActive() {                                                              // 13299
    return !this.PE.isSleeping();                                                                                      // 13300
};                                                                                                                     // 13301
                                                                                                                       // 13302
/**                                                                                                                    // 13303
 * Halt the transition                                                                                                 // 13304
 *                                                                                                                     // 13305
 * @method halt                                                                                                        // 13306
 */                                                                                                                    // 13307
SnapTransition.prototype.halt = function halt() {                                                                      // 13308
    this.set(this.get());                                                                                              // 13309
};                                                                                                                     // 13310
                                                                                                                       // 13311
/**                                                                                                                    // 13312
 * Get the current position of the transition                                                                          // 13313
s     *                                                                                                                // 13314
 * @method get                                                                                                         // 13315
 *                                                                                                                     // 13316
 * @return state {Number|Array}                                                                                        // 13317
 */                                                                                                                    // 13318
SnapTransition.prototype.get = function get() {                                                                        // 13319
    _update.call(this);                                                                                                // 13320
    return _getParticlePosition.call(this);                                                                            // 13321
};                                                                                                                     // 13322
                                                                                                                       // 13323
/**                                                                                                                    // 13324
 * Set the end position and transition, with optional callback on completion.                                          // 13325
 *                                                                                                                     // 13326
 * @method set                                                                                                         // 13327
 *                                                                                                                     // 13328
 * @param state {Number|Array}      Final state                                                                        // 13329
 * @param [definition] {Object}     Transition definition                                                              // 13330
 * @param [callback] {Function}     Callback                                                                           // 13331
 */                                                                                                                    // 13332
SnapTransition.prototype.set = function set(state, definition, callback) {                                             // 13333
    if (!definition) {                                                                                                 // 13334
        this.reset(state);                                                                                             // 13335
        if (callback) callback();                                                                                      // 13336
        return;                                                                                                        // 13337
    }                                                                                                                  // 13338
                                                                                                                       // 13339
    this._dimensions = (state instanceof Array)                                                                        // 13340
        ? state.length                                                                                                 // 13341
        : 0;                                                                                                           // 13342
                                                                                                                       // 13343
    _wake.call(this);                                                                                                  // 13344
    _setupDefinition.call(this, definition);                                                                           // 13345
    _setTarget.call(this, state);                                                                                      // 13346
    _setCallback.call(this, callback);                                                                                 // 13347
};                                                                                                                     // 13348
                                                                                                                       // 13349
module.exports = SnapTransition;                                                                                       // 13350
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/constraints/Snap":59}],88:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13352
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13353
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13354
 *                                                                                                                     // 13355
 * Owner: david@famo.us                                                                                                // 13356
 * @license MPL 2.0                                                                                                    // 13357
 * @copyright Famous Industries, Inc. 2014                                                                             // 13358
 */                                                                                                                    // 13359
                                                                                                                       // 13360
/*global console*/                                                                                                     // 13361
                                                                                                                       // 13362
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 13363
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 13364
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 13365
var Vector = _dereq_('../math/Vector');                                                                                // 13366
                                                                                                                       // 13367
/**                                                                                                                    // 13368
 * SpringTransition is a method of transitioning between two values (numbers,                                          // 13369
 * or arrays of numbers) with a bounce. The transition will overshoot the target                                       // 13370
 * state depending on the parameters of the transition.                                                                // 13371
 *                                                                                                                     // 13372
 * @class SpringTransition                                                                                             // 13373
 * @constructor                                                                                                        // 13374
 *                                                                                                                     // 13375
 * @param {Number|Array} [state=0] Initial state                                                                       // 13376
 */                                                                                                                    // 13377
function SpringTransition(state) {                                                                                     // 13378
    state = state || 0;                                                                                                // 13379
    this.endState  = new Vector(state);                                                                                // 13380
    this.initState = new Vector();                                                                                     // 13381
                                                                                                                       // 13382
    this._dimensions       = undefined;                                                                                // 13383
    this._restTolerance    = 1e-10;                                                                                    // 13384
    this._absRestTolerance = this._restTolerance;                                                                      // 13385
    this._callback         = undefined;                                                                                // 13386
                                                                                                                       // 13387
    this.PE       = new PE();                                                                                          // 13388
    this.spring   = new Spring({anchor : this.endState});                                                              // 13389
    this.particle = new Particle();                                                                                    // 13390
                                                                                                                       // 13391
    this.PE.addBody(this.particle);                                                                                    // 13392
    this.PE.attach(this.spring, this.particle);                                                                        // 13393
}                                                                                                                      // 13394
                                                                                                                       // 13395
SpringTransition.SUPPORTS_MULTIPLE = 3;                                                                                // 13396
                                                                                                                       // 13397
/**                                                                                                                    // 13398
 * @property SpringTransition.DEFAULT_OPTIONS                                                                          // 13399
 * @type Object                                                                                                        // 13400
 * @protected                                                                                                          // 13401
 * @static                                                                                                             // 13402
 */                                                                                                                    // 13403
SpringTransition.DEFAULT_OPTIONS = {                                                                                   // 13404
                                                                                                                       // 13405
    /**                                                                                                                // 13406
     * The amount of time in milliseconds taken for one complete oscillation                                           // 13407
     * when there is no damping                                                                                        // 13408
     *    Range : [0, Infinity]                                                                                        // 13409
     *                                                                                                                 // 13410
     * @attribute period                                                                                               // 13411
     * @type Number                                                                                                    // 13412
     * @default 300                                                                                                    // 13413
     */                                                                                                                // 13414
    period : 300,                                                                                                      // 13415
                                                                                                                       // 13416
    /**                                                                                                                // 13417
     * The damping of the snap.                                                                                        // 13418
     *    Range : [0, 1]                                                                                               // 13419
     *    0 = no damping, and the spring will oscillate forever                                                        // 13420
     *    1 = critically damped (the spring will never oscillate)                                                      // 13421
     *                                                                                                                 // 13422
     * @attribute dampingRatio                                                                                         // 13423
     * @type Number                                                                                                    // 13424
     * @default 0.5                                                                                                    // 13425
     */                                                                                                                // 13426
    dampingRatio : 0.5,                                                                                                // 13427
                                                                                                                       // 13428
    /**                                                                                                                // 13429
     * The initial velocity of the transition.                                                                         // 13430
     *                                                                                                                 // 13431
     * @attribute velocity                                                                                             // 13432
     * @type Number|Array                                                                                              // 13433
     * @default 0                                                                                                      // 13434
     */                                                                                                                // 13435
    velocity : 0                                                                                                       // 13436
};                                                                                                                     // 13437
                                                                                                                       // 13438
function _getEnergy() {                                                                                                // 13439
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 13440
}                                                                                                                      // 13441
                                                                                                                       // 13442
function _setParticlePosition(p) {                                                                                     // 13443
    this.particle.setPosition(p);                                                                                      // 13444
}                                                                                                                      // 13445
                                                                                                                       // 13446
function _setParticleVelocity(v) {                                                                                     // 13447
    this.particle.setVelocity(v);                                                                                      // 13448
}                                                                                                                      // 13449
                                                                                                                       // 13450
function _getParticlePosition() {                                                                                      // 13451
    return (this._dimensions === 0)                                                                                    // 13452
        ? this.particle.getPosition1D()                                                                                // 13453
        : this.particle.getPosition();                                                                                 // 13454
}                                                                                                                      // 13455
                                                                                                                       // 13456
function _getParticleVelocity() {                                                                                      // 13457
    return (this._dimensions === 0)                                                                                    // 13458
        ? this.particle.getVelocity1D()                                                                                // 13459
        : this.particle.getVelocity();                                                                                 // 13460
}                                                                                                                      // 13461
                                                                                                                       // 13462
function _setCallback(callback) {                                                                                      // 13463
    this._callback = callback;                                                                                         // 13464
}                                                                                                                      // 13465
                                                                                                                       // 13466
function _wake() {                                                                                                     // 13467
    this.PE.wake();                                                                                                    // 13468
}                                                                                                                      // 13469
                                                                                                                       // 13470
function _sleep() {                                                                                                    // 13471
    this.PE.sleep();                                                                                                   // 13472
}                                                                                                                      // 13473
                                                                                                                       // 13474
function _update() {                                                                                                   // 13475
    if (this.PE.isSleeping()) {                                                                                        // 13476
        if (this._callback) {                                                                                          // 13477
            var cb = this._callback;                                                                                   // 13478
            this._callback = undefined;                                                                                // 13479
            cb();                                                                                                      // 13480
        }                                                                                                              // 13481
        return;                                                                                                        // 13482
    }                                                                                                                  // 13483
                                                                                                                       // 13484
    if (_getEnergy.call(this) < this._absRestTolerance) {                                                              // 13485
        _setParticlePosition.call(this, this.endState);                                                                // 13486
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 13487
        _sleep.call(this);                                                                                             // 13488
    }                                                                                                                  // 13489
}                                                                                                                      // 13490
                                                                                                                       // 13491
function _setupDefinition(definition) {                                                                                // 13492
    // TODO fix no-console error                                                                                       // 13493
    /* eslint no-console: 0 */                                                                                         // 13494
    var defaults = SpringTransition.DEFAULT_OPTIONS;                                                                   // 13495
    if (definition.period === undefined)       definition.period       = defaults.period;                              // 13496
    if (definition.dampingRatio === undefined) definition.dampingRatio = defaults.dampingRatio;                        // 13497
    if (definition.velocity === undefined)     definition.velocity     = defaults.velocity;                            // 13498
                                                                                                                       // 13499
    if (definition.period < 150) {                                                                                     // 13500
        definition.period = 150;                                                                                       // 13501
        console.warn('The period of a SpringTransition is capped at 150 ms. Use a SnapTransition for faster transitions');
    }                                                                                                                  // 13503
                                                                                                                       // 13504
    //setup spring                                                                                                     // 13505
    this.spring.setOptions({                                                                                           // 13506
        period       : definition.period,                                                                              // 13507
        dampingRatio : definition.dampingRatio                                                                         // 13508
    });                                                                                                                // 13509
                                                                                                                       // 13510
    //setup particle                                                                                                   // 13511
    _setParticleVelocity.call(this, definition.velocity);                                                              // 13512
}                                                                                                                      // 13513
                                                                                                                       // 13514
function _setAbsoluteRestTolerance() {                                                                                 // 13515
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 13516
    this._absRestTolerance = (distance === 0)                                                                          // 13517
        ? this._restTolerance                                                                                          // 13518
        : this._restTolerance * distance;                                                                              // 13519
}                                                                                                                      // 13520
                                                                                                                       // 13521
function _setTarget(target) {                                                                                          // 13522
    this.endState.set(target);                                                                                         // 13523
    _setAbsoluteRestTolerance.call(this);                                                                              // 13524
}                                                                                                                      // 13525
                                                                                                                       // 13526
/**                                                                                                                    // 13527
 * Resets the position and velocity                                                                                    // 13528
 *                                                                                                                     // 13529
 * @method reset                                                                                                       // 13530
 *                                                                                                                     // 13531
 * @param {Number|Array.Number} pos positional state                                                                   // 13532
 * @param {Number|Array} vel velocity                                                                                  // 13533
 */                                                                                                                    // 13534
SpringTransition.prototype.reset = function reset(pos, vel) {                                                          // 13535
    this._dimensions = (pos instanceof Array)                                                                          // 13536
        ? pos.length                                                                                                   // 13537
        : 0;                                                                                                           // 13538
                                                                                                                       // 13539
    this.initState.set(pos);                                                                                           // 13540
    _setParticlePosition.call(this, pos);                                                                              // 13541
    _setTarget.call(this, pos);                                                                                        // 13542
    if (vel) _setParticleVelocity.call(this, vel);                                                                     // 13543
    _setCallback.call(this, undefined);                                                                                // 13544
};                                                                                                                     // 13545
                                                                                                                       // 13546
/**                                                                                                                    // 13547
 * Getter for velocity                                                                                                 // 13548
 *                                                                                                                     // 13549
 * @method getVelocity                                                                                                 // 13550
 *                                                                                                                     // 13551
 * @return {Number|Array} velocity                                                                                     // 13552
 */                                                                                                                    // 13553
SpringTransition.prototype.getVelocity = function getVelocity() {                                                      // 13554
    return _getParticleVelocity.call(this);                                                                            // 13555
};                                                                                                                     // 13556
                                                                                                                       // 13557
/**                                                                                                                    // 13558
 * Setter for velocity                                                                                                 // 13559
 *                                                                                                                     // 13560
 * @method setVelocity                                                                                                 // 13561
 *                                                                                                                     // 13562
 * @return {Number|Array} velocity                                                                                     // 13563
 */                                                                                                                    // 13564
SpringTransition.prototype.setVelocity = function setVelocity(v) {                                                     // 13565
    this.call(this, _setParticleVelocity(v));                                                                          // 13566
};                                                                                                                     // 13567
                                                                                                                       // 13568
/**                                                                                                                    // 13569
 * Detects whether a transition is in progress                                                                         // 13570
 *                                                                                                                     // 13571
 * @method isActive                                                                                                    // 13572
 *                                                                                                                     // 13573
 * @return {Boolean}                                                                                                   // 13574
 */                                                                                                                    // 13575
SpringTransition.prototype.isActive = function isActive() {                                                            // 13576
    return !this.PE.isSleeping();                                                                                      // 13577
};                                                                                                                     // 13578
                                                                                                                       // 13579
/**                                                                                                                    // 13580
 * Halt the transition                                                                                                 // 13581
 *                                                                                                                     // 13582
 * @method halt                                                                                                        // 13583
 */                                                                                                                    // 13584
SpringTransition.prototype.halt = function halt() {                                                                    // 13585
    this.set(this.get());                                                                                              // 13586
};                                                                                                                     // 13587
                                                                                                                       // 13588
/**                                                                                                                    // 13589
 * Get the current position of the transition                                                                          // 13590
 *                                                                                                                     // 13591
 * @method get                                                                                                         // 13592
 *                                                                                                                     // 13593
 * @return {Number|Array} state                                                                                        // 13594
 */                                                                                                                    // 13595
SpringTransition.prototype.get = function get() {                                                                      // 13596
    _update.call(this);                                                                                                // 13597
    return _getParticlePosition.call(this);                                                                            // 13598
};                                                                                                                     // 13599
                                                                                                                       // 13600
/**                                                                                                                    // 13601
 * Set the end position and transition, with optional callback on completion.                                          // 13602
 *                                                                                                                     // 13603
 * @method set                                                                                                         // 13604
 *                                                                                                                     // 13605
 * @param  {Number|Array} endState Final state                                                                         // 13606
 * @param {Object}  definition  Transition definition                                                                  // 13607
 * @param  {Function} callback Callback                                                                                // 13608
 */                                                                                                                    // 13609
SpringTransition.prototype.set = function set(endState, definition, callback) {                                        // 13610
    if (!definition) {                                                                                                 // 13611
        this.reset(endState);                                                                                          // 13612
        if (callback) callback();                                                                                      // 13613
        return;                                                                                                        // 13614
    }                                                                                                                  // 13615
                                                                                                                       // 13616
    this._dimensions = (endState instanceof Array)                                                                     // 13617
        ? endState.length                                                                                              // 13618
        : 0;                                                                                                           // 13619
                                                                                                                       // 13620
    _wake.call(this);                                                                                                  // 13621
    _setupDefinition.call(this, definition);                                                                           // 13622
    _setTarget.call(this, endState);                                                                                   // 13623
    _setCallback.call(this, callback);                                                                                 // 13624
};                                                                                                                     // 13625
                                                                                                                       // 13626
module.exports = SpringTransition;                                                                                     // 13627
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/forces/Spring":69}],89:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13629
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13630
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13631
 *                                                                                                                     // 13632
 * Owner: david@famo.us                                                                                                // 13633
 * @license MPL 2.0                                                                                                    // 13634
 * @copyright Famous Industries, Inc. 2014                                                                             // 13635
 */                                                                                                                    // 13636
                                                                                                                       // 13637
var MultipleTransition = _dereq_('./MultipleTransition');                                                              // 13638
var TweenTransition = _dereq_('./TweenTransition');                                                                    // 13639
                                                                                                                       // 13640
/**                                                                                                                    // 13641
 * A state maintainer for a smooth transition between                                                                  // 13642
 *    numerically-specified states. Example numeric states include floats or                                           // 13643
 *    Transform objects.                                                                                               // 13644
 *                                                                                                                     // 13645
 * An initial state is set with the constructor or set(startState). A                                                  // 13646
 *    corresponding end state and transition are set with set(endState,                                                // 13647
 *    transition). Subsequent calls to set(endState, transition) begin at                                              // 13648
 *    the last state. Calls to get(timestamp) provide the interpolated state                                           // 13649
 *    along the way.                                                                                                   // 13650
 *                                                                                                                     // 13651
 * Note that there is no event loop here - calls to get() are the only way                                             // 13652
 *    to find state projected to the current (or provided) time and are                                                // 13653
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 13654
 *    be part of the render() path of a visible component.                                                             // 13655
 *                                                                                                                     // 13656
 * @class Transitionable                                                                                               // 13657
 * @constructor                                                                                                        // 13658
 * @param {number|Array.Number|Object.<number|string, number>} start                                                   // 13659
 *    beginning state                                                                                                  // 13660
 */                                                                                                                    // 13661
function Transitionable(start) {                                                                                       // 13662
    this.currentAction = null;                                                                                         // 13663
    this.actionQueue = [];                                                                                             // 13664
    this.callbackQueue = [];                                                                                           // 13665
                                                                                                                       // 13666
    this.state = 0;                                                                                                    // 13667
    this.velocity = undefined;                                                                                         // 13668
    this._callback = undefined;                                                                                        // 13669
    this._engineInstance = null;                                                                                       // 13670
    this._currentMethod = null;                                                                                        // 13671
                                                                                                                       // 13672
    this.set(start);                                                                                                   // 13673
}                                                                                                                      // 13674
                                                                                                                       // 13675
var transitionMethods = {};                                                                                            // 13676
                                                                                                                       // 13677
Transitionable.register = function register(methods) {                                                                 // 13678
    var success = true;                                                                                                // 13679
    for (var method in methods) {                                                                                      // 13680
        if (!Transitionable.registerMethod(method, methods[method]))                                                   // 13681
            success = false;                                                                                           // 13682
    }                                                                                                                  // 13683
    return success;                                                                                                    // 13684
};                                                                                                                     // 13685
                                                                                                                       // 13686
Transitionable.registerMethod = function registerMethod(name, engineClass) {                                           // 13687
    if (!(name in transitionMethods)) {                                                                                // 13688
        transitionMethods[name] = engineClass;                                                                         // 13689
        return true;                                                                                                   // 13690
    }                                                                                                                  // 13691
    else return false;                                                                                                 // 13692
};                                                                                                                     // 13693
                                                                                                                       // 13694
Transitionable.unregisterMethod = function unregisterMethod(name) {                                                    // 13695
    if (name in transitionMethods) {                                                                                   // 13696
        delete transitionMethods[name];                                                                                // 13697
        return true;                                                                                                   // 13698
    }                                                                                                                  // 13699
    else return false;                                                                                                 // 13700
};                                                                                                                     // 13701
                                                                                                                       // 13702
function _loadNext() {                                                                                                 // 13703
    if (this._callback) {                                                                                              // 13704
        var callback = this._callback;                                                                                 // 13705
        this._callback = undefined;                                                                                    // 13706
        callback();                                                                                                    // 13707
    }                                                                                                                  // 13708
    if (this.actionQueue.length <= 0) {                                                                                // 13709
        this.set(this.get()); // no update required                                                                    // 13710
        return;                                                                                                        // 13711
    }                                                                                                                  // 13712
    this.currentAction = this.actionQueue.shift();                                                                     // 13713
    this._callback = this.callbackQueue.shift();                                                                       // 13714
                                                                                                                       // 13715
    var method = null;                                                                                                 // 13716
    var endValue = this.currentAction[0];                                                                              // 13717
    var transition = this.currentAction[1];                                                                            // 13718
    if (transition instanceof Object && transition.method) {                                                           // 13719
        method = transition.method;                                                                                    // 13720
        if (typeof method === 'string') method = transitionMethods[method];                                            // 13721
    }                                                                                                                  // 13722
    else {                                                                                                             // 13723
        method = TweenTransition;                                                                                      // 13724
    }                                                                                                                  // 13725
                                                                                                                       // 13726
    if (this._currentMethod !== method) {                                                                              // 13727
        if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
            this._engineInstance = new method();                                                                       // 13729
        }                                                                                                              // 13730
        else {                                                                                                         // 13731
            this._engineInstance = new MultipleTransition(method);                                                     // 13732
        }                                                                                                              // 13733
        this._currentMethod = method;                                                                                  // 13734
    }                                                                                                                  // 13735
                                                                                                                       // 13736
    this._engineInstance.reset(this.state, this.velocity);                                                             // 13737
    if (this.velocity !== undefined) transition.velocity = this.velocity;                                              // 13738
    this._engineInstance.set(endValue, transition, _loadNext.bind(this));                                              // 13739
}                                                                                                                      // 13740
                                                                                                                       // 13741
/**                                                                                                                    // 13742
 * Add transition to end state to the queue of pending transitions. Special                                            // 13743
 *    Use: calling without a transition resets the object to that state with                                           // 13744
 *    no pending actions                                                                                               // 13745
 *                                                                                                                     // 13746
 * @method set                                                                                                         // 13747
 *                                                                                                                     // 13748
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endState                                          // 13749
 *    end state to which we interpolate                                                                                // 13750
 * @param {transition=} transition object of type {duration: number, curve:                                            // 13751
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 13752
 *    instantaneous.                                                                                                   // 13753
 * @param {function()=} callback Zero-argument function to call on observed                                            // 13754
 *    completion (t=1)                                                                                                 // 13755
 */                                                                                                                    // 13756
Transitionable.prototype.set = function set(endState, transition, callback) {                                          // 13757
    if (!transition) {                                                                                                 // 13758
        this.reset(endState);                                                                                          // 13759
        if (callback) callback();                                                                                      // 13760
        return this;                                                                                                   // 13761
    }                                                                                                                  // 13762
                                                                                                                       // 13763
    var action = [endState, transition];                                                                               // 13764
    this.actionQueue.push(action);                                                                                     // 13765
    this.callbackQueue.push(callback);                                                                                 // 13766
    if (!this.currentAction) _loadNext.call(this);                                                                     // 13767
    return this;                                                                                                       // 13768
};                                                                                                                     // 13769
                                                                                                                       // 13770
/**                                                                                                                    // 13771
 * Cancel all transitions and reset to a stable state                                                                  // 13772
 *                                                                                                                     // 13773
 * @method reset                                                                                                       // 13774
 *                                                                                                                     // 13775
 * @param {number|Array.Number|Object.<number, number>} startState                                                     // 13776
 *    stable state to set to                                                                                           // 13777
 */                                                                                                                    // 13778
Transitionable.prototype.reset = function reset(startState, startVelocity) {                                           // 13779
    this._currentMethod = null;                                                                                        // 13780
    this._engineInstance = null;                                                                                       // 13781
    this._callback = undefined;                                                                                        // 13782
    this.state = startState;                                                                                           // 13783
    this.velocity = startVelocity;                                                                                     // 13784
    this.currentAction = null;                                                                                         // 13785
    this.actionQueue = [];                                                                                             // 13786
    this.callbackQueue = [];                                                                                           // 13787
};                                                                                                                     // 13788
                                                                                                                       // 13789
/**                                                                                                                    // 13790
 * Add delay action to the pending action queue queue.                                                                 // 13791
 *                                                                                                                     // 13792
 * @method delay                                                                                                       // 13793
 *                                                                                                                     // 13794
 * @param {number} duration delay time (ms)                                                                            // 13795
 * @param {function} callback Zero-argument function to call on observed                                               // 13796
 *    completion (t=1)                                                                                                 // 13797
 */                                                                                                                    // 13798
Transitionable.prototype.delay = function delay(duration, callback) {                                                  // 13799
    this.set(this.get(), {duration: duration,                                                                          // 13800
        curve: function() {                                                                                            // 13801
            return 0;                                                                                                  // 13802
        }},                                                                                                            // 13803
        callback                                                                                                       // 13804
    );                                                                                                                 // 13805
};                                                                                                                     // 13806
                                                                                                                       // 13807
/**                                                                                                                    // 13808
 * Get interpolated state of current action at provided time. If the last                                              // 13809
 *    action has completed, invoke its callback.                                                                       // 13810
 *                                                                                                                     // 13811
 * @method get                                                                                                         // 13812
 *                                                                                                                     // 13813
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 13814
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 13815
 * @return {number|Object.<number|string, number>} beginning state                                                     // 13816
 *    interpolated to this point in time.                                                                              // 13817
 */                                                                                                                    // 13818
Transitionable.prototype.get = function get(timestamp) {                                                               // 13819
    if (this._engineInstance) {                                                                                        // 13820
        if (this._engineInstance.getVelocity)                                                                          // 13821
            this.velocity = this._engineInstance.getVelocity();                                                        // 13822
        this.state = this._engineInstance.get(timestamp);                                                              // 13823
    }                                                                                                                  // 13824
    return this.state;                                                                                                 // 13825
};                                                                                                                     // 13826
                                                                                                                       // 13827
/**                                                                                                                    // 13828
 * Is there at least one action pending completion?                                                                    // 13829
 *                                                                                                                     // 13830
 * @method isActive                                                                                                    // 13831
 *                                                                                                                     // 13832
 * @return {boolean}                                                                                                   // 13833
 */                                                                                                                    // 13834
Transitionable.prototype.isActive = function isActive() {                                                              // 13835
    return !!this.currentAction;                                                                                       // 13836
};                                                                                                                     // 13837
                                                                                                                       // 13838
/**                                                                                                                    // 13839
 * Halt transition at current state and erase all pending actions.                                                     // 13840
 *                                                                                                                     // 13841
 * @method halt                                                                                                        // 13842
 */                                                                                                                    // 13843
Transitionable.prototype.halt = function halt() {                                                                      // 13844
    return this.set(this.get());                                                                                       // 13845
};                                                                                                                     // 13846
                                                                                                                       // 13847
module.exports = Transitionable;                                                                                       // 13848
},{"./MultipleTransition":86,"./TweenTransition":91}],90:[function(_dereq_,module,exports){                            // 13849
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 13850
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 13851
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 13852
 *                                                                                                                     // 13853
 * Owner: david@famo.us                                                                                                // 13854
 * @license MPL 2.0                                                                                                    // 13855
 * @copyright Famous Industries, Inc. 2014                                                                             // 13856
 */                                                                                                                    // 13857
                                                                                                                       // 13858
var Transitionable = _dereq_('./Transitionable');                                                                      // 13859
var Transform = _dereq_('../core/Transform');                                                                          // 13860
var Utility = _dereq_('../utilities/Utility');                                                                         // 13861
                                                                                                                       // 13862
/**                                                                                                                    // 13863
 * A class for transitioning the state of a Transform by transitioning                                                 // 13864
 * its translate, scale, skew and rotate components independently.                                                     // 13865
 *                                                                                                                     // 13866
 * @class TransitionableTransform                                                                                      // 13867
 * @constructor                                                                                                        // 13868
 *                                                                                                                     // 13869
 * @param [transform=Transform.identity] {Transform} The initial transform state                                       // 13870
 */                                                                                                                    // 13871
function TransitionableTransform(transform) {                                                                          // 13872
    this._final = Transform.identity.slice();                                                                          // 13873
                                                                                                                       // 13874
    this._finalTranslate = [0, 0, 0];                                                                                  // 13875
    this._finalRotate = [0, 0, 0];                                                                                     // 13876
    this._finalSkew = [0, 0, 0];                                                                                       // 13877
    this._finalScale = [1, 1, 1];                                                                                      // 13878
                                                                                                                       // 13879
    this.translate = new Transitionable(this._finalTranslate);                                                         // 13880
    this.rotate = new Transitionable(this._finalRotate);                                                               // 13881
    this.skew = new Transitionable(this._finalSkew);                                                                   // 13882
    this.scale = new Transitionable(this._finalScale);                                                                 // 13883
                                                                                                                       // 13884
    if (transform) this.set(transform);                                                                                // 13885
}                                                                                                                      // 13886
                                                                                                                       // 13887
function _build() {                                                                                                    // 13888
    return Transform.build({                                                                                           // 13889
        translate: this.translate.get(),                                                                               // 13890
        rotate: this.rotate.get(),                                                                                     // 13891
        skew: this.skew.get(),                                                                                         // 13892
        scale: this.scale.get()                                                                                        // 13893
    });                                                                                                                // 13894
}                                                                                                                      // 13895
                                                                                                                       // 13896
function _buildFinal() {                                                                                               // 13897
    return Transform.build({                                                                                           // 13898
        translate: this._finalTranslate,                                                                               // 13899
        rotate: this._finalRotate,                                                                                     // 13900
        skew: this._finalSkew,                                                                                         // 13901
        scale: this._finalScale                                                                                        // 13902
    });                                                                                                                // 13903
}                                                                                                                      // 13904
                                                                                                                       // 13905
/**                                                                                                                    // 13906
 * An optimized way of setting only the translation component of a Transform                                           // 13907
 *                                                                                                                     // 13908
 * @method setTranslate                                                                                                // 13909
 * @chainable                                                                                                          // 13910
 *                                                                                                                     // 13911
 * @param translate {Array}     New translation state                                                                  // 13912
 * @param [transition] {Object} Transition definition                                                                  // 13913
 * @param [callback] {Function} Callback                                                                               // 13914
 * @return {TransitionableTransform}                                                                                   // 13915
 */                                                                                                                    // 13916
TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {              // 13917
    this._finalTranslate = translate;                                                                                  // 13918
    this._final = _buildFinal.call(this);                                                                              // 13919
    this.translate.set(translate, transition, callback);                                                               // 13920
    return this;                                                                                                       // 13921
};                                                                                                                     // 13922
                                                                                                                       // 13923
/**                                                                                                                    // 13924
 * An optimized way of setting only the scale component of a Transform                                                 // 13925
 *                                                                                                                     // 13926
 * @method setScale                                                                                                    // 13927
 * @chainable                                                                                                          // 13928
 *                                                                                                                     // 13929
 * @param scale {Array}         New scale state                                                                        // 13930
 * @param [transition] {Object} Transition definition                                                                  // 13931
 * @param [callback] {Function} Callback                                                                               // 13932
 * @return {TransitionableTransform}                                                                                   // 13933
 */                                                                                                                    // 13934
TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {                          // 13935
    this._finalScale = scale;                                                                                          // 13936
    this._final = _buildFinal.call(this);                                                                              // 13937
    this.scale.set(scale, transition, callback);                                                                       // 13938
    return this;                                                                                                       // 13939
};                                                                                                                     // 13940
                                                                                                                       // 13941
/**                                                                                                                    // 13942
 * An optimized way of setting only the rotational component of a Transform                                            // 13943
 *                                                                                                                     // 13944
 * @method setRotate                                                                                                   // 13945
 * @chainable                                                                                                          // 13946
 *                                                                                                                     // 13947
 * @param eulerAngles {Array}   Euler angles for new rotation state                                                    // 13948
 * @param [transition] {Object} Transition definition                                                                  // 13949
 * @param [callback] {Function} Callback                                                                               // 13950
 * @return {TransitionableTransform}                                                                                   // 13951
 */                                                                                                                    // 13952
TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {                  // 13953
    this._finalRotate = eulerAngles;                                                                                   // 13954
    this._final = _buildFinal.call(this);                                                                              // 13955
    this.rotate.set(eulerAngles, transition, callback);                                                                // 13956
    return this;                                                                                                       // 13957
};                                                                                                                     // 13958
                                                                                                                       // 13959
/**                                                                                                                    // 13960
 * An optimized way of setting only the skew component of a Transform                                                  // 13961
 *                                                                                                                     // 13962
 * @method setSkew                                                                                                     // 13963
 * @chainable                                                                                                          // 13964
 *                                                                                                                     // 13965
 * @param skewAngles {Array}    New skew state                                                                         // 13966
 * @param [transition] {Object} Transition definition                                                                  // 13967
 * @param [callback] {Function} Callback                                                                               // 13968
 * @return {TransitionableTransform}                                                                                   // 13969
 */                                                                                                                    // 13970
TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {                       // 13971
    this._finalSkew = skewAngles;                                                                                      // 13972
    this._final = _buildFinal.call(this);                                                                              // 13973
    this.skew.set(skewAngles, transition, callback);                                                                   // 13974
    return this;                                                                                                       // 13975
};                                                                                                                     // 13976
                                                                                                                       // 13977
/**                                                                                                                    // 13978
 * Setter for a TransitionableTransform with optional parameters to transition                                         // 13979
 * between Transforms                                                                                                  // 13980
 *                                                                                                                     // 13981
 * @method set                                                                                                         // 13982
 * @chainable                                                                                                          // 13983
 *                                                                                                                     // 13984
 * @param transform {Array}     New transform state                                                                    // 13985
 * @param [transition] {Object} Transition definition                                                                  // 13986
 * @param [callback] {Function} Callback                                                                               // 13987
 * @return {TransitionableTransform}                                                                                   // 13988
 */                                                                                                                    // 13989
TransitionableTransform.prototype.set = function set(transform, transition, callback) {                                // 13990
    var components = Transform.interpret(transform);                                                                   // 13991
                                                                                                                       // 13992
    this._finalTranslate = components.translate;                                                                       // 13993
    this._finalRotate = components.rotate;                                                                             // 13994
    this._finalSkew = components.skew;                                                                                 // 13995
    this._finalScale = components.scale;                                                                               // 13996
    this._final = transform;                                                                                           // 13997
                                                                                                                       // 13998
    var _callback = callback ? Utility.after(4, callback) : null;                                                      // 13999
    this.translate.set(components.translate, transition, _callback);                                                   // 14000
    this.rotate.set(components.rotate, transition, _callback);                                                         // 14001
    this.skew.set(components.skew, transition, _callback);                                                             // 14002
    this.scale.set(components.scale, transition, _callback);                                                           // 14003
    return this;                                                                                                       // 14004
};                                                                                                                     // 14005
                                                                                                                       // 14006
/**                                                                                                                    // 14007
 * Sets the default transition to use for transitioning betwen Transform states                                        // 14008
 *                                                                                                                     // 14009
 * @method setDefaultTransition                                                                                        // 14010
 *                                                                                                                     // 14011
 * @param transition {Object} Transition definition                                                                    // 14012
 */                                                                                                                    // 14013
TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {                   // 14014
    this.translate.setDefault(transition);                                                                             // 14015
    this.rotate.setDefault(transition);                                                                                // 14016
    this.skew.setDefault(transition);                                                                                  // 14017
    this.scale.setDefault(transition);                                                                                 // 14018
};                                                                                                                     // 14019
                                                                                                                       // 14020
/**                                                                                                                    // 14021
 * Getter. Returns the current state of the Transform                                                                  // 14022
 *                                                                                                                     // 14023
 * @method get                                                                                                         // 14024
 *                                                                                                                     // 14025
 * @return {Transform}                                                                                                 // 14026
 */                                                                                                                    // 14027
TransitionableTransform.prototype.get = function get() {                                                               // 14028
    if (this.isActive()) {                                                                                             // 14029
        return _build.call(this);                                                                                      // 14030
    }                                                                                                                  // 14031
    else return this._final;                                                                                           // 14032
};                                                                                                                     // 14033
                                                                                                                       // 14034
/**                                                                                                                    // 14035
 * Get the destination state of the Transform                                                                          // 14036
 *                                                                                                                     // 14037
 * @method getFinal                                                                                                    // 14038
 *                                                                                                                     // 14039
 * @return Transform {Transform}                                                                                       // 14040
 */                                                                                                                    // 14041
TransitionableTransform.prototype.getFinal = function getFinal() {                                                     // 14042
    return this._final;                                                                                                // 14043
};                                                                                                                     // 14044
                                                                                                                       // 14045
/**                                                                                                                    // 14046
 * Determine if the TransitionalTransform is currently transitioning                                                   // 14047
 *                                                                                                                     // 14048
 * @method isActive                                                                                                    // 14049
 *                                                                                                                     // 14050
 * @return {Boolean}                                                                                                   // 14051
 */                                                                                                                    // 14052
TransitionableTransform.prototype.isActive = function isActive() {                                                     // 14053
    return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();       // 14054
};                                                                                                                     // 14055
                                                                                                                       // 14056
/**                                                                                                                    // 14057
 * Halts the transition                                                                                                // 14058
 *                                                                                                                     // 14059
 * @method halt                                                                                                        // 14060
 */                                                                                                                    // 14061
TransitionableTransform.prototype.halt = function halt() {                                                             // 14062
    this.translate.halt();                                                                                             // 14063
    this.rotate.halt();                                                                                                // 14064
    this.skew.halt();                                                                                                  // 14065
    this.scale.halt();                                                                                                 // 14066
                                                                                                                       // 14067
    this._final = this.get();                                                                                          // 14068
    this._finalTranslate = this.translate.get();                                                                       // 14069
    this._finalRotate = this.rotate.get();                                                                             // 14070
    this._finalSkew = this.skew.get();                                                                                 // 14071
    this._finalScale = this.scale.get();                                                                               // 14072
                                                                                                                       // 14073
    return this;                                                                                                       // 14074
};                                                                                                                     // 14075
                                                                                                                       // 14076
module.exports = TransitionableTransform;                                                                              // 14077
},{"../core/Transform":15,"../utilities/Utility":96,"./Transitionable":89}],91:[function(_dereq_,module,exports){      // 14078
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14079
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14080
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14081
 *                                                                                                                     // 14082
 * Owner: david@famo.us                                                                                                // 14083
 * @license MPL 2.0                                                                                                    // 14084
 * @copyright Famous Industries, Inc. 2014                                                                             // 14085
 */                                                                                                                    // 14086
                                                                                                                       // 14087
                                                                                                                       // 14088
                                                                                                                       // 14089
                                                                                                                       // 14090
/**                                                                                                                    // 14091
 *                                                                                                                     // 14092
 * A state maintainer for a smooth transition between                                                                  // 14093
 *    numerically-specified states.  Example numeric states include floats or                                          // 14094
 *    Transfornm objects.                                                                                              // 14095
 *                                                                                                                     // 14096
 *    An initial state is set with the constructor or set(startValue). A                                               // 14097
 *    corresponding end state and transition are set with set(endValue,                                                // 14098
 *    transition). Subsequent calls to set(endValue, transition) begin at                                              // 14099
 *    the last state. Calls to get(timestamp) provide the _interpolated state                                          // 14100
 *    along the way.                                                                                                   // 14101
 *                                                                                                                     // 14102
 *   Note that there is no event loop here - calls to get() are the only way                                           // 14103
 *    to find out state projected to the current (or provided) time and are                                            // 14104
 *    the only way to trigger callbacks. Usually this kind of object would                                             // 14105
 *    be part of the render() path of a visible component.                                                             // 14106
 *                                                                                                                     // 14107
 * @class TweenTransition                                                                                              // 14108
 * @constructor                                                                                                        // 14109
 *                                                                                                                     // 14110
 * @param {Object} options TODO                                                                                        // 14111
 *    beginning state                                                                                                  // 14112
 */                                                                                                                    // 14113
function TweenTransition(options) {                                                                                    // 14114
    this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);                                                     // 14115
    if (options) this.setOptions(options);                                                                             // 14116
                                                                                                                       // 14117
    this._startTime = 0;                                                                                               // 14118
    this._startValue = 0;                                                                                              // 14119
    this._updateTime = 0;                                                                                              // 14120
    this._endValue = 0;                                                                                                // 14121
    this._curve = undefined;                                                                                           // 14122
    this._duration = 0;                                                                                                // 14123
    this._active = false;                                                                                              // 14124
    this._callback = undefined;                                                                                        // 14125
    this.state = 0;                                                                                                    // 14126
    this.velocity = undefined;                                                                                         // 14127
}                                                                                                                      // 14128
                                                                                                                       // 14129
/**                                                                                                                    // 14130
 * Transition curves mapping independent variable t from domain [0,1] to a                                             // 14131
 *    range within [0,1]. Includes functions 'linear', 'easeIn', 'easeOut',                                            // 14132
 *    'easeInOut', 'easeOutBounce', 'spring'.                                                                          // 14133
 *                                                                                                                     // 14134
 * @property {object} Curve                                                                                            // 14135
 * @final                                                                                                              // 14136
 */                                                                                                                    // 14137
TweenTransition.Curves = {                                                                                             // 14138
    linear: function(t) {                                                                                              // 14139
        return t;                                                                                                      // 14140
    },                                                                                                                 // 14141
    easeIn: function(t) {                                                                                              // 14142
        return t*t;                                                                                                    // 14143
    },                                                                                                                 // 14144
    easeOut: function(t) {                                                                                             // 14145
        return t*(2-t);                                                                                                // 14146
    },                                                                                                                 // 14147
    easeInOut: function(t) {                                                                                           // 14148
        if (t <= 0.5) return 2*t*t;                                                                                    // 14149
        else return -2*t*t + 4*t - 1;                                                                                  // 14150
    },                                                                                                                 // 14151
    easeOutBounce: function(t) {                                                                                       // 14152
        return t*(3 - 2*t);                                                                                            // 14153
    },                                                                                                                 // 14154
    spring: function(t) {                                                                                              // 14155
        return (1 - t) * Math.sin(6 * Math.PI * t) + t;                                                                // 14156
    }                                                                                                                  // 14157
};                                                                                                                     // 14158
                                                                                                                       // 14159
TweenTransition.SUPPORTS_MULTIPLE = true;                                                                              // 14160
TweenTransition.DEFAULT_OPTIONS = {                                                                                    // 14161
    curve: TweenTransition.Curves.linear,                                                                              // 14162
    duration: 500,                                                                                                     // 14163
    speed: 0 /* considered only if positive */                                                                         // 14164
};                                                                                                                     // 14165
                                                                                                                       // 14166
var registeredCurves = {};                                                                                             // 14167
                                                                                                                       // 14168
/**                                                                                                                    // 14169
 * Add "unit" curve to internal dictionary of registered curves.                                                       // 14170
 *                                                                                                                     // 14171
 * @method registerCurve                                                                                               // 14172
 *                                                                                                                     // 14173
 * @static                                                                                                             // 14174
 *                                                                                                                     // 14175
 * @param {string} curveName dictionary key                                                                            // 14176
 * @param {unitCurve} curve function of one numeric variable mapping [0,1]                                             // 14177
 *    to range inside [0,1]                                                                                            // 14178
 * @return {boolean} false if key is taken, else true                                                                  // 14179
 */                                                                                                                    // 14180
TweenTransition.registerCurve = function registerCurve(curveName, curve) {                                             // 14181
    if (!registeredCurves[curveName]) {                                                                                // 14182
        registeredCurves[curveName] = curve;                                                                           // 14183
        return true;                                                                                                   // 14184
    }                                                                                                                  // 14185
    else {                                                                                                             // 14186
        return false;                                                                                                  // 14187
    }                                                                                                                  // 14188
};                                                                                                                     // 14189
                                                                                                                       // 14190
/**                                                                                                                    // 14191
 * Remove object with key "curveName" from internal dictionary of registered                                           // 14192
 *    curves.                                                                                                          // 14193
 *                                                                                                                     // 14194
 * @method unregisterCurve                                                                                             // 14195
 *                                                                                                                     // 14196
 * @static                                                                                                             // 14197
 *                                                                                                                     // 14198
 * @param {string} curveName dictionary key                                                                            // 14199
 * @return {boolean} false if key has no dictionary value                                                              // 14200
 */                                                                                                                    // 14201
TweenTransition.unregisterCurve = function unregisterCurve(curveName) {                                                // 14202
    if (registeredCurves[curveName]) {                                                                                 // 14203
        delete registeredCurves[curveName];                                                                            // 14204
        return true;                                                                                                   // 14205
    }                                                                                                                  // 14206
    else {                                                                                                             // 14207
        return false;                                                                                                  // 14208
    }                                                                                                                  // 14209
};                                                                                                                     // 14210
                                                                                                                       // 14211
/**                                                                                                                    // 14212
 * Retrieve function with key "curveName" from internal dictionary of                                                  // 14213
 *    registered curves. Default curves are defined in the                                                             // 14214
 *    TweenTransition.Curves array, where the values represent                                                         // 14215
 *    unitCurve functions.                                                                                             // 14216
 *                                                                                                                     // 14217
 * @method getCurve                                                                                                    // 14218
 *                                                                                                                     // 14219
 * @static                                                                                                             // 14220
 *                                                                                                                     // 14221
 * @param {string} curveName dictionary key                                                                            // 14222
 * @return {unitCurve} curve function of one numeric variable mapping [0,1]                                            // 14223
 *    to range inside [0,1]                                                                                            // 14224
 */                                                                                                                    // 14225
TweenTransition.getCurve = function getCurve(curveName) {                                                              // 14226
    var curve = registeredCurves[curveName];                                                                           // 14227
    if (curve !== undefined) return curve;                                                                             // 14228
    else throw new Error('curve not registered');                                                                      // 14229
};                                                                                                                     // 14230
                                                                                                                       // 14231
/**                                                                                                                    // 14232
 * Retrieve all available curves.                                                                                      // 14233
 *                                                                                                                     // 14234
 * @method getCurves                                                                                                   // 14235
 *                                                                                                                     // 14236
 * @static                                                                                                             // 14237
 *                                                                                                                     // 14238
 * @return {object} curve functions of one numeric variable mapping [0,1]                                              // 14239
 *    to range inside [0,1]                                                                                            // 14240
 */                                                                                                                    // 14241
TweenTransition.getCurves = function getCurves() {                                                                     // 14242
    return registeredCurves;                                                                                           // 14243
};                                                                                                                     // 14244
                                                                                                                       // 14245
 // Interpolate: If a linear function f(0) = a, f(1) = b, then return f(t)                                             // 14246
function _interpolate(a, b, t) {                                                                                       // 14247
    return ((1 - t) * a) + (t * b);                                                                                    // 14248
}                                                                                                                      // 14249
                                                                                                                       // 14250
function _clone(obj) {                                                                                                 // 14251
    if (obj instanceof Object) {                                                                                       // 14252
        if (obj instanceof Array) return obj.slice(0);                                                                 // 14253
        else return Object.create(obj);                                                                                // 14254
    }                                                                                                                  // 14255
    else return obj;                                                                                                   // 14256
}                                                                                                                      // 14257
                                                                                                                       // 14258
// Fill in missing properties in "transition" with those in defaultTransition, and                                     // 14259
//   convert internal named curve to function object, returning as new                                                 // 14260
//   object.                                                                                                           // 14261
function _normalize(transition, defaultTransition) {                                                                   // 14262
    var result = {curve: defaultTransition.curve};                                                                     // 14263
    if (defaultTransition.duration) result.duration = defaultTransition.duration;                                      // 14264
    if (defaultTransition.speed) result.speed = defaultTransition.speed;                                               // 14265
    if (transition instanceof Object) {                                                                                // 14266
        if (transition.duration !== undefined) result.duration = transition.duration;                                  // 14267
        if (transition.curve) result.curve = transition.curve;                                                         // 14268
        if (transition.speed) result.speed = transition.speed;                                                         // 14269
    }                                                                                                                  // 14270
    if (typeof result.curve === 'string') result.curve = TweenTransition.getCurve(result.curve);                       // 14271
    return result;                                                                                                     // 14272
}                                                                                                                      // 14273
                                                                                                                       // 14274
/**                                                                                                                    // 14275
 * Set internal options, overriding any default options.                                                               // 14276
 *                                                                                                                     // 14277
 * @method setOptions                                                                                                  // 14278
 *                                                                                                                     // 14279
 *                                                                                                                     // 14280
 * @param {Object} options options object                                                                              // 14281
 * @param {Object} [options.curve] function mapping [0,1] to [0,1] or identifier                                       // 14282
 * @param {Number} [options.duration] duration in ms                                                                   // 14283
 * @param {Number} [options.speed] speed in pixels per ms                                                              // 14284
 */                                                                                                                    // 14285
TweenTransition.prototype.setOptions = function setOptions(options) {                                                  // 14286
    if (options.curve !== undefined) this.options.curve = options.curve;                                               // 14287
    if (options.duration !== undefined) this.options.duration = options.duration;                                      // 14288
    if (options.speed !== undefined) this.options.speed = options.speed;                                               // 14289
};                                                                                                                     // 14290
                                                                                                                       // 14291
/**                                                                                                                    // 14292
 * Add transition to end state to the queue of pending transitions. Special                                            // 14293
 *    Use: calling without a transition resets the object to that state with                                           // 14294
 *    no pending actions                                                                                               // 14295
 *                                                                                                                     // 14296
 * @method set                                                                                                         // 14297
 *                                                                                                                     // 14298
 *                                                                                                                     // 14299
 * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endValue                                          // 14300
 *    end state to which we _interpolate                                                                               // 14301
 * @param {transition=} transition object of type {duration: number, curve:                                            // 14302
 *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be                                               // 14303
 *    instantaneous.                                                                                                   // 14304
 * @param {function()=} callback Zero-argument function to call on observed                                            // 14305
 *    completion (t=1)                                                                                                 // 14306
 */                                                                                                                    // 14307
TweenTransition.prototype.set = function set(endValue, transition, callback) {                                         // 14308
    if (!transition) {                                                                                                 // 14309
        this.reset(endValue);                                                                                          // 14310
        if (callback) callback();                                                                                      // 14311
        return;                                                                                                        // 14312
    }                                                                                                                  // 14313
                                                                                                                       // 14314
    this._startValue = _clone(this.get());                                                                             // 14315
    transition = _normalize(transition, this.options);                                                                 // 14316
    if (transition.speed) {                                                                                            // 14317
        var startValue = this._startValue;                                                                             // 14318
        if (startValue instanceof Object) {                                                                            // 14319
            var variance = 0;                                                                                          // 14320
            for (var i in startValue) variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);       // 14321
            transition.duration = Math.sqrt(variance) / transition.speed;                                              // 14322
        }                                                                                                              // 14323
        else {                                                                                                         // 14324
            transition.duration = Math.abs(endValue - startValue) / transition.speed;                                  // 14325
        }                                                                                                              // 14326
    }                                                                                                                  // 14327
                                                                                                                       // 14328
    this._startTime = Date.now();                                                                                      // 14329
    this._endValue = _clone(endValue);                                                                                 // 14330
    this._startVelocity = _clone(transition.velocity);                                                                 // 14331
    this._duration = transition.duration;                                                                              // 14332
    this._curve = transition.curve;                                                                                    // 14333
    this._active = true;                                                                                               // 14334
    this._callback = callback;                                                                                         // 14335
};                                                                                                                     // 14336
                                                                                                                       // 14337
/**                                                                                                                    // 14338
 * Cancel all transitions and reset to a stable state                                                                  // 14339
 *                                                                                                                     // 14340
 * @method reset                                                                                                       // 14341
 *                                                                                                                     // 14342
 * @param {number|Array.Number|Object.<number, number>} startValue                                                     // 14343
 *    starting state                                                                                                   // 14344
 * @param {number} startVelocity                                                                                       // 14345
 *    starting velocity                                                                                                // 14346
 */                                                                                                                    // 14347
TweenTransition.prototype.reset = function reset(startValue, startVelocity) {                                          // 14348
    if (this._callback) {                                                                                              // 14349
        var callback = this._callback;                                                                                 // 14350
        this._callback = undefined;                                                                                    // 14351
        callback();                                                                                                    // 14352
    }                                                                                                                  // 14353
    this.state = _clone(startValue);                                                                                   // 14354
    this.velocity = _clone(startVelocity);                                                                             // 14355
    this._startTime = 0;                                                                                               // 14356
    this._duration = 0;                                                                                                // 14357
    this._updateTime = 0;                                                                                              // 14358
    this._startValue = this.state;                                                                                     // 14359
    this._startVelocity = this.velocity;                                                                               // 14360
    this._endValue = this.state;                                                                                       // 14361
    this._active = false;                                                                                              // 14362
};                                                                                                                     // 14363
                                                                                                                       // 14364
/**                                                                                                                    // 14365
 * Get current velocity                                                                                                // 14366
 *                                                                                                                     // 14367
 * @method getVelocity                                                                                                 // 14368
 *                                                                                                                     // 14369
 * @returns {Number} velocity                                                                                          // 14370
 */                                                                                                                    // 14371
TweenTransition.prototype.getVelocity = function getVelocity() {                                                       // 14372
    return this.velocity;                                                                                              // 14373
};                                                                                                                     // 14374
                                                                                                                       // 14375
/**                                                                                                                    // 14376
 * Get interpolated state of current action at provided time. If the last                                              // 14377
 *    action has completed, invoke its callback.                                                                       // 14378
 *                                                                                                                     // 14379
 * @method get                                                                                                         // 14380
 *                                                                                                                     // 14381
 *                                                                                                                     // 14382
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14383
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14384
 * @return {number|Object.<number|string, number>} beginning state                                                     // 14385
 *    _interpolated to this point in time.                                                                             // 14386
 */                                                                                                                    // 14387
TweenTransition.prototype.get = function get(timestamp) {                                                              // 14388
    this.update(timestamp);                                                                                            // 14389
    return this.state;                                                                                                 // 14390
};                                                                                                                     // 14391
                                                                                                                       // 14392
function _calculateVelocity(current, start, curve, duration, t) {                                                      // 14393
    var velocity;                                                                                                      // 14394
    var eps = 1e-7;                                                                                                    // 14395
    var speed = (curve(t) - curve(t - eps)) / eps;                                                                     // 14396
    if (current instanceof Array) {                                                                                    // 14397
        velocity = [];                                                                                                 // 14398
        for (var i = 0; i < current.length; i++){                                                                      // 14399
            if (typeof current[i] === 'number')                                                                        // 14400
                velocity[i] = speed * (current[i] - start[i]) / duration;                                              // 14401
            else                                                                                                       // 14402
                velocity[i] = 0;                                                                                       // 14403
        }                                                                                                              // 14404
                                                                                                                       // 14405
    }                                                                                                                  // 14406
    else velocity = speed * (current - start) / duration;                                                              // 14407
    return velocity;                                                                                                   // 14408
}                                                                                                                      // 14409
                                                                                                                       // 14410
function _calculateState(start, end, t) {                                                                              // 14411
    var state;                                                                                                         // 14412
    if (start instanceof Array) {                                                                                      // 14413
        state = [];                                                                                                    // 14414
        for (var i = 0; i < start.length; i++) {                                                                       // 14415
            if (typeof start[i] === 'number')                                                                          // 14416
                state[i] = _interpolate(start[i], end[i], t);                                                          // 14417
            else                                                                                                       // 14418
                state[i] = start[i];                                                                                   // 14419
        }                                                                                                              // 14420
    }                                                                                                                  // 14421
    else state = _interpolate(start, end, t);                                                                          // 14422
    return state;                                                                                                      // 14423
}                                                                                                                      // 14424
                                                                                                                       // 14425
/**                                                                                                                    // 14426
 * Update internal state to the provided timestamp. This may invoke the last                                           // 14427
 *    callback and begin a new action.                                                                                 // 14428
 *                                                                                                                     // 14429
 * @method update                                                                                                      // 14430
 *                                                                                                                     // 14431
 *                                                                                                                     // 14432
 * @param {number=} timestamp Evaluate the curve at a normalized version of this                                       // 14433
 *    time. If omitted, use current time. (Unix epoch time)                                                            // 14434
 */                                                                                                                    // 14435
TweenTransition.prototype.update = function update(timestamp) {                                                        // 14436
    if (!this._active) {                                                                                               // 14437
        if (this._callback) {                                                                                          // 14438
            var callback = this._callback;                                                                             // 14439
            this._callback = undefined;                                                                                // 14440
            callback();                                                                                                // 14441
        }                                                                                                              // 14442
        return;                                                                                                        // 14443
    }                                                                                                                  // 14444
                                                                                                                       // 14445
    if (!timestamp) timestamp = Date.now();                                                                            // 14446
    if (this._updateTime >= timestamp) return;                                                                         // 14447
    this._updateTime = timestamp;                                                                                      // 14448
                                                                                                                       // 14449
    var timeSinceStart = timestamp - this._startTime;                                                                  // 14450
    if (timeSinceStart >= this._duration) {                                                                            // 14451
        this.state = this._endValue;                                                                                   // 14452
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);              // 14453
        this._active = false;                                                                                          // 14454
    }                                                                                                                  // 14455
    else if (timeSinceStart < 0) {                                                                                     // 14456
        this.state = this._startValue;                                                                                 // 14457
        this.velocity = this._startVelocity;                                                                           // 14458
    }                                                                                                                  // 14459
    else {                                                                                                             // 14460
        var t = timeSinceStart / this._duration;                                                                       // 14461
        this.state = _calculateState(this._startValue, this._endValue, this._curve(t));                                // 14462
        this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);              // 14463
    }                                                                                                                  // 14464
};                                                                                                                     // 14465
                                                                                                                       // 14466
/**                                                                                                                    // 14467
 * Is there at least one action pending completion?                                                                    // 14468
 *                                                                                                                     // 14469
 * @method isActive                                                                                                    // 14470
 *                                                                                                                     // 14471
 *                                                                                                                     // 14472
 * @return {boolean}                                                                                                   // 14473
 */                                                                                                                    // 14474
TweenTransition.prototype.isActive = function isActive() {                                                             // 14475
    return this._active;                                                                                               // 14476
};                                                                                                                     // 14477
                                                                                                                       // 14478
/**                                                                                                                    // 14479
 * Halt transition at current state and erase all pending actions.                                                     // 14480
 *                                                                                                                     // 14481
 * @method halt                                                                                                        // 14482
 *                                                                                                                     // 14483
 */                                                                                                                    // 14484
TweenTransition.prototype.halt = function halt() {                                                                     // 14485
    this.reset(this.get());                                                                                            // 14486
};                                                                                                                     // 14487
                                                                                                                       // 14488
// Register all the default curves                                                                                     // 14489
TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);                                                // 14490
TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);                                                // 14491
TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);                                              // 14492
TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);                                          // 14493
TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);                                  // 14494
TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);                                                // 14495
                                                                                                                       // 14496
TweenTransition.customCurve = function customCurve(v1, v2) {                                                           // 14497
    v1 = v1 || 0; v2 = v2 || 0;                                                                                        // 14498
    return function(t) {                                                                                               // 14499
        return v1*t + (-2*v1 - v2 + 3)*t*t + (v1 + v2 - 2)*t*t*t;                                                      // 14500
    };                                                                                                                 // 14501
};                                                                                                                     // 14502
                                                                                                                       // 14503
module.exports = TweenTransition;                                                                                      // 14504
},{}],92:[function(_dereq_,module,exports){                                                                            // 14505
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14506
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14507
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14508
 *                                                                                                                     // 14509
 * Owner: david@famo.us                                                                                                // 14510
 * @license MPL 2.0                                                                                                    // 14511
 * @copyright Famous Industries, Inc. 2014                                                                             // 14512
 */                                                                                                                    // 14513
                                                                                                                       // 14514
var PE = _dereq_('../physics/PhysicsEngine');                                                                          // 14515
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 14516
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 14517
var Wall = _dereq_('../physics/constraints/Wall');                                                                     // 14518
var Vector = _dereq_('../math/Vector');                                                                                // 14519
                                                                                                                       // 14520
/**                                                                                                                    // 14521
 * WallTransition is a method of transitioning between two values (numbers,                                            // 14522
 *   or arrays of numbers) with a bounce. Unlike a SpringTransition                                                    // 14523
 *   The transition will not overshoot the target, but bounce back against it.                                         // 14524
 *   The behavior of the bounce is specified by the transition options.                                                // 14525
 *                                                                                                                     // 14526
 * @class WallTransition                                                                                               // 14527
 * @constructor                                                                                                        // 14528
 *                                                                                                                     // 14529
 * @param {Number|Array} [state=0] Initial state                                                                       // 14530
 */                                                                                                                    // 14531
function WallTransition(state) {                                                                                       // 14532
    state = state || 0;                                                                                                // 14533
                                                                                                                       // 14534
    this.endState  = new Vector(state);                                                                                // 14535
    this.initState = new Vector();                                                                                     // 14536
                                                                                                                       // 14537
    this.spring = new Spring({anchor : this.endState});                                                                // 14538
    this.wall   = new Wall();                                                                                          // 14539
                                                                                                                       // 14540
    this._restTolerance = 1e-10;                                                                                       // 14541
    this._dimensions = 1;                                                                                              // 14542
    this._absRestTolerance = this._restTolerance;                                                                      // 14543
    this._callback = undefined;                                                                                        // 14544
                                                                                                                       // 14545
    this.PE = new PE();                                                                                                // 14546
    this.particle = new Particle();                                                                                    // 14547
                                                                                                                       // 14548
    this.PE.addBody(this.particle);                                                                                    // 14549
    this.PE.attach([this.wall, this.spring], this.particle);                                                           // 14550
}                                                                                                                      // 14551
                                                                                                                       // 14552
WallTransition.SUPPORTS_MULTIPLE = 3;                                                                                  // 14553
                                                                                                                       // 14554
/**                                                                                                                    // 14555
 * @property WallTransition.DEFAULT_OPTIONS                                                                            // 14556
 * @type Object                                                                                                        // 14557
 * @protected                                                                                                          // 14558
 * @static                                                                                                             // 14559
 */                                                                                                                    // 14560
WallTransition.DEFAULT_OPTIONS = {                                                                                     // 14561
                                                                                                                       // 14562
    /**                                                                                                                // 14563
     * The amount of time in milliseconds taken for one complete oscillation                                           // 14564
     * when there is no damping                                                                                        // 14565
     *    Range : [0, Infinity]                                                                                        // 14566
     *                                                                                                                 // 14567
     * @attribute period                                                                                               // 14568
     * @type Number                                                                                                    // 14569
     * @default 300                                                                                                    // 14570
     */                                                                                                                // 14571
    period : 300,                                                                                                      // 14572
                                                                                                                       // 14573
    /**                                                                                                                // 14574
     * The damping of the snap.                                                                                        // 14575
     *    Range : [0, 1]                                                                                               // 14576
     *    0 = no damping, and the spring will oscillate forever                                                        // 14577
     *    1 = critically damped (the spring will never oscillate)                                                      // 14578
     *                                                                                                                 // 14579
     * @attribute dampingRatio                                                                                         // 14580
     * @type Number                                                                                                    // 14581
     * @default 0.5                                                                                                    // 14582
     */                                                                                                                // 14583
    dampingRatio : 0.5,                                                                                                // 14584
                                                                                                                       // 14585
    /**                                                                                                                // 14586
     * The initial velocity of the transition.                                                                         // 14587
     *                                                                                                                 // 14588
     * @attribute velocity                                                                                             // 14589
     * @type Number|Array                                                                                              // 14590
     * @default 0                                                                                                      // 14591
     */                                                                                                                // 14592
    velocity : 0,                                                                                                      // 14593
                                                                                                                       // 14594
    /**                                                                                                                // 14595
     * The percentage of momentum transferred to the wall                                                              // 14596
     *                                                                                                                 // 14597
     * @attribute restitution                                                                                          // 14598
     * @type Number                                                                                                    // 14599
     * @default 0.5                                                                                                    // 14600
     */                                                                                                                // 14601
    restitution : 0.5                                                                                                  // 14602
};                                                                                                                     // 14603
                                                                                                                       // 14604
function _getEnergy() {                                                                                                // 14605
    return this.particle.getEnergy() + this.spring.getEnergy([this.particle]);                                         // 14606
}                                                                                                                      // 14607
                                                                                                                       // 14608
function _setAbsoluteRestTolerance() {                                                                                 // 14609
    var distance = this.endState.sub(this.initState).normSquared();                                                    // 14610
    this._absRestTolerance = (distance === 0)                                                                          // 14611
        ? this._restTolerance                                                                                          // 14612
        : this._restTolerance * distance;                                                                              // 14613
}                                                                                                                      // 14614
                                                                                                                       // 14615
function _wake() {                                                                                                     // 14616
    this.PE.wake();                                                                                                    // 14617
}                                                                                                                      // 14618
                                                                                                                       // 14619
function _sleep() {                                                                                                    // 14620
    this.PE.sleep();                                                                                                   // 14621
}                                                                                                                      // 14622
                                                                                                                       // 14623
function _setTarget(target) {                                                                                          // 14624
    this.endState.set(target);                                                                                         // 14625
                                                                                                                       // 14626
    var dist = this.endState.sub(this.initState).norm();                                                               // 14627
                                                                                                                       // 14628
    this.wall.setOptions({                                                                                             // 14629
        distance : this.endState.norm(),                                                                               // 14630
        normal : (dist === 0)                                                                                          // 14631
            ? this.particle.velocity.normalize(-1)                                                                     // 14632
            : this.endState.sub(this.initState).normalize(-1)                                                          // 14633
    });                                                                                                                // 14634
                                                                                                                       // 14635
    _setAbsoluteRestTolerance.call(this);                                                                              // 14636
}                                                                                                                      // 14637
                                                                                                                       // 14638
function _setParticlePosition(p) {                                                                                     // 14639
    this.particle.position.set(p);                                                                                     // 14640
}                                                                                                                      // 14641
                                                                                                                       // 14642
function _setParticleVelocity(v) {                                                                                     // 14643
    this.particle.velocity.set(v);                                                                                     // 14644
}                                                                                                                      // 14645
                                                                                                                       // 14646
function _getParticlePosition() {                                                                                      // 14647
    return (this._dimensions === 0)                                                                                    // 14648
        ? this.particle.getPosition1D()                                                                                // 14649
        : this.particle.getPosition();                                                                                 // 14650
}                                                                                                                      // 14651
                                                                                                                       // 14652
function _getParticleVelocity() {                                                                                      // 14653
    return (this._dimensions === 0)                                                                                    // 14654
        ? this.particle.getVelocity1D()                                                                                // 14655
        : this.particle.getVelocity();                                                                                 // 14656
}                                                                                                                      // 14657
                                                                                                                       // 14658
function _setCallback(callback) {                                                                                      // 14659
    this._callback = callback;                                                                                         // 14660
}                                                                                                                      // 14661
                                                                                                                       // 14662
function _update() {                                                                                                   // 14663
    if (this.PE.isSleeping()) {                                                                                        // 14664
        if (this._callback) {                                                                                          // 14665
            var cb = this._callback;                                                                                   // 14666
            this._callback = undefined;                                                                                // 14667
            cb();                                                                                                      // 14668
        }                                                                                                              // 14669
        return;                                                                                                        // 14670
    }                                                                                                                  // 14671
    var energy = _getEnergy.call(this);                                                                                // 14672
    if (energy < this._absRestTolerance) {                                                                             // 14673
        _sleep.call(this);                                                                                             // 14674
        _setParticlePosition.call(this, this.endState);                                                                // 14675
        _setParticleVelocity.call(this, [0,0,0]);                                                                      // 14676
    }                                                                                                                  // 14677
}                                                                                                                      // 14678
                                                                                                                       // 14679
function _setupDefinition(def) {                                                                                       // 14680
    var defaults = WallTransition.DEFAULT_OPTIONS;                                                                     // 14681
    if (def.period === undefined) def.period = defaults.period;                                                        // 14682
    if (def.dampingRatio === undefined) def.dampingRatio = defaults.dampingRatio;                                      // 14683
    if (def.velocity === undefined) def.velocity = defaults.velocity;                                                  // 14684
    if (def.restitution === undefined) def.restitution = defaults.restitution;                                         // 14685
    if (def.drift === undefined) def.drift = Wall.DEFAULT_OPTIONS.drift;                                               // 14686
    if (def.slop === undefined) def.slop = Wall.DEFAULT_OPTIONS.slop;                                                  // 14687
                                                                                                                       // 14688
    //setup spring                                                                                                     // 14689
    this.spring.setOptions({                                                                                           // 14690
        period : def.period,                                                                                           // 14691
        dampingRatio : def.dampingRatio                                                                                // 14692
    });                                                                                                                // 14693
                                                                                                                       // 14694
    //setup wall                                                                                                       // 14695
    this.wall.setOptions({                                                                                             // 14696
        restitution : def.restitution,                                                                                 // 14697
        drift: def.drift,                                                                                              // 14698
        slop: def.slop                                                                                                 // 14699
    });                                                                                                                // 14700
                                                                                                                       // 14701
    //setup particle                                                                                                   // 14702
    _setParticleVelocity.call(this, def.velocity);                                                                     // 14703
}                                                                                                                      // 14704
                                                                                                                       // 14705
/**                                                                                                                    // 14706
 * Resets the state and velocity                                                                                       // 14707
 *                                                                                                                     // 14708
 * @method reset                                                                                                       // 14709
 *                                                                                                                     // 14710
 * @param {Number|Array}  state     State                                                                              // 14711
 * @param  {Number|Array} [velocity] Velocity                                                                          // 14712
 */                                                                                                                    // 14713
WallTransition.prototype.reset = function reset(state, velocity) {                                                     // 14714
    this._dimensions = (state instanceof Array)                                                                        // 14715
        ? state.length                                                                                                 // 14716
        : 0;                                                                                                           // 14717
                                                                                                                       // 14718
    this.initState.set(state);                                                                                         // 14719
    _setParticlePosition.call(this, state);                                                                            // 14720
    if (velocity) _setParticleVelocity.call(this, velocity);                                                           // 14721
    _setTarget.call(this, state);                                                                                      // 14722
    _setCallback.call(this, undefined);                                                                                // 14723
};                                                                                                                     // 14724
                                                                                                                       // 14725
/**                                                                                                                    // 14726
 * Getter for velocity                                                                                                 // 14727
 *                                                                                                                     // 14728
 * @method getVelocity                                                                                                 // 14729
 *                                                                                                                     // 14730
 * @return velocity {Number|Array}                                                                                     // 14731
 */                                                                                                                    // 14732
WallTransition.prototype.getVelocity = function getVelocity() {                                                        // 14733
    return _getParticleVelocity.call(this);                                                                            // 14734
};                                                                                                                     // 14735
                                                                                                                       // 14736
/**                                                                                                                    // 14737
 * Setter for velocity                                                                                                 // 14738
 *                                                                                                                     // 14739
 * @method setVelocity                                                                                                 // 14740
 *                                                                                                                     // 14741
 * @return velocity {Number|Array}                                                                                     // 14742
 */                                                                                                                    // 14743
WallTransition.prototype.setVelocity = function setVelocity(velocity) {                                                // 14744
    this.call(this, _setParticleVelocity(velocity));                                                                   // 14745
};                                                                                                                     // 14746
                                                                                                                       // 14747
/**                                                                                                                    // 14748
 * Detects whether a transition is in progress                                                                         // 14749
 *                                                                                                                     // 14750
 * @method isActive                                                                                                    // 14751
 *                                                                                                                     // 14752
 * @return {Boolean}                                                                                                   // 14753
 */                                                                                                                    // 14754
WallTransition.prototype.isActive = function isActive() {                                                              // 14755
    return !this.PE.isSleeping();                                                                                      // 14756
};                                                                                                                     // 14757
                                                                                                                       // 14758
/**                                                                                                                    // 14759
 * Halt the transition                                                                                                 // 14760
 *                                                                                                                     // 14761
 * @method halt                                                                                                        // 14762
 */                                                                                                                    // 14763
WallTransition.prototype.halt = function halt() {                                                                      // 14764
    this.set(this.get());                                                                                              // 14765
};                                                                                                                     // 14766
                                                                                                                       // 14767
/**                                                                                                                    // 14768
 * Getter                                                                                                              // 14769
 *                                                                                                                     // 14770
 * @method get                                                                                                         // 14771
 *                                                                                                                     // 14772
 * @return state {Number|Array}                                                                                        // 14773
 */                                                                                                                    // 14774
WallTransition.prototype.get = function get() {                                                                        // 14775
    _update.call(this);                                                                                                // 14776
    return _getParticlePosition.call(this);                                                                            // 14777
};                                                                                                                     // 14778
                                                                                                                       // 14779
/**                                                                                                                    // 14780
 * Set the end position and transition, with optional callback on completion.                                          // 14781
 *                                                                                                                     // 14782
 * @method set                                                                                                         // 14783
 *                                                                                                                     // 14784
 * @param state {Number|Array}      Final state                                                                        // 14785
 * @param [definition] {Object}     Transition definition                                                              // 14786
 * @param [callback] {Function}     Callback                                                                           // 14787
 */                                                                                                                    // 14788
WallTransition.prototype.set = function set(state, definition, callback) {                                             // 14789
    if (!definition) {                                                                                                 // 14790
        this.reset(state);                                                                                             // 14791
        if (callback) callback();                                                                                      // 14792
        return;                                                                                                        // 14793
    }                                                                                                                  // 14794
                                                                                                                       // 14795
    this._dimensions = (state instanceof Array)                                                                        // 14796
        ? state.length                                                                                                 // 14797
        : 0;                                                                                                           // 14798
                                                                                                                       // 14799
    _wake.call(this);                                                                                                  // 14800
    _setupDefinition.call(this, definition);                                                                           // 14801
    _setTarget.call(this, state);                                                                                      // 14802
    _setCallback.call(this, callback);                                                                                 // 14803
};                                                                                                                     // 14804
                                                                                                                       // 14805
module.exports = WallTransition;                                                                                       // 14806
},{"../math/Vector":42,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/constraints/Wall":61,"../physics/forces/Spring":69}],93:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 14808
  CachedMap: _dereq_('./CachedMap'),                                                                                   // 14809
  Easing: _dereq_('./Easing'),                                                                                         // 14810
  MultipleTransition: _dereq_('./MultipleTransition'),                                                                 // 14811
  SnapTransition: _dereq_('./SnapTransition'),                                                                         // 14812
  SpringTransition: _dereq_('./SpringTransition'),                                                                     // 14813
  Transitionable: _dereq_('./Transitionable'),                                                                         // 14814
  TransitionableTransform: _dereq_('./TransitionableTransform'),                                                       // 14815
  TweenTransition: _dereq_('./TweenTransition'),                                                                       // 14816
  WallTransition: _dereq_('./WallTransition')                                                                          // 14817
};                                                                                                                     // 14818
                                                                                                                       // 14819
},{"./CachedMap":84,"./Easing":85,"./MultipleTransition":86,"./SnapTransition":87,"./SpringTransition":88,"./Transitionable":89,"./TransitionableTransform":90,"./TweenTransition":91,"./WallTransition":92}],94:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14821
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14822
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14823
 *                                                                                                                     // 14824
 * Owner: mark@famo.us                                                                                                 // 14825
 * @license MPL 2.0                                                                                                    // 14826
 * @copyright Famous Industries, Inc. 2014                                                                             // 14827
 */                                                                                                                    // 14828
                                                                                                                       // 14829
                                                                                                                       // 14830
                                                                                                                       // 14831
                                                                                                                       // 14832
/**                                                                                                                    // 14833
 * Collection to map keyboard codes in plain english                                                                   // 14834
 *                                                                                                                     // 14835
 * @class KeyCodes                                                                                                     // 14836
 * @static                                                                                                             // 14837
 */                                                                                                                    // 14838
var KeyCodes = {                                                                                                       // 14839
    0 : 48,                                                                                                            // 14840
    1 : 49,                                                                                                            // 14841
    2 : 50,                                                                                                            // 14842
    3 : 51,                                                                                                            // 14843
    4 : 52,                                                                                                            // 14844
    5 : 53,                                                                                                            // 14845
    6 : 54,                                                                                                            // 14846
    7 : 55,                                                                                                            // 14847
    8 : 56,                                                                                                            // 14848
    9 : 57,                                                                                                            // 14849
    a : 97,                                                                                                            // 14850
    b : 98,                                                                                                            // 14851
    c : 99,                                                                                                            // 14852
    d : 100,                                                                                                           // 14853
    e : 101,                                                                                                           // 14854
    f : 102,                                                                                                           // 14855
    g : 103,                                                                                                           // 14856
    h : 104,                                                                                                           // 14857
    i : 105,                                                                                                           // 14858
    j : 106,                                                                                                           // 14859
    k : 107,                                                                                                           // 14860
    l : 108,                                                                                                           // 14861
    m : 109,                                                                                                           // 14862
    n : 110,                                                                                                           // 14863
    o : 111,                                                                                                           // 14864
    p : 112,                                                                                                           // 14865
    q : 113,                                                                                                           // 14866
    r : 114,                                                                                                           // 14867
    s : 115,                                                                                                           // 14868
    t : 116,                                                                                                           // 14869
    u : 117,                                                                                                           // 14870
    v : 118,                                                                                                           // 14871
    w : 119,                                                                                                           // 14872
    x : 120,                                                                                                           // 14873
    y : 121,                                                                                                           // 14874
    z : 122,                                                                                                           // 14875
    A : 65,                                                                                                            // 14876
    B : 66,                                                                                                            // 14877
    C : 67,                                                                                                            // 14878
    D : 68,                                                                                                            // 14879
    E : 69,                                                                                                            // 14880
    F : 70,                                                                                                            // 14881
    G : 71,                                                                                                            // 14882
    H : 72,                                                                                                            // 14883
    I : 73,                                                                                                            // 14884
    J : 74,                                                                                                            // 14885
    K : 75,                                                                                                            // 14886
    L : 76,                                                                                                            // 14887
    M : 77,                                                                                                            // 14888
    N : 78,                                                                                                            // 14889
    O : 79,                                                                                                            // 14890
    P : 80,                                                                                                            // 14891
    Q : 81,                                                                                                            // 14892
    R : 82,                                                                                                            // 14893
    S : 83,                                                                                                            // 14894
    T : 84,                                                                                                            // 14895
    U : 85,                                                                                                            // 14896
    V : 86,                                                                                                            // 14897
    W : 87,                                                                                                            // 14898
    X : 88,                                                                                                            // 14899
    Y : 89,                                                                                                            // 14900
    Z : 90,                                                                                                            // 14901
    ENTER : 13,                                                                                                        // 14902
    LEFT_ARROW: 37,                                                                                                    // 14903
    RIGHT_ARROW: 39,                                                                                                   // 14904
    UP_ARROW: 38,                                                                                                      // 14905
    DOWN_ARROW: 40,                                                                                                    // 14906
    SPACE: 32,                                                                                                         // 14907
    SHIFT: 16,                                                                                                         // 14908
    TAB: 9                                                                                                             // 14909
};                                                                                                                     // 14910
                                                                                                                       // 14911
module.exports = KeyCodes;                                                                                             // 14912
},{}],95:[function(_dereq_,module,exports){                                                                            // 14913
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 14914
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 14915
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 14916
 *                                                                                                                     // 14917
 * Owner: mark@famo.us                                                                                                 // 14918
 * @license MPL 2.0                                                                                                    // 14919
 * @copyright Famous Industries, Inc. 2014                                                                             // 14920
 */                                                                                                                    // 14921
// TODO fix func-style                                                                                                 // 14922
/*eslint func-style: [0, "declaration"] */                                                                             // 14923
                                                                                                                       // 14924
/**                                                                                                                    // 14925
 * An internal library to reproduce javascript time-based scheduling.                                                  // 14926
 *   Using standard javascript setTimeout methods can have a negative performance impact                               // 14927
 *   when combined with the Famous rendering process, so instead require Timer and call                                // 14928
 *   Timer.setTimeout, Timer.setInterval, etc.                                                                         // 14929
 *                                                                                                                     // 14930
 * @class Timer                                                                                                        // 14931
 * @constructor                                                                                                        // 14932
 */                                                                                                                    // 14933
var FamousEngine = _dereq_('../core/Engine');                                                                          // 14934
                                                                                                                       // 14935
var _event  = 'prerender';                                                                                             // 14936
                                                                                                                       // 14937
var getTime = (window.performance && window.performance.now) ?                                                         // 14938
    function() {                                                                                                       // 14939
        return window.performance.now();                                                                               // 14940
    }                                                                                                                  // 14941
    : function() {                                                                                                     // 14942
        return Date.now();                                                                                             // 14943
    };                                                                                                                 // 14944
                                                                                                                       // 14945
/**                                                                                                                    // 14946
 * Add a function to be run on every prerender                                                                         // 14947
 *                                                                                                                     // 14948
 * @method addTimerFunction                                                                                            // 14949
 *                                                                                                                     // 14950
 * @param {function} fn function to be run every prerender                                                             // 14951
 *                                                                                                                     // 14952
 * @return {function} function passed in as parameter                                                                  // 14953
 */                                                                                                                    // 14954
function addTimerFunction(fn) {                                                                                        // 14955
    FamousEngine.on(_event, fn);                                                                                       // 14956
    return fn;                                                                                                         // 14957
}                                                                                                                      // 14958
                                                                                                                       // 14959
/**                                                                                                                    // 14960
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14961
 *  After a set duration has passed, it executes the function and                                                      // 14962
 *  removes it as a listener to 'prerender'.                                                                           // 14963
 *                                                                                                                     // 14964
 * @method setTimeout                                                                                                  // 14965
 *                                                                                                                     // 14966
 * @param {function} fn function to be run after a specified duration                                                  // 14967
 * @param {number} duration milliseconds from now to execute the function                                              // 14968
 *                                                                                                                     // 14969
 * @return {function} function passed in as parameter                                                                  // 14970
 */                                                                                                                    // 14971
function setTimeout(fn, duration) {                                                                                    // 14972
    var t = getTime();                                                                                                 // 14973
    var callback = function() {                                                                                        // 14974
        var t2 = getTime();                                                                                            // 14975
        if (t2 - t >= duration) {                                                                                      // 14976
            fn.apply(this, arguments);                                                                                 // 14977
            FamousEngine.removeListener(_event, callback);                                                             // 14978
        }                                                                                                              // 14979
    };                                                                                                                 // 14980
    return addTimerFunction(callback);                                                                                 // 14981
}                                                                                                                      // 14982
                                                                                                                       // 14983
/**                                                                                                                    // 14984
 * Wraps a function to be invoked after a certain amount of time.                                                      // 14985
 *  After a set duration has passed, it executes the function and                                                      // 14986
 *  resets the execution time.                                                                                         // 14987
 *                                                                                                                     // 14988
 * @method setInterval                                                                                                 // 14989
 *                                                                                                                     // 14990
 * @param {function} fn function to be run after a specified duration                                                  // 14991
 * @param {number} duration interval to execute function in milliseconds                                               // 14992
 *                                                                                                                     // 14993
 * @return {function} function passed in as parameter                                                                  // 14994
 */                                                                                                                    // 14995
function setInterval(fn, duration) {                                                                                   // 14996
    var t = getTime();                                                                                                 // 14997
    var callback = function() {                                                                                        // 14998
        var t2 = getTime();                                                                                            // 14999
        if (t2 - t >= duration) {                                                                                      // 15000
            fn.apply(this, arguments);                                                                                 // 15001
            t = getTime();                                                                                             // 15002
        }                                                                                                              // 15003
    };                                                                                                                 // 15004
    return addTimerFunction(callback);                                                                                 // 15005
}                                                                                                                      // 15006
                                                                                                                       // 15007
/**                                                                                                                    // 15008
 * Wraps a function to be invoked after a certain amount of prerender ticks.                                           // 15009
 *  Similar use to setTimeout but tied to the engine's run speed.                                                      // 15010
 *                                                                                                                     // 15011
 * @method after                                                                                                       // 15012
 *                                                                                                                     // 15013
 * @param {function} fn function to be run after a specified amount of ticks                                           // 15014
 * @param {number} numTicks number of prerender frames to wait                                                         // 15015
 *                                                                                                                     // 15016
 * @return {function} function passed in as parameter                                                                  // 15017
 */                                                                                                                    // 15018
function after(fn, numTicks) {                                                                                         // 15019
    if (numTicks === undefined) return undefined;                                                                      // 15020
    var callback = function() {                                                                                        // 15021
        numTicks--;                                                                                                    // 15022
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 15023
            fn.apply(this, arguments);                                                                                 // 15024
            clear(callback);                                                                                           // 15025
        }                                                                                                              // 15026
    };                                                                                                                 // 15027
    return addTimerFunction(callback);                                                                                 // 15028
}                                                                                                                      // 15029
                                                                                                                       // 15030
/**                                                                                                                    // 15031
 * Wraps a function to be continually invoked after a certain amount of prerender ticks.                               // 15032
 *  Similar use to setInterval but tied to the engine's run speed.                                                     // 15033
 *                                                                                                                     // 15034
 * @method every                                                                                                       // 15035
 *                                                                                                                     // 15036
 * @param {function} fn function to be run after a specified amount of ticks                                           // 15037
 * @param {number} numTicks number of prerender frames to wait                                                         // 15038
 *                                                                                                                     // 15039
 * @return {function} function passed in as parameter                                                                  // 15040
 */                                                                                                                    // 15041
function every(fn, numTicks) {                                                                                         // 15042
    numTicks = numTicks || 1;                                                                                          // 15043
    var initial = numTicks;                                                                                            // 15044
    var callback = function() {                                                                                        // 15045
        numTicks--;                                                                                                    // 15046
        if (numTicks <= 0) { //in case numTicks is fraction or negative                                                // 15047
            fn.apply(this, arguments);                                                                                 // 15048
            numTicks = initial;                                                                                        // 15049
        }                                                                                                              // 15050
    };                                                                                                                 // 15051
    return addTimerFunction(callback);                                                                                 // 15052
}                                                                                                                      // 15053
                                                                                                                       // 15054
/**                                                                                                                    // 15055
 * Remove a function that gets called every prerender                                                                  // 15056
 *                                                                                                                     // 15057
 * @method clear                                                                                                       // 15058
 *                                                                                                                     // 15059
 * @param {function} fn event linstener                                                                                // 15060
 */                                                                                                                    // 15061
function clear(fn) {                                                                                                   // 15062
    FamousEngine.removeListener(_event, fn);                                                                           // 15063
}                                                                                                                      // 15064
                                                                                                                       // 15065
/**                                                                                                                    // 15066
 * Executes a function after a certain amount of time. Makes sure                                                      // 15067
 *  the function is not run multiple times.                                                                            // 15068
 *                                                                                                                     // 15069
 * @method debounce                                                                                                    // 15070
 *                                                                                                                     // 15071
 * @param {function} func function to run after certain amount of time                                                 // 15072
 * @param {number} wait amount of time                                                                                 // 15073
 *                                                                                                                     // 15074
 * @return {function} function that is not able to debounce                                                            // 15075
 */                                                                                                                    // 15076
function debounce(func, wait) {                                                                                        // 15077
    var timeout;                                                                                                       // 15078
    var ctx;                                                                                                           // 15079
    var timestamp;                                                                                                     // 15080
    var result;                                                                                                        // 15081
    var args;                                                                                                          // 15082
    return function() {                                                                                                // 15083
        ctx = this;                                                                                                    // 15084
        args = arguments;                                                                                              // 15085
        timestamp = getTime();                                                                                         // 15086
                                                                                                                       // 15087
        var fn = function() {                                                                                          // 15088
            var last = getTime - timestamp;                                                                            // 15089
                                                                                                                       // 15090
            if (last < wait) {                                                                                         // 15091
                timeout = setTimeout(fn, wait - last);                                                                 // 15092
            } else {                                                                                                   // 15093
                timeout = null;                                                                                        // 15094
                result = func.apply(ctx, args);                                                                        // 15095
            }                                                                                                          // 15096
        };                                                                                                             // 15097
                                                                                                                       // 15098
        clear(timeout);                                                                                                // 15099
        timeout = setTimeout(fn, wait);                                                                                // 15100
                                                                                                                       // 15101
        return result;                                                                                                 // 15102
    };                                                                                                                 // 15103
}                                                                                                                      // 15104
                                                                                                                       // 15105
module.exports = {                                                                                                     // 15106
    setTimeout : setTimeout,                                                                                           // 15107
    setInterval : setInterval,                                                                                         // 15108
    debounce : debounce,                                                                                               // 15109
    after : after,                                                                                                     // 15110
    every : every,                                                                                                     // 15111
    clear : clear                                                                                                      // 15112
};                                                                                                                     // 15113
},{"../core/Engine":4}],96:[function(_dereq_,module,exports){                                                          // 15114
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15115
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15116
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15117
 *                                                                                                                     // 15118
 * Owner: mark@famo.us                                                                                                 // 15119
 * @license MPL 2.0                                                                                                    // 15120
 * @copyright Famous Industries, Inc. 2014                                                                             // 15121
 */                                                                                                                    // 15122
                                                                                                                       // 15123
                                                                                                                       // 15124
                                                                                                                       // 15125
/**                                                                                                                    // 15126
 * This namespace holds standalone functionality.                                                                      // 15127
 *  Currently includes name mapping for transition curves,                                                             // 15128
 *  name mapping for origin pairs, and the after() function.                                                           // 15129
 *                                                                                                                     // 15130
 * @class Utility                                                                                                      // 15131
 * @static                                                                                                             // 15132
 */                                                                                                                    // 15133
var Utility = {};                                                                                                      // 15134
                                                                                                                       // 15135
/**                                                                                                                    // 15136
 * Table of direction array positions                                                                                  // 15137
 *                                                                                                                     // 15138
 * @property {object} Direction                                                                                        // 15139
 * @final                                                                                                              // 15140
 */                                                                                                                    // 15141
Utility.Direction = {                                                                                                  // 15142
    X: 0,                                                                                                              // 15143
    Y: 1,                                                                                                              // 15144
    Z: 2                                                                                                               // 15145
};                                                                                                                     // 15146
                                                                                                                       // 15147
/**                                                                                                                    // 15148
 * Return wrapper around callback function. Once the wrapper is called N                                               // 15149
 *   times, invoke the callback function. Arguments and scope preserved.                                               // 15150
 *                                                                                                                     // 15151
 * @method after                                                                                                       // 15152
 *                                                                                                                     // 15153
 * @param {number} count number of calls before callback function invoked                                              // 15154
 * @param {Function} callback wrapped callback function                                                                // 15155
 *                                                                                                                     // 15156
 * @return {function} wrapped callback with coundown feature                                                           // 15157
 */                                                                                                                    // 15158
Utility.after = function after(count, callback) {                                                                      // 15159
    var counter = count;                                                                                               // 15160
    return function() {                                                                                                // 15161
        counter--;                                                                                                     // 15162
        if (counter === 0) callback.apply(this, arguments);                                                            // 15163
    };                                                                                                                 // 15164
};                                                                                                                     // 15165
                                                                                                                       // 15166
/**                                                                                                                    // 15167
 * Load a URL and return its contents in a callback                                                                    // 15168
 *                                                                                                                     // 15169
 * @method loadURL                                                                                                     // 15170
 *                                                                                                                     // 15171
 * @param {string} url URL of object                                                                                   // 15172
 * @param {function} callback callback to dispatch with content                                                        // 15173
 */                                                                                                                    // 15174
Utility.loadURL = function loadURL(url, callback) {                                                                    // 15175
    var xhr = new XMLHttpRequest();                                                                                    // 15176
    xhr.onreadystatechange = function onreadystatechange() {                                                           // 15177
        if (this.readyState === 4) {                                                                                   // 15178
            if (callback) callback(this.responseText);                                                                 // 15179
        }                                                                                                              // 15180
    };                                                                                                                 // 15181
    xhr.open('GET', url);                                                                                              // 15182
    xhr.send();                                                                                                        // 15183
};                                                                                                                     // 15184
                                                                                                                       // 15185
/**                                                                                                                    // 15186
 * Create a document fragment from a string of HTML                                                                    // 15187
 *                                                                                                                     // 15188
 * @method createDocumentFragmentFromHTML                                                                              // 15189
 *                                                                                                                     // 15190
 * @param {string} html HTML to convert to DocumentFragment                                                            // 15191
 *                                                                                                                     // 15192
 * @return {DocumentFragment} DocumentFragment representing input HTML                                                 // 15193
 */                                                                                                                    // 15194
Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {                               // 15195
    var element = document.createElement('div');                                                                       // 15196
    element.innerHTML = html;                                                                                          // 15197
    var result = document.createDocumentFragment();                                                                    // 15198
    while (element.hasChildNodes()) result.appendChild(element.firstChild);                                            // 15199
    return result;                                                                                                     // 15200
};                                                                                                                     // 15201
                                                                                                                       // 15202
/*                                                                                                                     // 15203
 *  Deep clone an object.                                                                                              // 15204
 *  @param b {Object} Object to clone                                                                                  // 15205
 *  @return a {Object} Cloned object.                                                                                  // 15206
 */                                                                                                                    // 15207
Utility.clone = function clone(b) {                                                                                    // 15208
    var a;                                                                                                             // 15209
    if (typeof b === 'object') {                                                                                       // 15210
        a = (b instanceof Array) ? [] : {};                                                                            // 15211
        for (var key in b) {                                                                                           // 15212
            if (typeof b[key] === 'object' && b[key] !== null) {                                                       // 15213
                if (b[key] instanceof Array) {                                                                         // 15214
                    a[key] = new Array(b[key].length);                                                                 // 15215
                    for (var i = 0; i < b[key].length; i++) {                                                          // 15216
                        a[key][i] = Utility.clone(b[key][i]);                                                          // 15217
                    }                                                                                                  // 15218
                }                                                                                                      // 15219
                else {                                                                                                 // 15220
                  a[key] = Utility.clone(b[key]);                                                                      // 15221
                }                                                                                                      // 15222
            }                                                                                                          // 15223
            else {                                                                                                     // 15224
                a[key] = b[key];                                                                                       // 15225
            }                                                                                                          // 15226
        }                                                                                                              // 15227
    }                                                                                                                  // 15228
    else {                                                                                                             // 15229
        a = b;                                                                                                         // 15230
    }                                                                                                                  // 15231
    return a;                                                                                                          // 15232
};                                                                                                                     // 15233
                                                                                                                       // 15234
module.exports = Utility;                                                                                              // 15235
},{}],97:[function(_dereq_,module,exports){                                                                            // 15236
module.exports = {                                                                                                     // 15237
  KeyCodes: _dereq_('./KeyCodes'),                                                                                     // 15238
  Timer: _dereq_('./Timer'),                                                                                           // 15239
  Utility: _dereq_('./Utility')                                                                                        // 15240
};                                                                                                                     // 15241
                                                                                                                       // 15242
},{"./KeyCodes":94,"./Timer":95,"./Utility":96}],98:[function(_dereq_,module,exports){                                 // 15243
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15244
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15245
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15246
 *                                                                                                                     // 15247
 * Owner: mike@famo.us                                                                                                 // 15248
 * @license MPL 2.0                                                                                                    // 15249
 * @copyright Famous Industries, Inc. 2014                                                                             // 15250
 */                                                                                                                    // 15251
                                                                                                                       // 15252
var Entity = _dereq_('../core/Entity');                                                                                // 15253
var Transform = _dereq_('../core/Transform');                                                                          // 15254
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15255
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15256
                                                                                                                       // 15257
/**                                                                                                                    // 15258
 * ContextualView is an interface for creating views that need to                                                      // 15259
 *   be aware of their parent's transform, size, and/or origin.                                                        // 15260
 *   Consists of a OptionsManager paired with an input EventHandler                                                    // 15261
 *   and an output EventHandler. Meant to be extended by the developer.                                                // 15262
 * @class ContextualView                                                                                               // 15263
 * @constructor                                                                                                        // 15264
 * @param {Options} [options] An object of configurable options.                                                       // 15265
 */                                                                                                                    // 15266
function ContextualView(options) {                                                                                     // 15267
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS || ContextualView.DEFAULT_OPTIONS);                  // 15268
    this._optionsManager = new OptionsManager(this.options);                                                           // 15269
    if (options) this.setOptions(options);                                                                             // 15270
                                                                                                                       // 15271
    this._eventInput = new EventHandler();                                                                             // 15272
    this._eventOutput = new EventHandler();                                                                            // 15273
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15274
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15275
                                                                                                                       // 15276
    this._id = Entity.register(this);                                                                                  // 15277
}                                                                                                                      // 15278
                                                                                                                       // 15279
ContextualView.DEFAULT_OPTIONS = {};                                                                                   // 15280
                                                                                                                       // 15281
/**                                                                                                                    // 15282
 * Patches the ContextualLayout instance's options with the passed-in ones.                                            // 15283
 *                                                                                                                     // 15284
 * @method setOptions                                                                                                  // 15285
 * @param {Options} options An object of configurable options for the ContextualLayout instance.                       // 15286
 */                                                                                                                    // 15287
ContextualView.prototype.setOptions = function setOptions(options) {                                                   // 15288
    return this._optionsManager.setOptions(options);                                                                   // 15289
};                                                                                                                     // 15290
                                                                                                                       // 15291
/**                                                                                                                    // 15292
 * Returns ContextualLayout instance's options.                                                                        // 15293
 *                                                                                                                     // 15294
 * @method setOptions                                                                                                  // 15295
 * @param {string} key                                                                                                 // 15296
 * @return {Options} options The instance's object of configurable options.                                            // 15297
 */                                                                                                                    // 15298
ContextualView.prototype.getOptions = function getOptions(key) {                                                       // 15299
    return this._optionsManager.getOptions(key);                                                                       // 15300
};                                                                                                                     // 15301
                                                                                                                       // 15302
/**                                                                                                                    // 15303
 * Return the registers Entity id for the ContextualView.                                                              // 15304
 *                                                                                                                     // 15305
 * @private                                                                                                            // 15306
 * @method render                                                                                                      // 15307
 * @return {Number} Registered Entity id                                                                               // 15308
 */                                                                                                                    // 15309
ContextualView.prototype.render = function render() {                                                                  // 15310
    return this._id;                                                                                                   // 15311
};                                                                                                                     // 15312
                                                                                                                       // 15313
/**                                                                                                                    // 15314
 * Apply changes from this component to the corresponding document element.                                            // 15315
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15316
 * and matrix transforms.                                                                                              // 15317
 *                                                                                                                     // 15318
 * @private                                                                                                            // 15319
 * @method commit                                                                                                      // 15320
 * @param {Context} context commit context                                                                             // 15321
 */                                                                                                                    // 15322
ContextualView.prototype.commit = function commit(context) {};                                                         // 15323
                                                                                                                       // 15324
module.exports = ContextualView;                                                                                       // 15325
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15}],99:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15327
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15328
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15329
 *                                                                                                                     // 15330
 * Owner: felix@famo.us                                                                                                // 15331
 * @license MPL 2.0                                                                                                    // 15332
 * @copyright Famous Industries, Inc. 2014                                                                             // 15333
 */                                                                                                                    // 15334
                                                                                                                       // 15335
var Transform = _dereq_('../core/Transform');                                                                          // 15336
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15337
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15338
var Utility = _dereq_('../utilities/Utility');                                                                         // 15339
var SequentialLayout = _dereq_('./SequentialLayout');                                                                  // 15340
                                                                                                                       // 15341
/**                                                                                                                    // 15342
 * A Sequential Layout that can be opened and closed with animations.                                                  // 15343
 *                                                                                                                     // 15344
 *   Takes the same options as SequentialLayout                                                                        // 15345
 *   as well as options for the open/close transition                                                                  // 15346
 *   and the rotation you want your Deck instance to layout in.                                                        // 15347
 *                                                                                                                     // 15348
 * @class Deck                                                                                                         // 15349
 * @constructor                                                                                                        // 15350
 * @extends SequentialLayout                                                                                           // 15351
 *                                                                                                                     // 15352
 * @param {Options} [options] An object of configurable options                                                        // 15353
 * @param {Transition} [options.transition={duration: 500, curve: 'easeOutBounce'}                                     // 15354
 *   The transition that executes upon opening or closing your deck instance.                                          // 15355
 * @param {Number} [stackRotation=0] The amount of rotation applied to the propogation                                 // 15356
 *   of the Deck instance's stack of renderables.                                                                      // 15357
 * @param {Object} [options.transition] A transition object for changing between states.                               // 15358
 * @param {Number} [options.direction] axis of expansion (Utility.Direction.X or .Y)                                   // 15359
 */                                                                                                                    // 15360
function Deck(options) {                                                                                               // 15361
    SequentialLayout.apply(this, arguments);                                                                           // 15362
    this.state = new Transitionable(0);                                                                                // 15363
    this._isOpen = false;                                                                                              // 15364
                                                                                                                       // 15365
    this.setOutputFunction(function(input, offset, index) {                                                            // 15366
        var state = _getState.call(this);                                                                              // 15367
        var positionMatrix = (this.options.direction === Utility.Direction.X) ?                                        // 15368
            Transform.translate(state * offset, 0, 0.001 * (state - 1) * offset) :                                     // 15369
            Transform.translate(0, state * offset, 0.001 * (state - 1) * offset);                                      // 15370
        var output = input.render();                                                                                   // 15371
        if (this.options.stackRotation) {                                                                              // 15372
            var amount = this.options.stackRotation * index * (1 - state);                                             // 15373
            output = {                                                                                                 // 15374
                transform: Transform.rotateZ(amount),                                                                  // 15375
                origin: [0.5, 0.5],                                                                                    // 15376
                target: output                                                                                         // 15377
            };                                                                                                         // 15378
        }                                                                                                              // 15379
        return {                                                                                                       // 15380
            transform: positionMatrix,                                                                                 // 15381
            size: input.getSize(),                                                                                     // 15382
            target: output                                                                                             // 15383
        };                                                                                                             // 15384
    });                                                                                                                // 15385
}                                                                                                                      // 15386
Deck.prototype = Object.create(SequentialLayout.prototype);                                                            // 15387
Deck.prototype.constructor = Deck;                                                                                     // 15388
                                                                                                                       // 15389
Deck.DEFAULT_OPTIONS = OptionsManager.patch(SequentialLayout.DEFAULT_OPTIONS, {                                        // 15390
    transition: {                                                                                                      // 15391
        curve: 'easeOutBounce',                                                                                        // 15392
        duration: 500                                                                                                  // 15393
    },                                                                                                                 // 15394
    stackRotation: 0                                                                                                   // 15395
});                                                                                                                    // 15396
                                                                                                                       // 15397
/**                                                                                                                    // 15398
 * Returns the width and the height of the Deck instance.                                                              // 15399
 *                                                                                                                     // 15400
 * @method getSize                                                                                                     // 15401
 * @return {Array} A two value array of Deck's current width and height (in that order).                               // 15402
 *   Scales as Deck opens and closes.                                                                                  // 15403
 */                                                                                                                    // 15404
Deck.prototype.getSize = function getSize() {                                                                          // 15405
    var originalSize = SequentialLayout.prototype.getSize.apply(this, arguments);                                      // 15406
    var firstSize = this._items ? this._items.get().getSize() : [0, 0];                                                // 15407
    if (!firstSize) firstSize = [0, 0];                                                                                // 15408
    var state = _getState.call(this);                                                                                  // 15409
    var invState = 1 - state;                                                                                          // 15410
    return [firstSize[0] * invState + originalSize[0] * state, firstSize[1] * invState + originalSize[1] * state];     // 15411
};                                                                                                                     // 15412
                                                                                                                       // 15413
function _getState(returnFinal) {                                                                                      // 15414
    if (returnFinal) return this._isOpen ? 1 : 0;                                                                      // 15415
    else return this.state.get();                                                                                      // 15416
}                                                                                                                      // 15417
                                                                                                                       // 15418
function _setState(pos, transition, callback) {                                                                        // 15419
    this.state.halt();                                                                                                 // 15420
    this.state.set(pos, transition, callback);                                                                         // 15421
}                                                                                                                      // 15422
                                                                                                                       // 15423
/**                                                                                                                    // 15424
 * An accesor method to find out if the messaged Deck instance is open or closed.                                      // 15425
 *                                                                                                                     // 15426
 * @method isOpen                                                                                                      // 15427
 * @return {Boolean} Returns true if the instance is open or false if it's closed.                                     // 15428
 */                                                                                                                    // 15429
Deck.prototype.isOpen = function isOpen() {                                                                            // 15430
    return this._isOpen;                                                                                               // 15431
};                                                                                                                     // 15432
                                                                                                                       // 15433
/**                                                                                                                    // 15434
 * Sets the Deck instance to an open state.                                                                            // 15435
 *                                                                                                                     // 15436
 * @method open                                                                                                        // 15437
 * @param {function} [callback] Executes after transitioning to a fully open state.                                    // 15438
 */                                                                                                                    // 15439
Deck.prototype.open = function open(callback) {                                                                        // 15440
    this._isOpen = true;                                                                                               // 15441
   _setState.call(this, 1, this.options.transition, callback);                                                         // 15442
};                                                                                                                     // 15443
                                                                                                                       // 15444
/**                                                                                                                    // 15445
 * Sets the Deck instance to an open state.                                                                            // 15446
 *                                                                                                                     // 15447
 * @method close                                                                                                       // 15448
 * @param {function} [callback] Executes after transitioning to a fully closed state.                                  // 15449
 */                                                                                                                    // 15450
Deck.prototype.close = function close(callback) {                                                                      // 15451
    this._isOpen = false;                                                                                              // 15452
    _setState.call(this, 0, this.options.transition, callback);                                                        // 15453
};                                                                                                                     // 15454
                                                                                                                       // 15455
/**                                                                                                                    // 15456
 * Sets the Deck instance from its current state to the opposite state.                                                // 15457
 *                                                                                                                     // 15458
 * @method close                                                                                                       // 15459
 * @param {function} [callback] Executes after transitioning to the toggled state.                                     // 15460
 */                                                                                                                    // 15461
Deck.prototype.toggle = function toggle(callback) {                                                                    // 15462
    if (this._isOpen) this.close(callback);                                                                            // 15463
    else this.open(callback);                                                                                          // 15464
};                                                                                                                     // 15465
                                                                                                                       // 15466
module.exports = Deck;                                                                                                 // 15467
},{"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":89,"../utilities/Utility":96,"./SequentialLayout":111}],100:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15469
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15470
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15471
 *                                                                                                                     // 15472
 * Owner: david@famo.us                                                                                                // 15473
 * @license MPL 2.0                                                                                                    // 15474
 * @copyright Famous Industries, Inc. 2014                                                                             // 15475
 */                                                                                                                    // 15476
                                                                                                                       // 15477
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 15478
var Transform = _dereq_('../core/Transform');                                                                          // 15479
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15480
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15481
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15482
                                                                                                                       // 15483
/**                                                                                                                    // 15484
 * A layout which will arrange two renderables: a featured content, and a                                              // 15485
 *   concealed drawer. The drawer can be revealed from any side of the                                                 // 15486
 *   content (left, top, right, bottom) by dragging the content.                                                       // 15487
 *                                                                                                                     // 15488
 *   A @link{Sync} must be piped in to recieve user input.                                                             // 15489
 *                                                                                                                     // 15490
 *   Events:                                                                                                           // 15491
 *     broadcasts: 'open', 'close'                                                                                     // 15492
 *     listens to: 'update', 'end'                                                                                     // 15493
 *                                                                                                                     // 15494
 * @class DrawerLayout                                                                                                 // 15495
 *                                                                                                                     // 15496
 * @constructor                                                                                                        // 15497
 *                                                                                                                     // 15498
 * @param [options] {Object}                                An object of configurable options                          // 15499
 * @param [options.side=DrawerLayout.SIDES.LEFT] {Number}   The side of the content the drawer is placed.              // 15500
 *                                                          Choice of DrawerLayout.SIDES.LEFT/RIGHT/TOP/BOTTOM         // 15501
 * @param [options.drawerLength=0] {Number}                 The default length of the drawer                           // 15502
 * @param [options.velocityThreshold=0] {Number}            The velocity threshold to trigger a toggle                 // 15503
 * @param [options.positionThreshold=0] {Number}            The position threshold to trigger a toggle                 // 15504
 * @param [options.transition=true] {Boolean|Object}        The toggle transition                                      // 15505
 */                                                                                                                    // 15506
function DrawerLayout(options) {                                                                                       // 15507
    this.options = Object.create(DrawerLayout.DEFAULT_OPTIONS);                                                        // 15508
    this._optionsManager = new OptionsManager(this.options);                                                           // 15509
    if (options) this.setOptions(options);                                                                             // 15510
                                                                                                                       // 15511
    this._position = new Transitionable(0);                                                                            // 15512
    this._direction = _getDirectionFromSide(this.options.side);                                                        // 15513
    this._orientation = _getOrientationFromSide(this.options.side);                                                    // 15514
    this._isOpen = false;                                                                                              // 15515
    this._cachedLength = 0;                                                                                            // 15516
                                                                                                                       // 15517
    this.drawer = new RenderNode();                                                                                    // 15518
    this.content = new RenderNode();                                                                                   // 15519
                                                                                                                       // 15520
    this._eventInput = new EventHandler();                                                                             // 15521
    this._eventOutput = new EventHandler();                                                                            // 15522
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15523
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15524
                                                                                                                       // 15525
    this._eventInput.on('update', _handleUpdate.bind(this));                                                           // 15526
    this._eventInput.on('end', _handleEnd.bind(this));                                                                 // 15527
}                                                                                                                      // 15528
                                                                                                                       // 15529
var DIRECTION_X = 0;                                                                                                   // 15530
var DIRECTION_Y = 1;                                                                                                   // 15531
                                                                                                                       // 15532
DrawerLayout.SIDES = {                                                                                                 // 15533
    LEFT   : 0,                                                                                                        // 15534
    TOP    : 1,                                                                                                        // 15535
    RIGHT  : 2,                                                                                                        // 15536
    BOTTOM : 3                                                                                                         // 15537
};                                                                                                                     // 15538
                                                                                                                       // 15539
DrawerLayout.DEFAULT_OPTIONS = {                                                                                       // 15540
    side: DrawerLayout.SIDES.LEFT,                                                                                     // 15541
    drawerLength : 0,                                                                                                  // 15542
    velocityThreshold : 0,                                                                                             // 15543
    positionThreshold : 0,                                                                                             // 15544
    transition : true                                                                                                  // 15545
};                                                                                                                     // 15546
                                                                                                                       // 15547
function _getDirectionFromSide(side) {                                                                                 // 15548
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15549
    return (side === SIDES.LEFT || side === SIDES.RIGHT) ? DIRECTION_X : DIRECTION_Y;                                  // 15550
}                                                                                                                      // 15551
                                                                                                                       // 15552
function _getOrientationFromSide(side) {                                                                               // 15553
    var SIDES = DrawerLayout.SIDES;                                                                                    // 15554
    return (side === SIDES.LEFT || side === SIDES.TOP) ? 1 : -1;                                                       // 15555
}                                                                                                                      // 15556
                                                                                                                       // 15557
function _resolveNodeSize(node) {                                                                                      // 15558
    var options = this.options;                                                                                        // 15559
    var size;                                                                                                          // 15560
    if (options.drawerLength) size = options.drawerLength;                                                             // 15561
    else {                                                                                                             // 15562
        var nodeSize = node.getSize();                                                                                 // 15563
        size = nodeSize ? nodeSize[this._direction] : options.drawerLength;                                            // 15564
    }                                                                                                                  // 15565
    return this._orientation * size;                                                                                   // 15566
}                                                                                                                      // 15567
                                                                                                                       // 15568
function _handleUpdate(data) {                                                                                         // 15569
    var newPosition = this.getPosition() + data.delta;                                                                 // 15570
                                                                                                                       // 15571
    var MIN_LENGTH;                                                                                                    // 15572
    var MAX_LENGTH;                                                                                                    // 15573
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15574
                                                                                                                       // 15575
    if (this._orientation === 1){                                                                                      // 15576
        MIN_LENGTH = 0;                                                                                                // 15577
        MAX_LENGTH = this._cachedLength;                                                                               // 15578
    }                                                                                                                  // 15579
    else {                                                                                                             // 15580
        MIN_LENGTH = this._cachedLength;                                                                               // 15581
        MAX_LENGTH = 0;                                                                                                // 15582
    }                                                                                                                  // 15583
                                                                                                                       // 15584
    if (newPosition > MAX_LENGTH) newPosition = MAX_LENGTH;                                                            // 15585
    else if (newPosition < MIN_LENGTH) newPosition = MIN_LENGTH;                                                       // 15586
                                                                                                                       // 15587
    this.setPosition(newPosition);                                                                                     // 15588
}                                                                                                                      // 15589
                                                                                                                       // 15590
function _handleEnd(data) {                                                                                            // 15591
    var velocity = data.velocity;                                                                                      // 15592
    var position = this._orientation * this.getPosition();                                                             // 15593
    var options = this.options;                                                                                        // 15594
                                                                                                                       // 15595
    var MAX_LENGTH = this._orientation * this._cachedLength;                                                           // 15596
    var positionThreshold = options.positionThreshold || MAX_LENGTH / 2;                                               // 15597
    var velocityThreshold = options.velocityThreshold;                                                                 // 15598
                                                                                                                       // 15599
    if (options.transition instanceof Object)                                                                          // 15600
        options.transition.velocity = data.velocity;                                                                   // 15601
                                                                                                                       // 15602
    if (position === 0) {                                                                                              // 15603
        this._isOpen = false;                                                                                          // 15604
        return;                                                                                                        // 15605
    }                                                                                                                  // 15606
                                                                                                                       // 15607
    if (position === MAX_LENGTH) {                                                                                     // 15608
        this._isOpen = true;                                                                                           // 15609
        return;                                                                                                        // 15610
    }                                                                                                                  // 15611
                                                                                                                       // 15612
    var shouldToggle = Math.abs(velocity) > velocityThreshold || (!this._isOpen && position > positionThreshold) || (this._isOpen && position < positionThreshold);
    if (shouldToggle) this.toggle();                                                                                   // 15614
    else this.reset();                                                                                                 // 15615
}                                                                                                                      // 15616
                                                                                                                       // 15617
/**                                                                                                                    // 15618
 * Patches the DrawerLayout instance's options with the passed-in ones.                                                // 15619
 *                                                                                                                     // 15620
 * @method setOptions                                                                                                  // 15621
 * @param options {Object} options                                                                                     // 15622
 */                                                                                                                    // 15623
DrawerLayout.prototype.setOptions = function setOptions(options) {                                                     // 15624
    this._optionsManager.setOptions(options);                                                                          // 15625
    if (options.side !== undefined) {                                                                                  // 15626
        this._direction = _getDirectionFromSide(options.side);                                                         // 15627
        this._orientation = _getOrientationFromSide(options.side);                                                     // 15628
    }                                                                                                                  // 15629
};                                                                                                                     // 15630
                                                                                                                       // 15631
/**                                                                                                                    // 15632
 * Reveals the drawer with a transition                                                                                // 15633
 *   Emits an 'open' event when an opening transition has been committed to.                                           // 15634
 *                                                                                                                     // 15635
 * @method open                                                                                                        // 15636
 * @param [transition] {Boolean|Object} transition definition                                                          // 15637
 * @param [callback] {Function}         callback                                                                       // 15638
 */                                                                                                                    // 15639
DrawerLayout.prototype.open = function open(transition, callback) {                                                    // 15640
    if (transition instanceof Function) callback = transition;                                                         // 15641
    if (transition === undefined) transition = this.options.transition;                                                // 15642
    this._cachedLength = _resolveNodeSize.call(this, this.drawer);                                                     // 15643
    this.setPosition(this._cachedLength, transition, callback);                                                        // 15644
    if (!this._isOpen) {                                                                                               // 15645
        this._isOpen = true;                                                                                           // 15646
        this._eventOutput.emit('open');                                                                                // 15647
    }                                                                                                                  // 15648
};                                                                                                                     // 15649
                                                                                                                       // 15650
/**                                                                                                                    // 15651
 * Conceals the drawer with a transition                                                                               // 15652
 *   Emits a 'close' event when an closing transition has been committed to.                                           // 15653
 *                                                                                                                     // 15654
 * @method close                                                                                                       // 15655
 * @param [transition] {Boolean|Object} transition definition                                                          // 15656
 * @param [callback] {Function}         callback                                                                       // 15657
 */                                                                                                                    // 15658
DrawerLayout.prototype.close = function close(transition, callback) {                                                  // 15659
    if (transition instanceof Function) callback = transition;                                                         // 15660
    if (transition === undefined) transition = this.options.transition;                                                // 15661
    this.setPosition(0, transition, callback);                                                                         // 15662
    if (this._isOpen){                                                                                                 // 15663
        this._isOpen = false;                                                                                          // 15664
        this._eventOutput.emit('close');                                                                               // 15665
    }                                                                                                                  // 15666
};                                                                                                                     // 15667
                                                                                                                       // 15668
/**                                                                                                                    // 15669
 * Sets the position in pixels for the content's displacement                                                          // 15670
 *                                                                                                                     // 15671
 * @method setPosition                                                                                                 // 15672
 * @param position {Number}             position                                                                       // 15673
 * @param [transition] {Boolean|Object} transition definition                                                          // 15674
 * @param [callback] {Function}         callback                                                                       // 15675
 */                                                                                                                    // 15676
DrawerLayout.prototype.setPosition = function setPosition(position, transition, callback) {                            // 15677
    if (this._position.isActive()) this._position.halt();                                                              // 15678
    this._position.set(position, transition, callback);                                                                // 15679
};                                                                                                                     // 15680
                                                                                                                       // 15681
/**                                                                                                                    // 15682
 * Gets the position in pixels for the content's displacement                                                          // 15683
 *                                                                                                                     // 15684
 * @method getPosition                                                                                                 // 15685
 * @return position {Number} position                                                                                  // 15686
 */                                                                                                                    // 15687
DrawerLayout.prototype.getPosition = function getPosition() {                                                          // 15688
    return this._position.get();                                                                                       // 15689
};                                                                                                                     // 15690
                                                                                                                       // 15691
/**                                                                                                                    // 15692
 * Sets the progress (between 0 and 1) for the content's displacement                                                  // 15693
 *                                                                                                                     // 15694
 * @method setProgress                                                                                                 // 15695
 * @param progress {Number}             position                                                                       // 15696
 * @param [transition] {Boolean|Object} transition definition                                                          // 15697
 * @param [callback] {Function}         callback                                                                       // 15698
 */                                                                                                                    // 15699
DrawerLayout.prototype.setProgress = function setProgress(progress, transition, callback) {                            // 15700
    return this._position.set(progress * this._cachedLength, transition, callback);                                    // 15701
};                                                                                                                     // 15702
                                                                                                                       // 15703
/**                                                                                                                    // 15704
 * Gets the progress (between 0 and 1) for the content's displacement                                                  // 15705
 *                                                                                                                     // 15706
 * @method getProgress                                                                                                 // 15707
 * @return position {Number} position                                                                                  // 15708
 */                                                                                                                    // 15709
DrawerLayout.prototype.getProgress = function getProgress() {                                                          // 15710
    return this._position.get() / this._cachedLength;                                                                  // 15711
};                                                                                                                     // 15712
                                                                                                                       // 15713
/**                                                                                                                    // 15714
 * Toggles between open and closed states                                                                              // 15715
 *                                                                                                                     // 15716
 * @method toggle                                                                                                      // 15717
 * @param [transition] {Boolean|Object} transition definition                                                          // 15718
 */                                                                                                                    // 15719
DrawerLayout.prototype.toggle = function toggle(transition) {                                                          // 15720
    if (this._isOpen) this.close(transition);                                                                          // 15721
    else this.open(transition);                                                                                        // 15722
};                                                                                                                     // 15723
                                                                                                                       // 15724
/**                                                                                                                    // 15725
 * Resets to last state of being open or closed                                                                        // 15726
 *                                                                                                                     // 15727
 * @method reset                                                                                                       // 15728
 * @param [transition] {Boolean|Object} transition definition                                                          // 15729
 */                                                                                                                    // 15730
DrawerLayout.prototype.reset = function reset(transition) {                                                            // 15731
    if (this._isOpen) this.open(transition);                                                                           // 15732
    else this.close(transition);                                                                                       // 15733
};                                                                                                                     // 15734
                                                                                                                       // 15735
/**                                                                                                                    // 15736
 * Returns if drawer is committed to being open or closed                                                              // 15737
 *                                                                                                                     // 15738
 * @method isOpen                                                                                                      // 15739
 * @return {Boolean}                                                                                                   // 15740
 */                                                                                                                    // 15741
DrawerLayout.prototype.isOpen = function isOpen(transition) {                                                          // 15742
    return this._isOpen;                                                                                               // 15743
};                                                                                                                     // 15744
                                                                                                                       // 15745
/**                                                                                                                    // 15746
 * Generates a Render Spec from the contents of this component                                                         // 15747
 *                                                                                                                     // 15748
 * @private                                                                                                            // 15749
 * @method render                                                                                                      // 15750
 * @return {Spec}                                                                                                      // 15751
 */                                                                                                                    // 15752
DrawerLayout.prototype.render = function render() {                                                                    // 15753
    var position = this.getPosition();                                                                                 // 15754
                                                                                                                       // 15755
    // clamp transition on close                                                                                       // 15756
    if (!this._isOpen && (position < 0 && this._orientation === 1) || (position > 0 && this._orientation === -1)) {    // 15757
        position = 0;                                                                                                  // 15758
        this.setPosition(position);                                                                                    // 15759
    }                                                                                                                  // 15760
                                                                                                                       // 15761
    var contentTransform = (this._direction === DIRECTION_X)                                                           // 15762
        ? Transform.translate(position, 0, 0)                                                                          // 15763
        : Transform.translate(0, position, 0);                                                                         // 15764
                                                                                                                       // 15765
    return [                                                                                                           // 15766
        {                                                                                                              // 15767
            transform : Transform.behind,                                                                              // 15768
            target: this.drawer.render()                                                                               // 15769
        },                                                                                                             // 15770
        {                                                                                                              // 15771
            transform: contentTransform,                                                                               // 15772
            target: this.content.render()                                                                              // 15773
        }                                                                                                              // 15774
    ];                                                                                                                 // 15775
};                                                                                                                     // 15776
                                                                                                                       // 15777
module.exports = DrawerLayout;                                                                                         // 15778
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":89}],101:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15780
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15781
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15782
 *                                                                                                                     // 15783
 * Owner: felix@famo.us                                                                                                // 15784
 * @license MPL 2.0                                                                                                    // 15785
 * @copyright Famous Industries, Inc. 2014                                                                             // 15786
 */                                                                                                                    // 15787
                                                                                                                       // 15788
var CachedMap = _dereq_('../transitions/CachedMap');                                                                   // 15789
var Entity = _dereq_('../core/Entity');                                                                                // 15790
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15791
var Transform = _dereq_('../core/Transform');                                                                          // 15792
var RenderController = _dereq_('./RenderController');                                                                  // 15793
                                                                                                                       // 15794
/**                                                                                                                    // 15795
 * Container which handles swapping renderables from the edge of its parent context.                                   // 15796
 * @class EdgeSwapper                                                                                                  // 15797
 * @constructor                                                                                                        // 15798
 * @param {Options} [options] An object of configurable options.                                                       // 15799
 *   Takes the same options as RenderController.                                                                       // 15800
 * @uses RenderController                                                                                              // 15801
 */                                                                                                                    // 15802
function EdgeSwapper(options) {                                                                                        // 15803
    this._currentTarget = null;                                                                                        // 15804
    this._size = [undefined, undefined];                                                                               // 15805
                                                                                                                       // 15806
    this._controller = new RenderController(options);                                                                  // 15807
    this._controller.inTransformFrom(CachedMap.create(_transformMap.bind(this, 0.0001)));                              // 15808
    this._controller.outTransformFrom(CachedMap.create(_transformMap.bind(this, -0.0001)));                            // 15809
                                                                                                                       // 15810
    this._eventInput = new EventHandler();                                                                             // 15811
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 15812
                                                                                                                       // 15813
    this._entityId = Entity.register(this);                                                                            // 15814
    if (options) this.setOptions(options);                                                                             // 15815
}                                                                                                                      // 15816
                                                                                                                       // 15817
function _transformMap(zMax, progress) {                                                                               // 15818
    return Transform.translate(this._size[0] * (1 - progress), 0, zMax * (1 - progress));                              // 15819
}                                                                                                                      // 15820
                                                                                                                       // 15821
/**                                                                                                                    // 15822
 * Displays the passed-in content with the EdgeSwapper instance's default transition.                                  // 15823
 *                                                                                                                     // 15824
 * @method show                                                                                                        // 15825
 * @param {Object} content The renderable you want to display.                                                         // 15826
 */                                                                                                                    // 15827
EdgeSwapper.prototype.show = function show(content) {                                                                  // 15828
    // stop sending input to old target                                                                                // 15829
    if (this._currentTarget) this._eventInput.unpipe(this._currentTarget);                                             // 15830
                                                                                                                       // 15831
    this._currentTarget = content;                                                                                     // 15832
                                                                                                                       // 15833
    // start sending input to new target                                                                               // 15834
    if (this._currentTarget && this._currentTarget.trigger) this._eventInput.pipe(this._currentTarget);                // 15835
                                                                                                                       // 15836
    this._controller.show.apply(this._controller, arguments);                                                          // 15837
};                                                                                                                     // 15838
                                                                                                                       // 15839
/**                                                                                                                    // 15840
 * Patches the EdgeSwapper instance's options with the passed-in ones.                                                 // 15841
 *                                                                                                                     // 15842
 * @method setOptions                                                                                                  // 15843
 * @param {Options} options An object of configurable options for the Edgeswapper instance.                            // 15844
 */                                                                                                                    // 15845
EdgeSwapper.prototype.setOptions = function setOptions(options) {                                                      // 15846
    this._controller.setOptions(options);                                                                              // 15847
};                                                                                                                     // 15848
                                                                                                                       // 15849
/**                                                                                                                    // 15850
 * Generate a render spec from the contents of this component.                                                         // 15851
 *                                                                                                                     // 15852
 * @private                                                                                                            // 15853
 * @method render                                                                                                      // 15854
 * @return {number} Render spec for this component                                                                     // 15855
 */                                                                                                                    // 15856
EdgeSwapper.prototype.render = function render() {                                                                     // 15857
    return this._entityId;                                                                                             // 15858
};                                                                                                                     // 15859
                                                                                                                       // 15860
/**                                                                                                                    // 15861
 * Apply changes from this component to the corresponding document element.                                            // 15862
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 15863
 * and matrix transforms.                                                                                              // 15864
 *                                                                                                                     // 15865
 * @private                                                                                                            // 15866
 * @method commit                                                                                                      // 15867
 * @param {Context} context commit context                                                                             // 15868
 */                                                                                                                    // 15869
EdgeSwapper.prototype.commit = function commit(context) {                                                              // 15870
    this._size[0] = context.size[0];                                                                                   // 15871
    this._size[1] = context.size[1];                                                                                   // 15872
                                                                                                                       // 15873
    return {                                                                                                           // 15874
        transform: context.transform,                                                                                  // 15875
        opacity: context.opacity,                                                                                      // 15876
        origin: context.origin,                                                                                        // 15877
        size: context.size,                                                                                            // 15878
        target: this._controller.render()                                                                              // 15879
    };                                                                                                                 // 15880
};                                                                                                                     // 15881
                                                                                                                       // 15882
module.exports = EdgeSwapper;                                                                                          // 15883
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Transform":15,"../transitions/CachedMap":84,"./RenderController":107}],102:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 15885
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 15886
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 15887
 *                                                                                                                     // 15888
 * Owner: mike@famo.us                                                                                                 // 15889
 * @license MPL 2.0                                                                                                    // 15890
 * @copyright Famous Industries, Inc. 2014                                                                             // 15891
 */                                                                                                                    // 15892
                                                                                                                       // 15893
var Entity = _dereq_('../core/Entity');                                                                                // 15894
var Transform = _dereq_('../core/Transform');                                                                          // 15895
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 15896
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 15897
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 15898
                                                                                                                       // 15899
/**                                                                                                                    // 15900
 * A layout which divides a context into sections based on a proportion                                                // 15901
 *   of the total sum of ratios.  FlexibleLayout can either lay renderables                                            // 15902
 *   out vertically or horizontally.                                                                                   // 15903
 * @class FlexibleLayout                                                                                               // 15904
 * @constructor                                                                                                        // 15905
 * @param {Options} [options] An object of configurable options.                                                       // 15906
 * @param {Number} [options.direction=0] Direction the FlexibleLayout instance should lay out renderables.             // 15907
 * @param {Transition} [options.transition=false] The transiton that controls the FlexibleLayout instance's reflow.    // 15908
 * @param {Ratios} [options.ratios=[]] The proportions for the renderables to maintain                                 // 15909
 */                                                                                                                    // 15910
function FlexibleLayout(options) {                                                                                     // 15911
    this.options = Object.create(FlexibleLayout.DEFAULT_OPTIONS);                                                      // 15912
    this.optionsManager = new OptionsManager(this.options);                                                            // 15913
    if (options) this.setOptions(options);                                                                             // 15914
                                                                                                                       // 15915
    this.id = Entity.register(this);                                                                                   // 15916
                                                                                                                       // 15917
    this._ratios = new Transitionable(this.options.ratios);                                                            // 15918
    this._nodes = [];                                                                                                  // 15919
    this._size = [0, 0];                                                                                               // 15920
                                                                                                                       // 15921
    this._cachedDirection = null;                                                                                      // 15922
    this._cachedLengths = [];                                                                                          // 15923
    this._cachedTransforms = null;                                                                                     // 15924
    this._ratiosDirty = false;                                                                                         // 15925
                                                                                                                       // 15926
    this._eventOutput = new EventHandler();                                                                            // 15927
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 15928
}                                                                                                                      // 15929
                                                                                                                       // 15930
FlexibleLayout.DIRECTION_X = 0;                                                                                        // 15931
FlexibleLayout.DIRECTION_Y = 1;                                                                                        // 15932
                                                                                                                       // 15933
FlexibleLayout.DEFAULT_OPTIONS = {                                                                                     // 15934
    direction: FlexibleLayout.DIRECTION_X,                                                                             // 15935
    transition: false,                                                                                                 // 15936
    ratios : []                                                                                                        // 15937
};                                                                                                                     // 15938
                                                                                                                       // 15939
function _reflow(ratios, length, direction) {                                                                          // 15940
    var currTransform;                                                                                                 // 15941
    var translation = 0;                                                                                               // 15942
    var flexLength = length;                                                                                           // 15943
    var ratioSum = 0;                                                                                                  // 15944
    var ratio;                                                                                                         // 15945
    var node;                                                                                                          // 15946
    var i;                                                                                                             // 15947
                                                                                                                       // 15948
    this._cachedLengths = [];                                                                                          // 15949
    this._cachedTransforms = [];                                                                                       // 15950
                                                                                                                       // 15951
    for (i = 0; i < ratios.length; i++){                                                                               // 15952
        ratio = ratios[i];                                                                                             // 15953
        node = this._nodes[i];                                                                                         // 15954
                                                                                                                       // 15955
        if (typeof ratio !== 'number')                                                                                 // 15956
            flexLength -= node.getSize()[direction] || 0;                                                              // 15957
        else                                                                                                           // 15958
            ratioSum += ratio;                                                                                         // 15959
    }                                                                                                                  // 15960
                                                                                                                       // 15961
    for (i = 0; i < ratios.length; i++) {                                                                              // 15962
        node = this._nodes[i];                                                                                         // 15963
        ratio = ratios[i];                                                                                             // 15964
                                                                                                                       // 15965
        length = (typeof ratio === 'number')                                                                           // 15966
            ? flexLength * ratio / ratioSum                                                                            // 15967
            : node.getSize()[direction];                                                                               // 15968
                                                                                                                       // 15969
        currTransform = (direction === FlexibleLayout.DIRECTION_X)                                                     // 15970
            ? Transform.translate(translation, 0, 0)                                                                   // 15971
            : Transform.translate(0, translation, 0);                                                                  // 15972
                                                                                                                       // 15973
        this._cachedTransforms.push(currTransform);                                                                    // 15974
        this._cachedLengths.push(length);                                                                              // 15975
                                                                                                                       // 15976
        translation += length;                                                                                         // 15977
    }                                                                                                                  // 15978
}                                                                                                                      // 15979
                                                                                                                       // 15980
function _trueSizedDirty(ratios, direction) {                                                                          // 15981
    for (var i = 0; i < ratios.length; i++) {                                                                          // 15982
        if (typeof ratios[i] !== 'number') {                                                                           // 15983
            if (this._nodes[i].getSize()[direction] !== this._cachedLengths[i])                                        // 15984
                return true;                                                                                           // 15985
        }                                                                                                              // 15986
    }                                                                                                                  // 15987
                                                                                                                       // 15988
    return false;                                                                                                      // 15989
}                                                                                                                      // 15990
                                                                                                                       // 15991
/**                                                                                                                    // 15992
 * Generate a render spec from the contents of this component.                                                         // 15993
 *                                                                                                                     // 15994
 * @private                                                                                                            // 15995
 * @method render                                                                                                      // 15996
 * @return {Object} Render spec for this component                                                                     // 15997
 */                                                                                                                    // 15998
FlexibleLayout.prototype.render = function render() {                                                                  // 15999
    return this.id;                                                                                                    // 16000
};                                                                                                                     // 16001
                                                                                                                       // 16002
/**                                                                                                                    // 16003
 * Patches the FlexibleLayouts instance's options with the passed-in ones.                                             // 16004
 *                                                                                                                     // 16005
 * @method setOptions                                                                                                  // 16006
 * @param {Options} options An object of configurable options for the FlexibleLayout instance.                         // 16007
 */                                                                                                                    // 16008
FlexibleLayout.prototype.setOptions = function setOptions(options) {                                                   // 16009
    this.optionsManager.setOptions(options);                                                                           // 16010
};                                                                                                                     // 16011
                                                                                                                       // 16012
/**                                                                                                                    // 16013
 * Sets the collection of renderables under the FlexibleLayout instance's control.  Also sets                          // 16014
 * the associated ratio values for sizing the renderables if given.                                                    // 16015
 *                                                                                                                     // 16016
 * @method sequenceFrom                                                                                                // 16017
 * @param {Array} sequence An array of renderables.                                                                    // 16018
 */                                                                                                                    // 16019
FlexibleLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                              // 16020
    this._nodes = sequence;                                                                                            // 16021
                                                                                                                       // 16022
    if (this._ratios.get().length === 0) {                                                                             // 16023
        var ratios = [];                                                                                               // 16024
        for (var i = 0; i < this._nodes.length; i++) ratios.push(1);                                                   // 16025
        this.setRatios(ratios);                                                                                        // 16026
    }                                                                                                                  // 16027
};                                                                                                                     // 16028
                                                                                                                       // 16029
/**                                                                                                                    // 16030
 * Sets the associated ratio values for sizing the renderables.                                                        // 16031
 *                                                                                                                     // 16032
 * @method setRatios                                                                                                   // 16033
 * @param {Array} ratios Array of ratios corresponding to the percentage sizes each renderable should be               // 16034
 */                                                                                                                    // 16035
FlexibleLayout.prototype.setRatios = function setRatios(ratios, transition, callback) {                                // 16036
    if (transition === undefined) transition = this.options.transition;                                                // 16037
    var currRatios = this._ratios;                                                                                     // 16038
    if (currRatios.get().length === 0) transition = undefined;                                                         // 16039
    if (currRatios.isActive()) currRatios.halt();                                                                      // 16040
    currRatios.set(ratios, transition, callback);                                                                      // 16041
    this._ratiosDirty = true;                                                                                          // 16042
};                                                                                                                     // 16043
                                                                                                                       // 16044
/**                                                                                                                    // 16045
 * Gets the size of the context the FlexibleLayout exists within.                                                      // 16046
 *                                                                                                                     // 16047
 * @method getSize                                                                                                     // 16048
 *                                                                                                                     // 16049
 * @return {Array} Size of the FlexibleLayout in pixels [width, height]                                                // 16050
 */                                                                                                                    // 16051
FlexibleLayout.prototype.getSize = function getSize() {                                                                // 16052
    return this._size;                                                                                                 // 16053
};                                                                                                                     // 16054
                                                                                                                       // 16055
/**                                                                                                                    // 16056
 * Apply changes from this component to the corresponding document element.                                            // 16057
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16058
 * and matrix transforms.                                                                                              // 16059
 *                                                                                                                     // 16060
 * @private                                                                                                            // 16061
 * @method commit                                                                                                      // 16062
 * @param {Context} context commit context                                                                             // 16063
 */                                                                                                                    // 16064
FlexibleLayout.prototype.commit = function commit(context) {                                                           // 16065
    var parentSize = context.size;                                                                                     // 16066
    var parentTransform = context.transform;                                                                           // 16067
    var parentOrigin = context.origin;                                                                                 // 16068
    var parentOpacity = context.opacity;                                                                               // 16069
                                                                                                                       // 16070
    var ratios = this._ratios.get();                                                                                   // 16071
    var direction = this.options.direction;                                                                            // 16072
    var length = parentSize[direction];                                                                                // 16073
    var size;                                                                                                          // 16074
                                                                                                                       // 16075
    if (length !== this._size[direction] || this._ratiosDirty || this._ratios.isActive() || direction !== this._cachedDirection || _trueSizedDirty.call(this, ratios, direction)) {
        _reflow.call(this, ratios, length, direction);                                                                 // 16077
                                                                                                                       // 16078
        if (length !== this._size[direction]) {                                                                        // 16079
            this._size[0] = parentSize[0];                                                                             // 16080
            this._size[1] = parentSize[1];                                                                             // 16081
        }                                                                                                              // 16082
                                                                                                                       // 16083
        if (direction !== this._cachedDirection) this._cachedDirection = direction;                                    // 16084
        if (this._ratiosDirty) this._ratiosDirty = false;                                                              // 16085
    }                                                                                                                  // 16086
                                                                                                                       // 16087
    var result = [];                                                                                                   // 16088
    for (var i = 0; i < ratios.length; i++) {                                                                          // 16089
        size = [undefined, undefined];                                                                                 // 16090
        length = this._cachedLengths[i];                                                                               // 16091
        size[direction] = length;                                                                                      // 16092
        result.push({                                                                                                  // 16093
            transform : this._cachedTransforms[i],                                                                     // 16094
            size: size,                                                                                                // 16095
            target : this._nodes[i].render()                                                                           // 16096
        });                                                                                                            // 16097
    }                                                                                                                  // 16098
                                                                                                                       // 16099
    if (parentSize && (parentOrigin[0] !== 0 && parentOrigin[1] !== 0))                                                // 16100
        parentTransform = Transform.moveThen([-parentSize[0]*parentOrigin[0], -parentSize[1]*parentOrigin[1], 0], parentTransform);
                                                                                                                       // 16102
    return {                                                                                                           // 16103
        transform: parentTransform,                                                                                    // 16104
        size: parentSize,                                                                                              // 16105
        opacity: parentOpacity,                                                                                        // 16106
        target: result                                                                                                 // 16107
    };                                                                                                                 // 16108
};                                                                                                                     // 16109
                                                                                                                       // 16110
module.exports = FlexibleLayout;                                                                                       // 16111
},{"../core/Entity":5,"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Transform":15,"../transitions/Transitionable":89}],103:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16113
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16114
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16115
 *                                                                                                                     // 16116
 * Owner: felix@famo.us                                                                                                // 16117
 * @license MPL 2.0                                                                                                    // 16118
 * @copyright Famous Industries, Inc. 2014                                                                             // 16119
 */                                                                                                                    // 16120
                                                                                                                       // 16121
var Transform = _dereq_('../core/Transform');                                                                          // 16122
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16123
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16124
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16125
                                                                                                                       // 16126
/**                                                                                                                    // 16127
 * Allows you to link two renderables as front and back sides that can be                                              // 16128
 *  'flipped' back and forth along a chosen axis. Rendering optimizations are                                          // 16129
 *  automatically handled.                                                                                             // 16130
 *                                                                                                                     // 16131
 * @class Flipper                                                                                                      // 16132
 * @constructor                                                                                                        // 16133
 * @param {Options} [options] An object of options.                                                                    // 16134
 * @param {Transition} [options.transition=true] The transition executed when flipping your Flipper instance.          // 16135
 * @param {Direction} [options.direction=Flipper.DIRECTION_X] Direction specifies the axis of rotation.                // 16136
 */                                                                                                                    // 16137
function Flipper(options) {                                                                                            // 16138
    this.options = Object.create(Flipper.DEFAULT_OPTIONS);                                                             // 16139
    this._optionsManager = new OptionsManager(this.options);                                                           // 16140
    if (options) this.setOptions(options);                                                                             // 16141
                                                                                                                       // 16142
    this.angle = new Transitionable(0);                                                                                // 16143
                                                                                                                       // 16144
    this.frontNode = undefined;                                                                                        // 16145
    this.backNode = undefined;                                                                                         // 16146
                                                                                                                       // 16147
    this.flipped = false;                                                                                              // 16148
}                                                                                                                      // 16149
                                                                                                                       // 16150
Flipper.DIRECTION_X = 0;                                                                                               // 16151
Flipper.DIRECTION_Y = 1;                                                                                               // 16152
                                                                                                                       // 16153
var SEPERATION_LENGTH = 1;                                                                                             // 16154
                                                                                                                       // 16155
Flipper.DEFAULT_OPTIONS = {                                                                                            // 16156
    transition: true,                                                                                                  // 16157
    direction: Flipper.DIRECTION_X                                                                                     // 16158
};                                                                                                                     // 16159
                                                                                                                       // 16160
/**                                                                                                                    // 16161
 * Toggles the rotation between the front and back renderables                                                         // 16162
 *                                                                                                                     // 16163
 * @method flip                                                                                                        // 16164
 * @param {Object} [transition] Transition definition                                                                  // 16165
 * @param {Function} [callback] Callback                                                                               // 16166
 */                                                                                                                    // 16167
Flipper.prototype.flip = function flip(transition, callback) {                                                         // 16168
    var angle = this.flipped ? 0 : Math.PI;                                                                            // 16169
    this.setAngle(angle, transition, callback);                                                                        // 16170
    this.flipped = !this.flipped;                                                                                      // 16171
};                                                                                                                     // 16172
                                                                                                                       // 16173
/**                                                                                                                    // 16174
 * Basic setter to the angle                                                                                           // 16175
 *                                                                                                                     // 16176
 * @method setAngle                                                                                                    // 16177
 * @param {Number} angle                                                                                               // 16178
 * @param {Object} [transition] Transition definition                                                                  // 16179
 * @param {Function} [callback] Callback                                                                               // 16180
 */                                                                                                                    // 16181
Flipper.prototype.setAngle = function setAngle(angle, transition, callback) {                                          // 16182
    if (transition === undefined) transition = this.options.transition;                                                // 16183
    if (this.angle.isActive()) this.angle.halt();                                                                      // 16184
    this.angle.set(angle, transition, callback);                                                                       // 16185
};                                                                                                                     // 16186
                                                                                                                       // 16187
/**                                                                                                                    // 16188
 * Patches the Flipper instance's options with the passed-in ones.                                                     // 16189
 *                                                                                                                     // 16190
 * @method setOptions                                                                                                  // 16191
 * @param {Options} options An object of configurable options for the Flipper instance.                                // 16192
 */                                                                                                                    // 16193
Flipper.prototype.setOptions = function setOptions(options) {                                                          // 16194
    return this._optionsManager.setOptions(options);                                                                   // 16195
};                                                                                                                     // 16196
                                                                                                                       // 16197
/**                                                                                                                    // 16198
 * Adds the passed-in renderable to the view associated with the 'front' of the Flipper instance.                      // 16199
 *                                                                                                                     // 16200
 * @method setFront                                                                                                    // 16201
 * @chainable                                                                                                          // 16202
 * @param {Object} node The renderable you want to add to the front.                                                   // 16203
 */                                                                                                                    // 16204
Flipper.prototype.setFront = function setFront(node) {                                                                 // 16205
    this.frontNode = node;                                                                                             // 16206
};                                                                                                                     // 16207
                                                                                                                       // 16208
/**                                                                                                                    // 16209
 * Adds the passed-in renderable to the view associated with the 'back' of the Flipper instance.                       // 16210
 *                                                                                                                     // 16211
 * @method setBack                                                                                                     // 16212
 * @chainable                                                                                                          // 16213
 * @param {Object} node The renderable you want to add to the back.                                                    // 16214
 */                                                                                                                    // 16215
Flipper.prototype.setBack = function setBack(node) {                                                                   // 16216
    this.backNode = node;                                                                                              // 16217
};                                                                                                                     // 16218
                                                                                                                       // 16219
/**                                                                                                                    // 16220
 * Generate a render spec from the contents of this component.                                                         // 16221
 *                                                                                                                     // 16222
 * @private                                                                                                            // 16223
 * @method render                                                                                                      // 16224
 * @return {Number} Render spec for this component                                                                     // 16225
 */                                                                                                                    // 16226
Flipper.prototype.render = function render() {                                                                         // 16227
    var angle = this.angle.get();                                                                                      // 16228
                                                                                                                       // 16229
    var frontTransform;                                                                                                // 16230
    var backTransform;                                                                                                 // 16231
                                                                                                                       // 16232
    if (this.options.direction === Flipper.DIRECTION_X) {                                                              // 16233
        frontTransform = Transform.rotateY(angle);                                                                     // 16234
        backTransform = Transform.rotateY(angle + Math.PI);                                                            // 16235
    }                                                                                                                  // 16236
    else {                                                                                                             // 16237
        frontTransform = Transform.rotateX(angle);                                                                     // 16238
        backTransform = Transform.rotateX(angle + Math.PI);                                                            // 16239
    }                                                                                                                  // 16240
                                                                                                                       // 16241
    var result = [];                                                                                                   // 16242
    if (this.frontNode){                                                                                               // 16243
        result.push({                                                                                                  // 16244
            transform: frontTransform,                                                                                 // 16245
            target: this.frontNode.render()                                                                            // 16246
        });                                                                                                            // 16247
    }                                                                                                                  // 16248
                                                                                                                       // 16249
    if (this.backNode){                                                                                                // 16250
        result.push({                                                                                                  // 16251
            transform: Transform.moveThen([0, 0, SEPERATION_LENGTH], backTransform),                                   // 16252
            target: this.backNode.render()                                                                             // 16253
        });                                                                                                            // 16254
    }                                                                                                                  // 16255
                                                                                                                       // 16256
    return result;                                                                                                     // 16257
};                                                                                                                     // 16258
                                                                                                                       // 16259
module.exports = Flipper;                                                                                              // 16260
},{"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":89}],104:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16262
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16263
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16264
 *                                                                                                                     // 16265
 * Owner: felix@famo.us                                                                                                // 16266
 * @license MPL 2.0                                                                                                    // 16267
 * @copyright Famous Industries, Inc. 2014                                                                             // 16268
 */                                                                                                                    // 16269
                                                                                                                       // 16270
var Entity = _dereq_('../core/Entity');                                                                                // 16271
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16272
var Transform = _dereq_('../core/Transform');                                                                          // 16273
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 16274
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 16275
var Modifier = _dereq_('../core/Modifier');                                                                            // 16276
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16277
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16278
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 16279
                                                                                                                       // 16280
/**                                                                                                                    // 16281
 * A layout which divides a context into several evenly-sized grid cells.                                              // 16282
 *   If dimensions are provided, the grid is evenly subdivided with children                                           // 16283
 *   cells representing their own context, otherwise the cellSize property is used to compute                          // 16284
 *   dimensions so that items of cellSize will fit.                                                                    // 16285
 * @class GridLayout                                                                                                   // 16286
 * @constructor                                                                                                        // 16287
 * @param {Options} [options] An object of configurable options.                                                       // 16288
 * @param {Array.Number} [options.dimensions=[1, 1]] A two value array which specifies the amount of columns           // 16289
 * and rows in your Gridlayout instance.                                                                               // 16290
 * @param {Array.Number} [options.gutterSize=[0, 0]] A two-value array which specifies size of the                     // 16291
 * horizontal and vertical gutters between items in the grid layout.                                                   // 16292
 * @param {Transition} [options.transition=false] The transiton that controls the Gridlayout instance's reflow.        // 16293
 */                                                                                                                    // 16294
function GridLayout(options) {                                                                                         // 16295
    this.options = Object.create(GridLayout.DEFAULT_OPTIONS);                                                          // 16296
    this.optionsManager = new OptionsManager(this.options);                                                            // 16297
    if (options) this.setOptions(options);                                                                             // 16298
                                                                                                                       // 16299
    this.id = Entity.register(this);                                                                                   // 16300
                                                                                                                       // 16301
    this._modifiers = [];                                                                                              // 16302
    this._states = [];                                                                                                 // 16303
    this._contextSizeCache = [0, 0];                                                                                   // 16304
    this._dimensionsCache = [0, 0];                                                                                    // 16305
    this._activeCount = 0;                                                                                             // 16306
                                                                                                                       // 16307
    this._eventOutput = new EventHandler();                                                                            // 16308
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 16309
}                                                                                                                      // 16310
                                                                                                                       // 16311
function _reflow(size, cols, rows) {                                                                                   // 16312
    var usableSize = [size[0], size[1]];                                                                               // 16313
    usableSize[0] -= this.options.gutterSize[0] * (cols - 1);                                                          // 16314
    usableSize[1] -= this.options.gutterSize[1] * (rows - 1);                                                          // 16315
                                                                                                                       // 16316
    var rowSize = Math.round(usableSize[1] / rows);                                                                    // 16317
    var colSize = Math.round(usableSize[0] / cols);                                                                    // 16318
                                                                                                                       // 16319
    var currY = 0;                                                                                                     // 16320
    var currX;                                                                                                         // 16321
    var currIndex = 0;                                                                                                 // 16322
    for (var i = 0; i < rows; i++) {                                                                                   // 16323
        currX = 0;                                                                                                     // 16324
        for (var j = 0; j < cols; j++) {                                                                               // 16325
            if (this._modifiers[currIndex] === undefined) {                                                            // 16326
                _createModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                       // 16327
            }                                                                                                          // 16328
            else {                                                                                                     // 16329
                _animateModifier.call(this, currIndex, [colSize, rowSize], [currX, currY, 0], 1);                      // 16330
            }                                                                                                          // 16331
                                                                                                                       // 16332
            currIndex++;                                                                                               // 16333
            currX += colSize + this.options.gutterSize[0];                                                             // 16334
        }                                                                                                              // 16335
                                                                                                                       // 16336
        currY += rowSize + this.options.gutterSize[1];                                                                 // 16337
    }                                                                                                                  // 16338
                                                                                                                       // 16339
    this._dimensionsCache = [this.options.dimensions[0], this.options.dimensions[1]];                                  // 16340
    this._contextSizeCache = [size[0], size[1]];                                                                       // 16341
                                                                                                                       // 16342
    this._activeCount = rows * cols;                                                                                   // 16343
                                                                                                                       // 16344
    for (i = this._activeCount ; i < this._modifiers.length; i++) _animateModifier.call(this, i, [Math.round(colSize), Math.round(rowSize)], [0, 0], 0);
                                                                                                                       // 16346
    this._eventOutput.emit('reflow');                                                                                  // 16347
}                                                                                                                      // 16348
                                                                                                                       // 16349
function _createModifier(index, size, position, opacity) {                                                             // 16350
    var transitionItem = {                                                                                             // 16351
        transform: new TransitionableTransform(Transform.translate.apply(null, position)),                             // 16352
        opacity: new Transitionable(opacity),                                                                          // 16353
        size: new Transitionable(size)                                                                                 // 16354
    };                                                                                                                 // 16355
                                                                                                                       // 16356
    var modifier = new Modifier({                                                                                      // 16357
        transform: transitionItem.transform,                                                                           // 16358
        opacity: transitionItem.opacity,                                                                               // 16359
        size: transitionItem.size                                                                                      // 16360
    });                                                                                                                // 16361
                                                                                                                       // 16362
    this._states[index] = transitionItem;                                                                              // 16363
    this._modifiers[index] = modifier;                                                                                 // 16364
                                                                                                                       // 16365
}                                                                                                                      // 16366
                                                                                                                       // 16367
function _animateModifier(index, size, position, opacity) {                                                            // 16368
    var currState = this._states[index];                                                                               // 16369
                                                                                                                       // 16370
    var currSize = currState.size;                                                                                     // 16371
    var currOpacity = currState.opacity;                                                                               // 16372
    var currTransform = currState.transform;                                                                           // 16373
                                                                                                                       // 16374
    var transition = this.options.transition;                                                                          // 16375
                                                                                                                       // 16376
    currTransform.halt();                                                                                              // 16377
    currOpacity.halt();                                                                                                // 16378
    currSize.halt();                                                                                                   // 16379
                                                                                                                       // 16380
    currTransform.setTranslate(position, transition);                                                                  // 16381
    currSize.set(size, transition);                                                                                    // 16382
    currOpacity.set(opacity, transition);                                                                              // 16383
}                                                                                                                      // 16384
                                                                                                                       // 16385
GridLayout.DEFAULT_OPTIONS = {                                                                                         // 16386
    dimensions: [1, 1],                                                                                                // 16387
    transition: false,                                                                                                 // 16388
    gutterSize: [0, 0]                                                                                                 // 16389
};                                                                                                                     // 16390
                                                                                                                       // 16391
/**                                                                                                                    // 16392
 * Generate a render spec from the contents of this component.                                                         // 16393
 *                                                                                                                     // 16394
 * @private                                                                                                            // 16395
 * @method render                                                                                                      // 16396
 * @return {Object} Render spec for this component                                                                     // 16397
 */                                                                                                                    // 16398
GridLayout.prototype.render = function render() {                                                                      // 16399
    return this.id;                                                                                                    // 16400
};                                                                                                                     // 16401
                                                                                                                       // 16402
/**                                                                                                                    // 16403
 * Patches the GridLayout instance's options with the passed-in ones.                                                  // 16404
 *                                                                                                                     // 16405
 * @method setOptions                                                                                                  // 16406
 * @param {Options} options An object of configurable options for the GridLayout instance.                             // 16407
 */                                                                                                                    // 16408
GridLayout.prototype.setOptions = function setOptions(options) {                                                       // 16409
    return this.optionsManager.setOptions(options);                                                                    // 16410
};                                                                                                                     // 16411
                                                                                                                       // 16412
/**                                                                                                                    // 16413
 * Sets the collection of renderables under the Gridlayout instance's control.                                         // 16414
 *                                                                                                                     // 16415
 * @method sequenceFrom                                                                                                // 16416
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous viewSequence.                       // 16417
 */                                                                                                                    // 16418
GridLayout.prototype.sequenceFrom = function sequenceFrom(sequence) {                                                  // 16419
    if (sequence instanceof Array) sequence = new ViewSequence(sequence);                                              // 16420
    this.sequence = sequence;                                                                                          // 16421
};                                                                                                                     // 16422
                                                                                                                       // 16423
/**                                                                                                                    // 16424
 * Returns the size of the grid layout.                                                                                // 16425
 *                                                                                                                     // 16426
 * @method getSize                                                                                                     // 16427
 * @return {Array} Total size of the grid layout.                                                                      // 16428
 */                                                                                                                    // 16429
GridLayout.prototype.getSize = function getSize() {                                                                    // 16430
  return this._contextSizeCache;                                                                                       // 16431
};                                                                                                                     // 16432
                                                                                                                       // 16433
/**                                                                                                                    // 16434
 * Apply changes from this component to the corresponding document element.                                            // 16435
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16436
 * and matrix transforms.                                                                                              // 16437
 *                                                                                                                     // 16438
 * @private                                                                                                            // 16439
 * @method commit                                                                                                      // 16440
 * @param {Context} context commit context                                                                             // 16441
 */                                                                                                                    // 16442
GridLayout.prototype.commit = function commit(context) {                                                               // 16443
    var transform = context.transform;                                                                                 // 16444
    var opacity = context.opacity;                                                                                     // 16445
    var origin = context.origin;                                                                                       // 16446
    var size = context.size;                                                                                           // 16447
                                                                                                                       // 16448
    var cols = this.options.dimensions[0];                                                                             // 16449
    var rows = this.options.dimensions[1];                                                                             // 16450
                                                                                                                       // 16451
    if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || cols !== this._dimensionsCache[0] || rows !== this._dimensionsCache[1]) {
        _reflow.call(this, size, cols, rows);                                                                          // 16453
    }                                                                                                                  // 16454
                                                                                                                       // 16455
    var sequence = this.sequence;                                                                                      // 16456
    var result = [];                                                                                                   // 16457
    var currIndex = 0;                                                                                                 // 16458
    while (sequence && (currIndex < this._modifiers.length)) {                                                         // 16459
        var item = sequence.get();                                                                                     // 16460
        var modifier = this._modifiers[currIndex];                                                                     // 16461
        if (currIndex >= this._activeCount && this._states[currIndex].opacity.isActive()) {                            // 16462
            this._modifiers.splice(currIndex, 1);                                                                      // 16463
            this._states.splice(currIndex, 1);                                                                         // 16464
        }                                                                                                              // 16465
        if (item) {                                                                                                    // 16466
            result.push(                                                                                               // 16467
                modifier.modify({                                                                                      // 16468
                    origin: origin,                                                                                    // 16469
                    target: item.render()                                                                              // 16470
                })                                                                                                     // 16471
            );                                                                                                         // 16472
        }                                                                                                              // 16473
        sequence = sequence.getNext();                                                                                 // 16474
        currIndex++;                                                                                                   // 16475
    }                                                                                                                  // 16476
                                                                                                                       // 16477
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16478
    return {                                                                                                           // 16479
        transform: transform,                                                                                          // 16480
        opacity: opacity,                                                                                              // 16481
        size: size,                                                                                                    // 16482
        target: result                                                                                                 // 16483
    };                                                                                                                 // 16484
};                                                                                                                     // 16485
                                                                                                                       // 16486
module.exports = GridLayout;                                                                                           // 16487
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../core/ViewSequence":17,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90}],105:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16489
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16490
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16491
 *                                                                                                                     // 16492
 * Owner: felix@famo.us                                                                                                // 16493
 * @license MPL 2.0                                                                                                    // 16494
 * @copyright Famous Industries, Inc. 2014                                                                             // 16495
 */                                                                                                                    // 16496
                                                                                                                       // 16497
var Entity = _dereq_('../core/Entity');                                                                                // 16498
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16499
var Transform = _dereq_('../core/Transform');                                                                          // 16500
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16501
                                                                                                                       // 16502
/**                                                                                                                    // 16503
 * A layout which will arrange three renderables into a header and footer area of defined size,                        // 16504
  and a content area of flexible size.                                                                                 // 16505
 * @class HeaderFooterLayout                                                                                           // 16506
 * @constructor                                                                                                        // 16507
 * @param {Options} [options] An object of configurable options.                                                       // 16508
 * @param {Number} [options.direction=HeaderFooterLayout.DIRECTION_Y] A direction of HeaderFooterLayout.DIRECTION_X    // 16509
 * lays your HeaderFooterLayout instance horizontally, and a direction of HeaderFooterLayout.DIRECTION_Y               // 16510
 * lays it out vertically.                                                                                             // 16511
 * @param {Number} [options.headerSize=undefined]  The amount of pixels allocated to the header node                   // 16512
 * in the HeaderFooterLayout instance's direction.                                                                     // 16513
 * @param {Number} [options.footerSize=undefined] The amount of pixels allocated to the footer node                    // 16514
 * in the HeaderFooterLayout instance's direction.                                                                     // 16515
 */                                                                                                                    // 16516
function HeaderFooterLayout(options) {                                                                                 // 16517
    this.options = Object.create(HeaderFooterLayout.DEFAULT_OPTIONS);                                                  // 16518
    this._optionsManager = new OptionsManager(this.options);                                                           // 16519
    if (options) this.setOptions(options);                                                                             // 16520
                                                                                                                       // 16521
    this._entityId = Entity.register(this);                                                                            // 16522
                                                                                                                       // 16523
    this.header = new RenderNode();                                                                                    // 16524
    this.footer = new RenderNode();                                                                                    // 16525
    this.content = new RenderNode();                                                                                   // 16526
}                                                                                                                      // 16527
                                                                                                                       // 16528
/**                                                                                                                    // 16529
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out horizontally.            // 16530
 *                                                                                                                     // 16531
 *  @attribute DIRECTION_X                                                                                             // 16532
 *  @type Number                                                                                                       // 16533
 *  @static                                                                                                            // 16534
 *  @default 0                                                                                                         // 16535
 *  @protected                                                                                                         // 16536
 */                                                                                                                    // 16537
HeaderFooterLayout.DIRECTION_X = 0;                                                                                    // 16538
                                                                                                                       // 16539
/**                                                                                                                    // 16540
 *  When used as a value for your HeaderFooterLayout's direction option, causes it to lay out vertically.              // 16541
 *                                                                                                                     // 16542
 *  @attribute DIRECTION_Y                                                                                             // 16543
 *  @type Number                                                                                                       // 16544
 *  @static                                                                                                            // 16545
 *  @default 1                                                                                                         // 16546
 *  @protected                                                                                                         // 16547
 */                                                                                                                    // 16548
HeaderFooterLayout.DIRECTION_Y = 1;                                                                                    // 16549
                                                                                                                       // 16550
HeaderFooterLayout.DEFAULT_OPTIONS = {                                                                                 // 16551
    direction: HeaderFooterLayout.DIRECTION_Y,                                                                         // 16552
    headerSize: undefined,                                                                                             // 16553
    footerSize: undefined,                                                                                             // 16554
    defaultHeaderSize: 0,                                                                                              // 16555
    defaultFooterSize: 0                                                                                               // 16556
};                                                                                                                     // 16557
                                                                                                                       // 16558
/**                                                                                                                    // 16559
 * Generate a render spec from the contents of this component.                                                         // 16560
 *                                                                                                                     // 16561
 * @private                                                                                                            // 16562
 * @method render                                                                                                      // 16563
 * @return {Object} Render spec for this component                                                                     // 16564
 */                                                                                                                    // 16565
HeaderFooterLayout.prototype.render = function render() {                                                              // 16566
    return this._entityId;                                                                                             // 16567
};                                                                                                                     // 16568
                                                                                                                       // 16569
/**                                                                                                                    // 16570
 * Patches the HeaderFooterLayout instance's options with the passed-in ones.                                          // 16571
 *                                                                                                                     // 16572
 * @method setOptions                                                                                                  // 16573
 * @param {Options} options An object of configurable options for the HeaderFooterLayout instance.                     // 16574
 */                                                                                                                    // 16575
HeaderFooterLayout.prototype.setOptions = function setOptions(options) {                                               // 16576
    return this._optionsManager.setOptions(options);                                                                   // 16577
};                                                                                                                     // 16578
                                                                                                                       // 16579
function _resolveNodeSize(node, defaultSize) {                                                                         // 16580
    var nodeSize = node.getSize();                                                                                     // 16581
    return nodeSize ? nodeSize[this.options.direction] : defaultSize;                                                  // 16582
}                                                                                                                      // 16583
                                                                                                                       // 16584
function _outputTransform(offset) {                                                                                    // 16585
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return Transform.translate(offset, 0, 0);           // 16586
    else return Transform.translate(0, offset, 0);                                                                     // 16587
}                                                                                                                      // 16588
                                                                                                                       // 16589
function _finalSize(directionSize, size) {                                                                             // 16590
    if (this.options.direction === HeaderFooterLayout.DIRECTION_X) return [directionSize, size[1]];                    // 16591
    else return [size[0], directionSize];                                                                              // 16592
}                                                                                                                      // 16593
                                                                                                                       // 16594
/**                                                                                                                    // 16595
 * Apply changes from this component to the corresponding document element.                                            // 16596
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 16597
 * and matrix transforms.                                                                                              // 16598
 *                                                                                                                     // 16599
 * @private                                                                                                            // 16600
 * @method commit                                                                                                      // 16601
 * @param {Context} context commit context                                                                             // 16602
 */                                                                                                                    // 16603
HeaderFooterLayout.prototype.commit = function commit(context) {                                                       // 16604
    var transform = context.transform;                                                                                 // 16605
    var origin = context.origin;                                                                                       // 16606
    var size = context.size;                                                                                           // 16607
    var opacity = context.opacity;                                                                                     // 16608
                                                                                                                       // 16609
    var headerSize = (this.options.headerSize !== undefined) ? this.options.headerSize : _resolveNodeSize.call(this, this.header, this.options.defaultHeaderSize);
    var footerSize = (this.options.footerSize !== undefined) ? this.options.footerSize : _resolveNodeSize.call(this, this.footer, this.options.defaultFooterSize);
    var contentSize = size[this.options.direction] - headerSize - footerSize;                                          // 16612
                                                                                                                       // 16613
    if (size) transform = Transform.moveThen([-size[0]*origin[0], -size[1]*origin[1], 0], transform);                  // 16614
                                                                                                                       // 16615
    var result = [                                                                                                     // 16616
        {                                                                                                              // 16617
            size: _finalSize.call(this, headerSize, size),                                                             // 16618
            target: this.header.render()                                                                               // 16619
        },                                                                                                             // 16620
        {                                                                                                              // 16621
            transform: _outputTransform.call(this, headerSize),                                                        // 16622
            size: _finalSize.call(this, contentSize, size),                                                            // 16623
            target: this.content.render()                                                                              // 16624
        },                                                                                                             // 16625
        {                                                                                                              // 16626
            transform: _outputTransform.call(this, headerSize + contentSize),                                          // 16627
            size: _finalSize.call(this, footerSize, size),                                                             // 16628
            target: this.footer.render()                                                                               // 16629
        }                                                                                                              // 16630
    ];                                                                                                                 // 16631
                                                                                                                       // 16632
    return {                                                                                                           // 16633
        transform: transform,                                                                                          // 16634
        opacity: opacity,                                                                                              // 16635
        size: size,                                                                                                    // 16636
        target: result                                                                                                 // 16637
    };                                                                                                                 // 16638
};                                                                                                                     // 16639
                                                                                                                       // 16640
module.exports = HeaderFooterLayout;                                                                                   // 16641
},{"../core/Entity":5,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15}],106:[function(_dereq_,module,exports){
var Transform = _dereq_('../core/Transform');                                                                          // 16643
var Modifier = _dereq_('../core/Modifier');                                                                            // 16644
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16645
var Utility = _dereq_('../utilities/Utility');                                                                         // 16646
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 16647
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16648
var TransitionableTransform = _dereq_('../transitions/TransitionableTransform');                                       // 16649
                                                                                                                       // 16650
/**                                                                                                                    // 16651
 * Lightbox, using transitions, shows and hides different renderables. Lightbox can essentially be                     // 16652
 * thought of as RenderController with a stateful implementation and interface.                                        // 16653
 *                                                                                                                     // 16654
 * @class Lightbox                                                                                                     // 16655
 * @constructor                                                                                                        // 16656
 * @param {Options} [options] An object of configurable options.                                                       // 16657
 * @param {Transform} [options.inTransform] The transform at the start of transitioning in a shown renderable.         // 16658
 * @param {Transform} [options.outTransform] The transform at the end of transitioning out a renderable.               // 16659
 * @param {Transform} [options.showTransform] The transform applied to your shown renderable in its state of equilibrium.
 * @param {Number} [options.inOpacity] A number between one and zero that defines the state of a shown renderables opacity upon initially
 * being transitioned in.                                                                                              // 16662
 * @param {Number} [options.outOpacity] A number between one and zero that defines the state of a shown renderables opacity upon being
 * fully transitioned out.                                                                                             // 16664
 * @param {Number} [options.showOpacity] A number between one and zero that defines the state of a shown renderables opacity
 * once succesfully transitioned in.                                                                                   // 16666
 * @param {Array<Number>} [options.inOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon intially being transitioned in.                                                                         // 16668
 * @param {Array<Number>} [options.outOrigin] A two value array of numbers between one and zero that defines the state of a shown renderable
 * origin once fully hidden.                                                                                           // 16670
 * @param {Array<Number>} [options.showOrigin] A two value array of numbers between one and zero that defines the state of a shown renderables
 * origin upon succesfully being shown.                                                                                // 16672
 * @param {Array<Number>} [options.inAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon intially being transitioned in.                                                                          // 16674
 * @param {Array<Number>} [options.outAlign] A two value array of numbers between one and zero that defines the state of a shown renderable
 * align once fully hidden.                                                                                            // 16676
 * @param {Array<Number>} [options.showAlign] A two value array of numbers between one and zero that defines the state of a shown renderables
 * align upon succesfully being shown.                                                                                 // 16678
 * @param {Transition} [options.inTransition=true] The transition in charge of showing a renderable.                   // 16679
 * @param {Transition} [options.outTransition=true]  The transition in charge of removing your previous renderable when
 * you show a new one, or hiding your current renderable.                                                              // 16681
 * @param {Boolean} [options.overlap=false] When showing a new renderable, overlap determines if the                   // 16682
 *   out transition of the old one executes concurrently with the in transition of the new one,                        // 16683
  *  or synchronously beforehand.                                                                                      // 16684
 */                                                                                                                    // 16685
function Lightbox(options) {                                                                                           // 16686
    this.options = Object.create(Lightbox.DEFAULT_OPTIONS);                                                            // 16687
    this._optionsManager = new OptionsManager(this.options);                                                           // 16688
                                                                                                                       // 16689
    if (options) this.setOptions(options);                                                                             // 16690
                                                                                                                       // 16691
    this._showing = false;                                                                                             // 16692
    this.nodes = [];                                                                                                   // 16693
    this.transforms = [];                                                                                              // 16694
    this.states = [];                                                                                                  // 16695
}                                                                                                                      // 16696
                                                                                                                       // 16697
Lightbox.DEFAULT_OPTIONS = {                                                                                           // 16698
    inTransform: Transform.scale(0.001, 0.001, 0.001),                                                                 // 16699
    inOpacity: 0,                                                                                                      // 16700
    inOrigin: [0.5, 0.5],                                                                                              // 16701
    inAlign: [0.5, 0.5],                                                                                               // 16702
    outTransform: Transform.scale(0.001, 0.001, 0.001),                                                                // 16703
    outOpacity: 0,                                                                                                     // 16704
    outOrigin: [0.5, 0.5],                                                                                             // 16705
    outAlign: [0.5, 0.5],                                                                                              // 16706
    showTransform: Transform.identity,                                                                                 // 16707
    showOpacity: 1,                                                                                                    // 16708
    showOrigin: [0.5, 0.5],                                                                                            // 16709
    showAlign: [0.5, 0.5],                                                                                             // 16710
    inTransition: true,                                                                                                // 16711
    outTransition: true,                                                                                               // 16712
    overlap: false                                                                                                     // 16713
};                                                                                                                     // 16714
                                                                                                                       // 16715
/**                                                                                                                    // 16716
 * Patches the Lightbox instance's options with the passed-in ones.                                                    // 16717
 *                                                                                                                     // 16718
 * @method setOptions                                                                                                  // 16719
 * @param {Options} options An object of configurable options for the Lightbox instance.                               // 16720
 */                                                                                                                    // 16721
Lightbox.prototype.setOptions = function setOptions(options) {                                                         // 16722
    return this._optionsManager.setOptions(options);                                                                   // 16723
};                                                                                                                     // 16724
                                                                                                                       // 16725
   /**                                                                                                                 // 16726
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 16727
 *  execute afterwards.                                                                                                // 16728
 * @method show                                                                                                        // 16729
 * @param {Object} renderable The renderable you want to show.                                                         // 16730
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 16731
 * passed-in renderable.                                                                                               // 16732
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 16733
 */                                                                                                                    // 16734
Lightbox.prototype.show = function show(renderable, transition, callback) {                                            // 16735
    if (!renderable) {                                                                                                 // 16736
        return this.hide(callback);                                                                                    // 16737
    }                                                                                                                  // 16738
                                                                                                                       // 16739
    if (transition instanceof Function) {                                                                              // 16740
        callback = transition;                                                                                         // 16741
        transition = undefined;                                                                                        // 16742
    }                                                                                                                  // 16743
                                                                                                                       // 16744
    if (this._showing) {                                                                                               // 16745
        if (this.options.overlap) this.hide();                                                                         // 16746
        else {                                                                                                         // 16747
            return this.hide(this.show.bind(this, renderable, transition, callback));                                  // 16748
        }                                                                                                              // 16749
    }                                                                                                                  // 16750
    this._showing = true;                                                                                              // 16751
                                                                                                                       // 16752
    var stateItem = {                                                                                                  // 16753
        transform: new TransitionableTransform(this.options.inTransform),                                              // 16754
        origin: new Transitionable(this.options.inOrigin),                                                             // 16755
        align: new Transitionable(this.options.inAlign),                                                               // 16756
        opacity: new Transitionable(this.options.inOpacity)                                                            // 16757
    };                                                                                                                 // 16758
                                                                                                                       // 16759
    var transform = new Modifier({                                                                                     // 16760
        transform: stateItem.transform,                                                                                // 16761
        opacity: stateItem.opacity,                                                                                    // 16762
        origin: stateItem.origin,                                                                                      // 16763
        align: stateItem.align                                                                                         // 16764
    });                                                                                                                // 16765
    var node = new RenderNode();                                                                                       // 16766
    node.add(transform).add(renderable);                                                                               // 16767
    this.nodes.push(node);                                                                                             // 16768
    this.states.push(stateItem);                                                                                       // 16769
    this.transforms.push(transform);                                                                                   // 16770
                                                                                                                       // 16771
    var _cb = callback ? Utility.after(3, callback) : undefined;                                                       // 16772
                                                                                                                       // 16773
    if (!transition) transition = this.options.inTransition;                                                           // 16774
    stateItem.transform.set(this.options.showTransform, transition, _cb);                                              // 16775
    stateItem.opacity.set(this.options.showOpacity, transition, _cb);                                                  // 16776
    stateItem.origin.set(this.options.showOrigin, transition, _cb);                                                    // 16777
    stateItem.align.set(this.options.showAlign, transition, _cb);                                                      // 16778
};                                                                                                                     // 16779
                                                                                                                       // 16780
/**                                                                                                                    // 16781
 * Hide hides the currently displayed renderable with an out transition.                                               // 16782
 * @method hide                                                                                                        // 16783
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 16784
 * currently controlled renderable.                                                                                    // 16785
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 16786
 */                                                                                                                    // 16787
Lightbox.prototype.hide = function hide(transition, callback) {                                                        // 16788
    if (!this._showing) return;                                                                                        // 16789
    this._showing = false;                                                                                             // 16790
                                                                                                                       // 16791
    if (transition instanceof Function) {                                                                              // 16792
        callback = transition;                                                                                         // 16793
        transition = undefined;                                                                                        // 16794
    }                                                                                                                  // 16795
                                                                                                                       // 16796
    var node = this.nodes[this.nodes.length - 1];                                                                      // 16797
    var transform = this.transforms[this.transforms.length - 1];                                                       // 16798
    var stateItem = this.states[this.states.length - 1];                                                               // 16799
    var _cb = Utility.after(3, function() {                                                                            // 16800
        this.nodes.splice(this.nodes.indexOf(node), 1);                                                                // 16801
        this.states.splice(this.states.indexOf(stateItem), 1);                                                         // 16802
        this.transforms.splice(this.transforms.indexOf(transform), 1);                                                 // 16803
        if (callback) callback.call(this);                                                                             // 16804
    }.bind(this));                                                                                                     // 16805
                                                                                                                       // 16806
    if (!transition) transition = this.options.outTransition;                                                          // 16807
    stateItem.transform.set(this.options.outTransform, transition, _cb);                                               // 16808
    stateItem.opacity.set(this.options.outOpacity, transition, _cb);                                                   // 16809
    stateItem.origin.set(this.options.outOrigin, transition, _cb);                                                     // 16810
    stateItem.align.set(this.options.outAlign, transition, _cb);                                                       // 16811
};                                                                                                                     // 16812
                                                                                                                       // 16813
/**                                                                                                                    // 16814
 * Generate a render spec from the contents of this component.                                                         // 16815
 *                                                                                                                     // 16816
 * @private                                                                                                            // 16817
 * @method render                                                                                                      // 16818
 * @return {number} Render spec for this component                                                                     // 16819
 */                                                                                                                    // 16820
Lightbox.prototype.render = function render() {                                                                        // 16821
    var result = [];                                                                                                   // 16822
    for (var i = 0; i < this.nodes.length; i++) {                                                                      // 16823
        result.push(this.nodes[i].render());                                                                           // 16824
    }                                                                                                                  // 16825
    return result;                                                                                                     // 16826
};                                                                                                                     // 16827
                                                                                                                       // 16828
module.exports = Lightbox;                                                                                             // 16829
},{"../core/Modifier":9,"../core/OptionsManager":10,"../core/RenderNode":11,"../core/Transform":15,"../transitions/Transitionable":89,"../transitions/TransitionableTransform":90,"../utilities/Utility":96}],107:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 16831
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 16832
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 16833
 *                                                                                                                     // 16834
 * Owner: felix@famo.us                                                                                                // 16835
 * @license MPL 2.0                                                                                                    // 16836
 * @copyright Famous Industries, Inc. 2014                                                                             // 16837
 */                                                                                                                    // 16838
                                                                                                                       // 16839
var Modifier = _dereq_('../core/Modifier');                                                                            // 16840
var RenderNode = _dereq_('../core/RenderNode');                                                                        // 16841
var Transform = _dereq_('../core/Transform');                                                                          // 16842
var Transitionable = _dereq_('../transitions/Transitionable');                                                         // 16843
var View = _dereq_('../core/View');                                                                                    // 16844
                                                                                                                       // 16845
/**                                                                                                                    // 16846
 * A dynamic view that can show or hide different renderables with transitions.                                        // 16847
 * @class RenderController                                                                                             // 16848
 * @constructor                                                                                                        // 16849
 * @param {Options} [options] An object of configurable options.                                                       // 16850
 * @param {Transition} [inTransition=true] The transition in charge of showing a renderable.                           // 16851
 * @param {Transition} [outTransition=true]  The transition in charge of removing your previous renderable when        // 16852
 * you show a new one, or hiding your current renderable.                                                              // 16853
 * @param {Boolean} [overlap=true] When showing a new renderable, overlap determines if the                            // 16854
  out transition of the old one executes concurrently with the in transition of the new one,                           // 16855
   or synchronously beforehand.                                                                                        // 16856
 */                                                                                                                    // 16857
function RenderController(options) {                                                                                   // 16858
    View.apply(this, arguments);                                                                                       // 16859
                                                                                                                       // 16860
    this._showing = -1;                                                                                                // 16861
    this._outgoingRenderables = [];                                                                                    // 16862
    this._nextRenderable = null;                                                                                       // 16863
                                                                                                                       // 16864
    this._renderables = [];                                                                                            // 16865
    this._nodes = [];                                                                                                  // 16866
    this._modifiers = [];                                                                                              // 16867
    this._states = [];                                                                                                 // 16868
                                                                                                                       // 16869
    this.inTransformMap = RenderController.DefaultMap.transform;                                                       // 16870
    this.inOpacityMap = RenderController.DefaultMap.opacity;                                                           // 16871
    this.inOriginMap = RenderController.DefaultMap.origin;                                                             // 16872
    this.inAlignMap = RenderController.DefaultMap.align;                                                               // 16873
    this.outTransformMap = RenderController.DefaultMap.transform;                                                      // 16874
    this.outOpacityMap = RenderController.DefaultMap.opacity;                                                          // 16875
    this.outOriginMap = RenderController.DefaultMap.origin;                                                            // 16876
    this.outAlignMap = RenderController.DefaultMap.align;                                                              // 16877
                                                                                                                       // 16878
    this._output = [];                                                                                                 // 16879
}                                                                                                                      // 16880
RenderController.prototype = Object.create(View.prototype);                                                            // 16881
RenderController.prototype.constructor = RenderController;                                                             // 16882
                                                                                                                       // 16883
RenderController.DEFAULT_OPTIONS = {                                                                                   // 16884
    inTransition: true,                                                                                                // 16885
    outTransition: true,                                                                                               // 16886
    overlap: true                                                                                                      // 16887
};                                                                                                                     // 16888
                                                                                                                       // 16889
RenderController.DefaultMap = {                                                                                        // 16890
    transform: function() {                                                                                            // 16891
        return Transform.identity;                                                                                     // 16892
    },                                                                                                                 // 16893
    opacity: function(progress) {                                                                                      // 16894
        return progress;                                                                                               // 16895
    },                                                                                                                 // 16896
    origin: null,                                                                                                      // 16897
    align: null                                                                                                        // 16898
};                                                                                                                     // 16899
                                                                                                                       // 16900
function _mappedState(map, state) {                                                                                    // 16901
    return map(state.get());                                                                                           // 16902
}                                                                                                                      // 16903
                                                                                                                       // 16904
/**                                                                                                                    // 16905
 * As your RenderController shows a new renderable, it executes a transition in. This transition in                    // 16906
 *  will affect a default interior state and modify it as you bring renderables in and out. However, if you want to control
 *  the transform, opacity, and origin state yourself, you may call certain methods (such as inTransformFrom) to obtain state from an outside source,
 *  that may either be a function or a Famous transitionable. inTransformFrom sets the accessor for the state of       // 16909
 *  the transform used in transitioning in renderables.                                                                // 16910
 *                                                                                                                     // 16911
 * @method inTransformFrom                                                                                             // 16912
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16913
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16914
 * @chainable                                                                                                          // 16915
 */                                                                                                                    // 16916
RenderController.prototype.inTransformFrom = function inTransformFrom(transform) {                                     // 16917
    if (transform instanceof Function) this.inTransformMap = transform;                                                // 16918
    else if (transform && transform.get) this.inTransformMap = transform.get.bind(transform);                          // 16919
    else throw new Error('inTransformFrom takes only function or getter object');                                      // 16920
    //TODO: tween transition                                                                                           // 16921
    return this;                                                                                                       // 16922
};                                                                                                                     // 16923
                                                                                                                       // 16924
/**                                                                                                                    // 16925
 * inOpacityFrom sets the accessor for the state of the opacity used in transitioning in renderables.                  // 16926
 * @method inOpacityFrom                                                                                               // 16927
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16928
 * a transitionable that manages opacity (a number between zero and one).                                              // 16929
 * @chainable                                                                                                          // 16930
 */                                                                                                                    // 16931
RenderController.prototype.inOpacityFrom = function inOpacityFrom(opacity) {                                           // 16932
    if (opacity instanceof Function) this.inOpacityMap = opacity;                                                      // 16933
    else if (opacity && opacity.get) this.inOpacityMap = opacity.get.bind(opacity);                                    // 16934
    else throw new Error('inOpacityFrom takes only function or getter object');                                        // 16935
    //TODO: tween opacity                                                                                              // 16936
    return this;                                                                                                       // 16937
};                                                                                                                     // 16938
                                                                                                                       // 16939
/**                                                                                                                    // 16940
 * inOriginFrom sets the accessor for the state of the origin used in transitioning in renderables.                    // 16941
 * @method inOriginFrom                                                                                                // 16942
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 16943
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 16944
 * @chainable                                                                                                          // 16945
 */                                                                                                                    // 16946
RenderController.prototype.inOriginFrom = function inOriginFrom(origin) {                                              // 16947
    if (origin instanceof Function) this.inOriginMap = origin;                                                         // 16948
    else if (origin && origin.get) this.inOriginMap = origin.get.bind(origin);                                         // 16949
    else throw new Error('inOriginFrom takes only function or getter object');                                         // 16950
    //TODO: tween origin                                                                                               // 16951
    return this;                                                                                                       // 16952
};                                                                                                                     // 16953
                                                                                                                       // 16954
/**                                                                                                                    // 16955
 * inAlignFrom sets the accessor for the state of the align used in transitioning in renderables.                      // 16956
 * @method inAlignFrom                                                                                                 // 16957
 * @param {Function|Transitionable} align A function that returns an align from outside closure, or a                  // 16958
 * a transitionable that manages align (a two value array of numbers between zero and one).                            // 16959
 * @chainable                                                                                                          // 16960
 */                                                                                                                    // 16961
RenderController.prototype.inAlignFrom = function inAlignFrom(align) {                                                 // 16962
    if (align instanceof Function) this.inAlignMap = align;                                                            // 16963
    else if (align && align.get) this.inAlignMap = align.get.bind(align);                                              // 16964
    else throw new Error('inAlignFrom takes only function or getter object');                                          // 16965
    //TODO: tween align                                                                                                // 16966
    return this;                                                                                                       // 16967
};                                                                                                                     // 16968
                                                                                                                       // 16969
/**                                                                                                                    // 16970
 * outTransformFrom sets the accessor for the state of the transform used in transitioning out renderables.            // 16971
 * @method outTransformFrom                                                                                            // 16972
 * @param {Function|Transitionable} transform  A function that returns a transform from outside closure, or a          // 16973
 * a transitionable that manages a full transform (a sixteen value array).                                             // 16974
 * @chainable                                                                                                          // 16975
 */                                                                                                                    // 16976
RenderController.prototype.outTransformFrom = function outTransformFrom(transform) {                                   // 16977
    if (transform instanceof Function) this.outTransformMap = transform;                                               // 16978
    else if (transform && transform.get) this.outTransformMap = transform.get.bind(transform);                         // 16979
    else throw new Error('outTransformFrom takes only function or getter object');                                     // 16980
    //TODO: tween transition                                                                                           // 16981
    return this;                                                                                                       // 16982
};                                                                                                                     // 16983
                                                                                                                       // 16984
/**                                                                                                                    // 16985
 * outOpacityFrom sets the accessor for the state of the opacity used in transitioning out renderables.                // 16986
 * @method outOpacityFrom                                                                                              // 16987
 * @param {Function|Transitionable} opacity  A function that returns an opacity from outside closure, or a             // 16988
 * a transitionable that manages opacity (a number between zero and one).                                              // 16989
 * @chainable                                                                                                          // 16990
 */                                                                                                                    // 16991
RenderController.prototype.outOpacityFrom = function outOpacityFrom(opacity) {                                         // 16992
    if (opacity instanceof Function) this.outOpacityMap = opacity;                                                     // 16993
    else if (opacity && opacity.get) this.outOpacityMap = opacity.get.bind(opacity);                                   // 16994
    else throw new Error('outOpacityFrom takes only function or getter object');                                       // 16995
    //TODO: tween opacity                                                                                              // 16996
    return this;                                                                                                       // 16997
};                                                                                                                     // 16998
                                                                                                                       // 16999
/**                                                                                                                    // 17000
 * outOriginFrom sets the accessor for the state of the origin used in transitioning out renderables.                  // 17001
 * @method outOriginFrom                                                                                               // 17002
 * @param {Function|Transitionable} origin A function that returns an origin from outside closure, or a                // 17003
 * a transitionable that manages origin (a two value array of numbers between zero and one).                           // 17004
 * @chainable                                                                                                          // 17005
 */                                                                                                                    // 17006
RenderController.prototype.outOriginFrom = function outOriginFrom(origin) {                                            // 17007
    if (origin instanceof Function) this.outOriginMap = origin;                                                        // 17008
    else if (origin && origin.get) this.outOriginMap = origin.get.bind(origin);                                        // 17009
    else throw new Error('outOriginFrom takes only function or getter object');                                        // 17010
    //TODO: tween origin                                                                                               // 17011
    return this;                                                                                                       // 17012
};                                                                                                                     // 17013
                                                                                                                       // 17014
/**                                                                                                                    // 17015
 * outAlignFrom sets the accessor for the state of the align used in transitioning out renderables.                    // 17016
 * @method outAlignFrom                                                                                                // 17017
 * @param {Function|Transitionable} align A function that returns an align from outside closure, or a                  // 17018
 * a transitionable that manages align (a two value array of numbers between zero and one).                            // 17019
 * @chainable                                                                                                          // 17020
 */                                                                                                                    // 17021
RenderController.prototype.outAlignFrom = function outAlignFrom(align) {                                               // 17022
    if (align instanceof Function) this.outAlignMap = align;                                                           // 17023
    else if (align && align.get) this.outAlignMap = align.get.bind(align);                                             // 17024
    else throw new Error('outAlignFrom takes only function or getter object');                                         // 17025
    //TODO: tween align                                                                                                // 17026
    return this;                                                                                                       // 17027
};                                                                                                                     // 17028
                                                                                                                       // 17029
/**                                                                                                                    // 17030
 * Show displays the targeted renderable with a transition and an optional callback to                                 // 17031
 * execute afterwards.                                                                                                 // 17032
 * @method show                                                                                                        // 17033
 * @param {Object} renderable The renderable you want to show.                                                         // 17034
 * @param {Transition} [transition] Overwrites the default transition in to display the                                // 17035
 * passed-in renderable.                                                                                               // 17036
 * @param {function} [callback] Executes after transitioning in the renderable.                                        // 17037
 * @chainable                                                                                                          // 17038
 */                                                                                                                    // 17039
RenderController.prototype.show = function show(renderable, transition, callback) {                                    // 17040
    if (!renderable) {                                                                                                 // 17041
        return this.hide(callback);                                                                                    // 17042
    }                                                                                                                  // 17043
                                                                                                                       // 17044
    if (transition instanceof Function) {                                                                              // 17045
        callback = transition;                                                                                         // 17046
        transition = null;                                                                                             // 17047
    }                                                                                                                  // 17048
                                                                                                                       // 17049
    if (this._showing >= 0) {                                                                                          // 17050
        if (this.options.overlap) this.hide();                                                                         // 17051
        else {                                                                                                         // 17052
            if (this._nextRenderable) {                                                                                // 17053
                this._nextRenderable = renderable;                                                                     // 17054
            }                                                                                                          // 17055
            else {                                                                                                     // 17056
                this._nextRenderable = renderable;                                                                     // 17057
                this.hide(function() {                                                                                 // 17058
                    if (this._nextRenderable === renderable) this.show(this._nextRenderable, callback);                // 17059
                    this._nextRenderable = null;                                                                       // 17060
                });                                                                                                    // 17061
            }                                                                                                          // 17062
            return undefined;                                                                                          // 17063
        }                                                                                                              // 17064
    }                                                                                                                  // 17065
                                                                                                                       // 17066
    var state = null;                                                                                                  // 17067
                                                                                                                       // 17068
    // check to see if we should restore                                                                               // 17069
    var renderableIndex = this._renderables.indexOf(renderable);                                                       // 17070
    if (renderableIndex >= 0) {                                                                                        // 17071
        this._showing = renderableIndex;                                                                               // 17072
        state = this._states[renderableIndex];                                                                         // 17073
        state.halt();                                                                                                  // 17074
                                                                                                                       // 17075
        var outgoingIndex = this._outgoingRenderables.indexOf(renderable);                                             // 17076
        if (outgoingIndex >= 0) this._outgoingRenderables.splice(outgoingIndex, 1);                                    // 17077
    }                                                                                                                  // 17078
    else {                                                                                                             // 17079
        state = new Transitionable(0);                                                                                 // 17080
                                                                                                                       // 17081
        var modifier = new Modifier({                                                                                  // 17082
            transform: this.inTransformMap ? _mappedState.bind(this, this.inTransformMap, state) : null,               // 17083
            opacity: this.inOpacityMap ? _mappedState.bind(this, this.inOpacityMap, state) : null,                     // 17084
            origin: this.inOriginMap ? _mappedState.bind(this, this.inOriginMap, state) : null,                        // 17085
            align: this.inAlignMap ? _mappedState.bind(this, this.inAlignMap, state) : null                            // 17086
        });                                                                                                            // 17087
                                                                                                                       // 17088
        var node = new RenderNode();                                                                                   // 17089
        node.add(modifier).add(renderable);                                                                            // 17090
                                                                                                                       // 17091
        this._showing = this._nodes.length;                                                                            // 17092
        this._nodes.push(node);                                                                                        // 17093
        this._modifiers.push(modifier);                                                                                // 17094
        this._states.push(state);                                                                                      // 17095
        this._renderables.push(renderable);                                                                            // 17096
    }                                                                                                                  // 17097
                                                                                                                       // 17098
    if (!transition) transition = this.options.inTransition;                                                           // 17099
    state.set(1, transition, callback);                                                                                // 17100
};                                                                                                                     // 17101
                                                                                                                       // 17102
/**                                                                                                                    // 17103
 * Hide hides the currently displayed renderable with an out transition.                                               // 17104
 * @method hide                                                                                                        // 17105
 * @param {Transition} [transition] Overwrites the default transition in to hide the                                   // 17106
 * currently controlled renderable.                                                                                    // 17107
 * @param {function} [callback] Executes after transitioning out the renderable.                                       // 17108
 * @chainable                                                                                                          // 17109
 */                                                                                                                    // 17110
RenderController.prototype.hide = function hide(transition, callback) {                                                // 17111
    if (this._showing < 0) return;                                                                                     // 17112
    var index = this._showing;                                                                                         // 17113
    this._showing = -1;                                                                                                // 17114
                                                                                                                       // 17115
    if (transition instanceof Function) {                                                                              // 17116
        callback = transition;                                                                                         // 17117
        transition = undefined;                                                                                        // 17118
    }                                                                                                                  // 17119
                                                                                                                       // 17120
    var node = this._nodes[index];                                                                                     // 17121
    var modifier = this._modifiers[index];                                                                             // 17122
    var state = this._states[index];                                                                                   // 17123
    var renderable = this._renderables[index];                                                                         // 17124
                                                                                                                       // 17125
    modifier.transformFrom(this.outTransformMap ? _mappedState.bind(this, this.outTransformMap, state) : null);        // 17126
    modifier.opacityFrom(this.outOpacityMap ? _mappedState.bind(this, this.outOpacityMap, state) : null);              // 17127
    modifier.originFrom(this.outOriginMap ? _mappedState.bind(this, this.outOriginMap, state) : null);                 // 17128
    modifier.alignFrom(this.outAlignMap ? _mappedState.bind(this, this.outAlignMap, state) : null);                    // 17129
                                                                                                                       // 17130
    if (this._outgoingRenderables.indexOf(renderable) < 0) this._outgoingRenderables.push(renderable);                 // 17131
                                                                                                                       // 17132
    if (!transition) transition = this.options.outTransition;                                                          // 17133
    state.halt();                                                                                                      // 17134
    state.set(0, transition, function(node, modifier, state, renderable) {                                             // 17135
        if (this._outgoingRenderables.indexOf(renderable) >= 0) {                                                      // 17136
            var index = this._nodes.indexOf(node);                                                                     // 17137
            this._nodes.splice(index, 1);                                                                              // 17138
            this._modifiers.splice(index, 1);                                                                          // 17139
            this._states.splice(index, 1);                                                                             // 17140
            this._renderables.splice(index, 1);                                                                        // 17141
            this._outgoingRenderables.splice(this._outgoingRenderables.indexOf(renderable), 1);                        // 17142
                                                                                                                       // 17143
            if (this._showing >= index) this._showing--;                                                               // 17144
        }                                                                                                              // 17145
        if (callback) callback.call(this);                                                                             // 17146
    }.bind(this, node, modifier, state, renderable));                                                                  // 17147
};                                                                                                                     // 17148
                                                                                                                       // 17149
/**                                                                                                                    // 17150
 * Generate a render spec from the contents of this component.                                                         // 17151
 *                                                                                                                     // 17152
 * @private                                                                                                            // 17153
 * @method render                                                                                                      // 17154
 * @return {number} Render spec for this component                                                                     // 17155
 */                                                                                                                    // 17156
RenderController.prototype.render = function render() {                                                                // 17157
    var result = this._output;                                                                                         // 17158
    if (result.length > this._nodes.length) result.splice(this._nodes.length);                                         // 17159
    for (var i = 0; i < this._nodes.length; i++) {                                                                     // 17160
        result[i] = this._nodes[i].render();                                                                           // 17161
    }                                                                                                                  // 17162
    return result;                                                                                                     // 17163
};                                                                                                                     // 17164
                                                                                                                       // 17165
module.exports = RenderController;                                                                                     // 17166
},{"../core/Modifier":9,"../core/RenderNode":11,"../core/Transform":15,"../core/View":16,"../transitions/Transitionable":89}],108:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 17168
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 17169
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 17170
 *                                                                                                                     // 17171
 * Owner: felix@famo.us                                                                                                // 17172
 * @license MPL 2.0                                                                                                    // 17173
 * @copyright Famous Industries, Inc. 2014                                                                             // 17174
 */                                                                                                                    // 17175
                                                                                                                       // 17176
var ContainerSurface = _dereq_('../surfaces/ContainerSurface');                                                        // 17177
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17178
var Scrollview = _dereq_('./Scrollview');                                                                              // 17179
var Utility = _dereq_('../utilities/Utility');                                                                         // 17180
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17181
                                                                                                                       // 17182
/**                                                                                                                    // 17183
 * A Container surface with a scrollview automatically added. The convenience of ScrollContainer lies in               // 17184
 * being able to clip out portions of the associated scrollview that lie outside the bounding surface,                 // 17185
 * and in being able to move the scrollview more easily by applying modifiers to the parent container                  // 17186
 * surface.                                                                                                            // 17187
 * @class ScrollContainer                                                                                              // 17188
 * @constructor                                                                                                        // 17189
 * @param {Options} [options] An object of configurable options.                                                       // 17190
 * @param {Options} [options.container=undefined] Options for the ScrollContainer instance's surface.                  // 17191
 * @param {Options} [options.scrollview={direction:Utility.Direction.X}]  Options for the ScrollContainer instance's scrollview.
 */                                                                                                                    // 17193
function ScrollContainer(options) {                                                                                    // 17194
    this.options = Object.create(ScrollContainer.DEFAULT_OPTIONS);                                                     // 17195
    this._optionsManager = new OptionsManager(this.options);                                                           // 17196
                                                                                                                       // 17197
    if (options) this.setOptions(options);                                                                             // 17198
                                                                                                                       // 17199
    this.container = new ContainerSurface(this.options.container);                                                     // 17200
    this.scrollview = new Scrollview(this.options.scrollview);                                                         // 17201
                                                                                                                       // 17202
    this.container.add(this.scrollview);                                                                               // 17203
                                                                                                                       // 17204
    this._eventInput = new EventHandler();                                                                             // 17205
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17206
                                                                                                                       // 17207
    this._eventInput.pipe(this.scrollview);                                                                            // 17208
                                                                                                                       // 17209
    this._eventOutput = new EventHandler();                                                                            // 17210
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17211
                                                                                                                       // 17212
    this.container.pipe(this._eventOutput);                                                                            // 17213
    this.scrollview.pipe(this._eventOutput);                                                                           // 17214
}                                                                                                                      // 17215
                                                                                                                       // 17216
ScrollContainer.DEFAULT_OPTIONS = {                                                                                    // 17217
    container: {                                                                                                       // 17218
        properties: {overflow : 'hidden'}                                                                              // 17219
    },                                                                                                                 // 17220
    scrollview: {}                                                                                                     // 17221
};                                                                                                                     // 17222
                                                                                                                       // 17223
/**                                                                                                                    // 17224
 * Patches the ScrollContainer instance's options with the passed-in ones.                                             // 17225
 *                                                                                                                     // 17226
 * @method setOptions                                                                                                  // 17227
 * @param {Options} options An object of configurable options for the ScrollContainer instance.                        // 17228
 */                                                                                                                    // 17229
ScrollContainer.prototype.setOptions = function setOptions(options) {                                                  // 17230
    return this._optionsManager.setOptions(options);                                                                   // 17231
};                                                                                                                     // 17232
                                                                                                                       // 17233
/**                                                                                                                    // 17234
 * Sets the collection of renderables under the ScrollContainer instance scrollview's control.                         // 17235
 *                                                                                                                     // 17236
 * @method sequenceFrom                                                                                                // 17237
 * @param {Array|ViewSequence} sequence Either an array of renderables or a Famous ViewSequence.                       // 17238
 */                                                                                                                    // 17239
ScrollContainer.prototype.sequenceFrom = function sequenceFrom() {                                                     // 17240
    return this.scrollview.sequenceFrom.apply(this.scrollview, arguments);                                             // 17241
};                                                                                                                     // 17242
                                                                                                                       // 17243
/**                                                                                                                    // 17244
 * Returns the width and the height of the ScrollContainer instance.                                                   // 17245
 *                                                                                                                     // 17246
 * @method getSize                                                                                                     // 17247
 * @return {Array} A two value array of the ScrollContainer instance's current width and height (in that order).       // 17248
 */                                                                                                                    // 17249
ScrollContainer.prototype.getSize = function getSize() {                                                               // 17250
    return this.container.getSize.apply(this.container, arguments);                                                    // 17251
};                                                                                                                     // 17252
                                                                                                                       // 17253
/**                                                                                                                    // 17254
 * Generate a render spec from the contents of this component.                                                         // 17255
 *                                                                                                                     // 17256
 * @private                                                                                                            // 17257
 * @method render                                                                                                      // 17258
 * @return {number} Render spec for this component                                                                     // 17259
 */                                                                                                                    // 17260
ScrollContainer.prototype.render = function render() {                                                                 // 17261
    return this.container.render();                                                                                    // 17262
};                                                                                                                     // 17263
                                                                                                                       // 17264
module.exports = ScrollContainer;                                                                                      // 17265
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../surfaces/ContainerSurface":76,"../utilities/Utility":96,"./Scrollview":110}],109:[function(_dereq_,module,exports){
var Entity = _dereq_('../core/Entity');                                                                                // 17267
var Group = _dereq_('../core/Group');                                                                                  // 17268
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17269
var Transform = _dereq_('../core/Transform');                                                                          // 17270
var Utility = _dereq_('../utilities/Utility');                                                                         // 17271
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 17272
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17273
                                                                                                                       // 17274
/**                                                                                                                    // 17275
 * Scroller lays out a collection of renderables, and will browse through them based on                                // 17276
 * accessed position. Scroller also broadcasts an 'edgeHit' event, with a position property of the location of the edge,
 * when you've hit the 'edges' of it's renderable collection.                                                          // 17278
 * @class Scroller                                                                                                     // 17279
 * @constructor                                                                                                        // 17280
  * @event error                                                                                                       // 17281
 * @param {Options} [options] An object of configurable options.                                                       // 17282
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17283
 * module, this option will lay out the Scroller instance's renderables either horizontally                            // 17284
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17285
 * to just use integers as well.                                                                                       // 17286
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scroller will display content in.        // 17287
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scroller will process renderables' associated calculations in.
 */                                                                                                                    // 17289
function Scroller(options) {                                                                                           // 17290
    this.options = Object.create(this.constructor.DEFAULT_OPTIONS);                                                    // 17291
    this._optionsManager = new OptionsManager(this.options);                                                           // 17292
    if (options) this._optionsManager.setOptions(options);                                                             // 17293
                                                                                                                       // 17294
    this._node = null;                                                                                                 // 17295
    this._position = 0;                                                                                                // 17296
                                                                                                                       // 17297
    // used for shifting nodes                                                                                         // 17298
    this._positionOffset = 0;                                                                                          // 17299
                                                                                                                       // 17300
    this._positionGetter = null;                                                                                       // 17301
    this._outputFunction = null;                                                                                       // 17302
    this._masterOutputFunction = null;                                                                                 // 17303
    this.outputFrom();                                                                                                 // 17304
                                                                                                                       // 17305
    this._onEdge = 0; // -1 for top, 1 for bottom                                                                      // 17306
                                                                                                                       // 17307
    this.group = new Group();                                                                                          // 17308
    this.group.add({render: _innerRender.bind(this)});                                                                 // 17309
                                                                                                                       // 17310
    this._entityId = Entity.register(this);                                                                            // 17311
    this._size = [undefined, undefined];                                                                               // 17312
    this._contextSize = [undefined, undefined];                                                                        // 17313
                                                                                                                       // 17314
    this._eventInput = new EventHandler();                                                                             // 17315
    this._eventOutput = new EventHandler();                                                                            // 17316
                                                                                                                       // 17317
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17318
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17319
}                                                                                                                      // 17320
                                                                                                                       // 17321
Scroller.DEFAULT_OPTIONS = {                                                                                           // 17322
    direction: Utility.Direction.Y,                                                                                    // 17323
    margin: 0,                                                                                                         // 17324
    clipSize: undefined,                                                                                               // 17325
    groupScroll: false                                                                                                 // 17326
};                                                                                                                     // 17327
                                                                                                                       // 17328
var EDGE_TOLERANCE = 0; //slop for detecting passing the edge                                                          // 17329
                                                                                                                       // 17330
function _sizeForDir(size) {                                                                                           // 17331
    if (!size) size = this._contextSize;                                                                               // 17332
    var dimension = this.options.direction;                                                                            // 17333
    return (size[dimension] === undefined) ? this._contextSize[dimension] : size[dimension];                           // 17334
}                                                                                                                      // 17335
                                                                                                                       // 17336
function _output(node, offset, target) {                                                                               // 17337
    var size = node.getSize ? node.getSize() : this._contextSize;                                                      // 17338
    var transform = this._outputFunction(offset);                                                                      // 17339
    target.push({transform: transform, target: node.render()});                                                        // 17340
    return _sizeForDir.call(this, size);                                                                               // 17341
}                                                                                                                      // 17342
                                                                                                                       // 17343
function _getClipSize() {                                                                                              // 17344
    if (this.options.clipSize !== undefined) return this.options.clipSize;                                             // 17345
    if (this._contextSize[this.options.direction] > this.getCumulativeSize()[this.options.direction]) {                // 17346
        return _sizeForDir.call(this, this.getCumulativeSize());                                                       // 17347
    } else {                                                                                                           // 17348
        return _sizeForDir.call(this, this._contextSize);                                                              // 17349
    }                                                                                                                  // 17350
}                                                                                                                      // 17351
                                                                                                                       // 17352
/**                                                                                                                    // 17353
* Returns the cumulative size of the renderables in the view sequence                                                  // 17354
* @method getCumulativeSize                                                                                            // 17355
* @return {array} a two value array of the view sequence's cumulative size up to the index.                            // 17356
*/                                                                                                                     // 17357
Scroller.prototype.getCumulativeSize = function(index) {                                                               // 17358
    if (index === undefined) index = this._node._.cumulativeSizes.length - 1;                                          // 17359
    return this._node._.getSize(index);                                                                                // 17360
};                                                                                                                     // 17361
                                                                                                                       // 17362
/**                                                                                                                    // 17363
 * Patches the Scroller instance's options with the passed-in ones.                                                    // 17364
 * @method setOptions                                                                                                  // 17365
 * @param {Options} options An object of configurable options for the Scroller instance.                               // 17366
 */                                                                                                                    // 17367
Scroller.prototype.setOptions = function setOptions(options) {                                                         // 17368
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 17369
        if (options.groupScroll)                                                                                       // 17370
            this.group.pipe(this._eventOutput);                                                                        // 17371
        else                                                                                                           // 17372
            this.group.unpipe(this._eventOutput);                                                                      // 17373
    }                                                                                                                  // 17374
    this._optionsManager.setOptions(options);                                                                          // 17375
};                                                                                                                     // 17376
                                                                                                                       // 17377
/**                                                                                                                    // 17378
 * Tells you if the Scroller instance is on an edge.                                                                   // 17379
 * @method onEdge                                                                                                      // 17380
 * @return {Boolean} Whether the Scroller instance is on an edge or not.                                               // 17381
 */                                                                                                                    // 17382
Scroller.prototype.onEdge = function onEdge() {                                                                        // 17383
    return this._onEdge;                                                                                               // 17384
};                                                                                                                     // 17385
                                                                                                                       // 17386
/**                                                                                                                    // 17387
 * Allows you to overwrite the way Scroller lays out it's renderables. Scroller will                                   // 17388
 * pass an offset into the function. By default the Scroller instance just translates each node                        // 17389
 * in it's direction by the passed-in offset.                                                                          // 17390
 * Scroller will translate each renderable down                                                                        // 17391
 * @method outputFrom                                                                                                  // 17392
 * @param {Function} fn A function that takes an offset and returns a transform.                                       // 17393
 * @param {Function} [masterFn]                                                                                        // 17394
 */                                                                                                                    // 17395
Scroller.prototype.outputFrom = function outputFrom(fn, masterFn) {                                                    // 17396
    if (!fn) {                                                                                                         // 17397
        fn = function(offset) {                                                                                        // 17398
            return (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
        }.bind(this);                                                                                                  // 17400
        if (!masterFn) masterFn = fn;                                                                                  // 17401
    }                                                                                                                  // 17402
    this._outputFunction = fn;                                                                                         // 17403
    this._masterOutputFunction = masterFn ? masterFn : function(offset) {                                              // 17404
        return Transform.inverse(fn(-offset));                                                                         // 17405
    };                                                                                                                 // 17406
};                                                                                                                     // 17407
                                                                                                                       // 17408
/**                                                                                                                    // 17409
 * The Scroller instance's method for reading from an external position. Scroller uses                                 // 17410
 * the external position to actually scroll through it's renderables.                                                  // 17411
 * @method positionFrom                                                                                                // 17412
 * @param {Getter} position Can be either a function that returns a position,                                          // 17413
 * or an object with a get method that returns a position.                                                             // 17414
 */                                                                                                                    // 17415
Scroller.prototype.positionFrom = function positionFrom(position) {                                                    // 17416
    if (position instanceof Function) this._positionGetter = position;                                                 // 17417
    else if (position && position.get) this._positionGetter = position.get.bind(position);                             // 17418
    else {                                                                                                             // 17419
        this._positionGetter = null;                                                                                   // 17420
        this._position = position;                                                                                     // 17421
    }                                                                                                                  // 17422
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17423
};                                                                                                                     // 17424
                                                                                                                       // 17425
/**                                                                                                                    // 17426
 * Sets the collection of renderables under the Scroller instance's control.                                           // 17427
 *                                                                                                                     // 17428
 * @method sequenceFrom                                                                                                // 17429
 * @param node {Array|ViewSequence} Either an array of renderables or a Famous viewSequence.                           // 17430
 * @chainable                                                                                                          // 17431
 */                                                                                                                    // 17432
Scroller.prototype.sequenceFrom = function sequenceFrom(node) {                                                        // 17433
    if (node instanceof Array) node = new ViewSequence({array: node});                                                 // 17434
    this._node = node;                                                                                                 // 17435
    this._positionOffset = 0;                                                                                          // 17436
};                                                                                                                     // 17437
                                                                                                                       // 17438
/**                                                                                                                    // 17439
 * Returns the width and the height of the Scroller instance.                                                          // 17440
 *                                                                                                                     // 17441
 * @method getSize                                                                                                     // 17442
 * @return {Array} A two value array of the Scroller instance's current width and height (in that order).              // 17443
 */                                                                                                                    // 17444
Scroller.prototype.getSize = function getSize(actual) {                                                                // 17445
    return actual ? this._contextSize : this._size;                                                                    // 17446
};                                                                                                                     // 17447
                                                                                                                       // 17448
/**                                                                                                                    // 17449
 * Generate a render spec from the contents of this component.                                                         // 17450
 *                                                                                                                     // 17451
 * @private                                                                                                            // 17452
 * @method render                                                                                                      // 17453
 * @return {number} Render spec for this component                                                                     // 17454
 */                                                                                                                    // 17455
Scroller.prototype.render = function render() {                                                                        // 17456
    if (!this._node) return null;                                                                                      // 17457
    if (this._positionGetter) this._position = this._positionGetter.call(this);                                        // 17458
    return this._entityId;                                                                                             // 17459
};                                                                                                                     // 17460
                                                                                                                       // 17461
/**                                                                                                                    // 17462
 * Apply changes from this component to the corresponding document element.                                            // 17463
 * This includes changes to classes, styles, size, content, opacity, origin,                                           // 17464
 * and matrix transforms.                                                                                              // 17465
 *                                                                                                                     // 17466
 * @private                                                                                                            // 17467
 * @method commit                                                                                                      // 17468
 * @param {Context} context commit context                                                                             // 17469
 */                                                                                                                    // 17470
Scroller.prototype.commit = function commit(context) {                                                                 // 17471
    var transform = context.transform;                                                                                 // 17472
    var opacity = context.opacity;                                                                                     // 17473
    var origin = context.origin;                                                                                       // 17474
    var size = context.size;                                                                                           // 17475
                                                                                                                       // 17476
    // reset edge detection on size change                                                                             // 17477
    if (!this.options.clipSize && (size[0] !== this._contextSize[0] || size[1] !== this._contextSize[1])) {            // 17478
        this._onEdge = 0;                                                                                              // 17479
        this._contextSize[0] = size[0];                                                                                // 17480
        this._contextSize[1] = size[1];                                                                                // 17481
                                                                                                                       // 17482
        if (this.options.direction === Utility.Direction.X) {                                                          // 17483
            this._size[0] = _getClipSize.call(this);                                                                   // 17484
            this._size[1] = undefined;                                                                                 // 17485
        }                                                                                                              // 17486
        else {                                                                                                         // 17487
            this._size[0] = undefined;                                                                                 // 17488
            this._size[1] = _getClipSize.call(this);                                                                   // 17489
        }                                                                                                              // 17490
    }                                                                                                                  // 17491
                                                                                                                       // 17492
    var scrollTransform = this._masterOutputFunction(-this._position);                                                 // 17493
                                                                                                                       // 17494
    return {                                                                                                           // 17495
        transform: Transform.multiply(transform, scrollTransform),                                                     // 17496
        size: size,                                                                                                    // 17497
        opacity: opacity,                                                                                              // 17498
        origin: origin,                                                                                                // 17499
        target: this.group.render()                                                                                    // 17500
    };                                                                                                                 // 17501
};                                                                                                                     // 17502
                                                                                                                       // 17503
function _innerRender() {                                                                                              // 17504
    var size = null;                                                                                                   // 17505
    var position = this._position;                                                                                     // 17506
    var result = [];                                                                                                   // 17507
                                                                                                                       // 17508
    var offset = -this._positionOffset;                                                                                // 17509
    var clipSize = _getClipSize.call(this);                                                                            // 17510
    var currNode = this._node;                                                                                         // 17511
    while (currNode && offset - position < clipSize + this.options.margin) {                                           // 17512
        offset += _output.call(this, currNode, offset, result);                                                        // 17513
        currNode = currNode.getNext ? currNode.getNext() : null;                                                       // 17514
    }                                                                                                                  // 17515
                                                                                                                       // 17516
    var sizeNode = this._node;                                                                                         // 17517
    var nodesSize = _sizeForDir.call(this, sizeNode.getSize());                                                        // 17518
    if (offset < clipSize) {                                                                                           // 17519
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17520
            sizeNode = sizeNode.getPrevious();                                                                         // 17521
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17522
        }                                                                                                              // 17523
        sizeNode = this._node;                                                                                         // 17524
        while (sizeNode && nodesSize < clipSize) {                                                                     // 17525
            sizeNode = sizeNode.getNext();                                                                             // 17526
            if (sizeNode) nodesSize += _sizeForDir.call(this, sizeNode.getSize());                                     // 17527
        }                                                                                                              // 17528
    }                                                                                                                  // 17529
                                                                                                                       // 17530
    if (!currNode && offset - position < clipSize - EDGE_TOLERANCE) {                                                  // 17531
        if (this._onEdge !== 1){                                                                                       // 17532
            this._onEdge = 1;                                                                                          // 17533
            this._eventOutput.emit('onEdge', {                                                                         // 17534
                position: offset - clipSize                                                                            // 17535
            });                                                                                                        // 17536
        }                                                                                                              // 17537
    }                                                                                                                  // 17538
    else if (!this._node.getPrevious() && position < -EDGE_TOLERANCE) {                                                // 17539
        if (this._onEdge !== -1) {                                                                                     // 17540
            this._onEdge = -1;                                                                                         // 17541
            this._eventOutput.emit('onEdge', {                                                                         // 17542
                position: 0                                                                                            // 17543
            });                                                                                                        // 17544
        }                                                                                                              // 17545
    }                                                                                                                  // 17546
    else {                                                                                                             // 17547
        if (this._onEdge !== 0){                                                                                       // 17548
            this._onEdge = 0;                                                                                          // 17549
            this._eventOutput.emit('offEdge');                                                                         // 17550
        }                                                                                                              // 17551
    }                                                                                                                  // 17552
                                                                                                                       // 17553
    // backwards                                                                                                       // 17554
    currNode = (this._node && this._node.getPrevious) ? this._node.getPrevious() : null;                               // 17555
    offset = -this._positionOffset;                                                                                    // 17556
    if (currNode) {                                                                                                    // 17557
        size = currNode.getSize ? currNode.getSize() : this._contextSize;                                              // 17558
        offset -= _sizeForDir.call(this, size);                                                                        // 17559
    }                                                                                                                  // 17560
                                                                                                                       // 17561
    while (currNode && ((offset - position) > -(clipSize + this.options.margin))) {                                    // 17562
        _output.call(this, currNode, offset, result);                                                                  // 17563
        currNode = currNode.getPrevious ? currNode.getPrevious() : null;                                               // 17564
        if (currNode) {                                                                                                // 17565
            size = currNode.getSize ? currNode.getSize() : this._contextSize;                                          // 17566
            offset -= _sizeForDir.call(this, size);                                                                    // 17567
        }                                                                                                              // 17568
    }                                                                                                                  // 17569
                                                                                                                       // 17570
    return result;                                                                                                     // 17571
}                                                                                                                      // 17572
                                                                                                                       // 17573
module.exports = Scroller;                                                                                             // 17574
},{"../core/Entity":5,"../core/EventHandler":7,"../core/Group":8,"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":96}],110:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 17576
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 17577
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 17578
 *                                                                                                                     // 17579
 * Owner: felix@famo.us                                                                                                // 17580
 * @license MPL 2.0                                                                                                    // 17581
 * @copyright Famous Industries, Inc. 2014                                                                             // 17582
 */                                                                                                                    // 17583
                                                                                                                       // 17584
var PhysicsEngine = _dereq_('../physics/PhysicsEngine');                                                               // 17585
var Particle = _dereq_('../physics/bodies/Particle');                                                                  // 17586
var Drag = _dereq_('../physics/forces/Drag');                                                                          // 17587
var Spring = _dereq_('../physics/forces/Spring');                                                                      // 17588
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 17589
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 17590
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 17591
var Scroller = _dereq_('../views/Scroller');                                                                           // 17592
var Utility = _dereq_('../utilities/Utility');                                                                         // 17593
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 17594
var ScrollSync = _dereq_('../inputs/ScrollSync');                                                                      // 17595
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 17596
GenericSync.register({scroll : ScrollSync, touch : TouchSync});                                                        // 17597
                                                                                                                       // 17598
/** @const */                                                                                                          // 17599
var TOLERANCE = 0.5;                                                                                                   // 17600
                                                                                                                       // 17601
/** @enum */                                                                                                           // 17602
var SpringStates = {                                                                                                   // 17603
    NONE: 0,                                                                                                           // 17604
    EDGE: 1,                                                                                                           // 17605
    PAGE: 2                                                                                                            // 17606
};                                                                                                                     // 17607
                                                                                                                       // 17608
/** @enum */                                                                                                           // 17609
var EdgeStates = {                                                                                                     // 17610
    TOP:   -1,                                                                                                         // 17611
    NONE:   0,                                                                                                         // 17612
    BOTTOM: 1                                                                                                          // 17613
};                                                                                                                     // 17614
                                                                                                                       // 17615
/**                                                                                                                    // 17616
 * Scrollview will lay out a collection of renderables sequentially in the specified direction, and will               // 17617
 * allow you to scroll through them with mousewheel or touch events.                                                   // 17618
 * @class Scrollview                                                                                                   // 17619
 * @constructor                                                                                                        // 17620
 * @param {Options} [options] An object of configurable options.                                                       // 17621
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 17622
 * module, this option will lay out the Scrollview instance's renderables either horizontally                          // 17623
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 17624
 * to just use integers as well.                                                                                       // 17625
 * @param {Boolean} [options.rails=true] When true, Scrollview's genericSync will only process input in it's primary access.
 * @param {Number} [clipSize=undefined] The size of the area (in pixels) that Scrollview will display content in.      // 17627
 * @param {Number} [margin=undefined] The size of the area (in pixels) that Scrollview will process renderables' associated calculations in.
 * @param {Number} [friction=0.001] Input resistance proportional to the velocity of the input.                        // 17629
 * Controls the feel of the Scrollview instance at low velocities.                                                     // 17630
 * @param {Number} [drag=0.0001] Input resistance proportional to the square of the velocity of the input.             // 17631
 * Affects Scrollview instance more prominently at high velocities.                                                    // 17632
 * @param {Number} [edgeGrip=0.5] A coefficient for resistance against after-touch momentum.                           // 17633
 * @param {Number} [egePeriod=300] Sets the period on the spring that handles the physics associated                   // 17634
 * with hitting the end of a scrollview.                                                                               // 17635
 * @param {Number} [edgeDamp=1] Sets the damping on the spring that handles the physics associated                     // 17636
 * with hitting the end of a scrollview.                                                                               // 17637
 * @param {Boolean} [paginated=false] A paginated scrollview will scroll through items discretely                      // 17638
 * rather than continously.                                                                                            // 17639
 * @param {Number} [pagePeriod=500] Sets the period on the spring that handles the physics associated                  // 17640
 * with pagination.                                                                                                    // 17641
 * @param {Number} [pageDamp=0.8] Sets the damping on the spring that handles the physics associated                   // 17642
 * with pagination.                                                                                                    // 17643
 * @param {Number} [pageStopSpeed=Infinity] The threshold for determining the amount of velocity                       // 17644
 * required to trigger pagination. The lower the threshold, the easier it is to scroll continuosly.                    // 17645
 * @param {Number} [pageSwitchSpeed=1] The threshold for momentum-based velocity pagination.                           // 17646
 * @param {Number} [speedLimit=10] The highest scrolling speed you can reach.                                          // 17647
 */                                                                                                                    // 17648
function Scrollview(options) {                                                                                         // 17649
    // patch options with defaults                                                                                     // 17650
    this.options = Object.create(Scrollview.DEFAULT_OPTIONS);                                                          // 17651
    this._optionsManager = new OptionsManager(this.options);                                                           // 17652
                                                                                                                       // 17653
    // create sub-components                                                                                           // 17654
    this._scroller = new Scroller(this.options);                                                                       // 17655
                                                                                                                       // 17656
    this.sync = new GenericSync(                                                                                       // 17657
        ['scroll', 'touch'],                                                                                           // 17658
        {                                                                                                              // 17659
            direction : this.options.direction,                                                                        // 17660
            scale : this.options.syncScale,                                                                            // 17661
            rails: this.options.rails,                                                                                 // 17662
            preventDefault: this.options.preventDefault !== undefined                                                  // 17663
                ? this.options.preventDefault                                                                          // 17664
                : this.options.direction !== Utility.Direction.Y                                                       // 17665
        }                                                                                                              // 17666
    );                                                                                                                 // 17667
                                                                                                                       // 17668
    this._physicsEngine = new PhysicsEngine();                                                                         // 17669
    this._particle = new Particle();                                                                                   // 17670
    this._physicsEngine.addBody(this._particle);                                                                       // 17671
                                                                                                                       // 17672
    this.spring = new Spring({                                                                                         // 17673
        anchor: [0, 0, 0],                                                                                             // 17674
        period: this.options.edgePeriod,                                                                               // 17675
        dampingRatio: this.options.edgeDamp                                                                            // 17676
    });                                                                                                                // 17677
    this.drag = new Drag({                                                                                             // 17678
        forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,                                                                 // 17679
        strength: this.options.drag                                                                                    // 17680
    });                                                                                                                // 17681
    this.friction = new Drag({                                                                                         // 17682
        forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,                                                                    // 17683
        strength: this.options.friction                                                                                // 17684
    });                                                                                                                // 17685
                                                                                                                       // 17686
    // state                                                                                                           // 17687
    this._node = null;                                                                                                 // 17688
    this._touchCount = 0;                                                                                              // 17689
    this._springState = SpringStates.NONE;                                                                             // 17690
    this._onEdge = EdgeStates.NONE;                                                                                    // 17691
    this._pageSpringPosition = 0;                                                                                      // 17692
    this._edgeSpringPosition = 0;                                                                                      // 17693
    this._touchVelocity = 0;                                                                                           // 17694
    this._earlyEnd = false;                                                                                            // 17695
    this._needsPaginationCheck = false;                                                                                // 17696
    this._displacement = 0;                                                                                            // 17697
    this._totalShift = 0;                                                                                              // 17698
    this._cachedIndex = 0;                                                                                             // 17699
                                                                                                                       // 17700
    // subcomponent logic                                                                                              // 17701
    this._scroller.positionFrom(this.getPosition.bind(this));                                                          // 17702
                                                                                                                       // 17703
    // eventing                                                                                                        // 17704
    this._eventInput = new EventHandler();                                                                             // 17705
    this._eventOutput = new EventHandler();                                                                            // 17706
                                                                                                                       // 17707
    this._eventInput.pipe(this.sync);                                                                                  // 17708
    this.sync.pipe(this._eventInput);                                                                                  // 17709
                                                                                                                       // 17710
    EventHandler.setInputHandler(this, this._eventInput);                                                              // 17711
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 17712
                                                                                                                       // 17713
    _bindEvents.call(this);                                                                                            // 17714
                                                                                                                       // 17715
    // override default options with passed-in custom options                                                          // 17716
    if (options) this.setOptions(options);                                                                             // 17717
}                                                                                                                      // 17718
                                                                                                                       // 17719
Scrollview.DEFAULT_OPTIONS = {                                                                                         // 17720
    direction: Utility.Direction.Y,                                                                                    // 17721
    rails: true,                                                                                                       // 17722
    friction: 0.005,                                                                                                   // 17723
    drag: 0.0001,                                                                                                      // 17724
    edgeGrip: 0.2,                                                                                                     // 17725
    edgePeriod: 300,                                                                                                   // 17726
    edgeDamp: 1,                                                                                                       // 17727
    margin: 1000,       // mostly safe                                                                                 // 17728
    paginated: false,                                                                                                  // 17729
    pagePeriod: 500,                                                                                                   // 17730
    pageDamp: 0.8,                                                                                                     // 17731
    pageStopSpeed: 10,                                                                                                 // 17732
    pageSwitchSpeed: 0.5,                                                                                              // 17733
    speedLimit: 5,                                                                                                     // 17734
    groupScroll: false,                                                                                                // 17735
    syncScale: 1                                                                                                       // 17736
};                                                                                                                     // 17737
                                                                                                                       // 17738
function _handleStart(event) {                                                                                         // 17739
    this._touchCount = event.count;                                                                                    // 17740
    if (event.count === undefined) this._touchCount = 1;                                                               // 17741
                                                                                                                       // 17742
    _detachAgents.call(this);                                                                                          // 17743
                                                                                                                       // 17744
    this.setVelocity(0);                                                                                               // 17745
    this._touchVelocity = 0;                                                                                           // 17746
    this._earlyEnd = false;                                                                                            // 17747
}                                                                                                                      // 17748
                                                                                                                       // 17749
function _handleMove(event) {                                                                                          // 17750
    var velocity = -event.velocity;                                                                                    // 17751
    var delta = -event.delta;                                                                                          // 17752
                                                                                                                       // 17753
    if (this._onEdge !== EdgeStates.NONE && event.slip) {                                                              // 17754
        if ((velocity < 0 && this._onEdge === EdgeStates.TOP) || (velocity > 0 && this._onEdge === EdgeStates.BOTTOM)) {
            if (!this._earlyEnd) {                                                                                     // 17756
                _handleEnd.call(this, event);                                                                          // 17757
                this._earlyEnd = true;                                                                                 // 17758
            }                                                                                                          // 17759
        }                                                                                                              // 17760
        else if (this._earlyEnd && (Math.abs(velocity) > Math.abs(this.getVelocity()))) {                              // 17761
            _handleStart.call(this, event);                                                                            // 17762
        }                                                                                                              // 17763
    }                                                                                                                  // 17764
    if (this._earlyEnd) return;                                                                                        // 17765
    this._touchVelocity = velocity;                                                                                    // 17766
                                                                                                                       // 17767
    if (event.slip) {                                                                                                  // 17768
        var speedLimit = this.options.speedLimit;                                                                      // 17769
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17770
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17771
                                                                                                                       // 17772
        this.setVelocity(velocity);                                                                                    // 17773
                                                                                                                       // 17774
        var deltaLimit = speedLimit * 16;                                                                              // 17775
        if (delta > deltaLimit) delta = deltaLimit;                                                                    // 17776
        else if (delta < -deltaLimit) delta = -deltaLimit;                                                             // 17777
    }                                                                                                                  // 17778
                                                                                                                       // 17779
    this.setPosition(this.getPosition() + delta);                                                                      // 17780
    this._displacement += delta;                                                                                       // 17781
                                                                                                                       // 17782
    if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                           // 17783
}                                                                                                                      // 17784
                                                                                                                       // 17785
function _handleEnd(event) {                                                                                           // 17786
    this._touchCount = event.count || 0;                                                                               // 17787
    if (!this._touchCount) {                                                                                           // 17788
        _detachAgents.call(this);                                                                                      // 17789
        if (this._onEdge !== EdgeStates.NONE) _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);      // 17790
        _attachAgents.call(this);                                                                                      // 17791
        var velocity = -event.velocity;                                                                                // 17792
        var speedLimit = this.options.speedLimit;                                                                      // 17793
        if (event.slip) speedLimit *= this.options.edgeGrip;                                                           // 17794
        if (velocity < -speedLimit) velocity = -speedLimit;                                                            // 17795
        else if (velocity > speedLimit) velocity = speedLimit;                                                         // 17796
        this.setVelocity(velocity);                                                                                    // 17797
        this._touchVelocity = 0;                                                                                       // 17798
        this._needsPaginationCheck = true;                                                                             // 17799
    }                                                                                                                  // 17800
}                                                                                                                      // 17801
                                                                                                                       // 17802
function _bindEvents() {                                                                                               // 17803
    this._eventInput.bindThis(this);                                                                                   // 17804
    this._eventInput.on('start', _handleStart);                                                                        // 17805
    this._eventInput.on('update', _handleMove);                                                                        // 17806
    this._eventInput.on('end', _handleEnd);                                                                            // 17807
                                                                                                                       // 17808
    this._eventInput.on('resize', function() {                                                                         // 17809
        this._node._.calculateSize();                                                                                  // 17810
    }.bind(this));                                                                                                     // 17811
                                                                                                                       // 17812
    this._scroller.on('onEdge', function(data) {                                                                       // 17813
        this._edgeSpringPosition = data.position;                                                                      // 17814
        _handleEdge.call(this, this._scroller.onEdge());                                                               // 17815
        this._eventOutput.emit('onEdge');                                                                              // 17816
    }.bind(this));                                                                                                     // 17817
                                                                                                                       // 17818
    this._scroller.on('offEdge', function() {                                                                          // 17819
        this.sync.setOptions({scale: this.options.syncScale});                                                         // 17820
        this._onEdge = this._scroller.onEdge();                                                                        // 17821
        this._eventOutput.emit('offEdge');                                                                             // 17822
    }.bind(this));                                                                                                     // 17823
                                                                                                                       // 17824
    this._particle.on('update', function(particle) {                                                                   // 17825
        if (this._springState === SpringStates.NONE) _normalizeState.call(this);                                       // 17826
        this._displacement = particle.position.x - this._totalShift;                                                   // 17827
    }.bind(this));                                                                                                     // 17828
                                                                                                                       // 17829
    this._particle.on('end', function() {                                                                              // 17830
        if (!this.options.paginated || (this.options.paginated && this._springState !== SpringStates.NONE))            // 17831
            this._eventOutput.emit('settle');                                                                          // 17832
    }.bind(this));                                                                                                     // 17833
}                                                                                                                      // 17834
                                                                                                                       // 17835
function _attachAgents() {                                                                                             // 17836
    if (this._springState) this._physicsEngine.attach([this.spring], this._particle);                                  // 17837
    else this._physicsEngine.attach([this.drag, this.friction], this._particle);                                       // 17838
}                                                                                                                      // 17839
                                                                                                                       // 17840
function _detachAgents() {                                                                                             // 17841
    this._springState = SpringStates.NONE;                                                                             // 17842
    this._physicsEngine.detachAll();                                                                                   // 17843
}                                                                                                                      // 17844
                                                                                                                       // 17845
function _nodeSizeForDirection(node) {                                                                                 // 17846
    var direction = this.options.direction;                                                                            // 17847
    var nodeSize = node.getSize();                                                                                     // 17848
    return (!nodeSize) ? this._scroller.getSize()[direction] : nodeSize[direction];                                    // 17849
}                                                                                                                      // 17850
                                                                                                                       // 17851
function _handleEdge(edge) {                                                                                           // 17852
    this.sync.setOptions({scale: this.options.edgeGrip});                                                              // 17853
    this._onEdge = edge;                                                                                               // 17854
                                                                                                                       // 17855
    if (!this._touchCount && this._springState !== SpringStates.EDGE) {                                                // 17856
        _setSpring.call(this, this._edgeSpringPosition, SpringStates.EDGE);                                            // 17857
    }                                                                                                                  // 17858
                                                                                                                       // 17859
    if (this._springState && Math.abs(this.getVelocity()) < 0.001) {                                                   // 17860
        // reset agents, detaching the spring                                                                          // 17861
        _detachAgents.call(this);                                                                                      // 17862
        _attachAgents.call(this);                                                                                      // 17863
    }                                                                                                                  // 17864
}                                                                                                                      // 17865
                                                                                                                       // 17866
function _handlePagination() {                                                                                         // 17867
    if (this._touchCount) return;                                                                                      // 17868
    if (this._springState === SpringStates.EDGE) return;                                                               // 17869
                                                                                                                       // 17870
    var velocity = this.getVelocity();                                                                                 // 17871
    if (Math.abs(velocity) >= this.options.pageStopSpeed) return;                                                      // 17872
                                                                                                                       // 17873
    var position = this.getPosition();                                                                                 // 17874
    var velocitySwitch = Math.abs(velocity) > this.options.pageSwitchSpeed;                                            // 17875
                                                                                                                       // 17876
    // parameters to determine when to switch                                                                          // 17877
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17878
    var positionNext = position > 0.5 * nodeSize;                                                                      // 17879
    var positionPrev = position < 0.5 * nodeSize;                                                                      // 17880
                                                                                                                       // 17881
    var velocityNext = velocity > 0;                                                                                   // 17882
    var velocityPrev = velocity < 0;                                                                                   // 17883
                                                                                                                       // 17884
    this._needsPaginationCheck = false;                                                                                // 17885
                                                                                                                       // 17886
    if ((positionNext && !velocitySwitch) || (velocitySwitch && velocityNext)) {                                       // 17887
        this.goToNextPage();                                                                                           // 17888
    }                                                                                                                  // 17889
    else if (velocitySwitch && velocityPrev) {                                                                         // 17890
        this.goToPreviousPage();                                                                                       // 17891
    }                                                                                                                  // 17892
    else _setSpring.call(this, 0, SpringStates.PAGE);                                                                  // 17893
}                                                                                                                      // 17894
                                                                                                                       // 17895
function _setSpring(position, springState) {                                                                           // 17896
    var springOptions;                                                                                                 // 17897
    if (springState === SpringStates.EDGE) {                                                                           // 17898
        this._edgeSpringPosition = position;                                                                           // 17899
        springOptions = {                                                                                              // 17900
            anchor: [this._edgeSpringPosition, 0, 0],                                                                  // 17901
            period: this.options.edgePeriod,                                                                           // 17902
            dampingRatio: this.options.edgeDamp                                                                        // 17903
        };                                                                                                             // 17904
    }                                                                                                                  // 17905
    else if (springState === SpringStates.PAGE) {                                                                      // 17906
        this._pageSpringPosition = position;                                                                           // 17907
        springOptions = {                                                                                              // 17908
            anchor: [this._pageSpringPosition, 0, 0],                                                                  // 17909
            period: this.options.pagePeriod,                                                                           // 17910
            dampingRatio: this.options.pageDamp                                                                        // 17911
        };                                                                                                             // 17912
    }                                                                                                                  // 17913
                                                                                                                       // 17914
    this.spring.setOptions(springOptions);                                                                             // 17915
    if (springState && !this._springState) {                                                                           // 17916
        _detachAgents.call(this);                                                                                      // 17917
        this._springState = springState;                                                                               // 17918
        _attachAgents.call(this);                                                                                      // 17919
    }                                                                                                                  // 17920
    this._springState = springState;                                                                                   // 17921
}                                                                                                                      // 17922
                                                                                                                       // 17923
function _normalizeState() {                                                                                           // 17924
    var offset = 0;                                                                                                    // 17925
                                                                                                                       // 17926
    var position = this.getPosition();                                                                                 // 17927
    position += (position < 0 ? -0.5 : 0.5) >> 0;                                                                      // 17928
                                                                                                                       // 17929
    var nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17930
    var nextNode = this._node.getNext();                                                                               // 17931
                                                                                                                       // 17932
    while (offset + position >= nodeSize && nextNode) {                                                                // 17933
        offset -= nodeSize;                                                                                            // 17934
        this._scroller.sequenceFrom(nextNode);                                                                         // 17935
        this._node = nextNode;                                                                                         // 17936
        nextNode = this._node.getNext();                                                                               // 17937
        nodeSize = _nodeSizeForDirection.call(this, this._node);                                                       // 17938
    }                                                                                                                  // 17939
                                                                                                                       // 17940
    var previousNode = this._node.getPrevious();                                                                       // 17941
    var previousNodeSize;                                                                                              // 17942
                                                                                                                       // 17943
    while (offset + position <= 0 && previousNode) {                                                                   // 17944
        previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                             // 17945
        this._scroller.sequenceFrom(previousNode);                                                                     // 17946
        this._node = previousNode;                                                                                     // 17947
        offset += previousNodeSize;                                                                                    // 17948
        previousNode = this._node.getPrevious();                                                                       // 17949
    }                                                                                                                  // 17950
                                                                                                                       // 17951
    if (offset) _shiftOrigin.call(this, offset);                                                                       // 17952
                                                                                                                       // 17953
    if (this._node) {                                                                                                  // 17954
        if (this._node.index !== this._cachedIndex) {                                                                  // 17955
            if (this.getPosition() < 0.5 * nodeSize) {                                                                 // 17956
                this._cachedIndex = this._node.index;                                                                  // 17957
                this._eventOutput.emit('pageChange', {direction: -1, index: this._cachedIndex});                       // 17958
            }                                                                                                          // 17959
        } else {                                                                                                       // 17960
            if (this.getPosition() > 0.5 * nodeSize) {                                                                 // 17961
                this._cachedIndex = this._node.index + 1;                                                              // 17962
                this._eventOutput.emit('pageChange', {direction: 1, index: this._cachedIndex});                        // 17963
            }                                                                                                          // 17964
        }                                                                                                              // 17965
    }                                                                                                                  // 17966
}                                                                                                                      // 17967
                                                                                                                       // 17968
function _shiftOrigin(amount) {                                                                                        // 17969
    this._edgeSpringPosition += amount;                                                                                // 17970
    this._pageSpringPosition += amount;                                                                                // 17971
    this.setPosition(this.getPosition() + amount);                                                                     // 17972
    this._totalShift += amount;                                                                                        // 17973
                                                                                                                       // 17974
    if (this._springState === SpringStates.EDGE) {                                                                     // 17975
        this.spring.setOptions({anchor: [this._edgeSpringPosition, 0, 0]});                                            // 17976
    }                                                                                                                  // 17977
    else if (this._springState === SpringStates.PAGE) {                                                                // 17978
        this.spring.setOptions({anchor: [this._pageSpringPosition, 0, 0]});                                            // 17979
    }                                                                                                                  // 17980
}                                                                                                                      // 17981
                                                                                                                       // 17982
/**                                                                                                                    // 17983
 * Returns the index of the first visible renderable                                                                   // 17984
 *                                                                                                                     // 17985
 * @method getCurrentIndex                                                                                             // 17986
 * @return {Number} The current index of the ViewSequence                                                              // 17987
 */                                                                                                                    // 17988
Scrollview.prototype.getCurrentIndex = function getCurrentIndex() {                                                    // 17989
    return this._node.index;                                                                                           // 17990
};                                                                                                                     // 17991
                                                                                                                       // 17992
/**                                                                                                                    // 17993
 * goToPreviousPage paginates your Scrollview instance backwards by one item.                                          // 17994
 *                                                                                                                     // 17995
 * @method goToPreviousPage                                                                                            // 17996
 * @return {ViewSequence} The previous node.                                                                           // 17997
 */                                                                                                                    // 17998
Scrollview.prototype.goToPreviousPage = function goToPreviousPage() {                                                  // 17999
    if (!this._node || this._onEdge === EdgeStates.TOP) return null;                                                   // 18000
                                                                                                                       // 18001
    // if moving back to the current node                                                                              // 18002
    if (this.getPosition() > 1 && this._springState === SpringStates.NONE) {                                           // 18003
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 18004
        return this._node;                                                                                             // 18005
    }                                                                                                                  // 18006
                                                                                                                       // 18007
    // if moving to the previous node                                                                                  // 18008
    var previousNode = this._node.getPrevious();                                                                       // 18009
    if (previousNode) {                                                                                                // 18010
        var previousNodeSize = _nodeSizeForDirection.call(this, previousNode);                                         // 18011
        this._scroller.sequenceFrom(previousNode);                                                                     // 18012
        this._node = previousNode;                                                                                     // 18013
        _shiftOrigin.call(this, previousNodeSize);                                                                     // 18014
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 18015
    }                                                                                                                  // 18016
    return previousNode;                                                                                               // 18017
};                                                                                                                     // 18018
                                                                                                                       // 18019
/**                                                                                                                    // 18020
 * goToNextPage paginates your Scrollview instance forwards by one item.                                               // 18021
 *                                                                                                                     // 18022
 * @method goToNextPage                                                                                                // 18023
 * @return {ViewSequence} The next node.                                                                               // 18024
 */                                                                                                                    // 18025
Scrollview.prototype.goToNextPage = function goToNextPage() {                                                          // 18026
    if (!this._node || this._onEdge === EdgeStates.BOTTOM) return null;                                                // 18027
    var nextNode = this._node.getNext();                                                                               // 18028
    if (nextNode) {                                                                                                    // 18029
        var currentNodeSize = _nodeSizeForDirection.call(this, this._node);                                            // 18030
        this._scroller.sequenceFrom(nextNode);                                                                         // 18031
        this._node = nextNode;                                                                                         // 18032
        _shiftOrigin.call(this, -currentNodeSize);                                                                     // 18033
        _setSpring.call(this, 0, SpringStates.PAGE);                                                                   // 18034
    }                                                                                                                  // 18035
    return nextNode;                                                                                                   // 18036
};                                                                                                                     // 18037
                                                                                                                       // 18038
/**                                                                                                                    // 18039
 * Paginates the Scrollview to an absolute page index.                                                                 // 18040
 *                                                                                                                     // 18041
 * @method goToPage                                                                                                    // 18042
 */                                                                                                                    // 18043
Scrollview.prototype.goToPage = function goToPage(index) {                                                             // 18044
    var currentIndex = this.getCurrentIndex();                                                                         // 18045
    var i;                                                                                                             // 18046
                                                                                                                       // 18047
    if (currentIndex > index) {                                                                                        // 18048
        for (i = 0; i < currentIndex - index; i++)                                                                     // 18049
            this.goToPreviousPage();                                                                                   // 18050
    }                                                                                                                  // 18051
                                                                                                                       // 18052
    if (currentIndex < index) {                                                                                        // 18053
        for (i = 0; i < index - currentIndex; i++)                                                                     // 18054
            this.goToNextPage();                                                                                       // 18055
    }                                                                                                                  // 18056
};                                                                                                                     // 18057
                                                                                                                       // 18058
Scrollview.prototype.outputFrom = function outputFrom() {                                                              // 18059
    return this._scroller.outputFrom.apply(this._scroller, arguments);                                                 // 18060
};                                                                                                                     // 18061
                                                                                                                       // 18062
/**                                                                                                                    // 18063
 * Returns the position associated with the Scrollview instance's current node                                         // 18064
 *  (generally the node currently at the top).                                                                         // 18065
 *                                                                                                                     // 18066
 * @deprecated                                                                                                         // 18067
 * @method getPosition                                                                                                 // 18068
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 18069
 * Scrollview instance's currently managed collection.                                                                 // 18070
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 18071
 * in pixels translated.                                                                                               // 18072
 */                                                                                                                    // 18073
Scrollview.prototype.getPosition = function getPosition() {                                                            // 18074
    return this._particle.getPosition1D();                                                                             // 18075
};                                                                                                                     // 18076
                                                                                                                       // 18077
/**                                                                                                                    // 18078
 * Returns the absolute position associated with the Scrollview instance                                               // 18079
 *                                                                                                                     // 18080
 * @method getAbsolutePosition                                                                                         // 18081
 * @return {number} The position of the Scrollview's current Node,                                                     // 18082
 * in pixels translated.                                                                                               // 18083
 */                                                                                                                    // 18084
Scrollview.prototype.getAbsolutePosition = function getAbsolutePosition() {                                            // 18085
    return this._scroller.getCumulativeSize(this.getCurrentIndex())[this.options.direction] + this.getPosition();      // 18086
};                                                                                                                     // 18087
                                                                                                                       // 18088
/**                                                                                                                    // 18089
 * Returns the offset associated with the Scrollview instance's current node                                           // 18090
 *  (generally the node currently at the top).                                                                         // 18091
 *                                                                                                                     // 18092
 * @method getOffset                                                                                                   // 18093
 * @param {number} [node] If specified, returns the position of the node at that index in the                          // 18094
 * Scrollview instance's currently managed collection.                                                                 // 18095
 * @return {number} The position of either the specified node, or the Scrollview's current Node,                       // 18096
 * in pixels translated.                                                                                               // 18097
 */                                                                                                                    // 18098
Scrollview.prototype.getOffset = Scrollview.prototype.getPosition;                                                     // 18099
                                                                                                                       // 18100
/**                                                                                                                    // 18101
 * Sets the position of the physics particle that controls Scrollview instance's "position"                            // 18102
 *                                                                                                                     // 18103
 * @deprecated                                                                                                         // 18104
 * @method setPosition                                                                                                 // 18105
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 18106
 */                                                                                                                    // 18107
Scrollview.prototype.setPosition = function setPosition(x) {                                                           // 18108
    this._particle.setPosition1D(x);                                                                                   // 18109
};                                                                                                                     // 18110
                                                                                                                       // 18111
/**                                                                                                                    // 18112
 * Sets the offset of the physics particle that controls Scrollview instance's "position"                              // 18113
 *                                                                                                                     // 18114
 * @method setPosition                                                                                                 // 18115
 * @param {number} x The amount of pixels you want your scrollview to progress by.                                     // 18116
 */                                                                                                                    // 18117
Scrollview.prototype.setOffset = Scrollview.prototype.setPosition;                                                     // 18118
                                                                                                                       // 18119
/**                                                                                                                    // 18120
 * Returns the Scrollview instance's velocity.                                                                         // 18121
 *                                                                                                                     // 18122
 * @method getVelocity                                                                                                 // 18123
 * @return {Number} The velocity.                                                                                      // 18124
 */                                                                                                                    // 18125
                                                                                                                       // 18126
Scrollview.prototype.getVelocity = function getVelocity() {                                                            // 18127
    return this._touchCount ? this._touchVelocity : this._particle.getVelocity1D();                                    // 18128
};                                                                                                                     // 18129
                                                                                                                       // 18130
/**                                                                                                                    // 18131
 * Sets the Scrollview instance's velocity. Until affected by input or another call of setVelocity                     // 18132
 *  the Scrollview instance will scroll at the passed-in velocity.                                                     // 18133
 *                                                                                                                     // 18134
 * @method setVelocity                                                                                                 // 18135
 * @param {number} v The magnitude of the velocity.                                                                    // 18136
 */                                                                                                                    // 18137
Scrollview.prototype.setVelocity = function setVelocity(v) {                                                           // 18138
    this._particle.setVelocity1D(v);                                                                                   // 18139
};                                                                                                                     // 18140
                                                                                                                       // 18141
/**                                                                                                                    // 18142
 * Patches the Scrollview instance's options with the passed-in ones.                                                  // 18143
 *                                                                                                                     // 18144
 * @method setOptions                                                                                                  // 18145
 * @param {Options} options An object of configurable options for the Scrollview instance.                             // 18146
 */                                                                                                                    // 18147
Scrollview.prototype.setOptions = function setOptions(options) {                                                       // 18148
    // preprocess custom options                                                                                       // 18149
    if (options.direction !== undefined) {                                                                             // 18150
        if (options.direction === 'x') options.direction = Utility.Direction.X;                                        // 18151
        else if (options.direction === 'y') options.direction = Utility.Direction.Y;                                   // 18152
    }                                                                                                                  // 18153
                                                                                                                       // 18154
    if (options.groupScroll !== this.options.groupScroll) {                                                            // 18155
        if (options.groupScroll)                                                                                       // 18156
            this.subscribe(this._scroller);                                                                            // 18157
        else                                                                                                           // 18158
            this.unsubscribe(this._scroller);                                                                          // 18159
    }                                                                                                                  // 18160
                                                                                                                       // 18161
    // patch custom options                                                                                            // 18162
    this._optionsManager.setOptions(options);                                                                          // 18163
                                                                                                                       // 18164
    // propagate options to sub-components                                                                             // 18165
                                                                                                                       // 18166
    // scroller sub-component                                                                                          // 18167
    this._scroller.setOptions(options);                                                                                // 18168
                                                                                                                       // 18169
    // physics sub-components                                                                                          // 18170
    if (options.drag !== undefined) this.drag.setOptions({strength: this.options.drag});                               // 18171
    if (options.friction !== undefined) this.friction.setOptions({strength: this.options.friction});                   // 18172
    if (options.edgePeriod !== undefined || options.edgeDamp !== undefined) {                                          // 18173
        this.spring.setOptions({                                                                                       // 18174
            period: this.options.edgePeriod,                                                                           // 18175
            dampingRatio: this.options.edgeDamp                                                                        // 18176
        });                                                                                                            // 18177
    }                                                                                                                  // 18178
                                                                                                                       // 18179
    // sync sub-component                                                                                              // 18180
    if (options.rails || options.direction !== undefined || options.syncScale !== undefined || options.preventDefault) {
        this.sync.setOptions({                                                                                         // 18182
            rails: this.options.rails,                                                                                 // 18183
            direction: (this.options.direction === Utility.Direction.X) ? GenericSync.DIRECTION_X : GenericSync.DIRECTION_Y,
            scale: this.options.syncScale,                                                                             // 18185
            preventDefault: this.options.preventDefault                                                                // 18186
        });                                                                                                            // 18187
    }                                                                                                                  // 18188
};                                                                                                                     // 18189
                                                                                                                       // 18190
/**                                                                                                                    // 18191
 * Sets the collection of renderables under the Scrollview instance's control, by                                      // 18192
 *  setting its current node to the passed in ViewSequence. If you                                                     // 18193
 *  pass in an array, the Scrollview instance will set its node as a ViewSequence instantiated with                    // 18194
 *  the passed-in array.                                                                                               // 18195
 *                                                                                                                     // 18196
 * @method sequenceFrom                                                                                                // 18197
 * @param {Array|ViewSequence} node Either an array of renderables or a Famous viewSequence.                           // 18198
 */                                                                                                                    // 18199
Scrollview.prototype.sequenceFrom = function sequenceFrom(node) {                                                      // 18200
    if (node instanceof Array) node = new ViewSequence({array: node, trackSize: true});                                // 18201
    this._node = node;                                                                                                 // 18202
    return this._scroller.sequenceFrom(node);                                                                          // 18203
};                                                                                                                     // 18204
                                                                                                                       // 18205
/**                                                                                                                    // 18206
 * Returns the width and the height of the Scrollview instance.                                                        // 18207
 *                                                                                                                     // 18208
 * @method getSize                                                                                                     // 18209
 * @return {Array} A two value array of the Scrollview instance's current width and height (in that order).            // 18210
 */                                                                                                                    // 18211
Scrollview.prototype.getSize = function getSize() {                                                                    // 18212
    return this._scroller.getSize.apply(this._scroller, arguments);                                                    // 18213
};                                                                                                                     // 18214
                                                                                                                       // 18215
/**                                                                                                                    // 18216
 * Generate a render spec from the contents of this component.                                                         // 18217
 *                                                                                                                     // 18218
 * @private                                                                                                            // 18219
 * @method render                                                                                                      // 18220
 * @return {number} Render spec for this component                                                                     // 18221
 */                                                                                                                    // 18222
Scrollview.prototype.render = function render() {                                                                      // 18223
    if (this.options.paginated && this._needsPaginationCheck) _handlePagination.call(this);                            // 18224
                                                                                                                       // 18225
    return this._scroller.render();                                                                                    // 18226
};                                                                                                                     // 18227
                                                                                                                       // 18228
module.exports = Scrollview;                                                                                           // 18229
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/ViewSequence":17,"../inputs/GenericSync":27,"../inputs/ScrollSync":32,"../inputs/TouchSync":34,"../physics/PhysicsEngine":49,"../physics/bodies/Particle":52,"../physics/forces/Drag":64,"../physics/forces/Spring":69,"../utilities/Utility":96,"../views/Scroller":109}],111:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18231
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18232
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18233
 *                                                                                                                     // 18234
 * Owner: felix@famo.us                                                                                                // 18235
 * @license MPL 2.0                                                                                                    // 18236
 * @copyright Famous Industries, Inc. 2014                                                                             // 18237
 */                                                                                                                    // 18238
                                                                                                                       // 18239
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 18240
var Entity = _dereq_('../core/Entity');                                                                                // 18241
var Transform = _dereq_('../core/Transform');                                                                          // 18242
var ViewSequence = _dereq_('../core/ViewSequence');                                                                    // 18243
var Utility = _dereq_('../utilities/Utility');                                                                         // 18244
                                                                                                                       // 18245
/**                                                                                                                    // 18246
 * SequentialLayout will lay out a collection of renderables sequentially in the specified direction.                  // 18247
 * @class SequentialLayout                                                                                             // 18248
 * @constructor                                                                                                        // 18249
 * @param {Options} [options] An object of configurable options.                                                       // 18250
 * @param {Number} [options.direction=Utility.Direction.Y] Using the direction helper found in the famous Utility      // 18251
 * module, this option will lay out the SequentialLayout instance's renderables either horizontally                    // 18252
 * (x) or vertically (y). Utility's direction is essentially either zero (X) or one (Y), so feel free                  // 18253
 * to just use integers as well.                                                                                       // 18254
 */                                                                                                                    // 18255
function SequentialLayout(options) {                                                                                   // 18256
    this._items = null;                                                                                                // 18257
    this._size = null;                                                                                                 // 18258
    this._outputFunction = SequentialLayout.DEFAULT_OUTPUT_FUNCTION;                                                   // 18259
                                                                                                                       // 18260
    this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || SequentialLayout.DEFAULT_OPTIONS);                // 18261
    this.optionsManager = new OptionsManager(this.options);                                                            // 18262
                                                                                                                       // 18263
    this.id = Entity.register(this);                                                                                   // 18264
    this.cachedSize = [undefined, undefined];                                                                          // 18265
                                                                                                                       // 18266
    if (options) this.setOptions(options);                                                                             // 18267
}                                                                                                                      // 18268
                                                                                                                       // 18269
SequentialLayout.DEFAULT_OPTIONS = {                                                                                   // 18270
    direction: Utility.Direction.Y,                                                                                    // 18271
    itemSpacing: 0                                                                                                     // 18272
};                                                                                                                     // 18273
                                                                                                                       // 18274
SequentialLayout.DEFAULT_OUTPUT_FUNCTION = function DEFAULT_OUTPUT_FUNCTION(input, offset, index) {                    // 18275
    var transform = (this.options.direction === Utility.Direction.X) ? Transform.translate(offset, 0) : Transform.translate(0, offset);
    return {                                                                                                           // 18277
        size: this.cachedSize,                                                                                         // 18278
        transform: transform,                                                                                          // 18279
        target: input.render()                                                                                         // 18280
    };                                                                                                                 // 18281
};                                                                                                                     // 18282
                                                                                                                       // 18283
/**                                                                                                                    // 18284
 * Returns the width and the height of the SequentialLayout instance.                                                  // 18285
 *                                                                                                                     // 18286
 * @method getSize                                                                                                     // 18287
 * @return {Array} A two value array of the SequentialLayout instance's current width and height (in that order).      // 18288
 */                                                                                                                    // 18289
SequentialLayout.prototype.getSize = function getSize() {                                                              // 18290
    if (!this._size) this.render(); // hack size in                                                                    // 18291
    return this._size;                                                                                                 // 18292
};                                                                                                                     // 18293
                                                                                                                       // 18294
/**                                                                                                                    // 18295
 * Sets the collection of renderables under the SequentialLayout instance's control.                                   // 18296
 *                                                                                                                     // 18297
 * @method sequenceFrom                                                                                                // 18298
 * @param {Array|ViewSequence} items Either an array of renderables or a Famous viewSequence.                          // 18299
 * @chainable                                                                                                          // 18300
 */                                                                                                                    // 18301
SequentialLayout.prototype.sequenceFrom = function sequenceFrom(items) {                                               // 18302
    if (items instanceof Array) items = new ViewSequence(items);                                                       // 18303
    this._items = items;                                                                                               // 18304
    return this;                                                                                                       // 18305
};                                                                                                                     // 18306
                                                                                                                       // 18307
/**                                                                                                                    // 18308
 * Patches the SequentialLayout instance's options with the passed-in ones.                                            // 18309
 *                                                                                                                     // 18310
 * @method setOptions                                                                                                  // 18311
 * @param {Options} options An object of configurable options for the SequentialLayout instance.                       // 18312
 * @chainable                                                                                                          // 18313
 */                                                                                                                    // 18314
SequentialLayout.prototype.setOptions = function setOptions(options) {                                                 // 18315
    this.optionsManager.setOptions.apply(this.optionsManager, arguments);                                              // 18316
    return this;                                                                                                       // 18317
};                                                                                                                     // 18318
                                                                                                                       // 18319
/**                                                                                                                    // 18320
 * setOutputFunction is used to apply a user-defined output transform on each processed renderable.                    // 18321
 *  For a good example, check out SequentialLayout's own DEFAULT_OUTPUT_FUNCTION in the code.                          // 18322
 *                                                                                                                     // 18323
 * @method setOutputFunction                                                                                           // 18324
 * @param {Function} outputFunction An output processer for each renderable in the SequentialLayout                    // 18325
 * instance.                                                                                                           // 18326
 * @chainable                                                                                                          // 18327
 */                                                                                                                    // 18328
SequentialLayout.prototype.setOutputFunction = function setOutputFunction(outputFunction) {                            // 18329
    this._outputFunction = outputFunction;                                                                             // 18330
    return this;                                                                                                       // 18331
};                                                                                                                     // 18332
                                                                                                                       // 18333
/**                                                                                                                    // 18334
 * Return the id of the component                                                                                      // 18335
 *                                                                                                                     // 18336
 * @private                                                                                                            // 18337
 * @method render                                                                                                      // 18338
 * @return {number} id of the SequentialLayout                                                                         // 18339
 */                                                                                                                    // 18340
SequentialLayout.prototype.render = function render() {                                                                // 18341
    return this.id;                                                                                                    // 18342
};                                                                                                                     // 18343
                                                                                                                       // 18344
/**                                                                                                                    // 18345
 * Generate a render spec from the contents of this component.                                                         // 18346
 *                                                                                                                     // 18347
 * @private                                                                                                            // 18348
 * @method commit                                                                                                      // 18349
 * @param {Object} parentSpec parent render spec                                                                       // 18350
 * @return {Object} Render spec for this component                                                                     // 18351
 */                                                                                                                    // 18352
SequentialLayout.prototype.commit = function commit(parentSpec) {                                                      // 18353
    var length             = 0;                                                                                        // 18354
    var secondaryDirection = this.options.direction ^ 1;                                                               // 18355
    var currentNode        = this._items;                                                                              // 18356
    var item               = null;                                                                                     // 18357
    var itemSize           = [];                                                                                       // 18358
    var output             = {};                                                                                       // 18359
    var result             = [];                                                                                       // 18360
    var i                  = 0;                                                                                        // 18361
                                                                                                                       // 18362
    this._size = [0, 0];                                                                                               // 18363
    this.cachedSize = parentSpec.size;                                                                                 // 18364
                                                                                                                       // 18365
    while (currentNode) {                                                                                              // 18366
        item = currentNode.get();                                                                                      // 18367
        if (!item) break;                                                                                              // 18368
                                                                                                                       // 18369
        if (item.getSize) itemSize = item.getSize();                                                                   // 18370
                                                                                                                       // 18371
        output = this._outputFunction.call(this, item, length, i++);                                                   // 18372
        result.push(output);                                                                                           // 18373
                                                                                                                       // 18374
        if (itemSize) {                                                                                                // 18375
            if (itemSize[this.options.direction]) length += itemSize[this.options.direction];                          // 18376
            if (itemSize[secondaryDirection] > this._size[secondaryDirection]) this._size[secondaryDirection] = itemSize[secondaryDirection];
            if (itemSize[secondaryDirection] === 0) this._size[secondaryDirection] = undefined;                        // 18378
        }                                                                                                              // 18379
                                                                                                                       // 18380
        currentNode = currentNode.getNext();                                                                           // 18381
                                                                                                                       // 18382
        if (this.options.itemSpacing && currentNode) length += this.options.itemSpacing;                               // 18383
    }                                                                                                                  // 18384
                                                                                                                       // 18385
    this._size[this.options.direction] = length;                                                                       // 18386
                                                                                                                       // 18387
    return {                                                                                                           // 18388
        transform: parentSpec.transform,                                                                               // 18389
        origin: parentSpec.origin,                                                                                     // 18390
        size: this.getSize(),                                                                                          // 18391
        target: result                                                                                                 // 18392
    };                                                                                                                 // 18393
};                                                                                                                     // 18394
                                                                                                                       // 18395
module.exports = SequentialLayout;                                                                                     // 18396
},{"../core/Entity":5,"../core/OptionsManager":10,"../core/Transform":15,"../core/ViewSequence":17,"../utilities/Utility":96}],112:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 18398
  ContextualView: _dereq_('./ContextualView'),                                                                         // 18399
  Deck: _dereq_('./Deck'),                                                                                             // 18400
  DrawerLayout: _dereq_('./DrawerLayout'),                                                                             // 18401
  EdgeSwapper: _dereq_('./EdgeSwapper'),                                                                               // 18402
  FlexibleLayout: _dereq_('./FlexibleLayout'),                                                                         // 18403
  Flipper: _dereq_('./Flipper'),                                                                                       // 18404
  GridLayout: _dereq_('./GridLayout'),                                                                                 // 18405
  HeaderFooterLayout: _dereq_('./HeaderFooterLayout'),                                                                 // 18406
  Lightbox: _dereq_('./Lightbox'),                                                                                     // 18407
  RenderController: _dereq_('./RenderController'),                                                                     // 18408
  ScrollContainer: _dereq_('./ScrollContainer'),                                                                       // 18409
  Scroller: _dereq_('./Scroller'),                                                                                     // 18410
  Scrollview: _dereq_('./Scrollview'),                                                                                 // 18411
  SequentialLayout: _dereq_('./SequentialLayout')                                                                      // 18412
};                                                                                                                     // 18413
                                                                                                                       // 18414
},{"./ContextualView":98,"./Deck":99,"./DrawerLayout":100,"./EdgeSwapper":101,"./FlexibleLayout":102,"./Flipper":103,"./GridLayout":104,"./HeaderFooterLayout":105,"./Lightbox":106,"./RenderController":107,"./ScrollContainer":108,"./Scroller":109,"./Scrollview":110,"./SequentialLayout":111}],113:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18416
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18417
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18418
 *                                                                                                                     // 18419
 * Owner: mark@famo.us                                                                                                 // 18420
 * @license MPL 2.0                                                                                                    // 18421
 * @copyright Famous Industries, Inc. 2014                                                                             // 18422
 */                                                                                                                    // 18423
                                                                                                                       // 18424
var Scene = _dereq_('../core/Scene');                                                                                  // 18425
var Surface = _dereq_('../core/Surface');                                                                              // 18426
var Transform = _dereq_('../core/Transform');                                                                          // 18427
var View = _dereq_('../core/View');                                                                                    // 18428
                                                                                                                       // 18429
/**                                                                                                                    // 18430
 * A view for displaying the title of the current page                                                                 // 18431
 *  as well as icons for navigating backwards and opening                                                              // 18432
 *  further options                                                                                                    // 18433
 *                                                                                                                     // 18434
 * @class NavigationBar                                                                                                // 18435
 * @extends View                                                                                                       // 18436
 * @constructor                                                                                                        // 18437
 *                                                                                                                     // 18438
 * @param {object} [options] overrides of default options                                                              // 18439
 * @param {Array.number} [options.size=(undefined,0.5)] Size of the navigation bar and it's componenets.               // 18440
 * @param {Array.string} [options.backClasses=(back)] CSS Classes attached to back of Navigation.                      // 18441
 * @param {String} [options.backContent=(&#x25c0;)] Content of the back button.                                        // 18442
 * @param {Array.string} [options.classes=(navigation)] CSS Classes attached to the surfaces.                          // 18443
 * @param {String} [options.content] Content to pass into title bar.                                                   // 18444
 * @param {Array.string} [options.classes=(more)] CSS Classes attached to the More surface.                            // 18445
 * @param {String} [options.moreContent=(&#x271a;)] Content of the more button.                                        // 18446
 */                                                                                                                    // 18447
function NavigationBar(options) {                                                                                      // 18448
    View.apply(this, arguments);                                                                                       // 18449
                                                                                                                       // 18450
    this.title = new Surface({                                                                                         // 18451
        classes: this.options.classes,                                                                                 // 18452
        content: this.options.content                                                                                  // 18453
    });                                                                                                                // 18454
                                                                                                                       // 18455
    this.back = new Surface({                                                                                          // 18456
        size: [this.options.size[1], this.options.size[1]],                                                            // 18457
        classes: this.options.classes,                                                                                 // 18458
        content: this.options.backContent                                                                              // 18459
    });                                                                                                                // 18460
    this.back.on('click', function() {                                                                                 // 18461
        this._eventOutput.emit('back', {});                                                                            // 18462
    }.bind(this));                                                                                                     // 18463
                                                                                                                       // 18464
    this.more = new Surface({                                                                                          // 18465
        size: [this.options.size[1], this.options.size[1]],                                                            // 18466
        classes: this.options.classes,                                                                                 // 18467
        content: this.options.moreContent                                                                              // 18468
    });                                                                                                                // 18469
    this.more.on('click', function() {                                                                                 // 18470
        this._eventOutput.emit('more', {});                                                                            // 18471
    }.bind(this));                                                                                                     // 18472
                                                                                                                       // 18473
    this.layout = new Scene({                                                                                          // 18474
        id: 'master',                                                                                                  // 18475
        size: this.options.size,                                                                                       // 18476
        target: [                                                                                                      // 18477
            {                                                                                                          // 18478
                transform: Transform.inFront,                                                                          // 18479
                origin: [0, 0.5],                                                                                      // 18480
                align: [0, 0.5],                                                                                       // 18481
                target: this.back                                                                                      // 18482
            },                                                                                                         // 18483
            {                                                                                                          // 18484
                origin: [0.5, 0.5],                                                                                    // 18485
                align: [0.5, 0.5],                                                                                     // 18486
                target: this.title                                                                                     // 18487
            },                                                                                                         // 18488
            {                                                                                                          // 18489
                transform: Transform.inFront,                                                                          // 18490
                origin: [1, 0.5],                                                                                      // 18491
                align: [1, 0.5],                                                                                       // 18492
                target: this.more                                                                                      // 18493
            }                                                                                                          // 18494
        ]                                                                                                              // 18495
    });                                                                                                                // 18496
                                                                                                                       // 18497
    this._add(this.layout);                                                                                            // 18498
                                                                                                                       // 18499
    this._optionsManager.on('change', function(event) {                                                                // 18500
        var key = event.id;                                                                                            // 18501
        var data = event.value;                                                                                        // 18502
        if (key === 'size') {                                                                                          // 18503
            this.layout.id.master.setSize(data);                                                                       // 18504
            this.title.setSize(data);                                                                                  // 18505
            this.back.setSize([data[1], data[1]]);                                                                     // 18506
            this.more.setSize([data[1], data[1]]);                                                                     // 18507
        }                                                                                                              // 18508
        else if (key === 'backClasses') {                                                                              // 18509
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18510
        }                                                                                                              // 18511
        else if (key === 'backContent') {                                                                              // 18512
            this.back.setContent(this.options.backContent);                                                            // 18513
        }                                                                                                              // 18514
        else if (key === 'classes') {                                                                                  // 18515
            this.title.setOptions({classes: this.options.classes});                                                    // 18516
            this.back.setOptions({classes: this.options.classes.concat(this.options.backClasses)});                    // 18517
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18518
        }                                                                                                              // 18519
        else if (key === 'content') {                                                                                  // 18520
            this.setContent(this.options.content);                                                                     // 18521
        }                                                                                                              // 18522
        else if (key === 'moreClasses') {                                                                              // 18523
            this.more.setOptions({classes: this.options.classes.concat(this.options.moreClasses)});                    // 18524
        }                                                                                                              // 18525
        else if (key === 'moreContent') {                                                                              // 18526
            this.more.setContent(this.options.content);                                                                // 18527
        }                                                                                                              // 18528
    }.bind(this));                                                                                                     // 18529
}                                                                                                                      // 18530
                                                                                                                       // 18531
NavigationBar.prototype = Object.create(View.prototype);                                                               // 18532
NavigationBar.prototype.constructor = NavigationBar;                                                                   // 18533
                                                                                                                       // 18534
NavigationBar.DEFAULT_OPTIONS = {                                                                                      // 18535
    size: [undefined, 50],                                                                                             // 18536
    backClasses: ['back'],                                                                                             // 18537
    backContent: '&#x25c0;',                                                                                           // 18538
    classes: ['navigation'],                                                                                           // 18539
    content: '',                                                                                                       // 18540
    moreClasses: ['more'],                                                                                             // 18541
    moreContent: '&#x271a;'                                                                                            // 18542
};                                                                                                                     // 18543
                                                                                                                       // 18544
/**                                                                                                                    // 18545
 * Set the title of the NavigationBar                                                                                  // 18546
 *                                                                                                                     // 18547
 * @method setContent                                                                                                  // 18548
 *                                                                                                                     // 18549
 * @param {object} content JSON object containing title information                                                    // 18550
 *                                                                                                                     // 18551
 * @return {undefined}                                                                                                 // 18552
 */                                                                                                                    // 18553
NavigationBar.prototype.setContent = function setContent(content) {                                                    // 18554
    return this.title.setContent(content);                                                                             // 18555
};                                                                                                                     // 18556
                                                                                                                       // 18557
module.exports = NavigationBar;                                                                                        // 18558
},{"../core/Scene":12,"../core/Surface":14,"../core/Transform":15,"../core/View":16}],114:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18560
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18561
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18562
 *                                                                                                                     // 18563
 * Owner: mark@famo.us                                                                                                 // 18564
 * @license MPL 2.0                                                                                                    // 18565
 * @copyright Famous Industries, Inc. 2014                                                                             // 18566
 */                                                                                                                    // 18567
                                                                                                                       // 18568
var Surface = _dereq_('../core/Surface');                                                                              // 18569
var CanvasSurface = _dereq_('../surfaces/CanvasSurface');                                                              // 18570
var Transform = _dereq_('../core/Transform');                                                                          // 18571
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 18572
var Utilities = _dereq_('../math/Utilities');                                                                          // 18573
var OptionsManager = _dereq_('../core/OptionsManager');                                                                // 18574
var MouseSync = _dereq_('../inputs/MouseSync');                                                                        // 18575
var TouchSync = _dereq_('../inputs/TouchSync');                                                                        // 18576
var GenericSync = _dereq_('../inputs/GenericSync');                                                                    // 18577
                                                                                                                       // 18578
GenericSync.register({                                                                                                 // 18579
    mouse : MouseSync,                                                                                                 // 18580
    touch : TouchSync                                                                                                  // 18581
});                                                                                                                    // 18582
                                                                                                                       // 18583
/** @constructor */                                                                                                    // 18584
function Slider(options) {                                                                                             // 18585
    this.options = Object.create(Slider.DEFAULT_OPTIONS);                                                              // 18586
    this.optionsManager = new OptionsManager(this.options);                                                            // 18587
    if (options) this.setOptions(options);                                                                             // 18588
                                                                                                                       // 18589
    this.indicator = new CanvasSurface({                                                                               // 18590
        size: this.options.indicatorSize,                                                                              // 18591
        classes : ['slider-back']                                                                                      // 18592
    });                                                                                                                // 18593
                                                                                                                       // 18594
    this.label = new Surface({                                                                                         // 18595
        size: this.options.labelSize,                                                                                  // 18596
        content: this.options.label,                                                                                   // 18597
        properties : {pointerEvents : 'none'},                                                                         // 18598
        classes: ['slider-label']                                                                                      // 18599
    });                                                                                                                // 18600
                                                                                                                       // 18601
    this.eventOutput = new EventHandler();                                                                             // 18602
    this.eventInput = new EventHandler();                                                                              // 18603
    EventHandler.setInputHandler(this, this.eventInput);                                                               // 18604
    EventHandler.setOutputHandler(this, this.eventOutput);                                                             // 18605
                                                                                                                       // 18606
    var scale = (this.options.range[1] - this.options.range[0]) / this.options.indicatorSize[0];                       // 18607
                                                                                                                       // 18608
    this.sync = new GenericSync(                                                                                       // 18609
        ['mouse', 'touch'],                                                                                            // 18610
        {                                                                                                              // 18611
            scale : scale,                                                                                             // 18612
            direction : GenericSync.DIRECTION_X                                                                        // 18613
        }                                                                                                              // 18614
    );                                                                                                                 // 18615
                                                                                                                       // 18616
    this.indicator.pipe(this.sync);                                                                                    // 18617
    this.sync.pipe(this);                                                                                              // 18618
                                                                                                                       // 18619
    this.eventInput.on('update', function(data) {                                                                      // 18620
        this.set(data.position);                                                                                       // 18621
    }.bind(this));                                                                                                     // 18622
                                                                                                                       // 18623
    this._drawPos = 0;                                                                                                 // 18624
    _updateLabel.call(this);                                                                                           // 18625
}                                                                                                                      // 18626
                                                                                                                       // 18627
Slider.DEFAULT_OPTIONS = {                                                                                             // 18628
    size: [200, 60],                                                                                                   // 18629
    indicatorSize: [200, 30],                                                                                          // 18630
    labelSize: [200, 30],                                                                                              // 18631
    range: [0, 1],                                                                                                     // 18632
    precision: 2,                                                                                                      // 18633
    value: 0,                                                                                                          // 18634
    label: '',                                                                                                         // 18635
    fillColor: 'rgba(170, 170, 170, 1)'                                                                                // 18636
};                                                                                                                     // 18637
                                                                                                                       // 18638
function _updateLabel() {                                                                                              // 18639
    this.label.setContent(this.options.label + '<span style="float: right">' + this.get().toFixed(this.options.precision) + '</span>');
}                                                                                                                      // 18641
                                                                                                                       // 18642
Slider.prototype.setOptions = function setOptions(options) {                                                           // 18643
    return this.optionsManager.setOptions(options);                                                                    // 18644
};                                                                                                                     // 18645
                                                                                                                       // 18646
Slider.prototype.get = function get() {                                                                                // 18647
    return this.options.value;                                                                                         // 18648
};                                                                                                                     // 18649
                                                                                                                       // 18650
Slider.prototype.set = function set(value) {                                                                           // 18651
    if (value === this.options.value) return;                                                                          // 18652
    this.options.value = Utilities.clamp(value, this.options.range);                                                   // 18653
    _updateLabel.call(this);                                                                                           // 18654
    this.eventOutput.emit('change', {value: value});                                                                   // 18655
};                                                                                                                     // 18656
                                                                                                                       // 18657
Slider.prototype.getSize = function getSize() {                                                                        // 18658
    return this.options.size;                                                                                          // 18659
};                                                                                                                     // 18660
                                                                                                                       // 18661
Slider.prototype.render = function render() {                                                                          // 18662
    var range = this.options.range;                                                                                    // 18663
    var fillSize = Math.floor(((this.get() - range[0]) / (range[1] - range[0])) * this.options.indicatorSize[0]);      // 18664
                                                                                                                       // 18665
    if (fillSize < this._drawPos) {                                                                                    // 18666
        this.indicator.getContext('2d').clearRect(fillSize, 0, this._drawPos - fillSize + 1, this.options.indicatorSize[1]);
    }                                                                                                                  // 18668
    else if (fillSize > this._drawPos) {                                                                               // 18669
        var ctx = this.indicator.getContext('2d');                                                                     // 18670
        ctx.fillStyle = this.options.fillColor;                                                                        // 18671
        ctx.fillRect(this._drawPos-1, 0, fillSize - this._drawPos+1, this.options.indicatorSize[1]);                   // 18672
    }                                                                                                                  // 18673
    this._drawPos = fillSize;                                                                                          // 18674
                                                                                                                       // 18675
    return {                                                                                                           // 18676
        size: this.options.size,                                                                                       // 18677
        target: [                                                                                                      // 18678
            {                                                                                                          // 18679
                origin: [0, 0],                                                                                        // 18680
                target: this.indicator.render()                                                                        // 18681
            },                                                                                                         // 18682
            {                                                                                                          // 18683
                transform: Transform.translate(0, 0, 1),                                                               // 18684
                origin: [0, 0],                                                                                        // 18685
                target: this.label.render()                                                                            // 18686
            }                                                                                                          // 18687
        ]                                                                                                              // 18688
    };                                                                                                                 // 18689
};                                                                                                                     // 18690
                                                                                                                       // 18691
module.exports = Slider;                                                                                               // 18692
},{"../core/EventHandler":7,"../core/OptionsManager":10,"../core/Surface":14,"../core/Transform":15,"../inputs/GenericSync":27,"../inputs/MouseSync":28,"../inputs/TouchSync":34,"../math/Utilities":41,"../surfaces/CanvasSurface":75}],115:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18694
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18695
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18696
 *                                                                                                                     // 18697
 * Owner: mark@famo.us                                                                                                 // 18698
 * @license MPL 2.0                                                                                                    // 18699
 * @copyright Famous Industries, Inc. 2014                                                                             // 18700
 */                                                                                                                    // 18701
                                                                                                                       // 18702
var Utility = _dereq_('../utilities/Utility');                                                                         // 18703
var View = _dereq_('../core/View');                                                                                    // 18704
var GridLayout = _dereq_('../views/GridLayout');                                                                       // 18705
var ToggleButton = _dereq_('./ToggleButton');                                                                          // 18706
                                                                                                                       // 18707
/**                                                                                                                    // 18708
 * A view for displaying various tabs that dispatch events                                                             // 18709
 *  based on the id of the button that was clicked                                                                     // 18710
 *                                                                                                                     // 18711
 * @class TabBar                                                                                                       // 18712
 * @extends View                                                                                                       // 18713
 * @constructor                                                                                                        // 18714
 *                                                                                                                     // 18715
 * @param {object} options overrides of default options                                                                // 18716
 */                                                                                                                    // 18717
function TabBar(options) {                                                                                             // 18718
    View.apply(this, arguments);                                                                                       // 18719
                                                                                                                       // 18720
    this.layout = new GridLayout();                                                                                    // 18721
    this.buttons = [];                                                                                                 // 18722
    this._buttonIds = {};                                                                                              // 18723
    this._buttonCallbacks = {};                                                                                        // 18724
                                                                                                                       // 18725
    this.layout.sequenceFrom(this.buttons);                                                                            // 18726
    this._add(this.layout);                                                                                            // 18727
                                                                                                                       // 18728
    this._optionsManager.on('change', _updateOptions.bind(this));                                                      // 18729
}                                                                                                                      // 18730
                                                                                                                       // 18731
TabBar.prototype = Object.create(View.prototype);                                                                      // 18732
TabBar.prototype.constructor = TabBar;                                                                                 // 18733
                                                                                                                       // 18734
TabBar.DEFAULT_OPTIONS = {                                                                                             // 18735
    sections: [],                                                                                                      // 18736
    widget: ToggleButton,                                                                                              // 18737
    size: [undefined, 50],                                                                                             // 18738
    direction: Utility.Direction.X,                                                                                    // 18739
    buttons: {                                                                                                         // 18740
        toggleMode: ToggleButton.ON                                                                                    // 18741
    }                                                                                                                  // 18742
};                                                                                                                     // 18743
                                                                                                                       // 18744
/**                                                                                                                    // 18745
 * Update the options for all components of the view                                                                   // 18746
 *                                                                                                                     // 18747
 * @method _updateOptions                                                                                              // 18748
 *                                                                                                                     // 18749
 * @param {object} data component options                                                                              // 18750
 */                                                                                                                    // 18751
function _updateOptions(data) {                                                                                        // 18752
    var id = data.id;                                                                                                  // 18753
    var value = data.value;                                                                                            // 18754
                                                                                                                       // 18755
    if (id === 'direction') {                                                                                          // 18756
        this.layout.setOptions({dimensions: _resolveGridDimensions.call(this.buttons.length, this.options.direction)});
    }                                                                                                                  // 18758
    else if (id === 'buttons') {                                                                                       // 18759
        for (var i in this.buttons) {                                                                                  // 18760
            this.buttons[i].setOptions(value);                                                                         // 18761
        }                                                                                                              // 18762
    }                                                                                                                  // 18763
    else if (id === 'sections') {                                                                                      // 18764
        for (var sectionId in this.options.sections) {                                                                 // 18765
            this.defineSection(sectionId, this.options.sections[sectionId]);                                           // 18766
        }                                                                                                              // 18767
    }                                                                                                                  // 18768
}                                                                                                                      // 18769
                                                                                                                       // 18770
/**                                                                                                                    // 18771
 * Return an array of the proper dimensions for the tabs                                                               // 18772
 *                                                                                                                     // 18773
 * @method _resolveGridDimensions                                                                                      // 18774
 *                                                                                                                     // 18775
 * @param {number} count number of buttons                                                                             // 18776
 * @param {number} direction direction of the layout                                                                   // 18777
 *                                                                                                                     // 18778
 * @return {array} the dimensions of the tab section                                                                   // 18779
 */                                                                                                                    // 18780
function _resolveGridDimensions(count, direction) {                                                                    // 18781
    if (direction === Utility.Direction.X) return [count, 1];                                                          // 18782
    else return [1, count];                                                                                            // 18783
}                                                                                                                      // 18784
                                                                                                                       // 18785
/**                                                                                                                    // 18786
 * Create a new button with the specified id.  If one already exists with                                              // 18787
 *  that id, unbind all listeners.                                                                                     // 18788
 *                                                                                                                     // 18789
 * @method defineSection                                                                                               // 18790
 *                                                                                                                     // 18791
 * @param {string} id name of the button                                                                               // 18792
 * @param {object} content data for the creation of a new ToggleButton                                                 // 18793
 */                                                                                                                    // 18794
TabBar.prototype.defineSection = function defineSection(id, content) {                                                 // 18795
    var button;                                                                                                        // 18796
    var i = this._buttonIds[id];                                                                                       // 18797
                                                                                                                       // 18798
    if (i === undefined) {                                                                                             // 18799
        i = this.buttons.length;                                                                                       // 18800
        this._buttonIds[id] = i;                                                                                       // 18801
        var widget = this.options.widget;                                                                              // 18802
        button = new widget();                                                                                         // 18803
        this.buttons[i] = button;                                                                                      // 18804
        this.layout.setOptions({dimensions: _resolveGridDimensions(this.buttons.length, this.options.direction)});     // 18805
    }                                                                                                                  // 18806
    else {                                                                                                             // 18807
        button = this.buttons[i];                                                                                      // 18808
        button.unbind('select', this._buttonCallbacks[id]);                                                            // 18809
    }                                                                                                                  // 18810
                                                                                                                       // 18811
    if (this.options.buttons) button.setOptions(this.options.buttons);                                                 // 18812
    button.setOptions(content);                                                                                        // 18813
                                                                                                                       // 18814
    this._buttonCallbacks[id] = this.select.bind(this, id);                                                            // 18815
    button.on('select', this._buttonCallbacks[id]);                                                                    // 18816
};                                                                                                                     // 18817
                                                                                                                       // 18818
/**                                                                                                                    // 18819
 * Select a particular button and dispatch the id of the selection                                                     // 18820
 *  to any listeners.  Deselect all others                                                                             // 18821
 *                                                                                                                     // 18822
 * @method select                                                                                                      // 18823
 *                                                                                                                     // 18824
 * @param {string} id button id                                                                                        // 18825
 */                                                                                                                    // 18826
TabBar.prototype.select = function select(id) {                                                                        // 18827
    var btn = this._buttonIds[id];                                                                                     // 18828
    // this prevents event loop                                                                                        // 18829
    if (this.buttons[btn] && this.buttons[btn].isSelected()) {                                                         // 18830
        this._eventOutput.emit('select', {id: id});                                                                    // 18831
    }                                                                                                                  // 18832
    else if (this.buttons[btn]) {                                                                                      // 18833
        this.buttons[btn].select();                                                                                    // 18834
    }                                                                                                                  // 18835
                                                                                                                       // 18836
    for (var i = 0; i < this.buttons.length; i++) {                                                                    // 18837
        if (i !== btn) this.buttons[i].deselect();                                                                     // 18838
    }                                                                                                                  // 18839
};                                                                                                                     // 18840
                                                                                                                       // 18841
module.exports = TabBar;                                                                                               // 18842
},{"../core/View":16,"../utilities/Utility":96,"../views/GridLayout":104,"./ToggleButton":116}],116:[function(_dereq_,module,exports){
/* This Source Code Form is subject to the terms of the Mozilla Public                                                 // 18844
 * License, v. 2.0. If a copy of the MPL was not distributed with this                                                 // 18845
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.                                                            // 18846
 *                                                                                                                     // 18847
 * Owner: mark@famo.us                                                                                                 // 18848
 * @license MPL 2.0                                                                                                    // 18849
 * @copyright Famous Industries, Inc. 2014                                                                             // 18850
 */                                                                                                                    // 18851
                                                                                                                       // 18852
var Surface = _dereq_('../core/Surface');                                                                              // 18853
var EventHandler = _dereq_('../core/EventHandler');                                                                    // 18854
var RenderController = _dereq_('../views/RenderController');                                                           // 18855
                                                                                                                       // 18856
/**                                                                                                                    // 18857
 * A view for transitioning between two surfaces based                                                                 // 18858
 *  on a 'on' and 'off' state                                                                                          // 18859
 *                                                                                                                     // 18860
 * @class TabBar                                                                                                       // 18861
 * @extends View                                                                                                       // 18862
 * @constructor                                                                                                        // 18863
 *                                                                                                                     // 18864
 * @param {object} options overrides of default options                                                                // 18865
 */                                                                                                                    // 18866
function ToggleButton(options) {                                                                                       // 18867
    this.options = {                                                                                                   // 18868
        content: ['', ''],                                                                                             // 18869
        offClasses: ['off'],                                                                                           // 18870
        onClasses: ['on'],                                                                                             // 18871
        size: undefined,                                                                                               // 18872
        outTransition: {curve: 'easeInOut', duration: 300},                                                            // 18873
        inTransition: {curve: 'easeInOut', duration: 300},                                                             // 18874
        toggleMode: ToggleButton.TOGGLE,                                                                               // 18875
        crossfade: true                                                                                                // 18876
    };                                                                                                                 // 18877
                                                                                                                       // 18878
    this._eventOutput = new EventHandler();                                                                            // 18879
    EventHandler.setOutputHandler(this, this._eventOutput);                                                            // 18880
                                                                                                                       // 18881
    this.offSurface = new Surface();                                                                                   // 18882
    this.offSurface.on('click', function() {                                                                           // 18883
        if (this.options.toggleMode !== ToggleButton.OFF) this.select();                                               // 18884
    }.bind(this));                                                                                                     // 18885
    this.offSurface.pipe(this._eventOutput);                                                                           // 18886
                                                                                                                       // 18887
    this.onSurface = new Surface();                                                                                    // 18888
    this.onSurface.on('click', function() {                                                                            // 18889
        if (this.options.toggleMode !== ToggleButton.ON) this.deselect();                                              // 18890
    }.bind(this));                                                                                                     // 18891
    this.onSurface.pipe(this._eventOutput);                                                                            // 18892
                                                                                                                       // 18893
    this.arbiter = new RenderController({                                                                              // 18894
        overlap : this.options.crossfade                                                                               // 18895
    });                                                                                                                // 18896
                                                                                                                       // 18897
    this.deselect();                                                                                                   // 18898
                                                                                                                       // 18899
    if (options) this.setOptions(options);                                                                             // 18900
}                                                                                                                      // 18901
                                                                                                                       // 18902
ToggleButton.OFF = 0;                                                                                                  // 18903
ToggleButton.ON = 1;                                                                                                   // 18904
ToggleButton.TOGGLE = 2;                                                                                               // 18905
                                                                                                                       // 18906
/**                                                                                                                    // 18907
 * Transition towards the 'on' state and dispatch an event to                                                          // 18908
 *  listeners to announce it was selected. Accepts an optional                                                         // 18909
 *  argument, `suppressEvent`, which, if truthy, prevents the                                                          // 18910
 *  event from being dispatched.                                                                                       // 18911
 *                                                                                                                     // 18912
 * @method select                                                                                                      // 18913
 * @param [suppressEvent] {Boolean} When truthy, prevents the                                                          // 18914
 *   widget from emitting the 'select' event.                                                                          // 18915
 */                                                                                                                    // 18916
ToggleButton.prototype.select = function select(suppressEvent) {                                                       // 18917
    this.selected = true;                                                                                              // 18918
    this.arbiter.show(this.onSurface, this.options.inTransition);                                                      // 18919
//        this.arbiter.setMode(ToggleButton.ON, this.options.inTransition);                                            // 18920
    if (!suppressEvent) {                                                                                              // 18921
        this._eventOutput.emit('select');                                                                              // 18922
    }                                                                                                                  // 18923
};                                                                                                                     // 18924
                                                                                                                       // 18925
/**                                                                                                                    // 18926
 * Transition towards the 'off' state and dispatch an event to                                                         // 18927
 *  listeners to announce it was deselected. Accepts an optional                                                       // 18928
 *  argument, `suppressEvent`, which, if truthy, prevents the                                                          // 18929
 *  event from being dispatched.                                                                                       // 18930
 *                                                                                                                     // 18931
 * @method deselect                                                                                                    // 18932
 * @param [suppressEvent] {Boolean} When truthy, prevents the                                                          // 18933
 *   widget from emitting the 'deselect' event.                                                                        // 18934
 */                                                                                                                    // 18935
ToggleButton.prototype.deselect = function deselect(suppressEvent) {                                                   // 18936
    this.selected = false;                                                                                             // 18937
    this.arbiter.show(this.offSurface, this.options.outTransition);                                                    // 18938
    if (!suppressEvent) {                                                                                              // 18939
        this._eventOutput.emit('deselect');                                                                            // 18940
    }                                                                                                                  // 18941
};                                                                                                                     // 18942
                                                                                                                       // 18943
/**                                                                                                                    // 18944
 * Return the state of the button                                                                                      // 18945
 *                                                                                                                     // 18946
 * @method isSelected                                                                                                  // 18947
 *                                                                                                                     // 18948
 * @return {boolean} selected state                                                                                    // 18949
 */                                                                                                                    // 18950
ToggleButton.prototype.isSelected = function isSelected() {                                                            // 18951
    return this.selected;                                                                                              // 18952
};                                                                                                                     // 18953
                                                                                                                       // 18954
/**                                                                                                                    // 18955
 * Override the current options                                                                                        // 18956
 *                                                                                                                     // 18957
 * @method setOptions                                                                                                  // 18958
 *                                                                                                                     // 18959
 * @param {object} options JSON                                                                                        // 18960
 */                                                                                                                    // 18961
ToggleButton.prototype.setOptions = function setOptions(options) {                                                     // 18962
    if (options.content !== undefined) {                                                                               // 18963
        if (!(options.content instanceof Array))                                                                       // 18964
            options.content = [options.content, options.content];                                                      // 18965
        this.options.content = options.content;                                                                        // 18966
        this.offSurface.setContent(this.options.content[0]);                                                           // 18967
        this.onSurface.setContent(this.options.content[1]);                                                            // 18968
    }                                                                                                                  // 18969
    if (options.offClasses) {                                                                                          // 18970
        this.options.offClasses = options.offClasses;                                                                  // 18971
        this.offSurface.setClasses(this.options.offClasses);                                                           // 18972
    }                                                                                                                  // 18973
    if (options.onClasses) {                                                                                           // 18974
        this.options.onClasses = options.onClasses;                                                                    // 18975
        this.onSurface.setClasses(this.options.onClasses);                                                             // 18976
    }                                                                                                                  // 18977
    if (options.size !== undefined) {                                                                                  // 18978
        this.options.size = options.size;                                                                              // 18979
        this.onSurface.setSize(this.options.size);                                                                     // 18980
        this.offSurface.setSize(this.options.size);                                                                    // 18981
    }                                                                                                                  // 18982
    if (options.toggleMode !== undefined) this.options.toggleMode = options.toggleMode;                                // 18983
    if (options.outTransition !== undefined) this.options.outTransition = options.outTransition;                       // 18984
    if (options.inTransition !== undefined) this.options.inTransition = options.inTransition;                          // 18985
    if (options.crossfade !== undefined) {                                                                             // 18986
        this.options.crossfade = options.crossfade;                                                                    // 18987
        this.arbiter.setOptions({overlap: this.options.crossfade});                                                    // 18988
    }                                                                                                                  // 18989
};                                                                                                                     // 18990
                                                                                                                       // 18991
/**                                                                                                                    // 18992
 * Return the size defined in the options object                                                                       // 18993
 *                                                                                                                     // 18994
 * @method getSize                                                                                                     // 18995
 *                                                                                                                     // 18996
 * @return {array} two element array [height, width]                                                                   // 18997
 */                                                                                                                    // 18998
ToggleButton.prototype.getSize = function getSize() {                                                                  // 18999
    return this.options.size;                                                                                          // 19000
};                                                                                                                     // 19001
                                                                                                                       // 19002
/**                                                                                                                    // 19003
 * Generate a render spec from the contents of this component.                                                         // 19004
 *                                                                                                                     // 19005
 * @private                                                                                                            // 19006
 * @method render                                                                                                      // 19007
 * @return {number} Render spec for this component                                                                     // 19008
 */                                                                                                                    // 19009
ToggleButton.prototype.render = function render() {                                                                    // 19010
    return this.arbiter.render();                                                                                      // 19011
};                                                                                                                     // 19012
                                                                                                                       // 19013
module.exports = ToggleButton;                                                                                         // 19014
},{"../core/EventHandler":7,"../core/Surface":14,"../views/RenderController":107}],117:[function(_dereq_,module,exports){
module.exports = {                                                                                                     // 19016
  NavigationBar: _dereq_('./NavigationBar'),                                                                           // 19017
  Slider: _dereq_('./Slider'),                                                                                         // 19018
  TabBar: _dereq_('./TabBar'),                                                                                         // 19019
  ToggleButton: _dereq_('./ToggleButton')                                                                              // 19020
};                                                                                                                     // 19021
                                                                                                                       // 19022
},{"./NavigationBar":113,"./Slider":114,"./TabBar":115,"./ToggleButton":116}]},{},[23])(23)                            // 19023
});                                                                                                                    // 19024
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/mjn:famous/src/export.js                                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
famous = window.famous;                                                                                                // 1
                                                                                                                       // 2
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['mjn:famous'] = {
  famous: famous
};

})();
